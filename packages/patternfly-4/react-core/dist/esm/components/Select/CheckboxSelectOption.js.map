{"version":3,"sources":["../../../../src/components/Select/CheckboxSelectOption.tsx"],"names":["React","styles","default","checkStyles","css","SelectConsumer","KeyTypes","CheckboxSelectOption","Component","createRef","event","key","Tab","preventDefault","ArrowUp","props","keyHandler","index","ArrowDown","Enter","ref","current","click","focus","componentDidMount","sendRef","componentDidUpdate","render","children","className","value","onClick","isDisabled","isChecked","onSelect","check","selectMenuItem","modifiers","disabled","onKeyDown","checkInput","checkLabel","Function","prototype"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,uDAAnB;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,qDAAvC;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,mBAAzC;AAuBA,OAAO,MAAMC,oBAAN,SAAmCP,KAAK,CAACQ,SAAzC,CAA8E;AAAA;AAAA;;AAAA,iCACrER,KAAK,CAACS,SAAN,EADqE;;AAAA,uCAqBtEC,KAAD,IAAgC;AAC1C,UAAIA,KAAK,CAACC,GAAN,KAAcL,QAAQ,CAACM,GAA3B,EAAgC;AAC9B;AACD;;AACDF,MAAAA,KAAK,CAACG,cAAN;;AACA,UAAIH,KAAK,CAACC,GAAN,KAAcL,QAAQ,CAACQ,OAA3B,EAAoC;AAClC,aAAKC,KAAL,CAAWC,UAAX,CAAsB,KAAKD,KAAL,CAAWE,KAAjC,EAAwC,IAAxC;AACD,OAFD,MAEO,IAAIP,KAAK,CAACC,GAAN,KAAcL,QAAQ,CAACY,SAA3B,EAAsC;AAC3C,aAAKH,KAAL,CAAWC,UAAX,CAAsB,KAAKD,KAAL,CAAWE,KAAjC,EAAwC,MAAxC;AACD,OAFM,MAEA,IAAIP,KAAK,CAACC,GAAN,KAAcL,QAAQ,CAACa,KAA3B,EAAkC;AACvC,aAAKC,GAAL,CAASC,OAAT,CAAiBC,KAAjB;AACA,aAAKF,GAAL,CAASC,OAAT,CAAiBE,KAAjB;AACD;AACF,KAlCkF;AAAA;;AAanFC,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,KAAL,CAAWU,OAAX,CAAmB,KAAKL,GAAL,CAASC,OAA5B,EAAqC,KAAKN,KAAL,CAAWE,KAAhD;AACD;;AAEDS,EAAAA,kBAAkB,GAAG;AACnB,SAAKX,KAAL,CAAWU,OAAX,CAAmB,KAAKL,GAAL,CAASC,OAA5B,EAAqC,KAAKN,KAAL,CAAWE,KAAhD;AACD;;AAiBDU,EAAAA,MAAM,GAAG;AACP,wBAA6G,KAAKZ,KAAlH;AAAA,UAAM;AAAEa,MAAAA,QAAF;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA,KAAvB;AAA8BC,MAAAA,OAA9B;AAAuCC,MAAAA,UAAvC;AAAmDC,MAAAA,SAAnD;AAA8DR,MAAAA,OAA9D;AAAuET,MAAAA,UAAvE;AAAmFC,MAAAA;AAAnF,KAAN;AAAA,UAAmGF,KAAnG;;AACA,WACE,oBAAC,cAAD,QACG,CAAC;AAAEmB,MAAAA;AAAF,KAAD,KACC,0CACMnB,KADN;AAEE,MAAA,SAAS,EAAEX,GAAG,CACZD,WAAW,CAACgC,KADA,EAEZlC,MAAM,CAACmC,cAFK,EAGZJ,UAAU,IAAI/B,MAAM,CAACoC,SAAP,CAAiBC,QAHnB,EAIZT,SAJY,CAFhB;AAQE,MAAA,SAAS,EAAE,KAAKU;AARlB,QAUE;AACE,MAAA,EAAE,EAAET,KADN;AAEE,MAAA,SAAS,EAAE1B,GAAG,CAACD,WAAW,CAACqC,UAAb,CAFhB;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,QAAQ,EAAG9B,KAAD,IAAW;AACnB,YAAI,CAACsB,UAAL,EAAiB;AACfD,UAAAA,OAAO,CAACrB,KAAD,CAAP;AACAwB,UAAAA,QAAQ,CAACxB,KAAD,EAAQoB,KAAR,CAAR;AACD;AACF,OATH;AAUE,MAAA,GAAG,EAAE,KAAKV,GAVZ;AAWE,MAAA,cAAc,EAAEa,SAAS,IAAI,KAX/B;AAYE,MAAA,QAAQ,EAAED;AAZZ,MAVF,EAwBE;AAAM,MAAA,SAAS,EAAE5B,GAAG,CAACD,WAAW,CAACsC,UAAb,EAAyBT,UAAU,IAAI/B,MAAM,CAACoC,SAAP,CAAiBC,QAAxD;AAApB,OAAwFV,QAAQ,IAAIE,KAApG,CAxBF,CAFJ,CADF;AAgCD;;AAtEkF;;gBAAxEvB,oB;AAnBXqB,EAAAA,Q;AAEAC,EAAAA,S;AAEAZ,EAAAA,K;AAEAa,EAAAA,K;AAEAE,EAAAA,U;AAEAC,EAAAA,S;AAEAR,EAAAA,O;AAEAT,EAAAA,U;AAEAe,EAAAA,O;;;gBAGWxB,oB,kBAEW;AACpBsB,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,KAAK,EAAE,EAFa;AAGpBb,EAAAA,KAAK,EAAE,CAHa;AAIpBe,EAAAA,UAAU,EAAE,KAJQ;AAKpBC,EAAAA,SAAS,EAAE,KALS;AAMpBF,EAAAA,OAAO,EAAEW,QAAQ,CAACC,SANE;AAOpBlB,EAAAA,OAAO,EAAEiB,QAAQ,CAACC,SAPE;AAQpB3B,EAAAA,UAAU,EAAE0B,QAAQ,CAACC;AARD,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport { default as checkStyles } from '@patternfly/react-styles/css/components/Check/check';\nimport { css } from '@patternfly/react-styles';\nimport { SelectConsumer, KeyTypes } from './selectConstants';\n\nexport interface CheckboxSelectOptionProps extends React.HTMLProps<HTMLLabelElement> {\n  /** Optional alternate display for the option */\n  children?: React.ReactNode;\n  /** Additional classes added to the Select Option */\n  className?: string;\n  /** Internal index of the option */\n  index?: number;\n  /** The value for the option */\n  value: string;\n  /** Flag indicating if the option is disabled */\n  isDisabled?: boolean;\n  /** Internal flag indicating if the option is checked */\n  isChecked?: boolean;\n  /** Internal callback for ref tracking */\n  sendRef?: (ref: React.ReactNode, index: number) => void;\n  /** Internal callback for keyboard navigation */\n  keyHandler?: (index: number, position: string) => void;\n  /** Optional callback for click event */\n  onClick?: (event: React.MouseEvent | React.ChangeEvent) => void;\n}\n\nexport class CheckboxSelectOption extends React.Component<CheckboxSelectOptionProps> {\n  private ref = React.createRef<any>();\n  static defaultProps = {\n    className: '',\n    value: '',\n    index: 0,\n    isDisabled: false,\n    isChecked: false,\n    onClick: Function.prototype,\n    sendRef: Function.prototype,\n    keyHandler: Function.prototype\n  };\n\n  componentDidMount() {\n    this.props.sendRef(this.ref.current, this.props.index);\n  }\n\n  componentDidUpdate() {\n    this.props.sendRef(this.ref.current, this.props.index);\n  }\n\n  onKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === KeyTypes.Tab) {\n      return;\n    }\n    event.preventDefault();\n    if (event.key === KeyTypes.ArrowUp) {\n      this.props.keyHandler(this.props.index, 'up');\n    } else if (event.key === KeyTypes.ArrowDown) {\n      this.props.keyHandler(this.props.index, 'down');\n    } else if (event.key === KeyTypes.Enter) {\n      this.ref.current.click();\n      this.ref.current.focus();\n    }\n  }\n\n  render() {\n    const { children, className, value, onClick, isDisabled, isChecked, sendRef, keyHandler, index, ...props } = this.props;\n    return (\n      <SelectConsumer>\n        {({ onSelect }) => (\n          <label\n            {...props}\n            className={css(\n              checkStyles.check,\n              styles.selectMenuItem,\n              isDisabled && styles.modifiers.disabled,\n              className\n            )}\n            onKeyDown={this.onKeyDown}\n          >\n            <input\n              id={value}\n              className={css(checkStyles.checkInput)}\n              type=\"checkbox\"\n              onChange={(event) => {\n                if (!isDisabled) {\n                  onClick(event);\n                  onSelect(event, value);\n                }\n              }}\n              ref={this.ref}\n              defaultChecked={isChecked || false}\n              disabled={isDisabled}\n            />\n            <span className={css(checkStyles.checkLabel, isDisabled && styles.modifiers.disabled)}>{children || value}</span>\n          </label>\n        )}\n      </SelectConsumer>\n    );\n  }\n}\n"],"file":"CheckboxSelectOption.js"}