{"version":3,"sources":["../../../../src/components/ChartBullet/ChartBulletQualitativeRange.tsx"],"names":["React","hoistNonReactStatics","VictoryBar","getQualitativeRangeData","ChartBar","ChartContainer","ChartBulletStyles","ChartTooltip","getBulletQualitativeRangeTheme","ChartBulletQualitativeRange","ariaDesc","ariaTitle","barWidth","qualitativeRangeWidth","constrainToVisibleArea","data","domain","horizontal","invert","labels","measureComponent","padding","standalone","themeColor","themeVariant","y","y0","theme","height","group","width","labelComponent","rest","computedData","tooltip","cloneElement","dx","result","dy","orientation","props","measure","map","dataPoint","index","key","style","fill","_color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  DataGetterPropType,\n  DomainPropType,\n  NumberOrCallback,\n  PaddingProps,\n  VictoryBar\n} from 'victory';\nimport { getQualitativeRangeData }  from './utils';\nimport { ChartBar } from '../ChartBar';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartBulletStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getBulletQualitativeRangeTheme } from '../ChartUtils';\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartBulletQualitativeRangeProps {\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The barWidth prop is used to specify the width of each bar. This prop may be given as\n   * a number of pixels or as a function that returns a number. When this prop is given as\n   * a function, it will be evaluated with the arguments datum, and active. When this value\n   * is not given, a default value will be calculated based on the overall dimensions of\n   * the chart, and the number of bars.\n   */\n  barWidth?: NumberOrCallback;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The data prop specifies the data to be plotted. Data should be in the form of an array\n   * of data points, or an array of arrays of data points for multiple datasets.\n   * Each data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\n   * but by default, an object with y properties is expected.\n   *\n   * @example data={[{ y: 50 }]}\n   */\n  data?: any[];\n  /**\n   * The domain prop describes the range of values your chart will cover. This prop can be\n   * given as a array of the minimum and maximum expected values for your bar chart,\n   * or as an object that specifies separate arrays for x and y.\n   * If this prop is not provided, a domain will be calculated from data, or other\n   * available information.\n   * @example {x: [0, 2], y: [0, 100]}\n   *\n   * Note: The x domain is expected to be `x: [0, 2]` in order to position all measures properly\n   */\n  domain?: DomainPropType;\n  /**\n   * The height props specifies the height the svg viewBox of the chart container.\n   * This value should be given as a number of pixels\n   */\n  height?: number;\n  /**\n   * The horizontal prop determines whether the bars will be laid vertically or\n   * horizontally. The bars will be vertical if this prop is false or unspecified,\n   * or horizontal if the prop is set to true.\n   */\n  horizontal?: boolean;\n  /**\n   * Invert the color scales used to represent primary segmented measures.\n   */\n  invert?: boolean;\n  /**\n   * The labelComponent prop takes in an entire label component which will be used\n   * to create a label for the bar. The new element created from the passed labelComponent\n   * will be supplied with the following properties: x, y, index, data, verticalAnchor,\n   * textAnchor, angle, style, text, and events. any of these props may be overridden\n   * by passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If labelComponent is omitted, a new ChartLabel\n   * will be created with props described above. This labelComponent prop should be used to\n   * provide a series label for ChartBar. If individual labels are required for each\n   * data point, they should be created by composing ChartBar with VictoryScatter\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * The labels prop defines labels that will appear above each bar in your chart.\n   * This prop should be given as an array of values or as a function of data.\n   * If given as an array, the number of elements in the array should be equal to\n   * the length of the data array. Labels may also be added directly to the data object\n   * like data={[{y: 1, label: \"first\"}]}.\n   * @example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title\n   */\n  labels?: string[] | ((data: any) => string);\n  /**\n   * The measureComponent prop takes an entire component which will be used to create the chart\n   */\n  measureComponent?: React.ReactElement<any>;\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartBar with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartBar as a solo component, implement the theme directly on\n   * ChartBar. If you are wrapping ChartBar in ChartChart or ChartGroup,\n   * please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The width props specifies the width of the svg viewBox of the chart container\n   * This value should be given as a number of pixels\n   */\n  width?: number;\n  /**\n   * The y prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  y?: DataGetterPropType;\n  /**\n   * Use y0 data accessor prop to determine how the component defines the baseline y0 data.\n   * This prop is useful for defining custom baselines for components like ChartBar.\n   * This prop may be given in a variety of formats.\n   * @example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]\n   */\n  y0?: DataGetterPropType;\n}\n\ninterface ChartBulletQualitativeRangeDataInterface {\n  data?: any[];\n  invert?: boolean;\n  theme?: ChartThemeDefinition;\n  themeColor?: string;\n  themeVariant?: string;\n  y?: DataGetterPropType;\n  y0?: DataGetterPropType;\n}\n\ninterface ConstrainToVisibleAreaInterface {\n  height?: number;\n  horizontal?: boolean;\n  padding?: any;\n  theme?: ChartThemeDefinition;\n  width?: number;\n}\n\nexport const ChartBulletQualitativeRange: React.FunctionComponent<ChartBulletQualitativeRangeProps> = ({\n  ariaDesc,\n  ariaTitle,\n  barWidth = ChartBulletStyles.qualitativeRangeWidth,\n  constrainToVisibleArea = false,\n  data,\n  domain,\n  horizontal = true,\n  invert = false,\n  labels,\n  measureComponent = <ChartBar />,\n  padding,\n  standalone = true,\n  themeColor,\n  themeVariant,\n  y,\n  y0,\n\n  // destructure last\n  theme = getBulletQualitativeRangeTheme(themeColor, themeVariant),\n  height = theme.group.height,\n  width = theme.group.width,\n  labelComponent = <ChartTooltip />,\n  ...rest\n}: ChartBulletQualitativeRangeProps) => {\n  const computedData = getQualitativeRangeData({\n    data,\n    invert,\n    theme,\n    y,\n    y0\n  });\n\n  // Label component\n  //\n  // The x and y calculations below ensure that the tooltip appears above the bar, instead of vertically centered.\n  // Having the tooltip vertically centered is visually confusing with comparative measures.\n  //\n  // Note: SVG height and width are provided by ChartBullet as a workaround to support constrainToVisibleArea\n  const tooltip = React.cloneElement(labelComponent, {\n    constrainToVisibleArea,\n    dx: () => {\n      if (horizontal) {\n        return 0;\n      }\n      const result = (typeof barWidth === 'function') ? barWidth(data, false) : barWidth;\n      return result / 2;\n    },\n    dy: () => {\n      if (!horizontal) {\n        return 0;\n      }\n      const result = (typeof barWidth === 'function') ? barWidth(data, false) : barWidth;\n      return -(result / 2);\n    },\n    orientation: 'top',\n    ...labelComponent.props\n  });\n\n  const measure = computedData.map((dataPoint: any, index) => {\n    return React.cloneElement(measureComponent, {\n      barWidth,\n      data: [{...dataPoint}],\n      domain,\n      height,\n      horizontal,\n      key: `pf-chart-bullet-qualitative-range-${index}`,\n      labelComponent: tooltip,\n      labels,\n      padding,\n      standalone: false,\n      style: {\n        data: {\n          fill: dataPoint._color\n        }\n      },\n      theme,\n      width,\n      ...measureComponent.props\n    });\n  });\n\n  return standalone ? (\n    <ChartContainer desc={ariaDesc} height={height} title={ariaTitle} width={width}>\n      {measure}\n    </ChartContainer>\n  ) : (\n    <React.Fragment>\n      {measure}\n    </React.Fragment>\n  );\n};\n\n// Note: VictoryBar.role must be hoisted\nhoistNonReactStatics(ChartBulletQualitativeRange, VictoryBar);\n"],"file":"ChartBulletQualitativeRange.js"}