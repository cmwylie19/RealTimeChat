{"version":3,"sources":["../../../../src/components/ChartUtils/chart-label.ts"],"names":["Helpers","TextSize","getPieOrigin","ChartCommonStyles","getBulletLabelX","chartWidth","dx","labelPosition","Math","round","getBulletLabelY","chartHeight","dy","label","margin","getPieLabelX","height","legendPosition","padding","width","origin","radius","getRadius","x","getPieLabelY","y","overpassFontCharacterConstant","getLabelTextSize","text","theme","style","legend","labels","approximateTextSize","characterConstant"],"mappings":"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","sourcesContent":["import { Helpers, TextSize } from 'victory-core';\nimport { getPieOrigin } from './chart-origin';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\n\ninterface ChartBulletLabelInterface {\n  dx?: number; // Horizontal shift from the x coordinate\n  dy?: number; // Vertical shift from the x coordinate\n  chartHeight?: number; // Width of chart within SVG\n  chartWidth?: number; // Width of chart (e.g., donut) within SVG\n  labelPosition?: 'bottom' | 'left' | 'top' | 'top-left'; // Position of label\n  legendPosition?: 'bottom' | 'bottom-left' | 'right'; // Position of legend\n  svgHeight?: number; // Overall height of SVG\n  svgWidth?: number; // Overall width of SVG\n  width?: number; // Chart width\n}\n\ninterface ChartPieLabelInterface {\n  dx?: number; // Horizontal shift from the x coordinate\n  dy?: number; // Horizontal shift from the y coordinate\n  height: number; // Chart height\n  labelPosition?: 'bottom' | 'center' | 'right' ; // Position of label\n  legendPosition?: 'bottom' | 'right'; // Position of legend\n  padding: any; // Chart padding\n  width: number; // Chart width\n}\n\ninterface ChartLabelTextSizeInterface {\n  text: any; // The text to size\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n}\n\n// Returns x coordinate for bullet labels\nexport const getBulletLabelX = ({\n  chartWidth,\n  dx = 0,\n  labelPosition\n}: ChartBulletLabelInterface) => {\n  return (labelPosition === 'top' && chartWidth) ? Math.round(chartWidth / 2) : dx;\n};\n\n// Returns y coordinate for bullet labels\nexport const getBulletLabelY = ({\n  chartHeight,\n  dy = 0,\n  labelPosition\n}: ChartBulletLabelInterface) => {\n  switch (labelPosition) {\n    case 'bottom':\n      return chartHeight + ChartCommonStyles.label.margin + dy;\n    case 'left':\n      return chartHeight ? Math.round(chartHeight / 2) + dy : dy;\n    default:\n      return dy;\n  }\n};\n\n// Returns x coordinate for pie labels\nexport const getPieLabelX = ({\n  dx = 0,\n  height,\n  labelPosition,\n  legendPosition,\n  padding,\n  width\n}: ChartPieLabelInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n\n  switch (labelPosition) {\n    case 'bottom':\n    case 'center':\n      return origin.x + dx;\n    case 'right':\n      switch (legendPosition) {\n        case 'bottom':\n          return origin.x + ChartCommonStyles.label.margin + dx + radius;\n        case 'right':\n          return origin.x + ChartCommonStyles.label.margin + dx;\n        default:\n          return dx;\n      }\n    default:\n      return dx;\n  }\n};\n\n// Returns x coordinate for pie labels\nexport const getPieLabelY = ({\n  dy = 0,\n  height,\n  labelPosition,\n  padding,\n  width\n}: ChartPieLabelInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n\n  switch (labelPosition) {\n    case 'center':\n    case 'right':\n      return origin.y + dy;\n    case 'bottom':\n      return origin.y + radius + ChartCommonStyles.label.margin * 2 + dy;\n    default:\n      return dy;\n  }\n};\n\n// Average pixels per glyph for overpass / Red Hat fonts\nexport const overpassFontCharacterConstant = 2.5875;\n\n// Returns an approximate size for the give text\nexport const getLabelTextSize = ({\n  text,\n  theme\n}: ChartLabelTextSizeInterface): {height: number, width: number} => {\n  const style = theme.legend.style.labels;\n  return TextSize.approximateTextSize(text,  {\n    ...style,\n    characterConstant: overpassFontCharacterConstant\n  });\n};\n"],"file":"chart-label.js"}