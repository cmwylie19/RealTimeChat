{"version":3,"sources":["../../../../src/components/DataList/DataListItem.tsx"],"names":["DataListItem","children","className","isExpanded","ariaLabelledBy","props","styles","dataListItem","modifiers","expanded","React","Children","map","child","isValidElement","cloneElement","rowid"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAmBO,IAAMA,YAAwD,GAAG,SAA3DA,YAA2D;AAAA,MACtEC,QADsE,QACtEA,QADsE;AAAA,4BAEtEC,SAFsE;AAAA,MAEtEA,SAFsE,+BAE1D,EAF0D;AAAA,6BAGtEC,UAHsE;AAAA,MAGtEA,UAHsE,gCAGzD,KAHyD;AAAA,MAInDC,cAJmD,QAItE,iBAJsE;AAAA,MAKnEC,KALmE;;AAAA,SAOtE;AACE,IAAA,SAAS,EAAE,sBAAIC,qBAAOC,YAAX,EAAyBJ,UAAU,IAAIG,qBAAOE,SAAP,CAAiBC,QAAxD,EAAkEP,SAAlE,CADb;AAEE,uBAAiBE;AAFnB,KAGMC,KAHN,GAKGK,KAAK,CAACC,QAAN,CAAeC,GAAf,CACCX,QADD,EAEC,UAACY,KAAD;AAAA,WACEH,KAAK,CAACI,cAAN,CAAqBD,KAArB,KACAH,KAAK,CAACK,YAAN,CAAmBF,KAAnB,EAAqD;AACnDG,MAAAA,KAAK,EAAEZ;AAD4C,KAArD,CAFF;AAAA,GAFD,CALH,CAPsE;AAAA,CAAjE;;;;AAdLD,EAAAA,U;AAEAF,EAAAA,Q;AAEAC,EAAAA,S;AAEA,mB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface DataListItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'children'> {\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Content rendered inside the DataList item */\n  children: React.ReactNode;\n  /** Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */\n  className?: string;\n  /** Adds accessible text to the DataList item */\n  'aria-labelledby': string;\n}\n\nexport interface DataListItemChildProps {\n  /** Id for the row */\n  rowid: string;\n}\n\nexport const DataListItem: React.FunctionComponent<DataListItemProps> = ({\n  children,\n  className = '',\n  isExpanded = false,\n  'aria-labelledby': ariaLabelledBy,\n  ...props\n}: DataListItemProps) => (\n  <li\n    className={css(styles.dataListItem, isExpanded && styles.modifiers.expanded, className)}\n    aria-labelledby={ariaLabelledBy}\n    {...props}\n  >\n    {React.Children.map(\n      children,\n      (child) =>\n        React.isValidElement(child) &&\n        React.cloneElement(child as React.ReactElement<any>, {\n          rowid: ariaLabelledBy\n        })\n    )}\n  </li>\n);\n"],"file":"DataListItem.js"}