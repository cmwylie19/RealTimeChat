{"version":3,"sources":["../../../../src/components/ChartLegend/ChartLegend.tsx"],"names":["React","hoistNonReactStatics","VictoryLegend","ChartContainer","ChartPoint","getTheme","ChartLegendOrientation","ChartLegendPosition","ChartLegendRowGutter","ChartLegend","containerComponent","dataComponent","responsive","themeColor","themeVariant","theme","rest","container","cloneElement","props","borderComponent","borderPadding","centerTitle","colorScale","data","name","symbol","fill","type","eventKey","events","externalEventMutations","groupComponent","gutter","left","right","height","itemsPerRow","labelComponent","orientation","padding","rowGutter","sharedEvents","standalone","style","symbolSpacer","getBaseProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SAQEC,aARF,QAWO,SAXP;AAYA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,QAAT,QAAyB,eAAzB;AAEA,WAAYC,sBAAZ;;WAAYA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;GAAAA,sB,KAAAA,sB;;AAKZ,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAMZ,WAAYC,oBAAZ;AAKA;;;;WALYA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;GAAAA,oB,KAAAA,oB;;AA+PZ,OAAO,MAAMC,WAAsD,GAAG,UAU9C;AAAA,MAV+C;AACrEC,IAAAA,kBAAkB,GAAG,oBAAC,cAAD,OADgD;AAErEC,IAAAA,aAAa,GAAG,oBAAC,UAAD,OAFqD;AAGrEC,IAAAA,UAAU,GAAG,IAHwD;AAIrEC,IAAAA,UAJqE;AAKrEC,IAAAA,YALqE;AAOrE;AACAC,IAAAA,KAAK,GAAGV,QAAQ,CAACQ,UAAD,EAAaC,YAAb;AARqD,GAU/C;AAAA,MADnBE,IACmB;;AACtB;AACA,QAAMC,SAAS,GAAGjB,KAAK,CAACkB,YAAN,CAAmBR,kBAAnB;AAChBE,IAAAA,UADgB;AAEhBG,IAAAA;AAFgB,KAGbL,kBAAkB,CAACS,KAHN,EAAlB;AAKA,SAAO,oBAAC,aAAD;AAAe,IAAA,kBAAkB,EAAEF,SAAnC;AAA8C,IAAA,aAAa,EAAEN,aAA7D;AAA4E,IAAA,KAAK,EAAEI;AAAnF,KAA8FC,IAA9F,EAAP;AACD,CAlBM,C,CAoBP;;;AA9PEI,EAAAA,e;AAQAC,EAAAA,a;AAIAC,EAAAA,W;AAWAC,EAAAA,U;AAeAb,EAAAA,kB;AAMAc,EAAAA,I;AACEC,IAAAA,I;AACAC,IAAAA,M;AACEC,MAAAA,I;AACAC,MAAAA,I;;;AAcJjB,EAAAA,a;AAKAkB,EAAAA,Q;AAIAC,EAAAA,M;AAIAC,EAAAA,sB;AAMAC,EAAAA,c;AAOAC,EAAAA,M;AAAmBC,IAAAA,I;AAAcC,IAAAA,K;;AASjCC,EAAAA,M;AAOAC,EAAAA,W;AAUAC,EAAAA,c;AAUAC,EAAAA,W,aAAc,Y,EAAe,U;AAO7BC,EAAAA,O;AASA5B,EAAAA,U;AAOA6B,EAAAA,S;AAIAC,EAAAA,Y;AAMAC,EAAAA,U;AAOAC,EAAAA,K;AAKAC,EAAAA,Y;AAQA9B,EAAAA,K;AAQAF,EAAAA,U;;AAsEFZ,oBAAoB,CAACQ,WAAD,EAAcP,aAAd,EAA6B;AAAE4C,EAAAA,YAAY,EAAE;AAAhB,CAA7B,CAApB","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  BlockProps,\n  ColorScalePropType,\n  EventPropTypeInterface,\n  Omit,\n  OrientationTypes,\n  PaddingProps,\n  StringOrNumberOrCallback,\n  VictoryLegend,\n  VictoryLegendProps,\n  VictoryStyleInterface,\n} from 'victory';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartPoint } from '../ChartPoint';\nimport { ChartThemeDefinition } from '../ChartTheme';\nimport { getTheme } from '../ChartUtils';\n\nexport enum ChartLegendOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical'\n}\n\nexport enum ChartLegendPosition {\n  bottom = 'bottom',\n  bottomLeft = 'bottom-left',\n  right = 'right'\n}\n\nexport enum ChartLegendRowGutter {\n  bottom = 'bottom',\n  top = 'top'\n}\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartLegendProps extends VictoryLegendProps {\n  /**\n   * The borderComponent prop takes a component instance which will be responsible\n   * for rendering a border around the legend. The new element created from the passed\n   * borderComponent will be provided with the following properties calculated by\n   * ChartLegend: x, y, width, height, and style. Any of these props may be\n   * overridden by passing in props to the supplied component, or modified or ignored\n   * within the custom component itself. If a borderComponent\n   * is not provided, ChartLegend will use its default Border component.\n   * Please note that the default width and height calculated\n   * for the border component is based on approximated\n   * text measurements, and may need to be adjusted.\n   */\n  borderComponent?: React.ReactElement<any>;\n  /**\n   * The borderPadding specifies the amount of padding that should\n   * be added between the legend items and the border. This prop may be given as\n   * a number, or asanobject with values specified for top, bottom, left, and right.\n   * Please note that the default width and height calculated for the border\n   * component is based on approximated text measurements, so padding may need to be adjusted.\n   */\n  borderPadding?: PaddingProps;\n  /**\n   * The centerTitle boolean prop specifies whether a legend title should be centered.\n   */\n  centerTitle?: boolean;\n  /**\n   * The colorScale prop defines a color scale to be applied to each data\n   * symbol in ChartLegend. This prop should be given as an array of CSS\n   * colors, or as a string corresponding to one of the built in color\n   * scales: \"grayscale\", \"qualitative\", \"heatmap\", \"warm\", \"cool\", \"red\",\n   * \"green\", \"blue\". ChartLegend will assign a color to each symbol by\n   * index, unless they are explicitly specified in the data object.\n   * Colors will repeat when there are more symbols than colors in the\n   * provided colorScale.\n   */\n  colorScale?: ColorScalePropType;\n  /**\n   * The containerComponent prop takes an entire component which will be used to\n   * create a container element for standalone charts.\n   * The new element created from the passed containerComponent wil be provided with\n   * these props from ChartLegend: height, width, children\n   * (the chart itself) and style. Props that are not provided by the\n   * child chart component include title and desc, both of which\n   * are intended to add accessibility to Victory components. The more descriptive these props\n   * are, the more accessible your data will be for people using screen readers.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a dataComponent is\n   * not provided, ChartLegend will use the default ChartContainer component.\n   * @example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />\n   */\n  containerComponent?: React.ReactElement<any>;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   */\n  data?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The dataComponent prop takes a component instance which will be\n   * responsible for rendering a data element used to associate a symbol\n   * or color with each data series. The new element created from the\n   * passed dataComponent will be provided with the following properties\n   * calculated by ChartLegend: x, y, size, style, and symbol. Any of\n   * these props may be overridden by passing in props to the supplied\n   * component, or modified or ignored within the custom component itself.\n   * If a dataComponent is not provided, ChartLegend will use its\n   * default Point component.\n   */\n  dataComponent?: React.ReactElement<any>;\n  /**\n   * ChartLegend uses the standard eventKey prop to specify how event targets\n   * are addressed. This prop is not commonly used.\n   */\n  eventKey?: StringOrNumberOrCallback | string[];\n  /**\n   * ChartLegend uses the standard events prop.\n   */\n  events?: EventPropTypeInterface<'data' | 'labels' | 'parent', StringOrNumberOrCallback>[];\n  /**\n   * ChartLegend uses the standard externalEventMutations prop.\n   */\n  externalEventMutations?: any[];\n  /**\n   * The groupComponent prop takes an entire component which will be used to\n   * create group elements for use within container elements. This prop defaults\n   * to a <g> tag on web, and a react-native-svg <G> tag on mobile\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * The gutter prop defines the number of pixels between legend rows or\n   * columns, depending on orientation. When orientation is horizontal,\n   * gutters are between columns. When orientation is vertical, gutters\n   * are the space between rows.\n   */\n  gutter?: number | {left: number, right: number};\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   */\n  height?: number;\n  /**\n   * The itemsPerRow prop determines how many items to render in each row\n   * of a horizontal legend, or in each column of a vertical legend. This\n   * prop should be given as an integer. When this prop is not given,\n   * legend items will be rendered in a single row or column.\n   */\n  itemsPerRow?: number;\n  /**\n   * The labelComponent prop takes a component instance which will be used\n   * to render each legend label. The new element created from the passed\n   * labelComponent will be supplied with the following properties: x, y,\n   * style, and text. Any of these props may be overridden by passing in\n   * props to the supplied component, or modified or ignored within the\n   * custom component itself. If labelComponent is omitted, a new\n   * ChartLabel will be created with the props described above.\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * The responsive prop specifies whether the rendered container should be a responsive container with a viewBox\n   * attribute, or a static container with absolute width and height.\n   *\n   * Useful when legend is located inside a chart -- default is false.\n   *\n   * Note: Not compatible with containerComponent prop\n   */\n  responsive?: boolean;\n  /**\n   * The rowGutter prop defines the number of pixels between legend rows.\n   * This prop may be given as a number, or as an object with values\n   * specified for “top” and “bottom” gutters. To set spacing between columns,\n   * use the gutter prop.\n   */\n  rowGutter?: number | Omit<BlockProps, 'left' | 'right'>;\n  /**\n   * The sharedEvents prop is used internally to coordinate events between components. It should not be set manually.\n   */\n  sharedEvents?: any;\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartLegend with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The style prop specifies styles for your pie. ChartLegend relies on Radium,\n   * so valid Radium style objects should work for this prop. Height, width, and\n   * padding should be specified via the height, width, and padding props.\n   * @example {data: {stroke: \"black\"}, label: {fontSize: 10}}\n   */\n  style?: VictoryStyleInterface;\n  /**\n   * The symbolSpacer prop defines the number of pixels between data\n   * components and label components.\n   */\n  symbolSpacer?: number;\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartLegend as a solo component, implement the theme directly on\n   * ChartLegend. If you are wrapping ChartLegend in ChartChart or\n   * ChartGroup, please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The title prop specifies a title to render with the legend.\n   * This prop should be given as a string, or an array of strings for multi-line titles.\n   */\n  title?: string | string[];\n  /**\n   * The titleComponent prop takes a component instance which will be used to render\n   * a title for the component. The new element created from the passed\n   * labelComponent will be supplied with the following properties: x, y, index, data,\n   * datum, verticalAnchor, textAnchor, style, text, and events. Any of these props\n   * may be overridden by passing in props to the supplied component, or modified\n   * or ignored within the custom component itself. If labelComponent is omitted,\n   * a new ChartLabel will be created with the props described above.\n   */\n  titleComponent?: React.ReactElement<any>;\n  /**\n   * The titleOrientation prop specifies where the a title should be rendered\n   * in relation to the rest of the legend. Possible values\n   * for this prop are “top”, “bottom”, “left”, and “right”.\n   */\n  titleOrientation?: OrientationTypes;\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   */\n  width?: number;\n  /**\n   * The x and y props define the base position of the legend element.\n   */\n  x?: number;\n  /**\n   * The x and y props define the base position of the legend element.\n   */\n  y?: number;\n}\n\nexport const ChartLegend: React.FunctionComponent<ChartLegendProps> = ({\n  containerComponent = <ChartContainer />,\n  dataComponent = <ChartPoint />,\n  responsive = true,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  ...rest\n}: ChartLegendProps) => {\n  // Clone so users can override container props\n  const container = React.cloneElement(containerComponent, {\n    responsive,\n    theme,\n    ...containerComponent.props\n  });\n  return <VictoryLegend containerComponent={container} dataComponent={dataComponent} theme={theme} {...rest} />;\n};\n\n// Note: VictoryLegend.role must be hoisted, but getBaseProps causes error with ChartVoronoiContainer\nhoistNonReactStatics(ChartLegend, VictoryLegend, { getBaseProps: true});\n"],"file":"ChartLegend.js"}