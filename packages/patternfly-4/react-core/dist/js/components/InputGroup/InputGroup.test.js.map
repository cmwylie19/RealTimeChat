{"version":3,"sources":["../../../../src/components/InputGroup/InputGroup.test.tsx"],"names":["test","view","expect","find","toHaveLength","spanProps","props","className","toEqual","stringContaining","id","toBe","text","divProps","TextInput"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,IAAI,CAAC,gBAAD,EAAmB,YAAM;AAC3B,MAAMC,IAAI,GAAG,qBACX,gCAAC,8BAAD;AAAgB,IAAA,SAAS,EAAC,eAA1B;AAA0C,IAAA,EAAE,EAAC;AAA7C,SADW,CAAb;AAKAC,EAAAA,MAAM,CAACD,IAAI,CAACE,IAAL,CAAU,MAAV,CAAD,CAAN,CAA0BC,YAA1B,CAAuC,CAAvC;AACA,MAAMC,SAAS,GAAGJ,IAAI,CAACE,IAAL,CAAU,MAAV,EAAkBG,KAAlB,EAAlB;AACAJ,EAAAA,MAAM,CAACG,SAAS,CAACE,SAAX,CAAN,CAA4BC,OAA5B,CAAoCN,MAAM,CAACO,gBAAP,CAAwB,eAAxB,CAApC;AACAP,EAAAA,MAAM,CAACG,SAAS,CAACK,EAAX,CAAN,CAAqBC,IAArB,CAA0B,eAA1B;AACAT,EAAAA,MAAM,CAACD,IAAI,CAACW,IAAL,EAAD,CAAN,CAAoBD,IAApB,CAAyB,GAAzB;AACD,CAXG,CAAJ;AAaAX,IAAI,CAAC,YAAD,EAAe,YAAM;AACvB,MAAMC,IAAI,GAAG,qBACX,gCAAC,sBAAD;AAAY,IAAA,SAAS,EAAC,iBAAtB;AAAwC,IAAA,EAAE,EAAC;AAA3C,KACE,gCAAC,oBAAD;AAAW,IAAA,KAAK,EAAC,cAAjB;AAAgC,kBAAW;AAA3C,IADF,CADW,CAAb;AAMAC,EAAAA,MAAM,CAACD,IAAI,CAACE,IAAL,CAAU,KAAV,CAAD,CAAN,CAAyBC,YAAzB,CAAsC,CAAtC;AACA,MAAMS,QAAQ,GAAGZ,IAAI,CAACE,IAAL,CAAU,KAAV,EAAiBG,KAAjB,EAAjB;AACAJ,EAAAA,MAAM,CAACW,QAAQ,CAACN,SAAV,CAAN,CAA2BC,OAA3B,CAAmCN,MAAM,CAACO,gBAAP,CAAwB,iBAAxB,CAAnC;AACAP,EAAAA,MAAM,CAACW,QAAQ,CAACH,EAAV,CAAN,CAAoBC,IAApB,CAAyB,QAAzB;AACD,CAXG,CAAJ;AAaAX,IAAI,CAAC,6EAAD,EAAgF,YAAM;AACxF;AACA;AACA,MAAMC,IAAI,GAAG,qBACX,gCAAC,sBAAD,QACE,gCAAC,oBAAD;AAAW,IAAA,KAAK,EAAC,WAAjB;AAA6B,kBAAW;AAAxC,IADF,EAEE,gCAAC,cAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,EAAE,EAAC;AAA7B,aAFF,CADW,CAAb;AAQAC,EAAAA,MAAM,CAACD,IAAI,CAACE,IAAL,CAAUW,oBAAV,EAAqBR,KAArB,GAA6B,kBAA7B,CAAD,CAAN,CAAyDK,IAAzD,CAA8D,WAA9D;AACD,CAZG,CAAJ","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { InputGroup } from './InputGroup';\nimport { InputGroupText } from './InputGroupText';\nimport { Button } from '../Button';\nimport { TextInput } from '../TextInput';\n\ntest('InputGroupText', () => {\n  const view = shallow(\n    <InputGroupText className=\"inpt-grp-text\" id=\"email-npt-grp\">\n      @\n    </InputGroupText>\n  );\n  expect(view.find('span')).toHaveLength(1);\n  const spanProps = view.find('span').props();\n  expect(spanProps.className).toEqual(expect.stringContaining('inpt-grp-text'));\n  expect(spanProps.id).toBe('email-npt-grp');\n  expect(view.text()).toBe('@');\n});\n\ntest('InputGroup', () => {\n  const view = shallow(\n    <InputGroup className=\"text-verify-cls\" id=\"text-1\">\n      <TextInput value=\"this is text\" aria-label=\"data text\" />\n    </InputGroup>\n  );\n\n  expect(view.find('div')).toHaveLength(1);\n  const divProps = view.find('div').props();\n  expect(divProps.className).toEqual(expect.stringContaining('text-verify-cls'));\n  expect(divProps.id).toBe('text-1');\n});\n\ntest('add aria-describedby to form-control if one of the non form-controls has id', () => {\n  // In this test, TextInput is a form-control component and Button is not.\n  // If Button has an id props, this should be used in aria-describedby.\n  const view = shallow(\n    <InputGroup>\n      <TextInput value=\"some data\" aria-label=\"some text\" />\n      <Button variant=\"primary\" id=\"button-id\">\n        hello\n      </Button>\n    </InputGroup>\n  );\n  expect(view.find(TextInput).props()['aria-describedby']).toBe('button-id');\n});\n"],"file":"InputGroup.test.js"}