{"version":3,"sources":["../../../../src/components/Select/SelectMenu.tsx"],"names":["FocusTrap","require","SelectMenu","props","children","isGrouped","index","React","Children","map","group","cloneElement","titleId","label","replace","option","cloneOption","child","selected","sendRef","keyHandler","isSelected","constructor","Array","isArray","includes","value","id","toString","checked","ariaLabel","ariaLabelledBy","formStyles","formFieldset","isChecked","className","isExpanded","openedOnEnter","maxHeight","variant","SelectVariant","checkbox","styles","selectMenu","style","overflow","extendChildren","count","clickOutsideDeactivates","form","formGroup","extendCheckboxChildren","Component","Function","prototype"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport { default as formStyles } from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { SelectOptionObject } from './SelectOption';\nimport { SelectConsumer, SelectVariant } from './selectConstants';\nimport { Omit } from '../../helpers/typeUtils';\n\n// tslint:disable-next-line\nconst FocusTrap: any = require('focus-trap-react');\n\nexport interface SelectMenuProps extends Omit<React.HTMLProps<HTMLElement>, 'checked' | 'selected' | 'ref'> {\n  /** Content rendered inside the SelectMenu */\n  children: React.ReactElement[];\n  /** Additional classes added to the SelectMenu control */\n  className?: string;\n  /** Flag indicating the Select is expanded */\n  isExpanded: boolean;\n  /** Flag indicating the Select options are grouped */\n  isGrouped?: boolean;\n  /** Currently selected option (for single, typeahead variants) */\n  selected?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Currently checked options (for checkbox variant) */\n  checked?: (string | SelectOptionObject) [];\n  /** Internal flag for specifiying how the menu was opened */\n  openedOnEnter?: boolean;\n  /** Flag to specify the  maximum height of the menu, as a string percentage or number of pixels */\n  maxHeight?: string | number;\n  /** Internal callback for ref tracking */\n  sendRef?: (ref: React.ReactNode, index: number) => void;\n  /** Internal callback for keyboard navigation */\n  keyHandler?: (index: number, position: string) => void;\n}\n\nexport class SelectMenu extends React.Component<SelectMenuProps> {\n  static defaultProps = {\n    className: '',\n    isExpanded: false,\n    isGrouped: false,\n    openedOnEnter: false,\n    selected: '',\n    maxHeight: '',\n    sendRef: Function.prototype,\n    keyHandler: Function.prototype\n  };\n\n  extendChildren() {\n    const { children, isGrouped } = this.props;\n    if (isGrouped) {\n      let index = 0;\n      return React.Children.map(children, (group: React.ReactElement) =>\n        React.cloneElement(group, {\n          titleId: group.props.label.replace(/\\W/g, '-'),\n          children: group.props.children.map((option: React.ReactElement) => this.cloneOption(option, index++))\n        })\n      );\n    }\n    return React.Children.map(this.props.children, (child: React.ReactElement, index: number) =>\n      this.cloneOption(child, index)\n    );\n  }\n\n  cloneOption(child: React.ReactElement, index: number) {\n    const { selected, sendRef, keyHandler } = this.props;\n    const isSelected =\n      selected && selected.constructor === Array\n        ? selected && (Array.isArray(selected) && selected.includes(child.props.value))\n        : selected === child.props.value;\n    return React.cloneElement(child, {\n      id: `${child.props.value ? child.props.value.toString() : ''}-${index}`,\n      isSelected,\n      sendRef,\n      keyHandler,\n      index\n    });\n  }\n\n  extendCheckboxChildren(props: any) {\n    const { children, isGrouped, checked, sendRef, keyHandler } = this.props;\n    const { 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy } = props;\n    if (isGrouped) {\n      let index = 0;\n      return React.Children.map(children, (group: React.ReactElement) =>\n        React.cloneElement(group, {\n          titleId: group.props.label.replace(/\\W/g, '-'),\n          children: (\n            <fieldset aria-labelledby={group.props.label.replace(/\\W/g, '-')} className={css(formStyles.formFieldset)}>\n              {group.props.children.map((option: React.ReactElement) =>\n                React.cloneElement(option, {\n                  isChecked: checked && checked.includes(option.props.value),\n                  sendRef,\n                  keyHandler,\n                  index: index++\n                })\n              )}\n            </fieldset>\n          )\n        })\n      );\n    }\n    return (\n      <fieldset\n        {...props}\n        aria-label={ariaLabel}\n        aria-labelledby={(!ariaLabel && ariaLabelledBy) || null}\n        className={css(formStyles.formFieldset)}\n      >\n        {React.Children.map(children, (child: React.ReactElement, index: number) =>\n          React.cloneElement(child, {\n            isChecked: checked && checked.includes(child.props.value),\n            sendRef,\n            keyHandler,\n            index\n          })\n        )}\n      </fieldset>\n    );\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      isExpanded,\n      openedOnEnter,\n      selected,\n      checked,\n      isGrouped,\n      sendRef,\n      keyHandler,\n      maxHeight,\n      ...props\n    } = this.props;\n\n    return (\n      <SelectConsumer>\n        {({ variant }) => (\n          <React.Fragment>\n            {variant !== SelectVariant.checkbox && (\n              <ul className={css(styles.selectMenu, className)} role=\"listbox\" {...maxHeight && {style:({ maxHeight, overflow: 'auto' })}}  {...props}>\n                {this.extendChildren()}\n              </ul>\n            )}\n            {variant === SelectVariant.checkbox && React.Children.count(children) > 0 && (\n              <FocusTrap focusTrapOptions={{ clickOutsideDeactivates: true }}>\n                <div className={css(styles.selectMenu, className)} {...maxHeight && {style:({ maxHeight, overflow: 'auto' })}}>\n                  <form noValidate className={css(formStyles.form)}>\n                    <div className={css(formStyles.formGroup)}>{this.extendCheckboxChildren(props)}</div>\n                  </form>\n                </div>\n              </FocusTrap>\n            )}\n            {variant === SelectVariant.checkbox && React.Children.count(children) === 0 && (\n              <div className={css(styles.selectMenu, className)} {...maxHeight && {style:({ maxHeight, overflow: 'auto' })}}>\n                <form noValidate className={css(formStyles.form)}>\n                  <div className={css(formStyles.formGroup)}/>\n                </form>\n              </div>\n            )}\n          </React.Fragment>\n        )}\n      </SelectConsumer>\n    );\n  }\n}\n"],"file":"SelectMenu.js"}