{"version":3,"sources":["../../../../src/components/Table/Table.test.tsx"],"names":["describe","test","view","columns","rows","expect","toMatchSnapshot","onSortCall","undefined","transforms","sortable","Object","values","TableGridBreakpoint","forEach","oneBreakpoint","TableVariant","onevariant","rowsWithDisabledAction","cells","disableActions","actions","cellTransforms","headerCol","isOpen","parent","cellFormatters","expandable","onCollapse","compoundColumns","title","cell","compoundExpand","compoundRows","props","compoundParent","colSpan","onExpand","onSelect","data","selected","f","find","prop","toEqual"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mount } from 'enzyme';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableGridBreakpoint,\n  TableVariant,\n  cellWidth,\n  headerCol,\n  sortable,\n  expandable,\n  compoundExpand, IRow\n} from './index';\nimport { rows, columns, actions } from '../../test-helpers/data-sets';\nimport { ColumnsType } from './base';\n\ndescribe('Simple table', () => {\n  test('caption', () => {\n    const view = mount(\n      <Table caption=\"Simple Table\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('header', () => {\n    const view = mount(\n      <Table header={<h4>Header title</h4>} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n    expect(view).toMatchSnapshot();\n  });\n  test('aria-label', () => {\n    const view = mount(\n      <Table aria-label=\"Aria labeled\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ntest('Sortable table', () => {\n  const onSortCall = () => undefined as any;\n  columns[0] = { ...columns[0], transforms: [sortable] };\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onSort={onSortCall} sortBy={{}} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ndescribe('Table variants', () => {\n  Object.values(TableGridBreakpoint).forEach((oneBreakpoint) => {\n    test(`Breakpoint - ${oneBreakpoint}`, () => {\n      const view = mount(\n        <Table aria-label=\"Aria labeled\" gridBreakPoint={oneBreakpoint} cells={columns} rows={rows}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      );\n      expect(view).toMatchSnapshot();\n    });\n  });\n  Object.values(TableVariant).forEach((onevariant) => {\n    test(`Size - ${onevariant}`, () => {\n      const view = mount(\n        <Table aria-label=\"Aria labeled\" variant={onevariant} cells={columns} rows={rows}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      );\n      expect(view).toMatchSnapshot();\n    });\n  });\n});\n\ntest('Simple Actions table', () => {\n  const rowsWithDisabledAction = [\n    ...rows,\n    {\n      cells: ['one', 'two', 'three', 'four', 'five'],\n      disableActions: true\n    }\n  ];\n\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" actions={actions} cells={columns} rows={rowsWithDisabledAction}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Actions table', () => {\n  const view = mount(\n    <Table\n      aria-label=\"Aria labeled\"\n      actionResolver={() => actions}\n      areActionsDisabled={() => false}\n      cells={columns}\n      rows={rows}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Cell header table', () => {\n  columns[0] = { ...columns[0], cellTransforms: [headerCol] };\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Collapsible table', () => {\n  rows[0] = { ...rows[0], isOpen: true };\n  rows[1] = { ...rows[1], parent: 0 };\n  rows[3] = { ...rows[3], isOpen: false };\n  rows[4] = { ...rows[4], parent: 3 };\n  columns[0] = { ...columns[0], cellFormatters: [expandable] };\n  const onCollapse = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onCollapse={onCollapse} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Compound Expandable table', () => {\n  const compoundColumns: ColumnsType = [\n    { title: 'col1', cell: { transforms: [compoundExpand] } },\n    { title: 'col2', cell: { transforms: [compoundExpand] } }\n  ];\n  const compoundRows: IRow[] = [\n    { isOpen: true, cells: [{ title: '1', props: { isOpen: true } }, { title: '2', props: { isOpen: false } }] },\n    { parent: 0, compoundParent: 0, cells: [{ title: 'expanded', props: { colSpan: 2 } }] },\n    { isOpen: false, cells: [{ title: '3', props: { isOpen: false } }, { title: '4', props: { isOpen: false } }] },\n    { parent: 2, compoundParent: 0, cells: [{ title: 'expanded', props: { colSpan: 2 } }] }\n  ];\n  const onExpand = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onExpand={onExpand} cells={compoundColumns} rows={compoundRows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Collapsible nested table', () => {\n  rows[0] = { ...rows[0], isOpen: false };\n  rows[1] = { ...rows[1], parent: 0, isOpen: true };\n  rows[2] = { ...rows[2], parent: 1 };\n  const onCollapse = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onCollapse={onCollapse} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Selectable table', () => {\n  const onSelect = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onSelect={onSelect} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Header width table', () => {\n  columns[0] = { ...columns[0], transforms: [cellWidth(10)] };\n  columns[2] = { ...columns[2], transforms: [cellWidth(30)] };\n  columns[4] = { ...columns[4], transforms: [cellWidth('max')] };\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Selectable table with selected expandable row', () => {\n  const data = {\n    cells: ['column'],\n    rows: [\n      {\n        cells: ['one'],\n        selected: true\n      },\n      {\n        cells: ['one'],\n        parent: 0\n      }\n    ],\n    onSelect: (f: any) => f\n  };\n\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" {...data}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n\n  expect(view.find('input[name=\"check-all\"]').prop('checked')).toEqual(true);\n});\n"],"file":"Table.test.js"}