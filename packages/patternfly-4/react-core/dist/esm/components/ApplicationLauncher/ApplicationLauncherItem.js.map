{"version":3,"sources":["../../../../src/components/ApplicationLauncher/ApplicationLauncherItem.tsx"],"names":["React","css","styles","DropdownItem","ApplicationLauncherContent","ApplicationLauncherItemContext","createContext","isExternal","icon","ApplicationLauncherItem","className","children","href","tooltip","tooltipProps","component","props","modifiers","external"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,YAAT,QAAgD,aAAhD;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AAEA,OAAO,MAAMC,8BAA8B,GAAGL,KAAK,CAACM,aAAN,CAAoB;AAAEC,EAAAA,UAAU,EAAE,KAAd;AAAqBC,EAAAA,IAAI,EAAE;AAA3B,CAApB,CAAvC;AAuBP,OAAO,MAAMC,uBAAkG,GAAG;AAAA,MAAC;AACjHC,IAAAA,SAAS,GAAG,EADqG;AAEjHC,IAAAA,QAFiH;AAGjHH,IAAAA,IAAI,GAAG,IAH0G;AAIjHD,IAAAA,UAAU,GAAG,KAJoG;AAKjHK,IAAAA,IALiH;AAMjHC,IAAAA,OAAO,GAAG,IANuG;AAOjHC,IAAAA,YAAY,GAAG,IAPkG;AAQjHC,IAAAA,SAAS,GAAG;AARqG,GAAD;AAAA,MAS7GC,KAT6G;;AAAA,SAWhH,oBAAC,8BAAD,CAAgC,QAAhC;AAAyC,IAAA,KAAK,EAAE;AAAET,MAAAA,UAAF;AAAcC,MAAAA;AAAd;AAAhD,KACE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAEO,SADb;AAEE,IAAA,IAAI,EAAEH,IAAI,IAAI,IAFhB;AAGE,IAAA,SAAS,EAAEX,GAAG,CAACM,UAAU,IAAIL,MAAM,CAACe,SAAP,CAAiBC,QAAhC,EAA0CR,SAA1C,CAHhB;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,YAAY,EAAEC;AALhB,KAMME,KANN,GAQGL,QAAQ,IAAI,oBAAC,0BAAD,QAA6BA,QAA7B,CARf,CADF,CAXgH;AAAA,CAA3G;;AAnBLH,EAAAA,I;AAEAD,EAAAA,U;AAEAM,EAAAA,O;AAEAC,EAAAA,Y;AAUAC,EAAAA,S","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/AppLauncher/app-launcher';\nimport { DropdownItem, DropdownItemProps } from '../Dropdown';\nimport { ApplicationLauncherContent } from './ApplicationLauncherContent';\n\nexport const ApplicationLauncherItemContext = React.createContext({ isExternal: false, icon: null });\n\nexport interface ApplicationLauncherItemProps {\n  /** Icon rendered before the text */\n  icon?: React.ReactNode;\n  /** If clicking on the item should open the page in a separate window */\n  isExternal?: boolean;\n  /** Tooltip to display when hovered over the item */\n  tooltip?: React.ReactNode;\n  /** Additional tooltip props forwarded to the Tooltip component */\n  tooltipProps?: any;\n  /** The component that will wrap the item.\n   * If you need to render a custom component, for example a react router Link component,\n   * then pass the component here. Example:\n   * <ApplicationLauncherItem key=\"router1\" component={\n   *   <Link to=\"/components/alert/\">\n   *     <ApplicationLauncherContent>Router link</ApplicationLauncherContent>\n   *   </Link>\n   * } />\n   */\n  component?: React.ReactNode;\n}\n\nexport const ApplicationLauncherItem: React.FunctionComponent<ApplicationLauncherItemProps & DropdownItemProps> = ({\n  className = '',\n  children,\n  icon = null,\n  isExternal = false,\n  href,\n  tooltip = null,\n  tooltipProps = null,\n  component = 'a',\n  ...props\n}: ApplicationLauncherItemProps & DropdownItemProps) => (\n  <ApplicationLauncherItemContext.Provider value={{ isExternal, icon }}>\n    <DropdownItem\n      component={component}\n      href={href || null}\n      className={css(isExternal && styles.modifiers.external, className)}\n      tooltip={tooltip}\n      tooltipProps={tooltipProps}\n      {...props}\n    >\n      {children && <ApplicationLauncherContent>{children}</ApplicationLauncherContent>}\n    </DropdownItem>\n  </ApplicationLauncherItemContext.Provider>\n);\n"],"file":"ApplicationLauncherItem.js"}