{"version":3,"sources":["../../../../src/components/ClipboardCopy/ClipboardCopy.tsx"],"names":["React","styles","css","TextInput","TooltipPosition","GenerateId","ClipboardCopyButton","ClipboardCopyToggle","ClipboardCopyExpanded","clipboardCopyFunc","event","text","clipboard","currentTarget","parentElement","el","document","createElement","value","appendChild","select","execCommand","removeChild","ClipboardCopyVariant","ClipboardCopy","Component","constructor","props","prevProps","prevState","children","updateText","_event","setState","expanded","onChange","isReadOnly","isExpanded","isCode","exitDelay","maxWidth","entryDelay","switchDelay","onCopy","hoverTip","clickTip","textAriaLabel","toggleAriaLabel","variant","position","className","divProps","textIdPrefix","toggleIdPrefix","contentIdPrefix","clipboardCopy","state","modifiers","id","clipboardCopyGroup","expandContent","timer","window","clearTimeout","copied","setTimeout","top","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { OneOf, Omit } from '../../helpers/typeUtils';\nimport { PopoverPosition } from '../Popover';\nimport { TextInput } from '../TextInput';\nimport { TooltipPosition } from '../Tooltip';\nimport GenerateId from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\n\nexport const clipboardCopyFunc = (event: any, text: string) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('input');\n  el.value = text;\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\n\nexport enum ClipboardCopyVariant {\n  inline = 'inline',\n  expansion = 'expansion'\n}\n\nexport interface ClipboardCopyState {\n  text: string | number;\n  expanded: boolean;\n  copied: boolean;\n}\n\nexport interface ClipboardCopyProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the clipboard copy container. */\n  className?: string;\n  /** Tooltip message to display when hover the copy button */\n  hoverTip?: string;\n  /** Tooltip message to display when clicking the copy button */\n  clickTip?: string;\n  /** Custom flag to show that the input requires an associated id or aria-label. */\n  textAriaLabel?: string;\n  /** Custom flag to show that the toggle button requires an associated id or aria-label. */\n  toggleAriaLabel?: string;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to determine if clipboard copy is in the expanded state initially */\n  isExpanded?: boolean;\n  /** Flag to determine if clipboard copy content includes code */\n  isCode?: boolean;\n  /** Adds Clipboard Copy variant styles. */\n  variant?: typeof ClipboardCopyVariant | 'inline' | 'expansion';\n  /** Copy button popover position. */\n  position?: OneOf<typeof PopoverPosition, keyof typeof PopoverPosition>;\n  /** Maximum width of the tooltip (default 150px). */\n  maxWidth?: string;\n  /** Delay in ms before the tooltip disappears. */\n  exitDelay?: number;\n  /** Delay in ms before the tooltip appears. */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip message switch to hover tip. */\n  switchDelay?: number;\n  /** A function that is triggered on clicking the copy button. */\n  onCopy?: (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => void;\n  /** A function that is triggered on changing the text. */\n  onChange?: (text?: string | number) => void;\n  /** The text which is copied. */\n  children?: React.ReactNode;\n}\n\nexport class ClipboardCopy extends React.Component<ClipboardCopyProps, ClipboardCopyState> {\n  timer = null as number;\n  constructor(props: ClipboardCopyProps) {\n    super(props);\n    this.state = {\n      text: this.props.children as string | number,\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n  }\n\n  static defaultProps = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline', \n    position: TooltipPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1600,\n    entryDelay: 100,\n    switchDelay: 2000,\n    onCopy: clipboardCopyFunc,\n    onChange: (): any => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content'\n  };\n\n  componentDidUpdate = (prevProps: ClipboardCopyProps, prevState: ClipboardCopyState) => {\n    if (prevProps.children !== this.props.children) {\n      this.updateText(this.props.children as string | number);\n    }\n  }\n\n  expandContent = (_event: React.MouseEvent<Element, MouseEvent>) => {\n    this.setState((prevState) => ({\n      expanded: !prevState.expanded\n    }));\n  }\n\n  updateText = (text: string | number) => {\n    this.setState({ text });\n    this.props.onChange(text);\n  }\n\n  render = () => {\n    const {\n      isReadOnly,\n      isExpanded,\n      isCode,\n      exitDelay,\n      maxWidth,\n      entryDelay,\n      switchDelay,\n      onCopy,\n      hoverTip,\n      clickTip,\n      textAriaLabel,\n      toggleAriaLabel,\n      variant,\n      position,\n      className,\n      onChange, // Don't pass to <div>\n      ...divProps\n    } = this.props;\n    const textIdPrefix = 'text-input-';\n    const toggleIdPrefix = 'toggle-';\n    const contentIdPrefix = 'content-';\n    return (\n      <div\n        className={css(styles.clipboardCopy, this.state.expanded && styles.modifiers.expanded, className)}\n        {...divProps}\n      >\n        <GenerateId prefix=\"\">\n          {(id) => (\n            <React.Fragment>\n              <div className={css(styles.clipboardCopyGroup)}>\n                {variant === 'expansion' && (\n                  <ClipboardCopyToggle\n                    isExpanded={this.state.expanded}\n                    onClick={this.expandContent}\n                    id={`${toggleIdPrefix}-${id}`}\n                    textId={`${textIdPrefix}-${id}`}\n                    contentId={`${contentIdPrefix}-${id}`}\n                    aria-label={toggleAriaLabel}\n                  />\n                )}\n                <TextInput\n                  isReadOnly={isReadOnly || this.state.expanded}\n                  onChange={this.updateText}\n                  value={this.state.text as string | number}\n                  id={`text-input-${id}`}\n                  aria-label={textAriaLabel}\n                />\n                <ClipboardCopyButton\n                  exitDelay={exitDelay}\n                  entryDelay={entryDelay}\n                  maxWidth={maxWidth}\n                  position={position}\n                  id={`copy-button-${id}`}\n                  textId={`text-input-${id}`}\n                  aria-label={hoverTip}\n                  onClick={(event: any) => {\n                    if (this.timer) {\n                      window.clearTimeout(this.timer);\n                      this.setState({ copied: false });\n                    }\n                    onCopy(event, this.state.text);\n                    this.setState({ copied: true }, () => {\n                      this.timer = window.setTimeout(() => {\n                        this.setState({ copied: false });\n                        this.timer = null;\n                      }, switchDelay);\n                    });\n                  }}\n                >\n                  {this.state.copied ? clickTip : hoverTip}\n                </ClipboardCopyButton>\n              </div>\n              {this.state.expanded && (\n                <ClipboardCopyExpanded isReadOnly={isReadOnly} isCode={isCode} id={`content-${id}`} onChange={this.updateText}>\n                  {this.state.text}\n                </ClipboardCopyExpanded>\n              )}\n            </React.Fragment>\n          )}\n        </GenerateId>\n      </div>\n    );\n  }\n}\n"],"file":"ClipboardCopy.js"}