{"version":3,"sources":["../../../../src/components/ChartTooltip/ChartTooltip.tsx"],"names":["ChartTooltip","constrainToVisibleArea","themeColor","themeVariant","theme","rest","active","activateData","angle","center","x","y","centerOffset","cornerRadius","data","datum","dx","dy","events","flyoutComponent","flyoutHeight","flyoutStyle","flyoutWidth","groupComponent","horizontal","index","labelComponent","orientation","pointerLength","pointerOrientation","pointerWidth","renderInPortal","VictoryTooltip"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AASA;;;;;;;;;;;;;;AA6LO,IAAMA,YAAwD,GAAG,SAA3DA,YAA2D,OAQ/C;AAAA,mCAPvBC,sBAOuB;AAAA,MAPvBA,sBAOuB,sCAPE,KAOF;AAAA,MANvBC,UAMuB,QANvBA,UAMuB;AAAA,MALvBC,YAKuB,QALvBA,YAKuB;AAAA,wBAFvBC,KAEuB;AAAA,MAFvBA,KAEuB,2BAFf,0BAASF,UAAT,EAAqBC,YAArB,CAEe;AAAA,MADpBE,IACoB;;AACvB;AAEA;AACA,SAAO,oBAAC,uBAAD;AAAgB,IAAA,sBAAsB,EAAEJ,sBAAxC;AAAgE,IAAA,KAAK,EAAEG;AAAvE,KAAkFC,IAAlF,EAAP;AACD,CAbM,C,CAeP;;;;;AAnMEC,EAAAA,M;AAIAC,EAAAA,Y;AAIAC,EAAAA,K;AAQAC,EAAAA,M;AAAWC,IAAAA,C;AAAWC,IAAAA,C;;AAOtBC,EAAAA,Y;AAAiBF,IAAAA,C;AAAsBC,IAAAA,C;;AAMvCV,EAAAA,sB;AAKAY,EAAAA,Y;AAKAC,EAAAA,I;AAKAC,EAAAA,K;AAIAC,EAAAA,E;AAIAC,EAAAA,E;AAOAC,EAAAA,M;AAUAC,EAAAA,e;AAMAC,EAAAA,Y;AAKAC,EAAAA,W;AAMAC,EAAAA,W;AAKAC,EAAAA,c;AAMAC,EAAAA,U;AAIAC,EAAAA,K;AASAC,EAAAA,c;AAOAC,EAAAA,W;AAKAC,EAAAA,a;AAMAC,EAAAA,kB,gEAAqB,K,iCAAQ,Q,iCAAW,M,iCAAS,O;AAKjDC,EAAAA,Y;AAKAC,EAAAA,c;;AA0DF,sCAAqB/B,YAArB,EAAmCgC,uBAAnC","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  NumberOrCallback,\n  OrientationTypes,\n  StringOrNumberOrCallback,\n  VictoryStyleObject,\n  VictoryTooltip,\n  VictoryTooltipProps,\n} from 'victory';\nimport { ChartThemeDefinition } from '../ChartTheme';\nimport { getTheme } from '../ChartUtils';\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartTooltipProps extends VictoryTooltipProps {\n  /**\n   * The active prop specifies whether the tooltip component should be displayed.\n   */\n  active?: boolean;\n  /**\n   * When true, tooltip events will set the active prop on both data and label elements.\n   */\n  activateData?: boolean;\n  /**\n   * The angle prop specifies the angle to rotate the tooltip around its origin point.\n   */\n  angle?: string | number;\n  /**\n   * The center prop determines the position of the center of the tooltip flyout. This prop should be given as an object\n   * that describes the desired x and y svg coordinates of the center of the tooltip. This prop is useful for\n   * positioning the flyout of a tooltip independent from the pointer. When ChartTooltip is used with\n   * ChartVoronoiContainer, the center prop is what enables the mouseFollowTooltips option. When this prop is set,\n   * non-zero pointerLength values will no longer be respected.\n   */\n  center?: { x: number, y: number };\n  /**\n   * The centerOffset prop determines the position of the center of the tooltip flyout in relation to the flyout\n   * pointer. This prop should be given as an object of x and y, where each is either a numeric offset value or a\n   * function that returns a numeric value. When this prop is set, non-zero pointerLength values will no longer be\n   * respected.\n   */\n  centerOffset?: { x: number | Function, y: number | Function };\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The cornerRadius prop determines corner radius of the flyout container. This prop may be given as a positive number\n   * or a function of datum.\n   */\n  cornerRadius?: NumberOrCallback;\n  /**\n   * Victory components can pass a data prop to their label component. This can be useful in custom components that need\n   * to make use of the entire dataset.\n   */\n  data?: any[];\n  /**\n   * Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\n   * and determine text.\n   */\n  datum?: {};\n  /**\n   * The dx prop defines a horizontal shift from the x coordinate.\n   */\n  dx?: StringOrNumberOrCallback;\n  /**\n   * The dy prop defines a vertical shift from the y coordinate.\n   */\n  dy?: StringOrNumberOrCallback;\n  /**\n   * The events prop attaches arbitrary event handlers to the label component. This prop should be given as an object of\n   * event names and corresponding event handlers. When events are provided via Victory’s event system, event handlers\n   * will be called with the event, the props of the component is attached to, and an eventKey.\n   * Examples: events={{onClick: (evt) => alert(\"x: \" + evt.clientX)}}\n   */\n  events?: {};\n  /**\n   * The flyoutComponent prop takes a component instance which will be used to create the flyout path for each tooltip.\n   * The new element created from the passed flyoutComponent will be supplied with the following properties: x, y, dx, dy,\n   * index, datum, cornerRadius, pointerLength, pointerWidth, width, height, orientation, style, and events.\n   * Any of these props may be overridden by passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If flyoutComponent is omitted, a default Flyout component will be created with props\n   * described above.\n   * Examples: flyoutComponent={<Flyout x={50} y={50}/>}, flyoutComponent={<MyCustomFlyout/>}\n   */\n  flyoutComponent?: React.ReactElement<any>;\n  /**\n   * The flyoutHeight prop defines the height of the tooltip flyout. This prop may be given as a positive number or a function\n   * of datum. If this prop is not set, height will be determined based on an approximate text size calculated from the\n   * text and style props provided to ChartTooltip.\n   */\n  flyoutHeight?: NumberOrCallback;\n  /**\n   * The style prop applies SVG style properties to the rendered flyout container. These props will be passed to the\n   * flyoutComponent.\n   */\n  flyoutStyle?: VictoryStyleObject;\n  /**\n   * The flyoutWidth prop defines the width of the tooltip flyout. This prop may be given as a positive number or a\n   * function of datum. If this prop is not set, flyoutWidth will be determined based on an approximate text size\n   * calculated from the text and style props provided to VictoryTooltip.\n   */\n  flyoutWidth?: NumberOrCallback,\n  /**\n   * The groupComponent prop takes a component instance which will be used to create group elements for use within\n   * container elements. This prop defaults to a <g> tag.}\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * The horizontal prop determines whether to plot the flyouts to the left / right of the (x, y) coordinate rather than top / bottom.\n   * This is useful when an orientation prop is not provided, and data will determine the default orientation. i.e.\n   * negative values result in a left orientation and positive values will result in a right orientation by default.\n   */\n  horizontal?: boolean;\n  /**\n   * The index prop represents the index of the datum in the data array.\n   */\n  index?: number | string;\n  /**\n   * The labelComponent prop takes a component instance which will be used to render each tooltip label. The new element\n   * created from the passed labelComponent will be supplied with the following properties: x, y, index, datum,\n   * verticalAnchor, textAnchor, style, text, and events. Any of these props may be overridden by passing in props to\n   * the supplied component, or modified or ignored within the custom component itself. If labelComponent is omitted, a\n   * new ChartLabel will be created with the props described above.\n   * Examples: labelComponent={<ChartLabel dy={20}/>}, labelComponent={<MyCustomLabel/>}\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * The orientation prop determines which side of the (x, y) coordinate the tooltip should be rendered on.\n   * This prop can be given as “top”, “bottom”, “left”, “right”, or as a function of datum that returns one of these\n   * values. If this prop is not provided it will be determined from the sign of the datum, and the value of the\n   * horizontal prop.\n   */\n  orientation?: OrientationTypes;\n  /**\n   * The pointerLength prop determines the length of the triangular pointer extending from the flyout. This prop may be\n   * given as a positive number or a function of datum.\n   */\n  pointerLength?: NumberOrCallback;\n  /**\n   * This prop determines which side of the tooltip flyout the pointer should originate on. When this prop is not set,\n   * it will be determined based on the overall orientation of the flyout in relation to its data point, and any center\n   * or centerOffset values.\n   */\n  pointerOrientation?: 'top' | 'bottom' | 'left' | 'right' | Function;\n  /**\n   * The pointerWidth prop determines the width of the base of the triangular pointer extending from\n   * the flyout. This prop may be given as a positive number or a function of datum.\n   */\n  pointerWidth?: NumberOrCallback;\n  /**\n   * When renderInPortal is true, rendered tooltips will be wrapped in VictoryPortal and rendered within the Portal element\n   * within ChartContainer. Note: This prop should not be set to true when using a custom container element.\n   */\n  renderInPortal?: boolean;\n  /**\n   * The style prop applies CSS properties to the rendered `<text>` element.\n   */\n  style?: React.CSSProperties;\n  /**\n   * The text prop defines the text ChartTooltip will render. The text prop may be given as a string, number, or\n   * function of datum. When ChartLabel is used as the labelComponent, strings may include newline characters, which\n   * ChartLabel will split in to separate <tspan/> elements.\n   */\n  text?: StringOrNumberOrCallback | string[] | number[];\n  /**\n   * The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\n   * props defined in theme may be overwritten by props specified on the component instance.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The x prop defines the x coordinate to use as a basis for horizontal positioning.\n   */\n  x?: number;\n  /**\n   * The y prop defines the y coordinate to use as a basis for vertical positioning.\n   */\n  y?: number;\n}\n\nexport const ChartTooltip: React.FunctionComponent<ChartTooltipProps> = ({\n  constrainToVisibleArea = false,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  ...rest\n}: ChartTooltipProps) => {\n  // Note: constrainToVisibleArea is valid, but @types/victory is missing a prop type\n\n  // @ts-ignore\n  return <VictoryTooltip constrainToVisibleArea={constrainToVisibleArea} theme={theme} {...rest} />;\n}\n\n// Note: VictoryTooltip.defaultEvents must be hoisted\nhoistNonReactStatics(ChartTooltip, VictoryTooltip);\n"],"file":"ChartTooltip.js"}