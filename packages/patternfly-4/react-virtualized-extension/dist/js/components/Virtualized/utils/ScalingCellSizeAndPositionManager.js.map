{"version":3,"sources":["../../../../../src/components/Virtualized/utils/ScalingCellSizeAndPositionManager.ts"],"names":["ScalingCellSizeAndPositionManager","maxScrollSize","params","_cellSizeAndPositionManager","CellSizeAndPositionManager","_maxScrollSize","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","index","getSizeAndPositionOfCell","getSizeAndPositionOfLastMeasuredCell","min","align","currentOffset","targetIndex","_safeOffsetToOffset","getUpdatedOffsetForIndex","_offsetToSafeOffset","getVisibleCellRange","resetCell"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport { Alignment, CellSizeGetter, VisibleCellRange } from '../types';\n\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\ninterface ContainerSizeAndOffset {\n  containerSize: number,\n  offset: number\n}\n\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n\ninterface Params {\n  maxScrollSize?: number,\n  cellCount: number,\n  cellSizeGetter: CellSizeGetter,\n  estimatedCellSize: number\n}\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nexport default class ScalingCellSizeAndPositionManager {\n  _cellSizeAndPositionManager: CellSizeAndPositionManager;\n  _maxScrollSize: number;\n\n  constructor({ maxScrollSize = getMaxElementSize(), ...params }: Params) {\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  areOffsetsAdjusted(): boolean {\n    return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n  }\n\n  configure(params: { cellCount: number, estimatedCellSize: number, cellSizeGetter: CellSizeGetter }) {\n    this._cellSizeAndPositionManager.configure(params);\n  }\n\n  getCellCount(): number {\n    return this._cellSizeAndPositionManager.getCellCount();\n  }\n\n  getEstimatedCellSize(): number {\n    return this._cellSizeAndPositionManager.getEstimatedCellSize();\n  }\n\n  getLastMeasuredIndex(): number {\n    return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n  }\n\n  /**\n   * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n   * The offset passed to this function is scaled (safe) as well.\n   */\n  getOffsetAdjustment({\n    containerSize,\n    offset // safe\n  }: ContainerSizeAndOffset): number {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n    const safeTotalSize = this.getTotalSize();\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize: safeTotalSize\n    });\n\n    return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n  }\n\n  getSizeAndPositionOfCell(index: number) {\n    return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n  }\n\n  getSizeAndPositionOfLastMeasuredCell() {\n    return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n  }\n\n  /** See CellSizeAndPositionManager#getTotalSize */\n  getTotalSize(): number {\n    return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n  }\n\n  /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n  getUpdatedOffsetForIndex({\n    align = 'auto',\n    containerSize,\n    currentOffset, // safe\n    targetIndex\n  }: {\n    align: Alignment,\n    containerSize: number,\n    currentOffset: number,\n    targetIndex: number\n  }) {\n    currentOffset = this._safeOffsetToOffset({\n      containerSize,\n      offset: currentOffset\n    });\n\n    const offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n      align,\n      containerSize,\n      currentOffset,\n      targetIndex\n    });\n\n    return this._offsetToSafeOffset({\n      containerSize,\n      offset\n    });\n  }\n\n  /** See CellSizeAndPositionManager#getVisibleCellRange */\n  getVisibleCellRange({\n    containerSize,\n    offset // safe\n  }: ContainerSizeAndOffset): VisibleCellRange {\n    offset = this._safeOffsetToOffset({\n      containerSize,\n      offset\n    });\n\n    return this._cellSizeAndPositionManager.getVisibleCellRange({\n      containerSize,\n      offset\n    });\n  }\n\n  resetCell(index: number): void {\n    this._cellSizeAndPositionManager.resetCell(index);\n  }\n\n  _getOffsetPercentage({\n    containerSize,\n    offset, // safe\n    totalSize\n  }: {\n    containerSize: number,\n    offset: number,\n    totalSize: number\n  }) {\n    return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n  }\n\n  _offsetToSafeOffset({\n    containerSize,\n    offset // unsafe\n  }: ContainerSizeAndOffset): number {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n    const safeTotalSize = this.getTotalSize();\n\n    if (totalSize === safeTotalSize) {\n      return offset;\n    }\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize\n    });\n\n    return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n  }\n\n  _safeOffsetToOffset({\n    containerSize,\n    offset // safe\n  }: ContainerSizeAndOffset): number {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n    const safeTotalSize = this.getTotalSize();\n\n    if (totalSize === safeTotalSize) {\n      return offset;\n    }\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize: safeTotalSize\n    });\n\n    return Math.round(offsetPercentage * (totalSize - containerSize));\n  }\n}\n"],"file":"ScalingCellSizeAndPositionManager.js"}