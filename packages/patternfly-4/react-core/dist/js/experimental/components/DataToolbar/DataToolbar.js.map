{"version":3,"sources":["../../../../../src/experimental/components/DataToolbar/DataToolbar.tsx"],"names":["DataToolbar","props","React","createRef","setState","prevState","componentManagedIsExpanded","state","isConsumerManagedToggleGroup","isExpanded","toggleIsExpanded","window","addEventListener","closeExpandableContent","removeEventListener","className","children","id","expandableContentId","styles","dataToolbar","expandableContentRef","Component"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsBaA,W;;;;;AAOX,uBAAYC,KAAZ,EAAqC;AAAA;;AAAA;;AACnC,qFAAMA,KAAN;;AADmC,2EANNC,KAAK,CAACC,SAAN,EAMM;;AAAA,uEASlB,YAAM;AACvB,YAAKC,QAAL,CAAc,UAACC,SAAD;AAAA,eAAgB;AAC5BC,UAAAA,0BAA0B,EAAE,CAACD,SAAS,CAACC;AADX,SAAhB;AAAA,OAAd;AAGD,KAboC;;AAAA,6EAeZ,YAAM;AAC7B,YAAKF,QAAL,CAAc;AAAA,eAAO;AACnBE,UAAAA,0BAA0B,EAAE;AADT,SAAP;AAAA,OAAd;AAGD,KAnBoC;;AAGnC,UAAKC,KAAL,GAAa;AACXC,MAAAA,4BAA4B,EAAEP,KAAK,CAACQ,UAAN,IAAoB,CAAC,CAACR,KAAK,CAACS,gBAD/C;AAEXJ,MAAAA,0BAA0B,EAAE;AAFjB,KAAb;AAHmC;AAOpC;;;;wCAcmB;AAAA,UACVE,4BADU,GACuB,KAAKD,KAD5B,CACVC,4BADU;;AAGlB,UAAK,CAACA,4BAAN,EAAqC;AACnCG,QAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,sBAAvC;AACD;AACF;;;2CAEsB;AAAA,UACbL,4BADa,GACoB,KAAKD,KADzB,CACbC,4BADa;;AAErB,UAAIA,4BAAJ,EAAkC;AAChCG,QAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKD,sBAA1C;AACD;AACF;;;6BAEQ;AAAA,wBAEoE,KAAKZ,KAFzE;AAAA,UAECc,SAFD,eAECA,SAFD;AAAA,UAEYC,QAFZ,eAEYA,QAFZ;AAAA,UAEsBP,UAFtB,eAEsBA,UAFtB;AAAA,UAEkCC,gBAFlC,eAEkCA,gBAFlC;AAAA,UAEoDO,EAFpD,eAEoDA,EAFpD;AAAA,UAE2DhB,KAF3D;;AAAA,wBAG8D,KAAKM,KAHnE;AAAA,UAGCC,4BAHD,eAGCA,4BAHD;AAAA,UAG+BF,0BAH/B,eAG+BA,0BAH/B;AAKP,UAAMY,mBAAmB,aAAMD,EAAN,wBAAzB;AAEA,aACE;AAAK,QAAA,SAAS,EAAE,sBAAIE,wBAAOC,WAAX,EAAwBL,SAAxB,CAAhB;AAAoD,QAAA,EAAE,EAAEE;AAAxD,SAAgEhB,KAAhE,GACE,oBAAC,oCAAD,CAAoB,QAApB;AACE,QAAA,KAAK,EACH;AACEQ,UAAAA,UAAU,EAAED,4BAA4B,GAAGC,UAAH,GAAgBH,0BAD1D;AAEEI,UAAAA,gBAAgB,EAAEF,4BAA4B,GAAGE,gBAAH,GAAsB,KAAKA,gBAF3E;AAGEW,UAAAA,oBAAoB,EAAE,KAAKA,oBAH7B;AAIEH,UAAAA,mBAAmB,EAAnBA;AAJF;AAFJ,SAUGF,QAVH,CADF,EAaE,oBAAC,0DAAD;AACE,QAAA,EAAE,EAAEE,mBADN;AAEE,QAAA,UAAU,EAAEV,4BAA4B,GAAGC,UAAH,GAAgBH,0BAF1D;AAGE,QAAA,oBAAoB,EAAE,KAAKe;AAH7B,QAbF,CADF;AAqBD;;;;EAvE8BnB,KAAK,CAACoB,S;;;;gBAA1BtB,W;AAlBXe,EAAAA,S;AAEAC,EAAAA,Q;AAEAP,EAAAA,U;AAEAC,EAAAA,gB;AAEAO,EAAAA,E;;;gBAUWjB,W,kBAGW;AACpBS,EAAAA,UAAU,EAAE;AADQ,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DataToolbar/data-toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { DataToolbarExpandableContent } from './DataToolbarExpandableContent';\nimport { DataToolbarContext } from './DataToolbarUtils';\n\nexport interface DataToolbarProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the Data toolbar */\n  className?: string;\n  /** Content to be rendered as rows in the Data toolbar */\n  children?: React.ReactNode;\n  /** Flag indicating if a Data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** A callback for setting the isExpanded flag */\n  toggleIsExpanded?: () => void;\n  /** Id of the Data toolbar */\n  id: string;\n}\n\nexport interface DataToolbarState {\n  /** Flag indicating the if the expandable content's expanded state is consumer managed or not */\n  isConsumerManagedToggleGroup: boolean;\n  /** Flag indicating if the component managed state has expanded content or not */\n  componentManagedIsExpanded: boolean;\n}\n\nexport class DataToolbar extends React.Component<DataToolbarProps, DataToolbarState> {\n  private expandableContentRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps = {\n    isExpanded: false\n  };\n\n  constructor(props: DataToolbarProps) {\n    super(props);\n\n    this.state = {\n      isConsumerManagedToggleGroup: props.isExpanded || !!props.toggleIsExpanded,\n      componentManagedIsExpanded: false\n    };\n  }\n\n  toggleIsExpanded = () => {\n    this.setState((prevState) => ({\n      componentManagedIsExpanded: !prevState.componentManagedIsExpanded\n    }));\n  }\n\n  closeExpandableContent = () => {\n    this.setState(() => ({\n      componentManagedIsExpanded: false\n    }));\n  }\n\n  componentDidMount() {\n    const { isConsumerManagedToggleGroup } = this.state;\n\n    if ( !isConsumerManagedToggleGroup ) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    const { isConsumerManagedToggleGroup } = this.state;\n    if (isConsumerManagedToggleGroup) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  render() {\n\n    const { className, children, isExpanded, toggleIsExpanded, id, ...props} = this.props;\n    const { isConsumerManagedToggleGroup, componentManagedIsExpanded } = this.state;\n\n    const expandableContentId = `${id}-expandable-content`;\n\n    return (\n      <div className={css(styles.dataToolbar, className)} id={id} {...props}>\n        <DataToolbarContext.Provider\n          value={\n            {\n              isExpanded: isConsumerManagedToggleGroup ? isExpanded : componentManagedIsExpanded,\n              toggleIsExpanded: isConsumerManagedToggleGroup ? toggleIsExpanded : this.toggleIsExpanded,\n              expandableContentRef: this.expandableContentRef,\n              expandableContentId\n            }\n          }\n        >\n          {children}\n        </DataToolbarContext.Provider>\n        <DataToolbarExpandableContent\n          id={expandableContentId}\n          isExpanded={isConsumerManagedToggleGroup ? isExpanded : componentManagedIsExpanded}\n          expandableContentRef={this.expandableContentRef}\n        />\n      </div>\n    );\n  }\n\n}\n"],"file":"DataToolbar.js"}