{"version":3,"sources":["../../../../src/components/Button/Button.test.tsx"],"names":["Object","values","ButtonVariant","forEach","variant","test","view","expect","toMatchSnapshot","label","find","props","toBe","link","component","type","Component"],"mappings":"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","sourcesContent":["import { Button, ButtonVariant } from './Button';\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { CartArrowDownIcon } from '@patternfly/react-icons';\n\nObject.values(ButtonVariant).forEach((variant) => {\n  test(`${variant} button`, () => {\n    const view = mount(\n      <Button variant={variant} aria-label={variant}>\n        {variant} Button\n      </Button>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ntest('it adds an aria-label to plain buttons', () => {\n  const label = 'aria-label test';\n  const view = mount(<Button aria-label={label} />);\n  expect(view.find('button').props()['aria-label']).toBe(label);\n});\n\ntest('link with icon', () => {\n  const view = mount(\n    <Button variant={ButtonVariant.link} icon={<CartArrowDownIcon />}>\n      Block Button\n    </Button>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('isBlock', () => {\n  const view = mount(<Button isBlock>Block Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isDisabled', () => {\n  const view = mount(<Button isDisabled>Disabled Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isFocus', () => {\n  const view = mount(<Button isFocus>Focused Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isHover', () => {\n  const view = mount(<Button isHover>Hovered Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isInline', () => {\n  const view = mount(\n    <Button variant={ButtonVariant.link} isInline>\n      Hovered Button\n    </Button>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('allows passing in a string as the component', () => {\n  const component = 'a';\n  const view = mount(<Button component={component} />);\n  expect(view.find(component).type()).toBe(component);\n});\n\ntest('allows passing in a React Component as the component', () => {\n  const Component = () => <div>im a div</div>;\n  const view = mount(<Button component={Component} />);\n  expect(view.find(Component).type()).toBe(Component);\n});\n\ntest('aria-disabled is set to true and tabIndex to -1 if component is not a button and is disabled', () => {\n  const view = mount(\n    <Button component=\"a\" isDisabled>\n      Disabled Anchor Button\n    </Button>\n  );\n  expect(view).toMatchSnapshot();\n});\n"],"file":"Button.test.js"}