{"version":3,"sources":["../../../../src/components/Page/PageHeader.tsx"],"names":["React","styles","css","BarsIcon","Button","ButtonVariant","PageContextConsumer","PageHeader","className","logo","logoProps","logoComponent","toolbar","avatar","topNav","isNavOpen","showNavToggle","onNavToggle","undefined","ariaLabel","props","LogoComponent","isManagedSidebar","managedOnNavToggle","managedIsNavOpen","navToggle","navOpen","pageHeader","pageHeaderBrand","pageHeaderBrandToggle","plain","pageHeaderBrandLink","pageHeaderNav","pageHeaderTools"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,yBAAtC;AACA,SAASC,mBAAT,QAAoC,QAApC;AAgCA,OAAO,MAAMC,UAAU,GAAG,UAaH;AAAA,MAbI;AACzBC,IAAAA,SAAS,GAAE,EADc;AAEzBC,IAAAA,IAAI,GAAE,IAFmB;AAGzBC,IAAAA,SAAS,GAAE,IAHc;AAIzBC,IAAAA,aAAa,GAAG,GAJS;AAKzBC,IAAAA,OAAO,GAAE,IALgB;AAMzBC,IAAAA,MAAM,GAAE,IANiB;AAOzBC,IAAAA,MAAM,GAAE,IAPiB;AAQzBC,IAAAA,SAAS,GAAE,IARc;AASzBC,IAAAA,aAAa,GAAE,KATU;AAUzBC,IAAAA,WAAW,GAAE,MAAMC,SAVM;AAWzB,kBAAcC,SAAS,GAAG;AAXD,GAaJ;AAAA,MADlBC,KACkB;;AACrB,QAAMC,aAAa,GAAGV,aAAtB;AACA,SACE,oBAAC,mBAAD,QACG,CAAC;AAACW,IAAAA,gBAAD;AAAmBL,IAAAA,WAAW,EAAEM,kBAAhC;AAAoDR,IAAAA,SAAS,EAAES;AAA/D,GAAD,KAAuG;AACtG,UAAMC,SAAS,GAAGH,gBAAgB,GAAGC,kBAAH,GAAwBN,WAA1D;AACA,UAAMS,OAAO,GAAGJ,gBAAgB,GAAGE,gBAAH,GAAsBT,SAAtD;AAEA,WACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAEb,GAAG,CAACD,MAAM,CAAC0B,UAAR,EAAoBnB,SAApB;AAApC,OAAwEY,KAAxE,GACG,CAACJ,aAAa,IAAIP,IAAlB,KACC;AAAK,MAAA,SAAS,EAAEP,GAAG,CAACD,MAAM,CAAC2B,eAAR;AAAnB,OACGZ,aAAa,IACZ;AAAK,MAAA,SAAS,EAAEd,GAAG,CAACD,MAAM,CAAC4B,qBAAR;AAAnB,OACE,oBAAC,MAAD;AACE,MAAA,EAAE,EAAC,YADL;AAEE,MAAA,OAAO,EAAEJ,SAFX;AAGE,oBAAYN,SAHd;AAIE,uBAAc,cAJhB;AAKE,uBAAeO,OAAO,GAAG,MAAH,GAAY,OALpC;AAME,MAAA,OAAO,EAAErB,aAAa,CAACyB;AANzB,OAQE,oBAAC,QAAD,OARF,CADF,CAFJ,EAeGrB,IAAI,IACH,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEP,GAAG,CAACD,MAAM,CAAC8B,mBAAR;AAA7B,OAA+DrB,SAA/D,GACGD,IADH,CAhBJ,CAFJ,EA4BGK,MAAM,IAAI;AAAK,MAAA,SAAS,EAAEZ,GAAG,CAACD,MAAM,CAAC+B,aAAR;AAAnB,OAA4ClB,MAA5C,CA5Bb,EA6BG,CAACF,OAAO,IAAIC,MAAZ,KACC;AAAK,MAAA,SAAS,EAAEX,GAAG,CAACD,MAAM,CAACgC,eAAR;AAAnB,OACGrB,OADH,EAEGC,MAFH,CA9BJ,CADF;AAsCD,GA3CH,CADF;AA8CE,CA7DG;;AA5BLL,EAAAA,S;AAEAC,EAAAA,I;AAEAC,EAAAA,S;AAEAC,EAAAA,a;AAEAC,EAAAA,O;AAEAC,EAAAA,M;AAEAC,EAAAA,M;AAEAE,EAAAA,a;AAEAD,EAAAA,S;AAKAO,EAAAA,gB;AAEAL,EAAAA,W;AAEA,c","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport { BarsIcon } from '@patternfly/react-icons';\nimport { Button, ButtonVariant } from '../../components/Button';\nimport { PageContextConsumer } from './Page';\n\nexport interface PageHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the page header */\n  className?: string;\n  /** Component to render the logo/brand (e.g. <Brand />) */\n  logo?: React.ReactNode;\n  /** Additional props passed to the logo anchor container */\n  logoProps?: object;\n  /** Component to use to wrap the passed <logo> */\n  logoComponent?: React.ReactNode;\n  /** Component to render the toolbar (e.g. <Toolbar />) */\n  toolbar?: React.ReactNode;\n  /** Component to render the avatar (e.g. <Avatar /> */\n  avatar?: React.ReactNode;\n  /** Component to render navigation within the header (e.g. <Nav /> */\n  topNav?: React.ReactNode;\n  /** True to show the nav toggle button (toggles side nav) */\n  showNavToggle?: boolean;\n  /** True if the side nav is shown  */\n  isNavOpen?: boolean;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /** Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true */\n  onNavToggle?: () => void;\n  /** Aria Label for the nav toggle button */\n  'aria-label'?: string;\n}\n\nexport const PageHeader = ({\n  className= '',\n  logo= null as React.ReactNode,\n  logoProps= null as object,\n  logoComponent = 'a',\n  toolbar= null as React.ReactNode,\n  avatar= null as React.ReactNode,\n  topNav= null as React.ReactNode,\n  isNavOpen= true,\n  showNavToggle= false,\n  onNavToggle= () => undefined as any,\n  'aria-label': ariaLabel = 'Global navigation',\n  ...props\n}: PageHeaderProps) => {\n  const LogoComponent = logoComponent as any;\n  return (\n    <PageContextConsumer>\n      {({isManagedSidebar, onNavToggle: managedOnNavToggle, isNavOpen: managedIsNavOpen}: PageHeaderProps) => {\n        const navToggle = isManagedSidebar ? managedOnNavToggle : onNavToggle;\n        const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n\n        return (\n          <header role=\"banner\" className={css(styles.pageHeader, className)} {...props}>\n            {(showNavToggle || logo) && (\n              <div className={css(styles.pageHeaderBrand)}>\n                {showNavToggle && (\n                  <div className={css(styles.pageHeaderBrandToggle)}>\n                    <Button\n                      id=\"nav-toggle\"\n                      onClick={navToggle}\n                      aria-label={ariaLabel}\n                      aria-controls=\"page-sidebar\"\n                      aria-expanded={navOpen ? 'true' : 'false'}\n                      variant={ButtonVariant.plain}\n                    >\n                      <BarsIcon/>\n                    </Button>\n                  </div>\n                )}\n                {logo && (\n                  <LogoComponent className={css(styles.pageHeaderBrandLink)} {...logoProps}>\n                    {logo}\n                  </LogoComponent>\n                )}\n              </div>\n            )}\n            {/* Hide for now until we have the context selector component */}\n            {/* <div className={css(styles.pageHeaderSelector)}>\n            pf-c-context-selector\n          </div> */}\n            {topNav && <div className={css(styles.pageHeaderNav)}>{topNav}</div>}\n            {(toolbar || avatar) && (\n              <div className={css(styles.pageHeaderTools)}>\n                {toolbar}\n                {avatar}\n              </div>\n            )}\n          </header>\n        );\n      }}\n    </PageContextConsumer>\n); };\n"],"file":"PageHeader.js"}