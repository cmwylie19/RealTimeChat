{"version":3,"sources":["../../../../esm/components/Table/utils/headerUtils.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","generateHeader","transforms","origTransforms","formatters","origFormatters","columnTransforms","header","title","label","scopeColTransformer","emptyCol","hasOwnProperty","generateCell","cellFormatters","cellTransforms","cell","extra","mapProps","defaultTitle","mapHeader","column","props","property","toLowerCase","trim","replace","extraParams","data","selectableTransforms","onSelect","canSelectAll","selectable","actionsTransforms","actions","actionResolver","areActionsDisabled","emptyTD","collapsibleTransfroms","onCollapse","collapsible","addAdditionalCellTranforms","additional","expandContent","map","parentIdCell","parentId","mapOpenedRows","rows","children","reduce","acc","curr","parent","isOpen","some","oneRow","rowData","cells","oneCell","calculateColumns","headerRows","oneCol"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { scopeColTransformer, selectable, cellActions, emptyCol, mapProps, collapsible, emptyTD, expandedRow, parentId } from './transformers';\nimport { defaultTitle } from './formatters';\n\n/**\n * Generate header with transforms and formatters from custom header object.\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @return {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = ({\n  transforms: origTransforms,\n  formatters: origFormatters,\n  columnTransforms,\n  header\n}, title) => _objectSpread({}, header, {\n  label: title,\n  transforms: [scopeColTransformer, emptyCol, ...(origTransforms || []), ...(columnTransforms || []), ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])],\n  formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])]\n});\n/**\n * Function to generate cell for header config to change look of each cell.\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\n\n\nconst generateCell = ({\n  cellFormatters,\n  cellTransforms,\n  columnTransforms,\n  cell\n}, extra) => _objectSpread({}, cell, {\n  transforms: [...(cellTransforms || []), ...(columnTransforms || []), ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []), mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n  ],\n  formatters: [defaultTitle, ...(cellFormatters || []), ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])]\n});\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cels as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\n\n\nconst mapHeader = (column, extra, key, ...props) => {\n  const title = column.hasOwnProperty('title') ? column.title : column;\n  return {\n    property: typeof title === 'string' && title.toLowerCase().trim().replace(/\\s/g, '-') || `column-${key}`,\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: _objectSpread({\n      'data-label': typeof title === 'string' ? title : `column-${key}`,\n      'data-key': key\n    }, column.hasOwnProperty('props') ? column.props : {}, {}, props)\n  };\n};\n/**\n * Function to define select cell in first column.\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nconst selectableTransforms = ({\n  onSelect,\n  canSelectAll\n}) => [...(onSelect ? [{\n  title: '',\n  transforms: canSelectAll && [selectable] || null,\n  cellTransforms: [selectable]\n}] : [])];\n/**\n * Function to define actions in last column.\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nconst actionsTransforms = ({\n  actions,\n  actionResolver,\n  areActionsDisabled\n}) => [...(actionResolver || actions ? [{\n  title: '',\n  transforms: [emptyTD],\n  cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n}] : [])];\n/**\n * Function to define collapsible in first column.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nconst collapsibleTransfroms = ({\n  onCollapse\n}) => [...(onCollapse ? [{\n  title: '',\n  transforms: [emptyTD],\n  cellTransforms: [collapsible]\n}] : [])];\n/**\n * Function to add additional cell transforms to object.\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\n\n\nconst addAdditionalCellTranforms = (cell, additional) => _objectSpread({}, cell.hasOwnProperty('title') ? cell : {\n  title: cell\n}, {\n  cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional]\n});\n/**\n * Function to change expanded row with additional transforms.\n * @param {*} header info with cellTransforms.\n * @param {*} extraObject with onCollapse function.\n */\n\n\nconst expandContent = (header, {\n  onCollapse\n}) => {\n  if (!onCollapse) {\n    return header;\n  }\n\n  return header.map((cell, key) => {\n    const parentIdCell = addAdditionalCellTranforms(cell, parentId);\n    return key === 0 ? addAdditionalCellTranforms(parentIdCell, expandedRow(header.length)) : parentIdCell;\n  });\n};\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\n\n\nexport const mapOpenedRows = (rows, children) => rows.reduce((acc, curr, key) => {\n  if (curr.hasOwnProperty('parent')) {\n    const parent = acc.length > 0 && acc[acc.length - 1];\n\n    if (parent) {\n      acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n\n      if (curr.hasOwnProperty('compoundParent')) {\n        // if this is compound expand, check for any open child cell\n        acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some(oneRow => oneRow.props.rowData.cells.some(oneCell => oneCell.props && oneCell.props.isOpen));\n      }\n    }\n  } else {\n    acc = [...acc, _objectSpread({}, curr, {\n      rows: [children[key]]\n    })];\n  }\n\n  return acc;\n}, []);\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @return {*} expected object for react tabular table.\n */\n\nexport const calculateColumns = (headerRows, extra) => headerRows && [...collapsibleTransfroms(extra), ...selectableTransforms(extra), ...expandContent(headerRows, extra), ...actionsTransforms(extra)].map((oneCol, key) => _objectSpread({}, mapHeader(oneCol, extra, key)));\n//# sourceMappingURL=headerUtils.js.map"],"file":"headerUtils.js"}