{"version":3,"sources":["../../../../../src/components/TopologyView/examples/ViewToolbar.js"],"names":["ViewToolbar","filterType","filterValue","filterDropDownOpen","actionKebabOpen","isOpen","setState","e","preventDefault","state","value","action","handleFilterInputChange","onFilterDropDownToggle","DropdownPosition","right","onFilterTypeSelect","onActionKebabToggle","onActionKebabSelect","borderBottom","renderFilterTypeDropdown","renderFilterInput","renderActionsdKebab","React","Component"],"mappings":";;;;;;;AAAA;;AACA;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;IAEaA,W;;;;;;;;;;;;;;;;;;4DACH;AACNC,MAAAA,UAAU,EAAE,MADN;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,kBAAkB,EAAE,KAHd;AAINC,MAAAA,eAAe,EAAE;AAJX,K;;6EAOiB,UAAAC,MAAM,EAAI;AACjC,YAAKC,QAAL,CAAc;AAAEH,QAAAA,kBAAkB,EAAEE;AAAtB,OAAd;AACD,K;;yEAEoB,UAACE,CAAD,EAAIN,UAAJ,EAAmB;AACtCM,MAAAA,CAAC,CAACC,cAAF;;AACA,YAAKF,QAAL,CAAc;AACZL,QAAAA,UAAU,EAAVA,UADY;AAEZE,QAAAA,kBAAkB,EAAE,KAFR;AAGZD,QAAAA,WAAW,EAAED,UAAU,KAAK,MAAKQ,KAAL,CAAWR,UAA1B,GAAuC,MAAKQ,KAAL,CAAWP,WAAlD,GAAgE;AAHjE,OAAd;AAKD,K;;8EAEyB,UAAAQ,KAAK,EAAI;AACjC,YAAKJ,QAAL,CAAc;AAAEJ,QAAAA,WAAW,EAAEQ;AAAf,OAAd;AACD,K;;0EAEqB,UAAAL,MAAM,EAAI;AAC9B,YAAKC,QAAL,CAAc;AAAEF,QAAAA,eAAe,EAAEC;AAAnB,OAAd;AACD,K;;0EAEqB,UAACE,CAAD,EAAII,MAAJ,EAAe;AACnCJ,MAAAA,CAAC,CAACC,cAAF;;AACA,YAAKF,QAAL,CAAc;AAAEF,QAAAA,eAAe,EAAE;AAAnB,OAAd;AACD,K;;wEAEmB,YAAM;AAAA,UAChBF,WADgB,GACA,MAAKO,KADL,CAChBP,WADgB;AAExB,aACE,gCAAC,oBAAD;AACE,QAAA,KAAK,EAAEA,WAAW,IAAI,EADxB;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,QAAQ,EAAE,MAAKU,uBAHjB;AAIE,sBAAW;AAJb,QADF;AAQD,K;;+EAE0B,YAAM;AAAA,wBACY,MAAKH,KADjB;AAAA,UACvBN,kBADuB,eACvBA,kBADuB;AAAA,UACHF,UADG,eACHA,UADG;AAE/B,aACE,gCAAC,mBAAD;AACE,QAAA,QAAQ,EAAE,MAAKY,sBADjB;AAEE,QAAA,QAAQ,EAAEC,4BAAiBC,KAF7B;AAGE,QAAA,SAAS,EAAC,+BAHZ;AAIE,QAAA,MAAM,EACJ,gCAAC,yBAAD;AAAgB,UAAA,QAAQ,EAAE,MAAKF;AAA/B,WACE,gCAAC,sBAAD;AAAY,UAAA,SAAS,EAAC;AAAtB,UADF,EAEGZ,UAFH,CALJ;AAUE,QAAA,MAAM,EAAEE,kBAVV;AAWE,QAAA,aAAa,EAAE,CACb,gCAAC,uBAAD;AAAc,UAAA,GAAG,EAAC,MAAlB;AAAyB,UAAA,OAAO,EAAE,iBAAAI,CAAC;AAAA,mBAAI,MAAKS,kBAAL,CAAwBT,CAAxB,EAA2B,MAA3B,CAAJ;AAAA;AAAnC,kBADa,EAIb,gCAAC,uBAAD;AAAc,UAAA,GAAG,EAAC,MAAlB;AAAyB,UAAA,OAAO,EAAE,iBAAAA,CAAC;AAAA,mBAAI,MAAKS,kBAAL,CAAwBT,CAAxB,EAA2B,MAA3B,CAAJ;AAAA;AAAnC,kBAJa,EAOb,gCAAC,uBAAD;AAAc,UAAA,GAAG,EAAC,QAAlB;AAA2B,UAAA,OAAO,EAAE,iBAAAA,CAAC;AAAA,mBAAI,MAAKS,kBAAL,CAAwBT,CAAxB,EAA2B,QAA3B,CAAJ;AAAA;AAArC,oBAPa;AAXjB,QADF;AAyBD,K;;0EAEqB,YAAM;AAAA,UAClBH,eADkB,GACE,MAAKK,KADP,CAClBL,eADkB;AAG1B,aACE,gCAAC,mBAAD;AACE,QAAA,QAAQ,EAAE,MAAKa,mBADjB;AAEE,QAAA,QAAQ,EAAEH,4BAAiBC,KAF7B;AAGE,QAAA,MAAM,EAAE,gCAAC,sBAAD;AAAa,UAAA,QAAQ,EAAE,MAAKE;AAA5B,UAHV;AAIE,QAAA,MAAM,EAAEb,eAJV;AAKE,QAAA,OAAO,MALT;AAME,QAAA,aAAa,EAAE,CACb,gCAAC,uBAAD;AAAc,UAAA,GAAG,EAAC,UAAlB;AAA6B,UAAA,OAAO,EAAE,iBAAAG,CAAC;AAAA,mBAAI,MAAKW,mBAAL,CAAyBX,CAAzB,EAA4B,UAA5B,CAAJ;AAAA;AAAvC,sBADa,EAIb,gCAAC,uBAAD;AAAc,UAAA,GAAG,EAAC,UAAlB;AAA6B,UAAA,OAAO,EAAE,iBAAAA,CAAC;AAAA,mBAAI,MAAKW,mBAAL,CAAyBX,CAAzB,EAA4B,UAA5B,CAAJ;AAAA;AAAvC,sBAJa,EAOb,gCAAC,uBAAD;AAAc,UAAA,UAAU,MAAxB;AAAyB,UAAA,GAAG,EAAC,iBAA7B;AAA+C,UAAA,OAAO,EAAE,iBAAAA,CAAC;AAAA,mBAAI,MAAKW,mBAAL,CAAyBX,CAAzB,EAA4B,iBAA5B,CAAJ;AAAA;AAAzD,6BAPa;AANjB,QADF;AAoBD,K;;;;;;;6BAEQ;AACP,aACE,gCAAC,kBAAD;AAAS,QAAA,SAAS,EAAC,oCAAnB;AAAwD,QAAA,KAAK,EAAE;AAAEY,UAAAA,YAAY,EAAE;AAAhB;AAA/D,SACE,gCAAC,uBAAD,QACE,gCAAC,sBAAD,QAAc,KAAKC,wBAAL,EAAd,CADF,EAEE,gCAAC,sBAAD;AAAa,QAAA,SAAS,EAAC;AAAvB,SAAqC,KAAKC,iBAAL,EAArC,CAFF,CADF,EAKE,gCAAC,uBAAD,QACE,gCAAC,sBAAD,QACE,gCAAC,iBAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,sBAAW;AAArC,oBADF,CADF,EAME,gCAAC,sBAAD;AAAa,QAAA,SAAS,EAAC;AAAvB,SACE,gCAAC,iBAAD;AAAQ,QAAA,OAAO,EAAC,OAAhB;AAAwB,sBAAW;AAAnC,oBADF,CANF,EAWE,gCAAC,sBAAD,QAAc,KAAKC,mBAAL,EAAd,CAXF,CALF,CADF;AAqBD;;;;EA1H8BC,kBAAMC,S","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  DropdownToggle,\n  DropdownItem,\n  KebabToggle,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\n\nexport class ViewToolbar extends React.Component {\n  state = {\n    filterType: 'Name',\n    filterValue: '',\n    filterDropDownOpen: false,\n    actionKebabOpen: false\n  };\n\n  onFilterDropDownToggle = isOpen => {\n    this.setState({ filterDropDownOpen: isOpen });\n  }\n\n  onFilterTypeSelect = (e, filterType) => {\n    e.preventDefault();\n    this.setState({\n      filterType,\n      filterDropDownOpen: false,\n      filterValue: filterType === this.state.filterType ? this.state.filterValue : ''\n    });\n  }\n\n  handleFilterInputChange = value => {\n    this.setState({ filterValue: value });\n  }\n\n  onActionKebabToggle = isOpen => {\n    this.setState({ actionKebabOpen: isOpen });\n  }\n\n  onActionKebabSelect = (e, action) => {\n    e.preventDefault();\n    this.setState({ actionKebabOpen: false });\n  }\n\n  renderFilterInput = () => {\n    const { filterValue } = this.state;\n    return (\n      <TextInput\n        value={filterValue || ''}\n        type=\"text\"\n        onChange={this.handleFilterInputChange}\n        aria-label=\"filter text input\"\n      />\n    );\n  }\n\n  renderFilterTypeDropdown = () => {\n    const { filterDropDownOpen, filterType } = this.state;\n    return (\n      <Dropdown\n        onToggle={this.onFilterDropDownToggle}\n        position={DropdownPosition.right}\n        className=\"topology-view-filter-dropdown\"\n        toggle={\n          <DropdownToggle onToggle={this.onFilterDropDownToggle}>\n            <FilterIcon className=\"pf-u-mr-sm\" />\n            {filterType}\n          </DropdownToggle>\n        }\n        isOpen={filterDropDownOpen}\n        dropdownItems={[\n          <DropdownItem key=\"name\" onClick={e => this.onFilterTypeSelect(e, 'Name')}>\n            Name\n          </DropdownItem>,\n          <DropdownItem key=\"type\" onClick={e => this.onFilterTypeSelect(e, 'Type')}>\n            Type\n          </DropdownItem>,\n          <DropdownItem key=\"status\" onClick={e => this.onFilterTypeSelect(e, 'Status')}>\n            Status\n          </DropdownItem>\n        ]}\n      />\n    );\n  }\n\n  renderActionsdKebab = () => {\n    const { actionKebabOpen } = this.state;\n\n    return (\n      <Dropdown\n        onToggle={this.onActionKebabToggle}\n        position={DropdownPosition.right}\n        toggle={<KebabToggle onToggle={this.onActionKebabToggle} />}\n        isOpen={actionKebabOpen}\n        isPlain\n        dropdownItems={[\n          <DropdownItem key=\"action-3\" onClick={e => this.onActionKebabSelect(e, 'Action 3')}>\n            Action 3\n          </DropdownItem>,\n          <DropdownItem key=\"action-4\" onClick={e => this.onActionKebabSelect(e, 'Action 4')}>\n            Action 4\n          </DropdownItem>,\n          <DropdownItem isDisabled key=\"disabled-action\" onClick={e => this.onActionKebabSelect(e, 'Disabled Action')}>\n            Disabled Action\n          </DropdownItem>\n        ]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <Toolbar className=\"view-toolbar pf-u-px-md pf-u-py-md\" style={{ borderBottom: '1px solid #ccc' }}>\n        <ToolbarGroup>\n          <ToolbarItem>{this.renderFilterTypeDropdown()}</ToolbarItem>\n          <ToolbarItem className=\"pf-u-mr-md\">{this.renderFilterInput()}</ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem>\n            <Button variant=\"primary\" aria-label=\"Action 1\">\n              Action 1\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem className=\"pf-u-mx-md\">\n            <Button variant=\"plain\" aria-label=\"Action 2\">\n              Action 2\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>{this.renderActionsdKebab()}</ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n  }\n}\n"],"file":"ViewToolbar.js"}