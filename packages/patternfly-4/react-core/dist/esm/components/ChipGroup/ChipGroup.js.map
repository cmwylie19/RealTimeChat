{"version":3,"sources":["../../../../src/components/ChipGroup/ChipGroup.tsx"],"names":["React","styles","css","Chip","fillTemplate","ChipGroupContext","createContext","ChipGroup","Component","constructor","props","setState","prevState","isOpen","state","defaultIsOpen","renderToolbarGroup","headingLevel","toggleCollapse","renderChipGroup","className","chipGroup","render","withToolbar","children","Children","count","expandedText","collapsedText","numChips","InnerChipGroup","onToggleCollapse","collapsedTextResult","remaining","mappedChildren","map","c","child","cloneElement","toArray","chip","component","i"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Chip } from './Chip';\nimport { fillTemplate } from '../../helpers';\n\nexport const ChipGroupContext = React.createContext('');\n\nexport interface ChipGroupProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the chip text */\n  children?: React.ReactNode;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag for having the chip group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */\n  collapsedText?: string;\n  /** Flag for grouping with a toolbar & category name */\n  withToolbar?: boolean;\n  /** Set heading level to the chip item label */\n  headingLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n  /** Set number of chips to show before overflow */\n  numChips?: number; \n}\n\ninterface ChipGroupState {\n  isOpen: boolean;\n}\n\nexport class ChipGroup extends React.Component<ChipGroupProps, ChipGroupState> {\n  constructor(props: ChipGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen\n    };\n  }\n\n  static defaultProps = {\n    className: '',\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    withToolbar: false, \n    defaultIsOpen: false,\n    numChips: 3\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  };\n\n  renderToolbarGroup() {\n    const { isOpen } = this.state;\n    const { headingLevel = 'h4' } = this.props;\n    return (\n      <ChipGroupContext.Provider value={headingLevel}>\n        <InnerChipGroup\n          {...this.props}\n          isOpen={isOpen}\n          onToggleCollapse={this.toggleCollapse}\n        />\n      </ChipGroupContext.Provider>\n    );\n  }\n\n  renderChipGroup() {\n    const { className } = this.props;\n    const { isOpen } = this.state;\n    return (\n      <ul className={css(styles.chipGroup, className)}>\n        <InnerChipGroup\n          {...this.props}\n          isOpen={isOpen}\n          onToggleCollapse={this.toggleCollapse}\n        />\n      </ul>\n    );\n  }\n\n  render() {\n    const { withToolbar, children } = this.props;\n    if (React.Children.count(children)) {\n      return withToolbar ? this.renderToolbarGroup() : this.renderChipGroup();\n    }\n    return null;\n  }\n}\n\ninterface InnerChipGroupProps extends ChipGroupProps {\n  isOpen: boolean;\n  onToggleCollapse: () => void;\n}\n\nconst InnerChipGroup = (props: InnerChipGroupProps) => {\n  const { children, expandedText, isOpen, onToggleCollapse, collapsedText, withToolbar, numChips } = props;\n  \n  const collapsedTextResult = fillTemplate(collapsedText as string, { remaining: React.Children.count(children) - numChips });\n  const mappedChildren = React.Children.map(children, (c) => {\n    const child = c as React.ReactElement<any>;\n    if (withToolbar) {\n      return React.cloneElement(child, {\n        children: React.Children.toArray(child.props.children).map((chip: any) => {\n          return React.cloneElement(chip, { component: 'li' });\n        })\n      });\n    }\n    return React.cloneElement(child, {\n      component: 'li'\n    });\n  });\n  return (\n    <React.Fragment>\n      {isOpen ? (\n        <React.Fragment>{mappedChildren}</React.Fragment>\n      ) : (\n        <React.Fragment>\n          {mappedChildren.map((child, i) => {\n            if (i < numChips) {\n              return child;\n            }\n          })}\n        </React.Fragment>\n      )}\n      {React.Children.count(children) > numChips && (\n        <Chip isOverflowChip onClick={onToggleCollapse} component={withToolbar ? 'div' : 'li'}>\n          {isOpen ? expandedText : collapsedTextResult}\n        </Chip>\n      )}\n    </React.Fragment>\n  );\n};\n"],"file":"ChipGroup.js"}