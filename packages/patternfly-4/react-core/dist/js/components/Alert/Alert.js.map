{"version":3,"sources":["../../../../src/components/Alert/Alert.tsx"],"names":["AlertVariant","Alert","variant","info","isInline","variantLabel","ariaLabel","action","title","children","className","props","readerTitle","accessibleStyles","screenReader","customClassName","styles","alert","modifiers","inline","alertTitle","alertDescription","alertAction","React","cloneElement"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;IAGYA,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y;;AA4BL,IAAMC,KAA0C,GAAG,SAA7CA,KAA6C,OAUxC;AAAA,0BAThBC,OASgB;AAAA,MAThBA,OASgB,6BATNF,YAAY,CAACG,IASP;AAAA,2BARhBC,QAQgB;AAAA,MARhBA,QAQgB,8BARL,KAQK;AAAA,+BAPhBC,YAOgB;AAAA,MAPhBA,YAOgB,4CAPE,sBAAWH,OAAX,CAOF;AAAA,4BANhB,YAMgB;AAAA,MANFI,SAME,yCANa,sBAAWJ,OAAX,CAMb;AAAA,yBALhBK,MAKgB;AAAA,MALhBA,MAKgB,4BALP,IAKO;AAAA,MAJhBC,KAIgB,QAJhBA,KAIgB;AAAA,2BAHhBC,QAGgB;AAAA,MAHhBA,QAGgB,8BAHL,EAGK;AAAA,4BAFhBC,SAEgB;AAAA,MAFhBA,SAEgB,+BAFJ,EAEI;AAAA,MADbC,KACa;;AAChB,MAAMC,WAAW,GACf,oBAAC,KAAD,CAAO,QAAP,QACE;AAAM,IAAA,SAAS,EAAE,sBAAIC,0BAAiBC,YAArB;AAAjB,KAAsDT,YAAtD,CADF,EAEGG,KAFH,CADF;AAOA,MAAMO,eAAe,GAAG,sBAAIC,kBAAOC,KAAX,EAAkBb,QAAQ,IAAIY,kBAAOE,SAAP,CAAiBC,MAA/C,EAAwDjB,OAAO,KAAKF,YAAY,WAAzB,IAAuC,8BAAYgB,iBAAZ,EAAoBd,OAApB,EAA6Bc,kBAAOE,SAAP,CAAiBf,IAA9C,CAA9F,EAAmJO,SAAnJ,CAAxB;AAEA,SACE,wCAASC,KAAT;AAAgB,IAAA,SAAS,EAAEI,eAA3B;AAA4C,kBAAYT;AAAxD,MACE,oBAAC,oBAAD;AAAW,IAAA,OAAO,EAAEJ;AAApB,IADF,EAEE;AAAI,IAAA,SAAS,EAAE,sBAAIc,kBAAOI,UAAX;AAAf,KAAwCR,WAAxC,CAFF,EAGGH,QAAQ,IACP;AAAK,IAAA,SAAS,EAAE,sBAAIO,kBAAOK,gBAAX;AAAhB,KACGZ,QADH,CAJJ,EAQGF,MAAM,IACL;AAAK,IAAA,SAAS,EAAE,sBAAIS,kBAAOM,WAAX;AAAhB,KAA0CC,KAAK,CAACC,YAAN,CAAmBjB,MAAnB,EAAkC;AAAEC,IAAAA,KAAK,EAALA,KAAF;AAASH,IAAAA,YAAY,EAAZA;AAAT,GAAlC,CAA1C,CATJ,CADF;AAcD,CAlCM;;;;AAjBLH,EAAAA,O,+BAAU,S,EAAY,Q,EAAW,S,EAAY,M,EAAS,S;AAEtDE,EAAAA,Q;AAEAI,EAAAA,K;AAEAD,EAAAA,M;AAEAE,EAAAA,Q;AAEAC,EAAAA,S;AAEA,c;AAEAL,EAAAA,Y","sourcesContent":["import * as React from 'react';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Alert/alert';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { AlertIcon } from './AlertIcon';\nimport { capitalize } from '../../helpers/util';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport enum AlertVariant {\n  success = 'success',\n  danger = 'danger',\n  warning = 'warning',\n  info = 'info',\n  default = 'default'\n}\n\nexport interface AlertProps\n  extends Omit<React.HTMLProps<HTMLDivElement>, 'action' | 'title'> {\n  /** Adds Alert variant styles  */\n  variant?: 'success' | 'danger' | 'warning' | 'info' | 'default';\n  /** Flag to indicate if the Alert is inline */\n  isInline?: boolean;\n  /** Title of the Alert  */\n  title: React.ReactNode;\n  /** Action button to put in the Alert. Should be <AlertActionLink> or <AlertActionCloseButton> */\n  action?: React.ReactNode;\n  /** Content rendered inside the Alert */\n  children?: React.ReactNode;\n  /** Additional classes added to the Alert  */\n  className?: string;\n  /** Adds accessible text to the Alert */\n  'aria-label'?: string;\n  /** Variant label text for screen readers */\n  variantLabel?: string;\n}\n\nexport const Alert: React.FunctionComponent<AlertProps> = ({\n  variant = AlertVariant.info,\n  isInline = false,\n  variantLabel = `${capitalize(variant)} alert:`,\n  'aria-label': ariaLabel = `${capitalize(variant)} Alert`,\n  action = null,\n  title,\n  children = '',\n  className = '',\n  ...props\n}: AlertProps) => {\n  const readerTitle = (\n    <React.Fragment>\n      <span className={css(accessibleStyles.screenReader)}>{variantLabel}</span>\n      {title}\n    </React.Fragment>\n  );\n\n  const customClassName = css(styles.alert, isInline && styles.modifiers.inline, (variant !== AlertVariant.default ) && getModifier(styles, variant, styles.modifiers.info), className);\n\n  return (\n    <div {...props} className={customClassName} aria-label={ariaLabel}>\n      <AlertIcon variant={variant} />\n      <h4 className={css(styles.alertTitle)}>{readerTitle}</h4>\n      {children && (\n        <div className={css(styles.alertDescription)}>\n          {children}\n        </div>\n      )}\n      {action && (\n        <div className={css(styles.alertAction)}>{React.cloneElement(action as any, { title, variantLabel })}</div>\n      )}\n    </div>\n  );\n};\n"],"file":"Alert.js"}