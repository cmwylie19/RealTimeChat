{"version":3,"sources":["../../../../../src/components/Table/utils/utils.tsx"],"names":["hasCompoundParentsExpanded","parentId","compoundParent","rows","i","hasOwnProperty","parent","cells","props","isOpen","hasParentsExpanded","isRowExpanded","row","undefined"],"mappings":"AAEA,MAAMA,0BAA0B,GAAG,CAACC,QAAD,EAAmBC,cAAnB,EAA2CC,IAA3C,KAA4D;AAC7F;AACA,OAAK,MAAMC,CAAX,IAAgBD,IAAhB,EAAsB;AACpB,QAAIA,IAAI,CAACF,QAAD,CAAJ,CAAeI,cAAf,CAA8B,QAA9B,CAAJ,EAA6C;AAC3CJ,MAAAA,QAAQ,GAAGE,IAAI,CAACF,QAAD,CAAJ,CAAeK,MAA1B;AACD,KAFD,MAEO;AACL,aAAQH,IAAI,CAACF,QAAD,CAAJ,CAAeM,KAAf,CAAqBL,cAArB,CAAD,CAAmDM,KAAnD,CAAyDC,MAAhE;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAVD;;AAYA,MAAMC,kBAAkB,GAAG,CAACT,QAAD,EAAmBE,IAAnB,KAAoC;AAC7D;AACA,OAAK,MAAMC,CAAX,IAAgBD,IAAhB,EAAsB;AACpB,QAAIA,IAAI,CAACF,QAAD,CAAJ,CAAeI,cAAf,CAA8B,QAA9B,CAAJ,EAA6C;AAC3CJ,MAAAA,QAAQ,GAAGE,IAAI,CAACF,QAAD,CAAJ,CAAeK,MAA1B;AACD,KAFD,MAEO;AACL,aAAOH,IAAI,CAACF,QAAD,CAAJ,CAAeQ,MAAtB;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAVD;;AAYA,OAAO,MAAME,aAAa,GAAG,CAACC,GAAD,EAAYT,IAAZ,KAA6B;AACxD,MAAIS,GAAG,CAACN,MAAJ,KAAeO,SAAnB,EAA8B;AAC5B,QAAID,GAAG,CAACP,cAAJ,CAAmB,gBAAnB,CAAJ,EAA0C;AACxC,aAAOL,0BAA0B,CAACY,GAAG,CAACN,MAAL,EAAaM,GAAG,CAACV,cAAjB,EAAiCC,IAAjC,CAAjC;AACD;;AACD,WAAOO,kBAAkB,CAACE,GAAG,CAACN,MAAL,EAAaH,IAAb,CAAlB,IAAwCA,IAAI,CAACS,GAAG,CAACN,MAAL,CAAJ,CAAiBG,MAAhE;AACD;;AACD,SAAOI,SAAP;AACD,CARM","sourcesContent":["import { IRow, IRowCell } from '../Table';\n\nconst hasCompoundParentsExpanded = (parentId: number, compoundParent: number, rows: IRow[]) => {\n  // max rows.length parents\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return (rows[parentId].cells[compoundParent] as IRowCell).props.isOpen;\n    }\n  }\n  return false;\n};\n\nconst hasParentsExpanded = (parentId: number, rows: IRow[]) => {\n  // max rows.length parents\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].isOpen;\n    }\n  }\n  return false;\n};\n\nexport const isRowExpanded = (row: IRow, rows: IRow[]) => {\n  if (row.parent !== undefined) {\n    if (row.hasOwnProperty('compoundParent')) {\n      return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n    }\n    return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n  }\n  return undefined;\n};\n"],"file":"utils.js"}