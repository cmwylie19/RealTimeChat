{"version":3,"sources":["../../../src/helpers/util.ts"],"names":["capitalize","input","toUpperCase","substring","getUniqueId","prefix","uid","Date","getTime","Math","random","toString","slice","debounce","func","wait","timeout","args","clearTimeout","setTimeout","apply","isElementInView","container","element","partial","containerBounds","getBoundingClientRect","elementBounds","containerBoundsLeft","floor","left","containerBoundsRight","right","elementBoundsLeft","elementBoundsRight","isTotallyInView","isPartiallyInView","sideElementIsOutOfView","isOffLeft","isOffRight","side","SIDE","NONE","BOTH","RIGHT","LEFT","fillTemplate","templateString","templateVars","Function","Object","keys","values","keyHandler","index","position","refsCollection","kids","custom","Array","isArray","nextIndex","length","focus","ReactDOM","findDOMNode","getNextIndex","collection","pluralize","i","singular","plural","formatBreakpointMods","breakpointMods","styles","reduce","acc","curr","modifier","breakpoint"],"mappings":"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","sourcesContent":["import * as ReactDOM from 'react-dom';\nimport { SIDE } from './constants';\nimport { getModifier } from '@patternfly/react-styles';\nimport { DataToolbarBreakpointMod } from '../experimental/components/DataToolbar/DataToolbarUtils';\nimport { FlexBreakpointMod, FlexItemBreakpointMod }  from '../layouts/Flex/FlexUtils';\n\nexport function capitalize(input: string) {\n  return input[0].toUpperCase() + input.substring(1);\n}\n\nexport function getUniqueId(prefix = 'pf') {\n  const uid =\n    new Date().getTime() +\n    Math.random()\n      .toString(36)\n      .slice(2);\n  return `${prefix}-${uid}`;\n}\n\nexport function debounce(this: any, func: (...args: any[]) => any, wait: number) {\n  let timeout: number;\n  return (...args: any[]) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait) as any;\n  };\n}\n\n/** This function returns whether or not an element is within the viewable area of a container. If partial is true,\n * then this function will return true even if only part of the element is in view.\n * @param {HTMLElement} container  The container to check if the element is in view of.\n * @param {HTMLElement} element    The element to check if it is view\n * @param {boolean} partial   true if partial view is allowed\n *\n * @return {type} True if the component is in View.\n */\nexport function isElementInView(container: HTMLElement, element: HTMLElement, partial: boolean) {\n  const containerBounds = container.getBoundingClientRect();\n  const elementBounds = element.getBoundingClientRect();\n  const containerBoundsLeft = Math.floor(containerBounds.left);\n  const containerBoundsRight = Math.floor(containerBounds.right);\n  const elementBoundsLeft = Math.floor(elementBounds.left);\n  const elementBoundsRight = Math.floor(elementBounds.right);\n\n  // Check if in view\n  const isTotallyInView = elementBoundsLeft >= containerBoundsLeft && elementBoundsRight <= containerBoundsRight;\n  const isPartiallyInView =\n    partial &&\n    ((elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft) ||\n      (elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight));\n\n  // Return outcome\n  return isTotallyInView || isPartiallyInView;\n}\n\n/** This function returns the side the element is out of view on (right, left or both)\n * @param {HTMLElement} container    The container to check if the element is in view of.\n * @param {HTMLElement} element      The element to check if it is view\n *\n * @return {type} right if the element is of the right, left if element is off the left or both if it is off on both sides.\n */\nexport function sideElementIsOutOfView(container: HTMLElement, element: HTMLElement): string {\n  const containerBounds = container.getBoundingClientRect();\n  const elementBounds = element.getBoundingClientRect();\n  const containerBoundsLeft = Math.floor(containerBounds.left);\n  const containerBoundsRight = Math.floor(containerBounds.right);\n  const elementBoundsLeft = Math.floor(elementBounds.left);\n  const elementBoundsRight = Math.floor(elementBounds.right);\n\n  // Check if in view\n  const isOffLeft = elementBoundsLeft < containerBoundsLeft;\n  const isOffRight = elementBoundsRight > containerBoundsRight;\n\n  let side = SIDE.NONE;\n\n  if (isOffRight && isOffLeft) {\n    side = SIDE.BOTH;\n  } else if (isOffRight) {\n    side = SIDE.RIGHT;\n  } else if (isOffLeft) {\n    side = SIDE.LEFT;\n  }\n  // Return outcome\n  return side;\n}\n\n/** Interpolates a parameterized templateString using values from a templateVars object.\n * The templateVars object should have keys and values which match the templateString's parameters.\n * Example:\n *    const templateString: 'My name is ${firstName} ${lastName}';\n *    const templateVars: {\n *      firstName: 'Jon'\n *      lastName: 'Dough'\n *    };\n *    const result = fillTemplate(templateString, templateVars);\n *    // \"My name is Jon Dough\"\n * @param {Object} templateString  The string passed by the consumer\n * @param {Object} templateVars The variables passed to the string\n *\n * @return {type} The template string literal result\n */\nexport function fillTemplate(templateString: string, templateVars: any) {\n  const func = new Function(...Object.keys(templateVars), `return \\`${templateString}\\`;`);\n  return func(...Object.values(templateVars));\n}\n\n/** This function allows for keyboard navigation through dropdowns. The custom argument is optional.\n * @param {number} index The index of the element you're on\n * @param {string} position The orientation of the dropdown\n * @param {string[]} refsCollection Array of refs to the items in the dropdown\n * @param {Object[]} kids Array of items in the dropdown\n * @param {boolean} [custom] Allows for handling of flexible content\n */\nexport function keyHandler(index: number, position: string, refsCollection: any[], kids: any[], custom = false) {\n  if (!Array.isArray(kids)) {\n    return;\n  }\n  let nextIndex;\n  if (position === 'up') {\n    if (index === 0) {\n      // loop back to end\n      nextIndex = kids.length - 1;\n    } else {\n      nextIndex = index - 1;\n    }\n  } else if (index === kids.length - 1) {\n    // loop back to beginning\n    nextIndex = 0;\n  } else {\n    nextIndex = index + 1;\n  }\n  if (refsCollection[nextIndex] === null) {\n    keyHandler(nextIndex, position, refsCollection, kids, custom);\n  } else if (custom) {\n    if (refsCollection[nextIndex].focus) {\n      refsCollection[nextIndex].focus();\n    }\n    const element = ReactDOM.findDOMNode(refsCollection[nextIndex]) as HTMLElement;\n    element.focus();\n  } else {\n    refsCollection[nextIndex].focus();\n  }\n}\n\n/** This function is a helper for keyboard navigation through dropdowns.\n * @param {number} index The index of the element you're on\n * @param {string} position The orientation of the dropdown\n * @param {string[]} collection Array of refs to the items in the dropdown\n */\nexport function getNextIndex(index: number, position: string, collection: any[]) {\n  let nextIndex;\n  if (position === 'up') {\n    if (index === 0) {\n      // loop back to end\n      nextIndex = collection.length - 1;\n    } else {\n      nextIndex = index - 1;\n    }\n  } else if (index === collection.length - 1) {\n    // loop back to beginning\n    nextIndex = 0;\n  } else {\n    nextIndex = index + 1;\n  }\n  if (collection[nextIndex] === null) {\n    getNextIndex(nextIndex, position, collection);\n  } else {\n    return nextIndex;\n  }\n}\n\n/** This function is a helper for pluralizing strings.\n * @param {number} i The quantity of the string you want to pluralize\n * @param {string} singular The singular version of the string\n * @param {string} plural The change to the string that should occur if the quantity is not equal to 1.\n *                 Defaults to adding an 's'.\n */\nexport function pluralize(i: number, singular: string, plural?: string) {\n  if (!plural) {\n    plural = `${singular}s`;\n  }\n  return `${i || 0} ${i === 1 ? singular : plural}`;\n}\n\n/** This function is a helper for turning arrays of breakpointMod objects for data toolbar and flex into classes\n * @param {(DataToolbarBreakpointMod | FlexBreakpointMod | FlexItemBreakpointMod)[]} breakpointMods The modifiers object\n * @param {any} styles The appropriate styles object for the component\n */\nexport const formatBreakpointMods = (breakpointMods: (DataToolbarBreakpointMod | FlexBreakpointMod | FlexItemBreakpointMod)[], styles: any) => {\n  return breakpointMods.reduce((acc: string, curr: (DataToolbarBreakpointMod | FlexBreakpointMod | FlexItemBreakpointMod)) => (\n    `${acc}${acc && ' '}${getModifier(styles, `${curr.modifier}${curr.breakpoint  ? `-on-${curr.breakpoint}` : ''}`)}`\n  ), '');\n};\n"],"file":"util.js"}