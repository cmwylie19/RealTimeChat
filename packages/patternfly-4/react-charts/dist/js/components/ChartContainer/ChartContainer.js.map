{"version":3,"sources":["../../../../src/components/ChartContainer/ChartContainer.tsx"],"names":["ChartContainer","className","themeColor","themeVariant","theme","rest","chartClassName","children","containerId","containerRef","desc","events","height","responsive","style","title","width","VictoryContainer"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAKA;;;;;;;;;;;;;;AAsGO,IAAMA,cAA4D,GAAG,SAA/DA,cAA+D,OAQjD;AAAA,MAPzBC,SAOyB,QAPzBA,SAOyB;AAAA,MANzBC,UAMyB,QANzBA,UAMyB;AAAA,MALzBC,YAKyB,QALzBA,YAKyB;AAAA,wBAFzBC,KAEyB;AAAA,MAFzBA,KAEyB,2BAFjB,0BAASF,UAAT,EAAqBC,YAArB,CAEiB;AAAA,MADtBE,IACsB;;AACzB,MAAMC,cAAc,GAAG,8BAAa;AAACL,IAAAA,SAAS,EAATA;AAAD,GAAb,CAAvB,CADyB,CAGzB;AACA;;AACA,SAAO,oBAAC,yBAAD;AAAkB,IAAA,SAAS,EAAEK,cAA7B;AAA6C,IAAA,KAAK,EAAEF;AAApD,KAA+DC,IAA/D,EAAP;AACD,CAdM,C,CAgBP;;;;;AA1GEE,EAAAA,Q;AAIAN,EAAAA,S;AAKAO,EAAAA,W;AAMAC,EAAAA,Y;AASAC,EAAAA,I;AASAC,EAAAA,M;AAMAC,EAAAA,M;AAKAC,EAAAA,U;AASAC,EAAAA,K;AAKAV,EAAAA,K;AAQAF,EAAAA,U;AAQAC,EAAAA,Y;AAOAY,EAAAA,K;AAMAC,EAAAA,K;;AAoBF,sCAAqBhB,cAArB,EAAqCiB,yBAArC","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  VictoryContainer,\n  VictoryContainerProps\n} from 'victory';\nimport { ChartThemeDefinition } from '../ChartTheme';\nimport { getClassName, getTheme } from '../ChartUtils';\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n *\n * Note: VictoryContainer may support other props (e.g., children), but they're undocumented and not typed\n */\nexport interface ChartContainerProps extends VictoryContainerProps {\n  /**\n   * The children prop specifies the child or children that will be rendered within the container. This prop should not\n   * be set manually. It will be set by whatever Victory component is rendering the container.\n   */\n  children?: React.ReactNode | React.ReactNode[];\n  /**\n   * The className prop specifies a className that will be applied to the outer-most div rendered by ChartContainer\n   */\n  className?: string;\n  /**\n   * The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\n   * set, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing.\n   */\n  containerId?: number | string;\n  /**\n   * The containerRef prop may be used to attach a ref to the outermost element rendered by the container.\n   *\n   * @example containerRef={(ref) => { this.chartRef = ref; }}\n   */\n  containerRef?: Function;\n  /**\n   * The desc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers. The more info about the chart provided in\n   * the description, the more usable it will be for people using screen readers.\n   * This prop defaults to an empty string.\n   * @example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\n   * not represented above 5% each.\"\n   */\n  desc?: string;\n  /**\n   * The events prop attaches arbitrary event handlers to the container component.\n   * Event handlers passed from other Victory components are called with their\n   * corresponding events as well as scale, style, width, height, and data when\n   * applicable. Use the invert method to convert event coordinate information to\n   * data. `scale.x.invert(evt.offsetX)`.\n   * @example {{ onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}}\n   */\n  events?: React.DOMAttributes<any>;\n  /**\n   * The height props specifies the height the svg viewBox of the container.\n   * This value should be given as a number of pixels. If no height prop\n   * is given, the height prop from the child component passed will be used.\n   */\n  height?: number;\n  /**\n   * The responsive prop specifies whether the rendered container should be a responsive container\n   * with a viewBox attribute, or a static container with absolute width and height.\n   */\n  responsive?: boolean;\n  /**\n   * The style prop specifies styles for your ChartContainer. Any valid inline style properties\n   * will be applied. Height and width should be specified via the height\n   * and width props, as they are used to calculate the alignment of\n   * components within the container. Styles from the child component will\n   * also be passed, if any exist.\n   * @example {border: 1px solid red}\n   */\n  style?: React.CSSProperties;\n  /**\n   * The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\n   * props defined in theme may be overwritten by props specified on the component instance.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The title prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers. The more descriptive this title is, the more\n   * useful it will be. If no title prop is passed, it will default to Chart.\n   * @example \"Popularity of Dog Breeds by Percentage\"\n   */\n  title?: string;\n  /**\n   * The width props specifies the width of the svg viewBox of the container\n   * This value should be given as a number of pixels. If no width prop\n   * is given, the width prop from the child component passed will be used.\n   */\n  width?: number;\n}\n\nexport const ChartContainer: React.FunctionComponent<ChartContainerProps> = ({\n  className,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  ...rest\n}: ChartContainerProps) => {\n  const chartClassName = getClassName({className});\n\n  // Note: theme is valid, but @types/victory is missing a prop type\n  // @ts-ignore\n  return <VictoryContainer className={chartClassName} theme={theme} {...rest} />;\n}\n\n// Note: VictoryContainer.role must be hoisted\nhoistNonReactStatics(ChartContainer, VictoryContainer);\n"],"file":"ChartContainer.js"}