{"version":3,"sources":["../../../../src/components/Popover/Popover.tsx"],"names":["React","PopoverBase","KEY_CODES","styles","css","getModifier","PopoverContent","PopoverBody","PopoverHeader","PopoverFooter","PopoverCloseButton","GenerateId","c_popover_MaxWidth","popoverMaxWidth","FocusTrap","require","PopoverPosition","Popover","Component","constructor","props","isVisible","tip","hide","shouldClose","event","keyCode","ESCAPE_KEY","state","hideOrNotify","popperChildren","tooltip","classList","add","popover","document","querySelectorAll","forEach","popper","_tippy","isOpen","setState","onHide","onHidden","onMount","hideOnOutsideClick","onShow","hideAllPopovers","onShown","componentDidMount","addEventListener","handleEscKeyClick","componentWillUnmount","removeEventListener","render","position","enableFlip","children","className","ariaLabel","headerContent","bodyContent","footerContent","appendTo","zIndex","maxWidth","closeBtnAriaLabel","distance","boundary","flipBehavior","tippyProps","rest","Error","content","randomId","clickOutsideDeactivates","modifiers","top","undefined","closePopover","handleEvents","shouldHideOnClick","storeTippyInstance","preventOverflow","enabled","body","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PopoverBase from '../../helpers/PopoverBase/PopoverBase';\nimport { Instance as TippyInstance, Props as TippyProps } from 'tippy.js';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/Popover/popover';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy.css';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy-overrides.css';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { PopoverContent } from './PopoverContent';\nimport { PopoverBody }  from './PopoverBody';\nimport { PopoverHeader } from './PopoverHeader';\nimport { PopoverFooter } from './PopoverFooter';\nimport { PopoverCloseButton } from './PopoverCloseButton';\nimport GenerateId from '../../helpers/GenerateId/GenerateId';\nimport { c_popover_MaxWidth as popoverMaxWidth } from '@patternfly/react-tokens';\nimport { ReactElement } from 'react';\n// Can't use ES6 imports :(\n// The types for it are also wrong, we should probably ditch this dependency.\n// tslint:disable-next-line\nconst FocusTrap: any = require('focus-trap-react');\n\nexport enum PopoverPosition {\n  auto = 'auto',\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right'\n}\n\nexport interface PopoverProps {\n  /** Accessible label, required when header is not present */\n  'aria-label'?: string;\n  /** The element to append the popover to, defaults to body */\n  appendTo?: Element | ((ref: Element) => Element);\n  /** Body content */\n  bodyContent: React.ReactNode;\n  /** If enableFlip is true, the popover responds to this boundary */\n  boundary?: 'scrollParent' | 'window' | 'viewport' | HTMLElement;\n  /** The reference element to which the popover is relatively placed to */\n  children: ReactElement<any>;\n  /** Popover additional class */\n  className?: string;\n  /** Aria label for the Close button */\n  closeBtnAriaLabel?: string;\n  /** Distance of the popover to its target, defaults to 25 */\n  distance?: number;\n  /** If true, tries to keep the popover in view by flipping it if necessary */\n  enableFlip?: boolean;\n  /**\n   * The desired position to flip the popover to if the initial position is not possible.\n   * By setting this prop to 'flip' it attempts to flip the popover to the opposite side if there is no space.\n   * You can also pass an array of positions that determines the flip order. It should contain the initial position\n   * followed by alternative positions if that position is unavailable.\n   * Example: Initial position is 'top'. Button with popover is in the top right corner. 'flipBehavior' is set to\n   * ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\n   * space to the right, so it finally shows the popover on the left.\n   */\n  flipBehavior?: 'flip' | ('top' | 'bottom' | 'left' | 'right')[];\n  /** Footer content */\n  footerContent?: React.ReactNode;\n  /** Header content, leave empty for no header */\n  headerContent?: React.ReactNode;\n  /** Hides the popover when a click occurs outside (only works if isVisible is not controlled by the user) */\n  hideOnOutsideClick?: boolean;\n  /**\n   * True to show the popover programmatically. Used in conjunction with the shouldClose prop.\n   * By default, the popover child element handles click events automatically. If you want to control this programmatically,\n   * the popover will not auto-close if the Close button is clicked, ESC key is used, or if a click occurs outside the popover.\n   * Instead, the consumer is responsible for closing the popover themselves by adding a callback listener for the shouldClose prop.\n   */\n  isVisible?: boolean;\n  /** Maximum width of the popover (default 18.75rem) */\n  maxWidth?: string;\n  /** Lifecycle function invoked when the popover has fully transitioned out. */\n  onHidden?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover begins to transition out. */\n  onHide?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover has been mounted to the DOM. */\n  onMount?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover begins to transition in. */\n  onShow?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover has fully transitioned in. */\n  onShown?: (tip: TippyInstance) => void;\n  /**\n   * Popover position. Note: With 'enableFlip' set to true,\n   * it will change the position if there is not enough space for the starting position.\n   * The behavior of where it flips to can be controlled through the flipBehavior prop.\n   */\n  position?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n  /**\n   * Callback function that is only invoked when isVisible is also controlled. Called when the popover Close button is\n   * clicked or the ESC key is used\n   */\n  shouldClose?: (tip: TippyInstance) => void;\n  /** z-index of the popover */\n  zIndex?: number;\n  /** additional Props to pass through to tippy.js */\n  tippyProps?: TippyProps;\n}\n\nexport interface PopoverState {\n  isOpen: boolean;\n}\n\nexport class Popover extends React.Component<PopoverProps, PopoverState> {\n  private tip: TippyInstance;\n  static defaultProps = {\n    \"position\": 'top',\n    \"enableFlip\": true,\n    \"className\": '',\n    \"isVisible\": null as boolean,\n    \"shouldClose\": (): void => null,\n    'aria-label': '',\n    \"headerContent\": null as typeof PopoverHeader,\n    \"footerContent\": null as typeof PopoverFooter,\n    \"appendTo\": () => document.body,\n    \"hideOnOutsideClick\": true,\n    \"onHide\": (): void => null,\n    \"onHidden\": (): void => null,\n    \"onShow\": (): void => null,\n    \"onShown\": (): void => null,\n    \"onMount\": (): void => null,\n    \"zIndex\": 9999,\n    \"maxWidth\": popoverMaxWidth && popoverMaxWidth.value,\n    \"closeBtnAriaLabel\": 'Close',\n    \"distance\": 25,\n    \"boundary\": 'window',\n    // For every initial starting position, there are 3 escape positions\n    \"flipBehavior\": ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n    \"tippyProps\": {}\n  };\n\n  constructor(props: PopoverProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  hideOrNotify = () => {\n    if (this.props.isVisible === null) {\n      // Handle closing\n      this.tip.hide();\n    } else {\n      // notify consumer\n      this.props.shouldClose(this.tip);\n    }\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.tip.state.isVisible) {\n      this.hideOrNotify();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  storeTippyInstance = (tip: TippyInstance) => {\n    tip.popperChildren.tooltip.classList.add(styles.popover);\n    this.tip = tip;\n  }\n\n  closePopover = () => {\n    this.hideOrNotify();\n  }\n\n  hideAllPopovers = () => {\n    document.querySelectorAll('.tippy-popper').forEach((popper: any) => {\n      if (popper._tippy) {\n        popper._tippy.hide();\n      }\n    });\n  }\n\n  onHide = (tip: TippyInstance)  => {\n    if (this.state.isOpen) {\n      this.setState({ isOpen: false });\n    }\n    return this.props.onHide(tip);\n  }\n\n  onHidden = (tip: TippyInstance)  => this.props.onHidden(tip);\n\n  onMount = (tip: TippyInstance)  => this.props.onMount(tip);\n\n  onShow = (tip: TippyInstance)  => {\n    const { hideOnOutsideClick, isVisible, onShow } = this.props;\n    // hide all other open popovers first if events are managed by us\n    if (!hideOnOutsideClick && isVisible === null) {\n      this.hideAllPopovers();\n    }\n    if (this.state.isOpen === false) {\n      this.setState({ isOpen: true });\n    }\n    return onShow(tip);\n  }\n\n  onShown = (tip: TippyInstance)  => this.props.onShown(tip);\n\n  render() {\n    const {\n      position,\n      enableFlip,\n      children,\n      className,\n      'aria-label': ariaLabel,\n      headerContent,\n      bodyContent,\n      footerContent,\n      isVisible,\n      shouldClose,\n      appendTo,\n      hideOnOutsideClick,\n      onHide,\n      onHidden,\n      onShow,\n      onShown,\n      onMount,\n      zIndex,\n      maxWidth,\n      closeBtnAriaLabel,\n      distance,\n      boundary,\n      flipBehavior,\n      tippyProps,\n      ...rest\n    } = this.props;\n\n    if (!headerContent && !ariaLabel) {\n      return new Error('aria-label is required when header is not used');\n    }\n\n    const content = (\n      <GenerateId>\n        {(randomId) =>\n          (\n            <FocusTrap active={this.state.isOpen} focusTrapOptions={{ clickOutsideDeactivates: true }}>\n              <div\n                className={css(\n                  !enableFlip && getModifier(styles, position, styles.modifiers.top),\n                  className\n                )}\n                role=\"dialog\"\n                aria-modal=\"true\"\n                aria-label={headerContent ? undefined : ariaLabel}\n                aria-labelledby={headerContent ? `popover-${randomId}-header` : undefined}\n                aria-describedby={`popover-${randomId}-body`}\n                {...rest}\n              >\n                <PopoverContent>\n                  <PopoverCloseButton onClose={this.closePopover} aria-label={closeBtnAriaLabel} />\n                  {headerContent && <PopoverHeader id={`popover-${randomId}-header`}>{headerContent}</PopoverHeader>}\n                  <PopoverBody id={`popover-${randomId}-body`}>{bodyContent}</PopoverBody>\n                  {footerContent && <PopoverFooter>{footerContent}</PopoverFooter>}\n                </PopoverContent>\n              </div>\n            </FocusTrap>\n          )\n        }\n      </GenerateId>\n    );\n    const handleEvents = isVisible === null;\n    const shouldHideOnClick = () => {\n      if (handleEvents) {\n        if (hideOnOutsideClick === true) {\n          return true;\n        }\n        return 'toggle';\n      }\n      return false;\n    };\n    return (\n      <PopoverBase\n        {...tippyProps}\n        arrow\n        onCreate={this.storeTippyInstance}\n        maxWidth={maxWidth}\n        zIndex={zIndex}\n        appendTo={appendTo}\n        content={content}\n        lazy\n        trigger={handleEvents ? 'click' : 'manual'}\n        isVisible={isVisible}\n        hideOnClick={shouldHideOnClick()}\n        animateFill={false}\n        theme=\"pf-popover\"\n        performance\n        interactive\n        interactiveBorder={0}\n        placement={position}\n        distance={distance}\n        flip={enableFlip}\n        flipBehavior={flipBehavior}\n        boundary={boundary}\n        popperOptions={{\n          modifiers: {\n            preventOverflow: {\n              enabled: enableFlip\n            },\n            hide: {\n              enabled: enableFlip\n            }\n          }\n        }}\n        onHide={(tip: TippyInstance) => this.onHide(tip)}\n        onHidden={(tip: TippyInstance) => this.onHidden(tip)}\n        onShow={(tip: TippyInstance) => this.onShow(tip)}\n        onShown={(tip: TippyInstance) => this.onShown(tip)}\n        onMount={(tip: TippyInstance) => this.onMount(tip)}\n      >\n        {children}\n      </PopoverBase>\n    );\n  }\n}\n"],"file":"Popover.js"}