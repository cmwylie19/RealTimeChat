{"version":3,"sources":["../../esm/build/util.js"],"names":["cssToJS","cssToJSNew","getFullCSS","getCSS","minifyCSS","writeCSSFile","writeCSSJSFile","getRelativeImportPath","getCSSOutputPath","packageName","styleSheetToken","cssString","cssOutputPath","useModules","cssRequire","cssImport","cssClasses","distinctValues","Set","classDeclaration","modifiersDeclaration","forEach","className","key","cleanClass","replace","trim","push","classSection","length","join","pathToCSSFile","rawCss","css","stringify","parse","compress","destinationPath","contents","path","dirname","then","replacementString","rootPath","originalPath","from","to","parsedTo","newImportPath","normalize","dir","base","startsWith","outDir","resolve","getFormattedCSSOutputPath","name","formattedDir","nodeText","nodeIndex","lastIndexOf","substring"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { readFileSync } from 'fs';\nimport css from 'css';\nimport { outputFileSync, ensureDir } from 'fs-extra';\nimport relative from 'relative';\nimport { getCSSClasses, isModifier, formatClassName } from '../utils';\nexport const packageName = '@patternfly/react-styles';\nexport const styleSheetToken = 'StyleSheet';\nexport function cssToJS(cssString, cssOutputPath = '', useModules = false) {\n  let cssRequire = '';\n  let cssImport = '';\n\n  if (cssOutputPath) {\n    cssRequire = `require('${cssOutputPath}');`;\n    cssImport = `import '${cssOutputPath}';`;\n  }\n\n  if (useModules) {\n    return `import { ${styleSheetToken} } from '${packageName}';\n${cssImport}\n\nexport default ${styleSheetToken}.parse(\\`${cssString}\\`);\n`;\n  }\n\n  return `const { ${styleSheetToken} } = require('${packageName}');\n${cssRequire}\n\nmodule.exports = ${styleSheetToken}.parse(\\`${cssString}\\`);\n`;\n}\nexport function cssToJSNew(cssString, cssOutputPath = '', useModules = false) {\n  let cssRequire = '';\n  let cssImport = '';\n\n  if (cssOutputPath) {\n    cssRequire = `require('${cssOutputPath}');`;\n    cssImport = `import '${cssOutputPath}';`;\n  }\n\n  const cssClasses = getCSSClasses(cssString);\n  const distinctValues = [...new Set(cssClasses)];\n  const classDeclaration = [];\n  const modifiersDeclaration = [];\n  distinctValues.forEach(className => {\n    const key = formatClassName(className);\n    const cleanClass = className.replace('.', '').trim();\n\n    if (isModifier(className)) {\n      modifiersDeclaration.push(`'${key}': '${cleanClass}'`);\n    } else {\n      classDeclaration.push(`${key}: '${cleanClass}'`);\n    }\n  });\n  const classSection = classDeclaration.length > 0 ? `${classDeclaration.join(',\\n  ')},` : '';\n\n  if (useModules) {\n    return `${cssImport}\n\nexport default {\n  ${classSection}\n  modifiers: {\n    ${modifiersDeclaration.join(',\\n    ')}\n  }\n}\n`;\n  }\n\n  return `${cssRequire}\n\nmodule.exports = {\n  ${classSection}\n  modifiers: {\n    ${modifiersDeclaration.join(',\\n    ')}\n  }\n}\n\n`;\n}\nexport function getFullCSS(pathToCSSFile) {\n  const rawCss = readFileSync(pathToCSSFile, 'utf8').replace('@charset \"UTF-8\";', '');\n  return rawCss;\n}\nexport function getCSS(pathToCSSFile) {\n  const rawCss = readFileSync(pathToCSSFile, 'utf8').replace('@charset \"UTF-8\";', '');\n  return minifyCSS(rawCss);\n}\nexport function minifyCSS(cssString) {\n  return css.stringify(css.parse(cssString.replace('@charset \"UTF-8\";', '')), {\n    compress: true\n  });\n}\nexport function writeCSSFile(destinationPath, contents) {\n  ensureDir(path.dirname(destinationPath)).then(() => {\n    const replacementString = contents.replace(/..\\/..\\/assets/g, '../../../../../styles/assets');\n    outputFileSync(destinationPath, replacementString);\n  });\n}\nexport function writeCSSJSFile(rootPath, originalPath, destinationPath, contents) {\n  outputFileSync(destinationPath, contents);\n}\nexport function getRelativeImportPath(from, to) {\n  const parsedTo = path.parse(to);\n  const newImportPath = path.normalize(path.join(relative(from, parsedTo.dir), parsedTo.base));\n  return newImportPath.startsWith('.') ? newImportPath : `./${newImportPath}`;\n}\nexport function getCSSOutputPath(outDir, rootPath, pathToCSSFile) {\n  return path.join(path.resolve(rootPath, outDir), getFormattedCSSOutputPath(pathToCSSFile));\n}\n\nfunction getFormattedCSSOutputPath(pathToCSSFile) {\n  const {\n    dir,\n    name\n  } = path.parse(pathToCSSFile);\n  let formattedDir = dir;\n  const nodeText = 'node_modules';\n  const nodeIndex = formattedDir.lastIndexOf(nodeText);\n\n  if (nodeIndex !== -1) {\n    formattedDir = formattedDir.substring(nodeIndex + nodeText.length);\n  }\n\n  return path.join(formattedDir, `${name}.css`);\n}\n//# sourceMappingURL=util.js.map"],"file":"util.js"}