{"version":3,"sources":["../../../../src/components/Pagination/PaginationOptionsMenu.tsx"],"names":["React","styles","paginationStyles","css","DropdownItem","DropdownDirection","DropdownWithContext","DropdownContext","CheckIcon","OptionsToggle","PaginationOptionsMenu","Component","constructor","props","createRef","isOpen","setState","prevState","perPageOptions","perPage","onPerPageSelect","perPageSuffix","map","value","title","event","paginationMenuText","optionsMenuMenuItemIcon","state","render","widgetId","isDisabled","itemsPerPageTitle","dropDirection","optionsToggle","toggleTemplate","firstIndex","lastIndex","itemCount","itemsTitle","id","onSelect","toggleIconClass","optionsMenuToggleIcon","toggleTextClass","optionsMenuToggleText","menuClass","optionsMenuMenu","itemClass","optionsMenuMenuItem","toggleClass","baseClass","optionsMenu","disabledClass","modifiers","disabled","menuComponent","baseComponent","length","onToggle","parentRef","current","renderItems","className","down"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport paginationStyles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport { Dropdown, DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport { CheckIcon } from '@patternfly/react-icons';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { PerPageOptions } from './Pagination';\n\nexport interface PaginationOptionsMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom class name added to the Pagination Options Menu */\n  className?: string;\n  /** Id added to the title of the Pagination Options Menu */\n  widgetId?: string;\n  /** Flag indicating if Pagination Options Menu is disabled */\n  isDisabled?: boolean;\n  /** Menu will open up or open down from the Options menu toggle */\n  dropDirection?: 'up' | 'down';\n  /** Array of titles and values which will be the options on the Options Menu dropdown */\n  perPageOptions?: PerPageOptions[];\n  /** The Title of the Pagination Options Menu */\n  itemsPerPageTitle?: string;\n  /** The suffix to be displayed after each option on the Options Menu dropdown */\n  perPageSuffix?: string;\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** The text to be displayed on the Options Toggle */\n  optionsToggle?: string;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** The number of items to be displayed per page */\n  perPage?: number;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Function called when user selects number of items per page. */\n  onPerPageSelect?: (event: React.MouseEvent | React.KeyboardEvent | MouseEvent, perPage: number) => void;\n}\n\ninterface PaginationOptionsMenuState {\n  isOpen: boolean;\n}\n\nexport class PaginationOptionsMenu extends React.Component<PaginationOptionsMenuProps, PaginationOptionsMenuState> {\n  private parentRef = React.createRef<HTMLDivElement>();\n  static defaultProps = {\n   className: '',\n   widgetId: '',\n   isDisabled: false,\n   dropDirection: DropdownDirection.down,\n   perPageOptions: [] as PerPageOptions[],\n   itemsPerPageTitle: 'Items per page',\n   perPageSuffix: 'per page',\n   optionsToggle: 'Select',\n   perPage: 0,\n   firstIndex: 0,\n   lastIndex: 0,\n   itemCount: 0,\n   itemsTitle: 'items',\n   toggleTemplate: ({firstIndex, lastIndex, itemCount, itemsTitle}: ToggleTemplateProps) => (\n     <React.Fragment>\n       <b>\n         {firstIndex} - {lastIndex}\n       </b>{' '}\n       of<b>{itemCount}</b> {itemsTitle}\n     </React.Fragment>\n   ),\n   onPerPageSelect: () => null as any\n };\n\n  constructor(props: PaginationOptionsMenuProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  onToggle = (isOpen: boolean) => {\n    this.setState({ isOpen });\n  }\n\n  onSelect = () => {\n    this.setState((prevState: PaginationOptionsMenuState) => {\n      return { isOpen: !prevState.isOpen };\n    });\n  }\n\n  renderItems = () => {\n    const { perPageOptions, perPage, onPerPageSelect, perPageSuffix } = this.props;\n\n    return perPageOptions.map(({ value, title }) => (\n      <DropdownItem\n        key={value}\n        component=\"button\"\n        data-action={`per-page-${value}`}\n        className={css(perPage === value && 'pf-m-selected')}\n        onClick={(event) => onPerPageSelect(event, value)}\n      >\n        {title}\n        <span className={css(paginationStyles.paginationMenuText)}>{` ${perPageSuffix}`}</span>\n        {perPage === value && (\n          <i className={css(styles.optionsMenuMenuItemIcon)}>\n            <CheckIcon />\n          </i>\n        )}\n      </DropdownItem>\n    ));\n  }\n\n  render() {\n    const { widgetId, isDisabled, itemsPerPageTitle, dropDirection, optionsToggle, perPageOptions, toggleTemplate, firstIndex, lastIndex, itemCount, itemsTitle } = this.props;\n    const { isOpen } = this.state;\n\n    return (\n      <DropdownContext.Provider\n        value={{\n          id: widgetId,\n          onSelect: this.onSelect, \n          toggleIconClass: styles.optionsMenuToggleIcon,\n          toggleTextClass: styles.optionsMenuToggleText,\n          menuClass: styles.optionsMenuMenu,\n          itemClass: styles.optionsMenuMenuItem,\n          toggleClass: \" \",\n          baseClass: styles.optionsMenu,\n          disabledClass: styles.modifiers.disabled,\n          menuComponent: 'ul',\n          baseComponent: 'div'\n        }}\n      >\n        <DropdownWithContext\n          direction={dropDirection}\n          isOpen={isOpen}\n          toggle={\n            <OptionsToggle\n              optionsToggle={optionsToggle}\n              itemsPerPageTitle={itemsPerPageTitle}\n              showToggle={perPageOptions && perPageOptions.length > 0}\n              onToggle={this.onToggle}\n              isOpen={isOpen}\n              widgetId={widgetId}\n              firstIndex={firstIndex}\n              lastIndex={lastIndex}\n              itemCount={itemCount}\n              itemsTitle={itemsTitle}\n              toggleTemplate={toggleTemplate}\n              parentRef={this.parentRef.current}\n              isDisabled={isDisabled}\n            />\n          }\n          dropdownItems={this.renderItems()}\n          isPlain\n        />\n      </DropdownContext.Provider>\n    );\n  }\n}\n"],"file":"PaginationOptionsMenu.js"}