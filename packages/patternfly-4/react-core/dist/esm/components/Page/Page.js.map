{"version":3,"sources":["../../../../src/components/Page/Page.tsx"],"names":["React","styles","css","global_breakpoint_md","globalBreakpointMd","debounce","PageLayouts","PageContext","createContext","PageContextProvider","Provider","PageContextConsumer","Consumer","Page","Component","constructor","props","onPageResize","windowSize","window","innerWidth","mobileView","Number","parseInt","value","setState","prevState","mobileIsNavOpen","state","desktopIsNavOpen","isManagedSidebar","defaultManagedSidebarIsOpen","managedSidebarOpen","componentDidMount","addEventListener","handleResize","componentWillUnmount","removeEventListener","render","breadcrumb","className","children","header","sidebar","skipToContent","mainContainerId","rest","context","onNavToggle","onNavToggleMobile","onNavToggleDesktop","isNavOpen","page","pageMain","pageMainBreadcrumb"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport { global_breakpoint_md as globalBreakpointMd } from '@patternfly/react-tokens';\nimport { debounce } from '../../helpers/util';\n\nexport enum PageLayouts {\n  vertical = 'vertical',\n  horizontal = 'horizontal'\n}\n\nconst PageContext = React.createContext({});\nexport const PageContextProvider = PageContext.Provider;\nexport const PageContextConsumer = PageContext.Consumer;\n\nexport interface PageProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the main section of the page layout (e.g. <PageSection />) */\n  children?: React.ReactNode;\n  /** Additional classes added to the page layout */\n  className?: string;\n  /** Header component (e.g. <PageHeader />) */\n  header?: React.ReactNode;\n  /** Sidebar component for a side nav (e.g. <PageSidebar />) */\n  sidebar?: React.ReactNode;\n  /** Skip to content component for the page */\n  skipToContent?: React.ReactElement;\n  /** an id to use for the [role=\"main\"] element */\n  mainContainerId?: string;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /**\n   * If true, the managed sidebar is initially open for desktop view\n   */\n  defaultManagedSidebarIsOpen?: boolean;\n  /**\n   * Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px\n   * Returns object { mobileView: boolean, windowSize: number }\n   */\n  onPageResize?: (object: any) => void;\n  /** Breadcrumb component for the page */\n  breadcrumb?: React.ReactNode;\n}\n\nexport interface PageState {\n  desktopIsNavOpen: boolean;\n  mobileIsNavOpen: boolean;\n  mobileView: boolean;\n}\n\nexport class Page extends React.Component<PageProps, PageState> {\n\n  static defaultProps = {\n    breadcrumb: null as React.ReactNode,\n    children: null as React.ReactNode,\n    className: '',\n    header: null as React.ReactNode,\n    sidebar: null as React.ReactNode,\n    skipToContent: null as React.ReactElement,\n    isManagedSidebar: false,\n    defaultManagedSidebarIsOpen: true,\n    onPageResize: (): void => null,\n    mainContainerId: null as string\n  };\n\n  constructor(props: PageProps) {\n    super(props);\n\n    const {isManagedSidebar, defaultManagedSidebarIsOpen} = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false\n    };\n  }\n\n  componentDidMount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      window.addEventListener('resize', debounce(this.handleResize, 250));\n      // Initial check if should be shown\n      this.handleResize();\n    }\n  }\n\n  componentWillUnmount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      window.removeEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  handleResize = () => {\n    const { onPageResize } = this.props;\n    const windowSize = window.innerWidth;\n    const mobileView = windowSize < Number.parseInt(globalBreakpointMd.value, 10);\n    if (onPageResize) {\n      onPageResize({ mobileView, windowSize });\n    }\n    this.setState((prevState) => ({\n      mobileView\n    }));\n  }\n\n  onNavToggleMobile = () => {\n    this.setState({\n      mobileIsNavOpen: !this.state.mobileIsNavOpen\n    });\n  }\n\n  onNavToggleDesktop = () => {\n    this.setState({\n      desktopIsNavOpen: !this.state.desktopIsNavOpen\n    });\n  }\n\n  render() {\n    const {\n      breadcrumb,\n      className,\n      children,\n      header,\n      sidebar,\n      skipToContent,\n      mainContainerId,\n      isManagedSidebar,\n      defaultManagedSidebarIsOpen,\n      onPageResize,\n      ...rest\n    } = this.props;\n    const { mobileView, mobileIsNavOpen, desktopIsNavOpen } = this.state;\n\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen\n    };\n\n    return (\n      <PageContextProvider value={context}>\n        <div {...rest} className={css(styles.page, className)}>\n          {skipToContent}\n          {header}\n          {sidebar}\n          <main role=\"main\" id={mainContainerId} className={css(styles.pageMain)} tabIndex={-1}>\n            {breadcrumb && <section className={css(styles.pageMainBreadcrumb)}>{breadcrumb}</section>}\n            {children}\n          </main>\n        </div>\n      </PageContextProvider>\n    );\n  }\n}\n"],"file":"Page.js"}