{"version":3,"sources":["../../../../src/components/ChartPoint/ChartPoint.tsx"],"names":["ChartPoint","active","className","clipPath","datum","events","pathComponent","role","shapeRendering","transform","rest","getPath","props","x","y","size","Helpers","evaluateProp","pathFunctions","circle","PathHelpers","square","diamond","triangleDown","triangleUp","plus","minus","star","dash","threshold","symbol","symbolFunction","React","cloneElement","d","style","evaluateStyle","data","id","index","origin","polar","scale"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Helpers, Path } from 'victory-core';\nimport { PathHelpers } from './path-helpers';\n\nexport interface ChartPointProps {\n  /**\n   * A flag signifying whether the component is active\n   */\n  active?: boolean;\n  /**\n   * The class name that will be applied to the rendered element\n   */\n  className?: string;\n  /**\n   * TRhe clip path\n   */\n  clipPath?: string;\n  /**\n   * The entire dataset\n   */\n  data?: any[];\n  /**\n   * The data point corresponding to this point\n   */\n  datum?: any;\n  /**\n   * Events to attach to the rendered element\n   */\n  events?: any;\n  /**\n   * A function to return symbol paths\n   */\n  getPath?: Function;\n  /**\n   * An id to apply to the rendered component\n   */\n  id?: number | string;\n  /**\n   * The index of this point within the dataset\n   */\n  index?: number | string;\n  /**\n   * The svg coordinates of the center point of a polar chart\n   */\n  origin?: { x?: number, y?: number };\n  /**\n   * The rendered path element\n   */\n  pathComponent?: React.ReactElement<any>;\n  /**\n   * A flag specifying whether the component is part of a polar chart\n   */\n  polar?: boolean;\n  /**\n   * The aria role to assign to the element\n   */\n  role?: string;\n  /**\n   * The x and y scale of the parent chart with domain and range applied\n   */\n  scale?: any;\n  /**\n   * The shape rendering attribute to apply to the rendered path\n   */\n  shapeRendering?: string;\n  /**\n   * The size of the point\n   */\n  size?: number | Function;\n  /**\n   * The styles to apply to the rendered element\n   */\n  style?: any;\n  /**\n   * The 'circle', 'diamond', 'plus', 'minus', 'square', 'star', 'triangleDown', 'triangleUp', or 'dash' which symbol\n   * the point should render\n   */\n  symbol?: 'circle' | 'diamond' | 'plus' | 'minus' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | 'dash' |\n    'threshold' | Function;\n  /**\n   * A transform that will be supplied to elements this component renders\n   */\n  transform?: string;\n  /**\n   * The x coordinate of the center of the point\n   */\n  x?: number;\n  /**\n   * The y coordinate of the center of the point\n   */\n  y?: number;\n}\n\nexport const ChartPoint: React.FunctionComponent<ChartPointProps> = ({\n  active,\n  className,\n  clipPath,\n  datum,\n  events,\n  pathComponent = <Path />,\n  role,\n  shapeRendering,\n  transform,\n  ...rest\n}: ChartPointProps) => {\n  const getPath = (props: ChartPointProps) => {\n    const { datum, active, x, y } = props;\n    const size = Helpers.evaluateProp(props.size, datum, active);\n    if (props.getPath) {\n      return props.getPath(x, y, size);\n    }\n    const pathFunctions: any = {\n      circle: PathHelpers.circle,\n      square: PathHelpers.square,\n      diamond: PathHelpers.diamond,\n      triangleDown: PathHelpers.triangleDown,\n      triangleUp: PathHelpers.triangleUp,\n      plus: PathHelpers.plus,\n      minus: PathHelpers.minus,\n      star: PathHelpers.star,\n      dash: PathHelpers.dash,\n      threshold: PathHelpers.threshold\n    };\n    const symbol = Helpers.evaluateProp(props.symbol, datum, active);\n    const symbolFunction = typeof pathFunctions[symbol] === 'function' ? pathFunctions[symbol] : pathFunctions.circle;\n    return symbolFunction(x, y, size);\n  };\n\n  return React.cloneElement(pathComponent, {\n    className,\n    clipPath,\n    d: getPath({datum, active, ...rest}),\n    events,\n    role,\n    shapeRendering,\n    style: Helpers.evaluateStyle(rest.style, datum, active),\n    transform\n  });\n};\n"],"file":"ChartPoint.js"}