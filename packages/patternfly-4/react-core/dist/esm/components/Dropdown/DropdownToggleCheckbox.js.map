{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggleCheckbox.tsx"],"names":["React","styles","css","Checkbox","DropdownToggleCheckbox","Component","checked","event","props","onChange","target","isChecked","undefined","render","className","isValid","isDisabled","ref","children","text","dropdownToggleText","id","dropdownToggleCheck","calculateChecked","handleChange"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,2DAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAyBA,OAAO,MAAMC,sBAAN,SAAqCJ,KAAK,CAACK,SAA3C,CAAkF;AAAA;AAAA;;AAAA,0CASxE,CAACC,OAAD,EAAmBC,KAAnB,KAAgE;AAC7E,WAAKC,KAAL,CAAWC,QAAX,CAAqBF,KAAK,CAACG,MAAP,CAAmCJ,OAAvD,EAAgEC,KAAhE;AACD,KAXsF;;AAAA,8CAapE,MAAM;AACvB,YAAM;AAAEI,QAAAA,SAAF;AAAaL,QAAAA;AAAb,UAAyB,KAAKE,KAApC;AACA,aAAOG,SAAS,KAAKC,SAAd,GAA0BD,SAA1B,GAAsCL,OAA7C;AACD,KAhBsF;AAAA;;AAkBvFO,EAAAA,MAAM,GAAG;AACP,wBAAkG,KAAKL,KAAvG;AAAA,UAAM;AAAEM,MAAAA,SAAF;AAAaL,MAAAA,QAAb;AAAuBM,MAAAA,OAAvB;AAAgCC,MAAAA,UAAhC;AAA4CL,MAAAA,SAA5C;AAAuDM,MAAAA,GAAvD;AAA4DX,MAAAA,OAA5D;AAAqEY,MAAAA;AAArE,KAAN;AAAA,UAAwFV,KAAxF;;AACA,UAAMW,IAAI,GAAGD,QAAQ,IAAI;AACvB,MAAA,SAAS,EAAEhB,GAAG,CAACD,MAAM,CAACmB,kBAAR,EAA4BN,SAA5B,CADS;AAEvB,qBAAY,MAFW;AAGvB,MAAA,EAAE,EAAG,GAAEN,KAAK,CAACa,EAAG;AAHO,OAKtBH,QALsB,CAAzB;AAOA,WACE;AAAO,MAAA,SAAS,EAAEhB,GAAG,CAACD,MAAM,CAACqB,mBAAR,EAA6BR,SAA7B,CAArB;AAA8D,MAAA,OAAO,EAAEN,KAAK,CAACa;AAA7E,OACE,oBAAC,QAAD,eACMb,KADN,EAEO,KAAKe,gBAAL,OAA4BX,SAA7B,IAA2C;AAAEH,MAAAA,QAAQ,EAAE,KAAKe;AAAjB,KAFjD;AAGE,MAAA,GAAG,EAAEP,GAHP;AAIE,sBAAc,CAACF,OAJjB;AAKE,MAAA,UAAU,EAAEC,UALd;AAME,MAAA,SAAS,EAAE,KAAKO,gBAAL;AANb,OADF,EASGJ,IATH,CADF;AAaD;;AAxCsF;;gBAA5Ef,sB;AAnBXU,EAAAA,S;AAEAC,EAAAA,O;AAEAC,EAAAA,U;AAEAL,EAAAA,S;AAEAL,EAAAA,O;AAIAY,EAAAA,Q;AAEAG,EAAAA,E;AAEA,c;;;gBAGWjB,sB,kBAEW;AACpBU,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,OAAO,EAAE,IAFW;AAGpBC,EAAAA,UAAU,EAAE,KAHQ;AAIpBP,EAAAA,QAAQ,EAAE,MAAMG;AAJI,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { Checkbox } from '../Checkbox';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface DropdownToggleCheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'checked'> {\n  /** Additional classes added to the DropdownToggleCheckbox */\n  className?: string;\n  /** Flag to show if the checkbox selection is valid or invalid */\n  isValid?: boolean;\n  /** Flag to show if the checkbox is disabled */\n  isDisabled?: boolean;\n  /** Flag to show if the checkbox is checked */\n  isChecked?: boolean | null;\n  /** Alternate Flag to show if the checkbox is checked */\n  checked?: boolean | null;\n  /** A callback for when the checkbox selection changes */\n  onChange?(checked: boolean, event: React.FormEvent<HTMLInputElement>): void;\n  /** Element to be rendered inside the <span> */\n  children?: React.ReactNode;\n  /** Id of the checkbox */\n  id: string;\n  /** Aria-label of the checkbox */\n  'aria-label': string;\n}\n\nexport class DropdownToggleCheckbox extends React.Component<DropdownToggleCheckboxProps> {\n\n  static defaultProps = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    onChange: () => undefined as any\n  };\n\n  handleChange = (checked: boolean, event: React.FormEvent<HTMLInputElement>) => {\n    this.props.onChange((event.target as HTMLInputElement).checked, event);\n  }\n\n  calculateChecked = () => {\n    const { isChecked, checked } = this.props;\n    return isChecked !== undefined ? isChecked : checked;\n  }\n\n  render() {\n    const { className, onChange, isValid, isDisabled, isChecked, ref, checked, children, ...props } = this.props;\n    const text = children && <span\n      className={css(styles.dropdownToggleText, className)}\n      aria-hidden=\"true\"\n      id={`${props.id}-text`}\n    >\n      {children}\n    </span>;\n    return (\n      <label className={css(styles.dropdownToggleCheck, className)} htmlFor={props.id}>\n        <Checkbox\n          {...props}\n          {...(this.calculateChecked() !== undefined) && { onChange: this.handleChange }}\n          ref={ref as any}\n          aria-invalid={!isValid}\n          isDisabled={isDisabled}\n          isChecked={this.calculateChecked()}\n        />\n        {text}\n      </label>\n    );\n  }\n}\n"],"file":"DropdownToggleCheckbox.js"}