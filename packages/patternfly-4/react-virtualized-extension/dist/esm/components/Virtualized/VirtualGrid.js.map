{"version":3,"sources":["../../../../src/components/Virtualized/VirtualGrid.ts"],"names":["React","clsx","calculateSizeAndPositionDataAndUpdateScrollOffset","ScalingCellSizeAndPositionManager","createCallbackMemoizer","defaultOverscanIndicesGetter","SCROLL_DIRECTION_BACKWARD","SCROLL_DIRECTION_FORWARD","updateScrollIndexHelper","defaultCellRangeRenderer","scrollbarSize","polyfill","requestAnimationTimeout","cancelAnimationTimeout","DEFAULT_SCROLLING_RESET_TIME_INTERVAL","SCROLL_POSITION_CHANGE_REASONS","OBSERVED","REQUESTED","renderNull","VirtualGrid","PureComponent","constructor","props","_disablePointerEventsTimeoutId","setState","isScrolling","needToResetStyleCache","onSectionRendered","_onVirtualGridRenderedMemoizer","callback","indices","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","_renderedColumnStartIndex","columnStopIndex","_renderedColumnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","_renderedRowStartIndex","rowStopIndex","_renderedRowStopIndex","ref","_scrollingContainer","event","target","handleScrollEvent","columnSizeAndPositionManager","cellCount","columnCount","cellSizeGetter","params","_wrapSizeGetter","columnWidth","estimatedCellSize","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","state","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","prevScrollLeft","scrollLeft","prevScrollTop","scrollTop","scrollbarSizeMeasured","scrollDirectionHorizontal","scrollDirectionVertical","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","getOffsetForCell","alignment","scrollToAlignment","columnIndex","rowIndex","offsetProps","getTotalRowsHeight","getTotalSize","getTotalColumnsWidth","scrollLeftParam","scrollTopParam","_debounceScrollEnded","autoHeight","autoWidth","height","width","totalRowsHeight","totalColumnsWidth","Math","min","max","newState","_invokeOnScrollMemoizer","invalidateCellSizeAfterRender","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","measureAllCells","getSizeAndPositionOfCell","recomputeVirtualGridSize","resetCell","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_styleCache","_cellCache","forceUpdate","scrollToCell","undefined","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","componentDidMount","getScrollbarSize","_handleInvalidatedVirtualGridSize","prevState","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_invokeOnVirtualGridRenderedHelper","_maybeCallOnScrollbarPresenceChange","componentDidUpdate","prevProps","columnOrRowCountJustIncreasedFromZero","sizeJustIncreasedFromZero","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToIndex","size","updateScrollIndexCallback","componentWillUnmount","getDerivedStateFromProps","nextProps","Object","assign","configure","maybeStateA","maybeStateB","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","updateScrollOffsetForScrollToIndex","_getScrollLeftForScrollToColumnStateUpdate","_getScrollTopForScrollToRowStateUpdate","render","autoContainerWidth","className","containerProps","containerRole","containerStyle","id","noContentRenderer","role","style","tabIndex","scrollContainerComponent","innerScrollContainerComponent","_isScrolling","gridStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","length","scrollContainerProps","_setScrollingContainerRef","_onScroll","innerScrollContainer","innerScrollContainerProps","key","maxWidth","maxHeight","overflow","pointerEvents","createElement","cellRenderer","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","getVisibleCellRange","containerSize","offset","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","start","stop","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","_debounceScrollEndedCallback","estimatedColumnSize","estimatedRowSize","_onScrollMemoizer","onScroll","clientHeight","clientWidth","scrollHeight","scrollWidth","hasOwnProperty","call","Boolean","onScrollbarPresenceChange","horizontal","vertical","scrollToPosition","value","finalColumn","targetIndex","scrollBarSize","getUpdatedOffsetForIndex","align","currentOffset","calculatedScrollLeft","finalRow","calculatedScrollTop"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from './utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, {\n  SCROLL_DIRECTION_BACKWARD,\n  SCROLL_DIRECTION_FORWARD\n} from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/util/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from './utils/requestAnimationTimeout';\n\nimport {\n  CellRenderer,\n  CellRangeRenderer,\n  CellPosition,\n  CellSize,\n  CellSizeGetter,\n  NoContentRenderer,\n  Scroll,\n  ScrollbarPresenceChange,\n  RenderedSection,\n  OverscanIndicesGetter,\n  Alignment,\n  CellCache,\n  StyleCache\n} from './types';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\nexport const DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n\n/**\n * Controls whether the VirtualGrid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents VirtualGrid from interrupting mouse-wheel animations (see issue #2).\n */\nconst SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nconst renderNull: NoContentRenderer = () => null;\n\ninterface ScrollPosition {\n  scrollTop?: number;\n  scrollLeft?: number;\n}\n\ninterface Props {\n  'aria-label'?: string;\n  'aria-readonly'?: boolean;\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column VirtualGrids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  autoContainerWidth: boolean;\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoHeight: boolean;\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoWidth: boolean;\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  cellRenderer: CellRenderer;\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  cellRangeRenderer: CellRangeRenderer;\n\n  /** Optional custom CSS class name to attach to root VirtualGrid element.  */\n  className?: string;\n\n  /** Number of columns in grid.  */\n  columnCount: number;\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  columnWidth: CellSize;\n\n  /** Unfiltered props for the VirtualGrid container. */\n  containerProps?: any;\n\n  /** ARIA role for the cell-container.  */\n  containerRole: string;\n\n  /** Optional inline style applied to inner cell-container */\n  containerStyle: any;\n\n  /**\n   * If CellMeasurer is used to measure this VirtualGrid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables VirtualGrid and CellMeasurer to share measurement data.\n   */\n  deferredMeasurementCache?: any;\n\n  /**\n   * Used to estimate the total width of a VirtualGrid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  estimatedColumnSize: number;\n\n  /**\n   * Used to estimate the total height of a VirtualGrid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: number;\n\n  /** Exposed for testing purposes only.  */\n  getScrollbarSize: () => number;\n\n  /** Height of VirtualGrid; this property determines the number of visible (vs virtualized) rows.  */\n  height: number;\n\n  /** Optional custom id to attach to root VirtualGrid element.  */\n  id?: string;\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  isScrolling?: boolean;\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  isScrollingOptOut: boolean;\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  noContentRenderer: NoContentRenderer;\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  onScroll: (params: Scroll) => void;\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiVirtualGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  onScrollbarPresenceChange: (params: ScrollbarPresenceChange) => void;\n\n  /** Callback invoked with information about the section of the VirtualGrid that was just rendered.  */\n  onSectionRendered: (params: RenderedSection) => void;\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanColumnCount: number;\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  overscanIndicesGetter: OverscanIndicesGetter;\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanRowCount: number;\n\n  /** ARIA role for the grid element.  */\n  role: string;\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  rowHeight: CellSize;\n\n  /** Number of rows in grid.  */\n  rowCount: number;\n\n  /** Wait this amount of time after the last scroll event before resetting VirtualGrid `pointer-events`. */\n  scrollingResetTimeInterval: number;\n\n  /** Horizontal offset. */\n  scrollLeft?: number;\n\n  /**\n   * Controls scroll-to-cell behavior of the VirtualGrid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the VirtualGrid and \"end\" to align bottom/right.\n   */\n  scrollToAlignment: Alignment;\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToColumn: number;\n\n  /** Vertical offset. */\n  scrollTop?: number;\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToRow: number;\n\n  /** Optional inline style */\n  style: any;\n\n  /** Tab index for focus */\n  tabIndex?: number;\n\n  /** Width of VirtualGrid; this property determines the number of visible (vs virtualized) columns.  */\n  width: number;\n\n  /** Scroll Container element to render */\n  scrollContainerComponent: string | React.ComponentType<any>;\n\n  /** Inner Scroll Container element to render */\n  innerScrollContainerComponent: string | React.ComponentType<any>;\n}\n\ninterface InstanceProps {\n  prevColumnWidth: CellSize;\n  prevRowHeight: CellSize;\n\n  prevColumnCount: number;\n  prevRowCount: number;\n  prevIsScrolling: boolean;\n  prevScrollToColumn: number;\n  prevScrollToRow: number;\n  prevScrollLeft?: number;\n  prevScrollTop?: number;\n\n  columnSizeAndPositionManager: ScalingCellSizeAndPositionManager;\n  rowSizeAndPositionManager: ScalingCellSizeAndPositionManager;\n\n  scrollbarSize: number;\n  scrollbarSizeMeasured: boolean;\n}\n\ninterface State {\n  instanceProps?: InstanceProps;\n  isScrolling?: boolean;\n  scrollDirectionHorizontal?: -1 | 1;\n  scrollDirectionVertical?: -1 | 1;\n  scrollLeft?: number;\n  scrollTop?: number;\n  scrollPositionChangeReason?: 'observed' | 'requested';\n  needToResetStyleCache?: boolean;\n}\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nclass VirtualGrid extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    'aria-label': 'grid',\n    'aria-readonly': true,\n    \"autoContainerWidth\": false,\n    \"autoHeight\": false,\n    \"autoWidth\": false,\n    \"cellRangeRenderer\": defaultCellRangeRenderer,\n    \"containerRole\": 'rowgroup',\n    \"containerStyle\": {},\n    \"estimatedColumnSize\": 100,\n    \"estimatedRowSize\": 30,\n    \"getScrollbarSize\": scrollbarSize,\n    \"noContentRenderer\": renderNull,\n    \"onScroll\": () => {},\n    \"onScrollbarPresenceChange\": () => {},\n    \"onSectionRendered\": () => {},\n    \"overscanColumnCount\": 0,\n    \"overscanIndicesGetter\": defaultOverscanIndicesGetter,\n    \"overscanRowCount\": 10,\n    \"role\": 'grid',\n    \"scrollingResetTimeInterval\": DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n    \"scrollToAlignment\": 'auto',\n    \"scrollToColumn\": -1,\n    \"scrollToRow\": -1,\n    \"style\": {},\n    \"tabIndex\": 0,\n    \"isScrollingOptOut\": false,\n    \"scrollContainerComponent\": 'div',\n    \"innerScrollContainerComponent\": 'div'\n  };\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  _onVirtualGridRenderedMemoizer = createCallbackMemoizer();\n  _onScrollMemoizer = createCallbackMemoizer(false);\n\n  _deferredInvalidateColumnIndex = null;\n  _deferredInvalidateRowIndex = null;\n  _recomputeScrollLeftFlag = false;\n  _recomputeScrollTopFlag = false;\n\n  _horizontalScrollBarSize = 0;\n  _verticalScrollBarSize = 0;\n  _scrollbarPresenceChanged = false;\n  _scrollingContainer: Element;\n\n  _childrenToDisplay: React.ReactElement<any>[];\n\n  _columnStartIndex: number;\n  _columnStopIndex: number;\n  _rowStartIndex: number;\n  _rowStopIndex: number;\n  _renderedColumnStartIndex = 0;\n  _renderedColumnStopIndex = 0;\n  _renderedRowStartIndex = 0;\n  _renderedRowStopIndex = 0;\n\n  _initialScrollTop: number;\n  _initialScrollLeft: number;\n\n  _disablePointerEventsTimeoutId;\n\n  _styleCache: StyleCache = {};\n  _cellCache: CellCache = {};\n\n  constructor(props: Props) {\n    super(props);\n    const columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: (params) => VirtualGrid._wrapSizeGetter(props.columnWidth)(params),\n      estimatedCellSize: VirtualGrid._getEstimatedColumnSize(props)\n    });\n    const rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: (params) => VirtualGrid._wrapSizeGetter(props.rowHeight)(params),\n      estimatedCellSize: VirtualGrid._getEstimatedRowSize(props)\n    });\n\n    this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager,\n        rowSizeAndPositionManager,\n\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        prevScrollLeft: props.scrollLeft,\n        prevScrollTop: props.scrollTop,\n\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: props.scrollLeft || 0,\n      scrollTop: props.scrollTop || 0,\n      scrollPositionChangeReason: null,\n\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      this._initialScrollTop = this._getCalculatedScrollTop(props, this.state);\n    }\n    if (props.scrollToColumn > 0) {\n      this._initialScrollLeft = this._getCalculatedScrollLeft(props, this.state);\n    }\n  }\n\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n  getOffsetForCell({\n    alignment = this.props.scrollToAlignment,\n    columnIndex = this.props.scrollToColumn,\n    rowIndex = this.props.scrollToRow\n  }: {\n    alignment?: Alignment,\n    columnIndex?: number,\n    rowIndex?: number\n  } = {}) {\n    const offsetProps = {\n      ...this.props,\n      scrollToAlignment: alignment,\n      scrollToColumn: columnIndex,\n      scrollToRow: rowIndex\n    };\n\n    return {\n      scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n      scrollTop: this._getCalculatedScrollTop(offsetProps)\n    };\n  }\n\n  /**\n   * Gets estimated total rows' height.\n   */\n  getTotalRowsHeight() {\n    return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n  }\n\n  /**\n   * Gets estimated total columns' width.\n   */\n  getTotalColumnsWidth() {\n    return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n  }\n\n  /**\n   * This method handles a scroll event originating from an external scroll control.\n   * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n   */\n  handleScrollEvent({ scrollLeft: scrollLeftParam = 0, scrollTop: scrollTopParam = 0 }: ScrollPosition) {\n    // On iOS, we can arrive at negative offsets by swiping past the start.\n    // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n    if (scrollTopParam < 0) {\n      return;\n    }\n\n    // Prevent pointer events from interrupting a smooth scroll\n    this._debounceScrollEnded();\n\n    const { autoHeight, autoWidth, height, width } = this.props;\n    const { instanceProps } = this.state;\n\n    // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n    // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n    // This causes a series of rapid renders that is slow for long lists.\n    // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n    const { scrollbarSize } = instanceProps;\n    const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n    const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n    const scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n    const scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam);\n\n    // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n    // Don't force a re-render if this is the case.\n    // The mouse may move faster then the animation frame does.\n    // Use requestAnimationFrame to avoid over-updating.\n    if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n      // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n      // Don't change direction for an axis unless scroll offset has changed.\n      const scrollDirectionHorizontal =\n        scrollLeft !== this.state.scrollLeft\n          ? scrollLeft > this.state.scrollLeft\n            ? SCROLL_DIRECTION_FORWARD\n            : SCROLL_DIRECTION_BACKWARD\n          : this.state.scrollDirectionHorizontal;\n      const scrollDirectionVertical =\n        scrollTop !== this.state.scrollTop\n          ? scrollTop > this.state.scrollTop\n            ? SCROLL_DIRECTION_FORWARD\n            : SCROLL_DIRECTION_BACKWARD\n          : this.state.scrollDirectionVertical;\n\n      const newState: State = {\n        isScrolling: true,\n        scrollDirectionHorizontal,\n        scrollDirectionVertical,\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED as 'observed' | 'requested'\n      };\n\n      if (!autoHeight) {\n        newState.scrollTop = scrollTop;\n      }\n\n      if (!autoWidth) {\n        newState.scrollLeft = scrollLeft;\n      }\n\n      newState.needToResetStyleCache = false;\n      this.setState(newState);\n    }\n\n    this._invokeOnScrollMemoizer({\n      scrollLeft,\n      scrollTop,\n      totalColumnsWidth,\n      totalRowsHeight\n    });\n  }\n\n  /**\n   * Invalidate VirtualGrid size and recompute visible cells.\n   * This is a deferred wrapper for recomputeVirtualGridSize().\n   * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n   * This method is intended for advanced use-cases like CellMeasurer.\n   */\n  // @TODO (bvaughn) Add automated test coverage for this.\n  invalidateCellSizeAfterRender({ columnIndex, rowIndex }: CellPosition) {\n    this._deferredInvalidateColumnIndex =\n      typeof this._deferredInvalidateColumnIndex === 'number'\n        ? Math.min(this._deferredInvalidateColumnIndex, columnIndex)\n        : columnIndex;\n    this._deferredInvalidateRowIndex =\n      typeof this._deferredInvalidateRowIndex === 'number'\n        ? Math.min(this._deferredInvalidateRowIndex, rowIndex)\n        : rowIndex;\n  }\n\n  /**\n   * Pre-measure all columns and rows in a VirtualGrid.\n   * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n   * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n   */\n  measureAllCells() {\n    const { columnCount, rowCount } = this.props;\n    const { instanceProps } = this.state;\n    instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n    instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n  }\n\n  /**\n   * Forced recompute of row heights and column widths.\n   * This function should be called if dynamic column or row sizes have changed but nothing else has.\n   * Since VirtualGrid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n   */\n  recomputeVirtualGridSize({ columnIndex = 0, rowIndex = 0 } = {}) {\n    const { scrollToColumn, scrollToRow } = this.props;\n    const { instanceProps } = this.state;\n\n    instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n    instanceProps.rowSizeAndPositionManager.resetCell(rowIndex);\n\n    // Cell sizes may be determined by a function property.\n    // In this case the cDU handler can't know if they changed.\n    // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n    this._recomputeScrollLeftFlag =\n      scrollToColumn >= 0 &&\n      (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD\n        ? columnIndex <= scrollToColumn\n        : columnIndex >= scrollToColumn);\n    this._recomputeScrollTopFlag =\n      scrollToRow >= 0 &&\n      (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD\n        ? rowIndex <= scrollToRow\n        : rowIndex >= scrollToRow);\n\n    // Clear cell cache in case we are scrolling;\n    // Invalid row heights likely mean invalid cached content as well.\n    this._styleCache = {};\n    this._cellCache = {};\n\n    this.forceUpdate();\n  }\n\n  /**\n   * Ensure column and row are visible.\n   */\n  scrollToCell({ columnIndex, rowIndex }: CellPosition) {\n    const { columnCount } = this.props;\n\n    const { props } = this;\n\n    // Don't adjust scroll offset for single-column grids (eg List, Table).\n    // This can cause a funky scroll offset because of the vertical scrollbar width.\n    if (columnCount > 1 && columnIndex !== undefined) {\n      this._updateScrollLeftForScrollToColumn({\n        ...props,\n        scrollToColumn: columnIndex\n      });\n    }\n\n    if (rowIndex !== undefined) {\n      this._updateScrollTopForScrollToRow({\n        ...props,\n        scrollToRow: rowIndex\n      });\n    }\n  }\n\n  componentDidMount() {\n    const { getScrollbarSize, height, scrollLeft, scrollToColumn, scrollTop, scrollToRow, width } = this.props;\n\n    const { instanceProps } = this.state;\n\n    // Reset initial offsets to be ignored in browser\n    this._initialScrollTop = 0;\n    this._initialScrollLeft = 0;\n\n    // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n    // We must do this at the start of the method as we may calculate and update scroll position below.\n    this._handleInvalidatedVirtualGridSize();\n\n    // If this component was first rendered server-side, scrollbar size will be undefined.\n    // In that event we need to remeasure.\n    if (!instanceProps.scrollbarSizeMeasured) {\n      this.setState((prevState) => {\n        const stateUpdate = { ...prevState, needToResetStyleCache: false };\n        stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n        stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n        return stateUpdate;\n      });\n    }\n\n    if ((typeof scrollLeft === 'number' && scrollLeft >= 0) || (typeof scrollTop === 'number' && scrollTop >= 0)) {\n      const stateUpdate = VirtualGrid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft,\n        scrollTop\n      });\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n\n    // refs don't work in `react-test-renderer`\n    if (this._scrollingContainer) {\n      // setting the ref's scrollLeft and scrollTop.\n      // Somehow in MultiVirtualGrid the main grid doesn't trigger a update on mount.\n      if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n        this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n      }\n      if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n        this._scrollingContainer.scrollTop = this.state.scrollTop;\n      }\n    }\n\n    // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n    // Setting a state may cause us to later thing we've updated the offce when we haven't.\n    const sizeIsBiggerThanZero = height > 0 && width > 0;\n    if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n      this._updateScrollLeftForScrollToColumn();\n    }\n    if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n      this._updateScrollTopForScrollToRow();\n    }\n\n    // Update onRowsRendered callback\n    this._invokeOnVirtualGridRenderedHelper();\n\n    // Initialize onScroll callback\n    this._invokeOnScrollMemoizer({\n      scrollLeft: scrollLeft || 0,\n      scrollTop: scrollTop || 0,\n      totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n      totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n    });\n\n    this._maybeCallOnScrollbarPresenceChange();\n  }\n\n  /**\n   * @private\n   * This method updates scrollLeft/scrollTop in state for the following conditions:\n   * 1) New scroll-to-cell props have been set\n   */\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const {\n      autoHeight,\n      autoWidth,\n      columnCount,\n      height,\n      rowCount,\n      scrollToAlignment,\n      scrollToColumn,\n      scrollToRow,\n      width\n    } = this.props;\n    const { scrollLeft, scrollPositionChangeReason, scrollTop, instanceProps } = this.state;\n    // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n    // We must do this at the start of the method as we may calculate and update scroll position below.\n    this._handleInvalidatedVirtualGridSize();\n\n    // Handle edge case where column or row count has only just increased over 0.\n    // In this case we may have to restore a previously-specified scroll offset.\n    // For more info see bvaughn/react-virtualized/issues/218\n    const columnOrRowCountJustIncreasedFromZero =\n      (columnCount > 0 && prevProps.columnCount === 0) || (rowCount > 0 && prevProps.rowCount === 0);\n\n    // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n    // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n    // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n    // So we only set these when we require an adjustment of the scroll position.\n    // See issue #2 for more information.\n    if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n      // @TRICKY :autoHeight and :autoWidth properties instructs VirtualGrid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n      // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n      if (\n        !autoWidth &&\n        scrollLeft >= 0 &&\n        (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)\n      ) {\n        this._scrollingContainer.scrollLeft = scrollLeft;\n      }\n      if (\n        !autoHeight &&\n        scrollTop >= 0 &&\n        (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)\n      ) {\n        this._scrollingContainer.scrollTop = scrollTop;\n      }\n    }\n\n    // Special case where the previous size was 0:\n    // In this case we don't show any windowed cells at all.\n    // So we should always recalculate offset afterwards.\n    const sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && (height > 0 && width > 0);\n\n    // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n    // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n    if (this._recomputeScrollLeftFlag) {\n      this._recomputeScrollLeftFlag = false;\n      this._updateScrollLeftForScrollToColumn(this.props);\n    } else {\n      updateScrollIndexHelper({\n        cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n        previousCellsCount: prevProps.columnCount,\n        previousCellSize: prevProps.columnWidth,\n        previousScrollToAlignment: prevProps.scrollToAlignment,\n        previousScrollToIndex: prevProps.scrollToColumn,\n        previousSize: prevProps.width,\n        scrollOffset: scrollLeft,\n        scrollToAlignment,\n        scrollToIndex: scrollToColumn,\n        size: width,\n        sizeJustIncreasedFromZero,\n        updateScrollIndexCallback: () => this._updateScrollLeftForScrollToColumn(this.props)\n      });\n    }\n\n    if (this._recomputeScrollTopFlag) {\n      this._recomputeScrollTopFlag = false;\n      this._updateScrollTopForScrollToRow(this.props);\n    } else {\n      updateScrollIndexHelper({\n        cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n        previousCellsCount: prevProps.rowCount,\n        previousCellSize: prevProps.rowHeight,\n        previousScrollToAlignment: prevProps.scrollToAlignment,\n        previousScrollToIndex: prevProps.scrollToRow,\n        previousSize: prevProps.height,\n        scrollOffset: scrollTop,\n        scrollToAlignment,\n        scrollToIndex: scrollToRow,\n        size: height,\n        sizeJustIncreasedFromZero,\n        updateScrollIndexCallback: () => this._updateScrollTopForScrollToRow(this.props)\n      });\n    }\n\n    // Update onRowsRendered callback if start/stop indices have changed\n    this._invokeOnVirtualGridRenderedHelper();\n\n    // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n    if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n      const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft,\n        scrollTop,\n        totalColumnsWidth,\n        totalRowsHeight\n      });\n    }\n\n    this._maybeCallOnScrollbarPresenceChange();\n  }\n\n  componentWillUnmount() {\n    if (this._disablePointerEventsTimeoutId) {\n      cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n    }\n  }\n\n  /**\n   * This method updates scrollLeft/scrollTop in state for the following conditions:\n   * 1) Empty content (0 rows or columns)\n   * 2) New scroll props overriding the current state\n   * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n   */\n  static getDerivedStateFromProps(nextProps: Props, prevState: State): State {\n    const newState: State = {};\n    const { instanceProps } = prevState;\n\n    if (\n      (nextProps.columnCount === 0 && prevState.scrollLeft !== 0) ||\n      (nextProps.rowCount === 0 && prevState.scrollTop !== 0)\n    ) {\n      newState.scrollLeft = 0;\n      newState.scrollTop = 0;\n\n      // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n      // scrollTo{Column,Row} should override scroll{Left,Top}\n    } else if (\n      (nextProps.scrollLeft !== instanceProps.prevScrollLeft && nextProps.scrollToColumn < 0) ||\n      (nextProps.scrollTop !== instanceProps.prevScrollTop && nextProps.scrollToRow < 0)\n    ) {\n      Object.assign(\n        newState,\n        VirtualGrid._getScrollToPositionStateUpdate({\n          prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        })\n      );\n    }\n\n    // Initially we should not clearStyleCache\n    newState.needToResetStyleCache = false;\n    if (\n      nextProps.columnWidth !== instanceProps.prevColumnWidth ||\n      nextProps.rowHeight !== instanceProps.prevRowHeight\n    ) {\n      // Reset cache. set it to {} in render\n      newState.needToResetStyleCache = true;\n    }\n\n    instanceProps.columnSizeAndPositionManager.configure({\n      cellCount: nextProps.columnCount,\n      estimatedCellSize: VirtualGrid._getEstimatedColumnSize(nextProps),\n      cellSizeGetter: VirtualGrid._wrapSizeGetter(nextProps.columnWidth)\n    });\n\n    instanceProps.rowSizeAndPositionManager.configure({\n      cellCount: nextProps.rowCount,\n      estimatedCellSize: VirtualGrid._getEstimatedRowSize(nextProps),\n      cellSizeGetter: VirtualGrid._wrapSizeGetter(nextProps.rowHeight)\n    });\n\n    if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n      instanceProps.prevColumnCount = 0;\n      instanceProps.prevRowCount = 0;\n    }\n\n    // If scrolling is controlled outside this component, clear cache when scrolling stops\n    if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n      Object.assign(newState, {\n        isScrolling: false\n      });\n    }\n\n    let maybeStateA;\n    let maybeStateB;\n\n    calculateSizeAndPositionDataAndUpdateScrollOffset({\n      cellCount: instanceProps.prevColumnCount,\n      cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n      computeMetadataCallback: () => instanceProps.columnSizeAndPositionManager.resetCell(0),\n      computeMetadataCallbackProps: nextProps,\n      nextCellsCount: nextProps.columnCount,\n      nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n      nextScrollToIndex: nextProps.scrollToColumn,\n      scrollToIndex: instanceProps.prevScrollToColumn,\n      updateScrollOffsetForScrollToIndex: () => {\n        maybeStateA = VirtualGrid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n      }\n    });\n    calculateSizeAndPositionDataAndUpdateScrollOffset({\n      cellCount: instanceProps.prevRowCount,\n      cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n      computeMetadataCallback: () => instanceProps.rowSizeAndPositionManager.resetCell(0),\n      computeMetadataCallbackProps: nextProps,\n      nextCellsCount: nextProps.rowCount,\n      nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n      nextScrollToIndex: nextProps.scrollToRow,\n      scrollToIndex: instanceProps.prevScrollToRow,\n      updateScrollOffsetForScrollToIndex: () => {\n        maybeStateB = VirtualGrid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n      }\n    });\n\n    instanceProps.prevColumnCount = nextProps.columnCount;\n    instanceProps.prevColumnWidth = nextProps.columnWidth;\n    instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n    instanceProps.prevRowCount = nextProps.rowCount;\n    instanceProps.prevRowHeight = nextProps.rowHeight;\n    instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n    instanceProps.prevScrollToRow = nextProps.scrollToRow;\n    instanceProps.prevScrollLeft = nextProps.scrollLeft;\n    instanceProps.prevScrollTop = nextProps.scrollTop;\n\n    // getting scrollBarSize (moved from componentWillMount)\n    instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n    if (instanceProps.scrollbarSize === undefined) {\n      instanceProps.scrollbarSizeMeasured = false;\n      instanceProps.scrollbarSize = 0;\n    } else {\n      instanceProps.scrollbarSizeMeasured = true;\n    }\n\n    newState.instanceProps = instanceProps;\n\n    return { ...newState, ...maybeStateA, ...maybeStateB };\n  }\n\n  render() {\n    const {\n      autoContainerWidth,\n      autoHeight,\n      autoWidth,\n      className,\n      containerProps,\n      containerRole,\n      containerStyle,\n      height,\n      id,\n      noContentRenderer,\n      role,\n      style,\n      tabIndex,\n      width,\n      scrollContainerComponent,\n      innerScrollContainerComponent\n    } = this.props;\n    const { instanceProps, needToResetStyleCache } = this.state;\n\n    const isScrolling = this._isScrolling();\n\n    const gridStyle: {\n      boxSizing: string,\n      direction: string,\n      height: string | number,\n      position: string,\n      width: string | number,\n      WebkitOverflowScrolling: string,\n      willChange: string,\n      overflowX?: string,\n      overflowY?: string\n    } = {\n      boxSizing: 'border-box',\n      direction: 'ltr',\n      height: autoHeight ? 'auto' : height,\n      position: 'relative',\n      width: autoWidth ? 'auto' : width,\n      WebkitOverflowScrolling: 'touch',\n      willChange: 'transform'\n    };\n\n    if (needToResetStyleCache) {\n      this._styleCache = {};\n    }\n\n    // calculate _styleCache here\n    // if state.isScrolling (not from _isScrolling) then reset\n    if (!this.state.isScrolling) {\n      this._resetStyleCache();\n    }\n\n    // calculate children to render here\n    this._calculateChildrenToRender(this.props, this.state);\n\n    const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n    const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n\n    // Force browser to hide scrollbars when we know they aren't necessary.\n    // Otherwise once scrollbars appear they may not disappear again.\n    // For more info see issue #116\n    const verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n    const horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n    if (\n      horizontalScrollBarSize !== this._horizontalScrollBarSize ||\n      verticalScrollBarSize !== this._verticalScrollBarSize\n    ) {\n      this._horizontalScrollBarSize = horizontalScrollBarSize;\n      this._verticalScrollBarSize = verticalScrollBarSize;\n      this._scrollbarPresenceChanged = true;\n    }\n\n    // Also explicitly init styles to 'auto' if scrollbars are required.\n    // This works around an obscure edge case where external CSS styles have not yet been loaded,\n    // But an initial scroll index of offset is set as an external prop.\n    // Without this style, VirtualGrid would render the correct range of cells but would NOT update its internal offset.\n    // This was originally reported via clauderic/react-infinite-calendar/issues/23\n    gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n    gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n\n    const childrenToDisplay = this._childrenToDisplay;\n\n    const showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n\n    const scrollContainerProps = {\n      ...containerProps,\n      \"ref\": this._setScrollingContainerRef,\n      'aria-label': this.props['aria-label'],\n      'aria-readonly': this.props['aria-readonly'],\n      \"className\": clsx('ReactVirtualized__VirtualGrid', className),\n      id,\n      \"onScroll\": this._onScroll,\n      role,\n      \"style\": {\n        ...gridStyle,\n        ...style\n      },\n      tabIndex\n    };\n\n    let innerScrollContainer = null;\n    if (childrenToDisplay.length > 0) {\n      const innerScrollContainerProps = {\n        className: 'ReactVirtualized__VirtualGrid__innerScrollContainer',\n        key: 'ReactVirtualized__VirtualGrid__innerScrollContainer',\n        role: containerRole,\n        style: {\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative',\n          ...containerStyle\n        }\n      };\n      innerScrollContainer = React.createElement(\n        innerScrollContainerComponent,\n        innerScrollContainerProps,\n        childrenToDisplay\n      );\n    }\n    return React.createElement(scrollContainerComponent, scrollContainerProps, [\n      innerScrollContainer,\n      showNoContentRenderer && noContentRenderer()\n    ]);\n  }\n\n  /* ---------------------------- Helper methods ---------------------------- */\n\n  _calculateChildrenToRender(props: Props = this.props, state: State = this.state) {\n    const {\n      cellRenderer,\n      cellRangeRenderer,\n      columnCount,\n      deferredMeasurementCache,\n      height,\n      overscanColumnCount,\n      overscanIndicesGetter,\n      overscanRowCount,\n      rowCount,\n      width,\n      isScrollingOptOut\n    } = props;\n\n    const { scrollDirectionHorizontal, scrollDirectionVertical, instanceProps } = state;\n\n    const scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n    const scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n    const isScrolling = this._isScrolling(props, state);\n\n    this._childrenToDisplay = [];\n\n    // Render only enough columns and rows to cover the visible area of the grid.\n    if (height > 0 && width > 0) {\n      const visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n        containerSize: width,\n        offset: scrollLeft\n      });\n      const visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n        containerSize: height,\n        offset: scrollTop\n      });\n\n      const horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n        containerSize: width,\n        offset: scrollLeft\n      });\n      const verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n        containerSize: height,\n        offset: scrollTop\n      });\n\n      // Store for _invokeOnVirtualGridRenderedHelper()\n      this._renderedColumnStartIndex = visibleColumnIndices.start;\n      this._renderedColumnStopIndex = visibleColumnIndices.stop;\n      this._renderedRowStartIndex = visibleRowIndices.start;\n      this._renderedRowStopIndex = visibleRowIndices.stop;\n\n      const overscanColumnIndices = overscanIndicesGetter({\n        direction: 'horizontal',\n        cellCount: columnCount,\n        overscanCellsCount: overscanColumnCount,\n        scrollDirection: scrollDirectionHorizontal,\n        startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n        stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n      });\n\n      const overscanRowIndices = overscanIndicesGetter({\n        direction: 'vertical',\n        cellCount: rowCount,\n        overscanCellsCount: overscanRowCount,\n        scrollDirection: scrollDirectionVertical,\n        startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n        stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n      });\n\n      // Store for _invokeOnVirtualGridRenderedHelper()\n      let columnStartIndex = overscanColumnIndices.overscanStartIndex;\n      let columnStopIndex = overscanColumnIndices.overscanStopIndex;\n      let rowStartIndex = overscanRowIndices.overscanStartIndex;\n      let rowStopIndex = overscanRowIndices.overscanStopIndex;\n\n      // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n      if (deferredMeasurementCache) {\n        // If rows have a dynamic height, scan the rows we are about to render.\n        // If any have not yet been measured, then we need to render all columns initially,\n        // Because the height of the row is equal to the tallest cell within that row,\n        // (And so we can't know the height without measuring all column-cells first).\n        if (!deferredMeasurementCache.hasFixedHeight()) {\n          for (let rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n            if (!deferredMeasurementCache.has(rowIndex, 0)) {\n              columnStartIndex = 0;\n              columnStopIndex = columnCount - 1;\n              break;\n            }\n          }\n        }\n\n        // If columns have a dynamic width, scan the columns we are about to render.\n        // If any have not yet been measured, then we need to render all rows initially,\n        // Because the width of the column is equal to the widest cell within that column,\n        // (And so we can't know the width without measuring all row-cells first).\n        if (!deferredMeasurementCache.hasFixedWidth()) {\n          for (let columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n            if (!deferredMeasurementCache.has(0, columnIndex)) {\n              rowStartIndex = 0;\n              rowStopIndex = rowCount - 1;\n              break;\n            }\n          }\n        }\n      }\n\n      this._childrenToDisplay = cellRangeRenderer({\n        cellCache: this._cellCache,\n        cellRenderer,\n        columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n        columnStartIndex,\n        columnStopIndex,\n        deferredMeasurementCache,\n        horizontalOffsetAdjustment,\n        isScrolling,\n        isScrollingOptOut,\n        parent: this,\n        rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n        rowStartIndex,\n        rowStopIndex,\n        scrollLeft,\n        scrollTop,\n        styleCache: this._styleCache,\n        verticalOffsetAdjustment,\n        visibleColumnIndices,\n        visibleRowIndices\n      });\n\n      // update the indices\n      this._columnStartIndex = columnStartIndex;\n      this._columnStopIndex = columnStopIndex;\n      this._rowStartIndex = rowStartIndex;\n      this._rowStopIndex = rowStopIndex;\n    }\n  }\n\n  /**\n   * Sets an :isScrolling flag for a small window of time.\n   * This flag is used to disable pointer events on the scrollable portion of the VirtualGrid.\n   * This prevents jerky/stuttery mouse-wheel scrolling.\n   */\n  _debounceScrollEnded() {\n    const { scrollingResetTimeInterval } = this.props;\n\n    if (this._disablePointerEventsTimeoutId) {\n      cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n    }\n\n    this._disablePointerEventsTimeoutId = requestAnimationTimeout(\n      this._debounceScrollEndedCallback,\n      scrollingResetTimeInterval\n    );\n  }\n\n  _debounceScrollEndedCallback = () => {\n    this._disablePointerEventsTimeoutId = null;\n    // isScrolling is used to determine if we reset styleCache\n    this.setState({\n      isScrolling: false,\n      needToResetStyleCache: false\n    });\n  }\n\n  static _getEstimatedColumnSize(props: Props) {\n    return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n  }\n\n  static _getEstimatedRowSize(props: Props) {\n    return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n  }\n\n  /**\n   * Check for batched CellMeasurer size invalidations.\n   * This will occur the first time one or more previously unmeasured cells are rendered.\n   */\n  _handleInvalidatedVirtualGridSize() {\n    if (\n      typeof this._deferredInvalidateColumnIndex === 'number' &&\n      typeof this._deferredInvalidateRowIndex === 'number'\n    ) {\n      const columnIndex = this._deferredInvalidateColumnIndex;\n      const rowIndex = this._deferredInvalidateRowIndex;\n\n      this._deferredInvalidateColumnIndex = null;\n      this._deferredInvalidateRowIndex = null;\n\n      this.recomputeVirtualGridSize({ columnIndex, rowIndex });\n    }\n  }\n\n  _invokeOnVirtualGridRenderedHelper = () => {\n    const { onSectionRendered } = this.props;\n\n    this._onVirtualGridRenderedMemoizer({\n      callback: onSectionRendered,\n      indices: {\n        columnOverscanStartIndex: this._columnStartIndex,\n        columnOverscanStopIndex: this._columnStopIndex,\n        columnStartIndex: this._renderedColumnStartIndex,\n        columnStopIndex: this._renderedColumnStopIndex,\n        rowOverscanStartIndex: this._rowStartIndex,\n        rowOverscanStopIndex: this._rowStopIndex,\n        rowStartIndex: this._renderedRowStartIndex,\n        rowStopIndex: this._renderedRowStopIndex\n      }\n    });\n  }\n\n  _invokeOnScrollMemoizer({\n    scrollLeft,\n    scrollTop,\n    totalColumnsWidth,\n    totalRowsHeight\n  }: {\n    scrollLeft: number,\n    scrollTop: number,\n    totalColumnsWidth: number,\n    totalRowsHeight: number\n  }) {\n    this._onScrollMemoizer({\n      callback: ({ scrollLeft, scrollTop }) => {\n        const { height, onScroll, width } = this.props;\n\n        onScroll({\n          clientHeight: height,\n          clientWidth: width,\n          scrollHeight: totalRowsHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth: totalColumnsWidth\n        });\n      },\n      indices: {\n        scrollLeft,\n        scrollTop\n      }\n    });\n  }\n\n  _isScrolling(props: Props = this.props, state: State = this.state): boolean {\n    // If isScrolling is defined in props, use it to override the value in state\n    // This is a performance optimization for WindowScroller + VirtualGrid\n    return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n  }\n\n  _maybeCallOnScrollbarPresenceChange() {\n    if (this._scrollbarPresenceChanged) {\n      const { onScrollbarPresenceChange } = this.props;\n\n      this._scrollbarPresenceChanged = false;\n\n      onScrollbarPresenceChange({\n        horizontal: this._horizontalScrollBarSize > 0,\n        size: this.state.instanceProps.scrollbarSize,\n        vertical: this._verticalScrollBarSize > 0\n      });\n    }\n  }\n\n  _setScrollingContainerRef = (ref: Element) => {\n    this._scrollingContainer = ref;\n  }\n\n  /**\n   * Get the updated state after scrolling to\n   * scrollLeft and scrollTop\n   */\n  static _getScrollToPositionStateUpdate({\n    prevState,\n    scrollLeft,\n    scrollTop\n  }: {\n    prevState: State,\n    scrollLeft?: number,\n    scrollTop?: number\n  }): State {\n    const newState: any = {\n      scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n    };\n\n    if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n      newState.scrollDirectionHorizontal =\n        scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n      newState.scrollLeft = scrollLeft;\n    }\n\n    if (typeof scrollTop === 'number' && scrollTop >= 0) {\n      newState.scrollDirectionVertical =\n        scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n      newState.scrollTop = scrollTop;\n    }\n\n    if (\n      (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft) ||\n      (typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop)\n    ) {\n      return newState;\n    }\n    return null;\n  }\n\n  /**\n   * Scroll to the specified offset(s).\n   * Useful for animating position changes.\n   */\n  scrollToPosition({ scrollLeft, scrollTop }: ScrollPosition) {\n    const stateUpdate = VirtualGrid._getScrollToPositionStateUpdate({\n      prevState: this.state,\n      scrollLeft,\n      scrollTop\n    });\n\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  static _wrapSizeGetter(value: CellSize): CellSizeGetter {\n    return typeof value === 'function' ? value : () => value as any;\n  }\n\n  static _getCalculatedScrollLeft(nextProps: Props, prevState: State) {\n    const { columnCount, height, scrollToAlignment, scrollToColumn, width } = nextProps;\n    const { scrollLeft, instanceProps } = prevState;\n\n    if (columnCount > 0) {\n      const finalColumn = columnCount - 1;\n      const targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n      const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      const scrollBarSize =\n        instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n\n      return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: scrollToAlignment,\n        containerSize: width - scrollBarSize,\n        currentOffset: scrollLeft,\n        targetIndex\n      });\n    }\n    return 0;\n  }\n\n  _getCalculatedScrollLeft(props: Props = this.props, state: State = this.state) {\n    return VirtualGrid._getCalculatedScrollLeft(props, state);\n  }\n\n  static _getScrollLeftForScrollToColumnStateUpdate(nextProps: Props, prevState: State): State {\n    const { scrollLeft } = prevState;\n    const calculatedScrollLeft = VirtualGrid._getCalculatedScrollLeft(nextProps, prevState);\n\n    if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n      return VirtualGrid._getScrollToPositionStateUpdate({\n        prevState,\n        scrollLeft: calculatedScrollLeft,\n        scrollTop: -1\n      });\n    }\n    return null;\n  }\n\n  _updateScrollLeftForScrollToColumn(props: Props = this.props, state: State = this.state) {\n    const stateUpdate = VirtualGrid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  static _getCalculatedScrollTop(nextProps: Props, prevState: State) {\n    const { height, rowCount, scrollToAlignment, scrollToRow, width } = nextProps;\n    const { scrollTop, instanceProps } = prevState;\n\n    if (rowCount > 0) {\n      const finalRow = rowCount - 1;\n      const targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n      const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      const scrollBarSize =\n        instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: scrollToAlignment,\n        containerSize: height - scrollBarSize,\n        currentOffset: scrollTop,\n        targetIndex\n      });\n    }\n    return 0;\n  }\n\n  _getCalculatedScrollTop(props: Props = this.props, state: State = this.state) {\n    return VirtualGrid._getCalculatedScrollTop(props, state);\n  }\n\n  _resetStyleCache() {\n    const styleCache = this._styleCache;\n    const cellCache = this._cellCache;\n    const { isScrollingOptOut } = this.props;\n\n    // Reset cell and style caches once scrolling stops.\n    // This makes VirtualGrid simpler to use (since cells commonly change).\n    // And it keeps the caches from growing too large.\n    // Performance is most sensitive when a user is scrolling.\n    // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n    // This keeps the cellCache to a resonable size.\n    this._cellCache = {};\n    this._styleCache = {};\n\n    // Copy over the visible cell styles so avoid unnecessary re-render.\n    for (let rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n      for (let columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n        const key = `${rowIndex}-${columnIndex}`;\n        this._styleCache[key] = styleCache[key];\n\n        if (isScrollingOptOut) {\n          this._cellCache[key] = cellCache[key];\n        }\n      }\n    }\n  }\n\n  static _getScrollTopForScrollToRowStateUpdate(nextProps: Props, prevState: State): State {\n    const { scrollTop } = prevState;\n    const calculatedScrollTop = VirtualGrid._getCalculatedScrollTop(nextProps, prevState);\n\n    if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n      return VirtualGrid._getScrollToPositionStateUpdate({\n        prevState,\n        scrollLeft: -1,\n        scrollTop: calculatedScrollTop\n      });\n    }\n    return null;\n  }\n\n  _updateScrollTopForScrollToRow(props: Props = this.props, state: State = this.state) {\n    const stateUpdate = VirtualGrid._getScrollTopForScrollToRowStateUpdate(props, state);\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  _onScroll = (event: Event) => {\n    // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n    // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n    // See issue #404 for more information.\n    if (event.target === this._scrollingContainer) {\n      this.handleScrollEvent(event.target as any);\n    }\n  }\n}\n\npolyfill(VirtualGrid);\nexport default VirtualGrid;\n"],"file":"VirtualGrid.js"}