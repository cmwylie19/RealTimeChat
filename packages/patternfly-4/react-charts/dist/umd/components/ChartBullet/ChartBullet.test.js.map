{"version":3,"sources":["../../../esm/components/ChartBullet/ChartBullet.test.js"],"names":["React","Object","values","forEach","isRead","test","view","createElement","ChartBullet","expect","toMatchSnapshot","ariaDesc","ariaTitle","comparativeWarningMeasureData","name","y","labels","datum","maxDomain","primarySegmentedMeasureData","qualitativeRangeData","width"],"mappings":";;;;;;;;;;;;;;;MAAYA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGZC,EAAAA,MAAM,CAACC,MAAP,CAAc,CAAC,IAAD,EAAO,KAAP,CAAd,EAA6BC,OAA7B,CAAqCC,MAAM,IAAI;AAC7CC,IAAAA,IAAI,CAAC,6BAAD,EAAgC,MAAM;AACxC,YAAMC,IAAI,GAAG,qBAAQN,KAAK,CAACO,aAAN,CAAoBC,wBAApB,EAAiC,IAAjC,CAAR,CAAb;AACAC,MAAAA,MAAM,CAACH,IAAD,CAAN,CAAaI,eAAb;AACD,KAHG,CAAJ;AAID,GALD;AAMAL,EAAAA,IAAI,CAAC,wBAAD,EAA2B,MAAM;AACnC,UAAMC,IAAI,GAAG,qBAAQN,KAAK,CAACO,aAAN,CAAoBC,wBAApB,EAAiC;AACpDG,MAAAA,QAAQ,EAAE,kBAD0C;AAEpDC,MAAAA,SAAS,EAAE,sBAFyC;AAGpDC,MAAAA,6BAA6B,EAAE,CAAC;AAC9BC,QAAAA,IAAI,EAAE,SADwB;AAE9BC,QAAAA,CAAC,EAAE;AAF2B,OAAD,CAHqB;AAOpDC,MAAAA,MAAM,EAAE,CAAC;AACPC,QAAAA;AADO,OAAD,KAED,GAAEA,KAAK,CAACH,IAAK,KAAIG,KAAK,CAACF,CAAE,EAToB;AAUpDG,MAAAA,SAAS,EAAE;AACTH,QAAAA,CAAC,EAAE;AADM,OAVyC;AAapDI,MAAAA,2BAA2B,EAAE,CAAC;AAC5BL,QAAAA,IAAI,EAAE,SADsB;AAE5BC,QAAAA,CAAC,EAAE;AAFyB,OAAD,CAbuB;AAiBpDK,MAAAA,oBAAoB,EAAE,CAAC;AACrBN,QAAAA,IAAI,EAAE,OADe;AAErBC,QAAAA,CAAC,EAAE;AAFkB,OAAD,EAGnB;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,CAAC,EAAE;AAFF,OAHmB,CAjB8B;AAwBpDM,MAAAA,KAAK,EAAE;AAxB6C,KAAjC,CAAR,CAAb;AA0BAZ,IAAAA,MAAM,CAACH,IAAD,CAAN,CAAaI,eAAb;AACD,GA5BG,CAAJ","sourcesContent":["import * as React from 'react';\nimport { shallow } from 'enzyme';\nimport { ChartBullet } from './ChartBullet';\nObject.values([true, false]).forEach(isRead => {\n  test('ChartBulletQualitativeRange', () => {\n    const view = shallow(React.createElement(ChartBullet, null));\n    expect(view).toMatchSnapshot();\n  });\n});\ntest('renders component data', () => {\n  const view = shallow(React.createElement(ChartBullet, {\n    ariaDesc: \"Storage capacity\",\n    ariaTitle: \"Bullet chart example\",\n    comparativeWarningMeasureData: [{\n      name: 'Warning',\n      y: 88\n    }],\n    labels: ({\n      datum\n    }) => `${datum.name}: ${datum.y}`,\n    maxDomain: {\n      y: 100\n    },\n    primarySegmentedMeasureData: [{\n      name: 'Measure',\n      y: 50\n    }],\n    qualitativeRangeData: [{\n      name: 'Range',\n      y: 50\n    }, {\n      name: 'Range',\n      y: 75\n    }],\n    width: 450\n  }));\n  expect(view).toMatchSnapshot();\n});\n//# sourceMappingURL=ChartBullet.test.js.map"],"file":"ChartBullet.test.js"}