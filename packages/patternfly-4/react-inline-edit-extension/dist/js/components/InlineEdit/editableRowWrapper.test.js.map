{"version":3,"sources":["../../../../src/components/InlineEdit/editableRowWrapper.test.js"],"names":["TestRow","trRef","propTypes","PropTypes","func","defaultProps","getRowWrapper","row","props","RowWrapper","buildRow","editConfirmationType","TableEditConfirmation","ROW","editConfig","describe","mountOptions","container","beforeEach","attachTo","find","getDOMNode","selector","undefined","afterEach","unmount","test","jest","fn","view","onResize","onScroll","expect","toMatchSnapshot","toHaveBeenCalled","Object","keys","forEach","confirmationType","toHaveLength","detach","isEditing","isParentEditing","isChildEditing","isLastVisibleParent","isTableEditing","isFirstVisible","TABLE_TOP","isLastVisible","TABLE_BOTTOM","NONE","onEditConfirmed","onEditCanceled","React","Fragment","simulate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { mount } from 'enzyme/build';\n\nimport { default as editableRowWrapper } from './editableRowWrapper';\nimport { TableEditConfirmation } from './constants';\nimport { mockClosest } from '../../test-helpers/helpers';\n\nconst TestRow = ({ trRef }) => <tr ref={trRef} />;\n\nTestRow.propTypes = {\n  trRef: PropTypes.func\n};\n\nTestRow.defaultProps = {\n  trRef: null\n};\n\nconst getRowWrapper = (row, props) => {\n  const RowWrapper = editableRowWrapper(TestRow);\n  return <RowWrapper {...props} row={row} />;\n};\n\nconst buildRow = (row = {}, editConfirmationType = TableEditConfirmation.ROW) => ({\n  ...row,\n  editConfig: { editConfirmationType }\n});\n\ndescribe('editableRowWrapper', () => {\n  let mountOptions;\n  let container;\n\n  beforeEach(() => {\n    container = mount(\n      <table>\n        <tbody />\n      </table>\n    );\n    mountOptions = {\n      attachTo: container.find('tbody').getDOMNode()\n    };\n\n    mockClosest(null, selector => (selector === 'table' ? container.getDOMNode() : undefined), true);\n  });\n\n  afterEach(() => {\n    container.unmount();\n  });\n\n  test('renders correctly', () => {\n    const trRef = jest.fn();\n    const view = mount(\n      getRowWrapper(buildRow({}, null), {\n        onResize: jest.fn(),\n        onScroll: jest.fn(),\n        trRef\n      }),\n      mountOptions\n    );\n    expect(view).toMatchSnapshot();\n    expect(trRef).toHaveBeenCalled();\n  });\n\n  test('sets editable row classname', () => {\n    [...Object.keys(TableEditConfirmation), null].forEach(confirmationType => {\n      const view = mount(getRowWrapper(buildRow({}, confirmationType)), mountOptions);\n      expect(view.find('.pf-c-table__editable-row')).toHaveLength(1);\n      view.detach();\n    });\n  });\n\n  test('has inline edit buttons', () => {\n    [\n      buildRow({ isEditing: true }),\n      buildRow({ isEditing: true, isParentEditing: true }), // expandable\n      buildRow({ isEditing: true, isChildEditing: true, isLastVisibleParent: true }), // expandable\n      buildRow({ isTableEditing: true, isFirstVisible: true }, TableEditConfirmation.TABLE_TOP),\n      buildRow({ isTableEditing: true, isLastVisible: true }, TableEditConfirmation.TABLE_BOTTOM)\n    ].forEach(row => {\n      const view = mount(getRowWrapper(row), mountOptions);\n      expect(view.find('.pf-c-table__inline-edit-buttons')).toHaveLength(1);\n      view.detach();\n    });\n  });\n\n  test('does not have inline edit buttons', () => {\n    [\n      buildRow({ isEditing: true }, TableEditConfirmation.NONE),\n      buildRow({ isEditing: true }, TableEditConfirmation.TABLE_TOP),\n      buildRow({ isEditing: true }, TableEditConfirmation.TABLE_BOTTOM),\n      buildRow({ isEditing: true, isParentEditing: true, isLastVisible: true }), // expandable\n      buildRow({ isEditing: true, isChildEditing: true }), // expandable\n      buildRow({ isTableEditing: true, isLastVisible: true }, TableEditConfirmation.NONE),\n      buildRow({ isTableEditing: true, isLastVisible: true }),\n      buildRow({ isTableEditing: true }, TableEditConfirmation.TABLE_TOP),\n      buildRow({ isTableEditing: true }, TableEditConfirmation.TABLE_BOTTOM),\n      buildRow({ isTableEditing: true, isLastVisible: true }, TableEditConfirmation.TABLE_TOP),\n      buildRow({ isTableEditing: true, isFirstVisible: true }, TableEditConfirmation.TABLE_BOTTOM)\n    ].forEach(row => {\n      const view = mount(getRowWrapper(row), mountOptions);\n      expect(view.find('.pf-c-table__inline-edit-buttons')).toHaveLength(0);\n      view.detach();\n    });\n  });\n\n  test('onEditConfirmed and onEditCanceled called', () => {\n    const onEditConfirmed = jest.fn();\n    const onEditCanceled = jest.fn();\n    const row = {\n      isEditing: true,\n      editConfig: {\n        editConfirmationType: TableEditConfirmation.ROW,\n        onEditConfirmed,\n        onEditCanceled\n      }\n    };\n\n    const view = mount(getRowWrapper(row, null, React.Fragment), mountOptions);\n    view.find('.pf-c-table__inline-edit-buttons button.pf-c-button.pf-m-primary').simulate('mouseup');\n    expect(onEditConfirmed).toHaveBeenCalled();\n\n    view.find('.pf-c-table__inline-edit-buttons button.pf-c-button.pf-m-plain').simulate('mouseup');\n    expect(onEditCanceled).toHaveBeenCalled();\n  });\n});\n"],"file":"editableRowWrapper.test.js"}