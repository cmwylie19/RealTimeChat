{"version":3,"sources":["../../../../../src/components/Table/base/body-row.tsx"],"names":["isEqual","isFunction","React","columnsAreEqual","evaluateFormatters","evaluateTransforms","mergeProps","BodyRow","Component","shouldComponentUpdate","nextProps","columns","rowData","props","renderers","row","call","render","onRow","rowKey","rowIndex","createElement","map","column","columnIndex","property","cell","evaluatedProperty","transforms","formatters","extraParameters","transformed","console","warn","key","children","args","Object"],"mappings":"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","sourcesContent":["/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport { isEqual, isFunction } from 'lodash';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, formatterValueType, ColumnType, ColumnsType, RowType, RendererType } from './types';\n\nexport interface BodyRowProps {\n  columns: ColumnsType;\n  renderers: RendererType;\n  onRow?: Function;\n  rowIndex: number;\n  rowData: RowType;\n  rowKey: string;\n}\n\nexport class BodyRow extends React.Component<BodyRowProps, {}> {\n  static defaultProps = {\n    onRow: (...args: any) => Object\n  };\n\n  shouldComponentUpdate(nextProps: BodyRowProps) {\n    const {columns, rowData} = this.props;\n\n    // Check for row based override.\n    const { renderers } = nextProps;\n\n    if (renderers && renderers.row && (renderers.row as React.Component).shouldComponentUpdate) {\n      if (isFunction((renderers.row as React.Component).shouldComponentUpdate)) {\n        return (renderers.row as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !(\n      columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData)    \n      );\n  }\n  render() {\n    const { columns, renderers, onRow, rowKey, rowIndex, rowData } = this.props;\n\n    return React.createElement(\n      renderers.row as createElementType,\n      onRow(rowData, { rowIndex, rowKey }),\n      (columns as []).map((column: ColumnType, columnIndex: number) => {\n        const { property, cell, props } = column;\n        const evaluatedProperty = (property || (cell && cell.property)) as string;\n        const { transforms = [], formatters = [] } = cell || {};\n        const extraParameters = {\n          columnIndex,\n          property: evaluatedProperty,\n          column,\n          rowData,\n          rowIndex,\n          rowKey\n        };\n        const transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n        if (!transformed) {\n          // tslint:disable-next-line:no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n\n        return React.createElement(\n          renderers.cell as createElementType,\n          {\n            key: `${columnIndex}-cell`,\n            ...mergeProps(props, cell && cell.props, transformed)\n          },\n          transformed.children ||\n            evaluateFormatters(formatters)(\n              rowData[`_${evaluatedProperty}`] || rowData[evaluatedProperty] as formatterValueType,\n              extraParameters\n            )\n        );\n      })\n    );\n  }\n}\n"],"file":"body-row.js"}