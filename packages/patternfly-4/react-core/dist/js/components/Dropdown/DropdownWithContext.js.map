{"version":3,"sources":["../../../../src/components/Dropdown/DropdownWithContext.tsx"],"names":["DropdownWithContext","props","React","createRef","openedOnEnter","dropdownItems","length","children","Error","isOpen","className","direction","isPlain","isGrouped","onSelect","position","toggle","autoFocus","id","currentId","component","renderedContent","ariaHasPopup","Children","toArray","baseClass","baseComponent","contextId","BaseComponent","DropdownDirection","up","styles","modifiers","top","expanded","baseComponentRef","map","oneToggle","cloneElement","parentRef","onEnter","Component","DropdownPosition","left","down","Function","prototype"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownMenu } from './DropdownMenu';\nimport { DropdownProps } from './Dropdown';\nimport { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants';\n\nexport class DropdownWithContext extends React.Component<DropdownProps> {\n  openedOnEnter = false;\n  baseComponentRef = React.createRef<any>();\n\n  // seed for the aria-labelledby ID\n  static currentId = 0;\n\n  static defaultProps = {\n    className: '',\n    dropdownItems: [] as any[],\n    isOpen: false,\n    isPlain: false,\n    isGrouped: false,\n    position: DropdownPosition.left,\n    direction: DropdownDirection.down,\n    onSelect: Function.prototype,\n    autoFocus: true\n  };\n\n  constructor(props: DropdownProps) {\n    super(props);\n    if (props.dropdownItems && props.dropdownItems.length > 0 && props.children) {\n      throw new Error(\n        'Children and dropdownItems props have been provided. Only the dropdownItems prop items will be rendered '\n      );\n    }\n  }\n\n  onEnter = () => {\n    this.openedOnEnter = true;\n  }\n\n  componentDidUpdate() {\n    if (!this.props.isOpen) { this.openedOnEnter = false; }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      direction,\n      dropdownItems,\n      isOpen,\n      isPlain,\n      isGrouped,\n      onSelect,\n      position,\n      toggle,\n      autoFocus,\n      ...props\n    } = this.props;\n    const id = toggle.props.id || `pf-toggle-id-${DropdownWithContext.currentId++}`;\n    let component: string;\n    let renderedContent: React.ReactNode[];\n    let ariaHasPopup = false;\n    if (dropdownItems && dropdownItems.length > 0) {\n      component = 'ul';\n      renderedContent = dropdownItems;\n      ariaHasPopup = true;\n    } else {\n      component = 'div';\n      renderedContent = React.Children.toArray(children);\n    }\n    const openedOnEnter = this.openedOnEnter;\n    return (\n      <DropdownContext.Consumer>\n        {({ baseClass, baseComponent, id: contextId }) => {\n          const BaseComponent = baseComponent as any;\n          return (\n            <BaseComponent\n              {...props}\n              className={css(\n                baseClass,\n                direction === DropdownDirection.up && styles.modifiers.top,\n                isOpen && styles.modifiers.expanded,\n                className\n              )}\n              ref={this.baseComponentRef}\n            >\n              {React.Children.map(toggle, (oneToggle) =>\n                React.cloneElement(oneToggle, {\n                  parentRef: this.baseComponentRef,\n                  isOpen,\n                  id,\n                  isPlain,\n                  ariaHasPopup,\n                  onEnter: () => this.onEnter()\n                })\n              )}\n              {isOpen && (\n                <DropdownMenu\n                  component={component}\n                  isOpen={isOpen}\n                  position={position}\n                  aria-labelledby={contextId ? `${contextId}-toggle` : id}\n                  openedOnEnter={openedOnEnter}\n                  isGrouped={isGrouped}\n                  autoFocus={openedOnEnter && autoFocus}\n                >\n                  {renderedContent}\n                </DropdownMenu>\n              )}\n            </BaseComponent>\n          );\n        }}\n      </DropdownContext.Consumer>\n    );\n  }\n}"],"file":"DropdownWithContext.js"}