{"version":3,"sources":["../../../../src/components/TextInput/TextInput.test.js"],"names":["props","onChange","jest","fn","value","test","newValue","event","currentTarget","view","find","simulate","expect","toBeCalledWith","toMatchSnapshot","myMock","global","console","error","toBeCalled","not"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { TextInput } from './TextInput';\n\nconst props = {\n  onChange: jest.fn(),\n  value: 'test input'\n};\n\ntest('input passes value and event to onChange handler', () => {\n  const newValue = 'new test input';\n  const event = {\n    currentTarget: { value: newValue }\n  };\n  const view = shallow(<TextInput {...props} aria-label=\"test input\" />);\n  view.find('input').simulate('change', event);\n  expect(props.onChange).toBeCalledWith(newValue, event);\n});\n\ntest('simple text input', () => {\n  const view = shallow(<TextInput {...props} aria-label=\"simple text input\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('disabled text input', () => {\n  const view = shallow(<TextInput isDisabled aria-label=\"disabled text input\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('readonly text input', () => {\n  const view = shallow(<TextInput isReadOnly value=\"read only\" aria-label=\"readonly text input\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('invalid text input', () => {\n  const view = shallow(<TextInput {...props} required isValid={false} aria-label=\"invalid text input\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('should throw console error when no aria-label, id or aria-labelledby is given', () => {\n  const myMock = jest.fn();\n  global.console = { error: myMock };\n  shallow(<TextInput {...props} />);\n  expect(myMock).toBeCalled();\n});\n\ntest('should not throw console error when id is given but no aria-label or aria-labelledby', () => {\n  const myMock = jest.fn();\n  global.console = { error: myMock };\n  shallow(<TextInput {...props} id=\"5\" />);\n  expect(myMock).not.toBeCalled();\n});\n\ntest('should not throw console error when aria-label is given but no id or aria-labelledby', () => {\n  const myMock = jest.fn();\n  global.console = { error: myMock };\n  shallow(<TextInput {...props} aria-label=\"test input\" />);\n  expect(myMock).not.toBeCalled();\n});\n\ntest('should not throw console error when aria-labelledby is given but no id or aria-label', () => {\n  const myMock = jest.fn();\n  global.console = { error: myMock };\n  shallow(<TextInput {...props} aria-labelledby=\"test input\" />);\n  expect(myMock).not.toBeCalled();\n});\n"],"file":"TextInput.test.js"}