{"version":3,"sources":["../../../src/test-helpers/MockedTableChanges.js"],"names":["withContext","context","contextType","WrappedComponent","WithContext","props","children","Component","propTypes","PropTypes","node","defaultProps","childContextTypes","TableProvider","columns","renderers","header","wrapper","row","cell","any","MockedTableChanges","updateFunc","updateHeaderData","func","array","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,WAAW,GAAG,SAAdA,WAAc;AAAA,0BAAGC,OAAH;AAAA,MAAGA,OAAH,6BAAa,EAAb;AAAA,8BAAiBC,WAAjB;AAAA,MAAiBA,WAAjB,iCAA+B,EAA/B;AAAA,SAAwC,UAAAC,gBAAgB,EAAI;AAAA,QAC/EC,WAD+E;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAEjE;AAChB,iBAAOH,OAAP;AACD;AAJkF;AAAA;AAAA,iCAM1E;AACP,iBAAO,gCAAC,gBAAD,QAAmB,KAAKI,KAAL,CAAWC,QAA9B,CAAP;AACD;AARkF;;AAAA;AAAA,MAC3DC,gBAD2D;;AAUrFH,IAAAA,WAAW,CAACI,SAAZ,GAAwB;AACtBF,MAAAA,QAAQ,EAAEG,sBAAUC;AADE,KAAxB;AAGAN,IAAAA,WAAW,CAACO,YAAZ,GAA2B;AACzBL,MAAAA,QAAQ,EAAE;AADe,KAA3B;AAGAF,IAAAA,WAAW,CAACD,gBAAZ,GAA+BA,gBAA/B;AACAC,IAAAA,WAAW,CAACQ,iBAAZ,GAAgCV,WAAhC;AAEA,WAAOE,WAAP;AACD,GApB0B;AAAA,CAApB;;;AAsBA,IAAMS,aAAa,GAAGb,WAAW,CAAC;AACvCC,EAAAA,OAAO,EAAE;AACPa,IAAAA,OAAO,EAAE,EADF;AAEPC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,OADH;AAENC,QAAAA,GAAG,EAAE,IAFC;AAGNC,QAAAA,IAAI,EAAE;AAHA;AADC;AAFJ,GAD8B;AAWvCjB,EAAAA,WAAW,EAAE;AAAEY,IAAAA,OAAO,EAAEL,sBAAUW,GAArB;AAA0BL,IAAAA,SAAS,EAAEN,sBAAUW;AAA/C;AAX0B,CAAD,CAAX,CAY1B,OAZ0B,CAAtB;;;AAcP,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAAGC,UAAH,SAAGA,UAAH;AAAA,MAAeR,OAAf,SAAeA,OAAf;AAAA,SACzB,gCAAC,mBAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAES,MAAAA,gBAAgB,EAAED;AAApB;AAA9B,KACE,gCAAC,aAAD,QACE,gCAAC,mBAAD;AAAa,IAAA,UAAU,EAAER;AAAzB,IADF,CADF,CADyB;AAAA,CAA3B;;AAQAO,kBAAkB,CAACb,SAAnB,GAA+B;AAC7Bc,EAAAA,UAAU,EAAEb,sBAAUe,IADO;AAE7BV,EAAAA,OAAO,EAAEL,sBAAUgB;AAFU,CAA/B;AAKAJ,kBAAkB,CAACV,YAAnB,GAAkC;AAChCW,EAAAA,UAAU,EAAE;AAAA,WAAMI,SAAN;AAAA,GADoB;AAEhCZ,EAAAA,OAAO,EAAE;AAFuB,CAAlC;eAKeO,kB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableContext } from '../components/Table/Table';\nimport { TableHeader } from '../components/Table';\n\nexport const withContext = ({ context = {}, contextType = {} }) => WrappedComponent => {\n  class WithContext extends Component {\n    getChildContext() {\n      return context;\n    }\n\n    render() {\n      return <WrappedComponent>{this.props.children}</WrappedComponent>;\n    }\n  }\n  WithContext.propTypes = {\n    children: PropTypes.node\n  };\n  WithContext.defaultProps = {\n    children: null\n  };\n  WithContext.WrappedComponent = WrappedComponent;\n  WithContext.childContextTypes = contextType;\n\n  return WithContext;\n};\n\nexport const TableProvider = withContext({\n  context: {\n    columns: [],\n    renderers: {\n      header: {\n        wrapper: 'thead',\n        row: 'tr',\n        cell: 'th'\n      }\n    }\n  },\n  contextType: { columns: PropTypes.any, renderers: PropTypes.any }\n})('table');\n\nconst MockedTableChanges = ({ updateFunc, columns }) => (\n  <TableContext.Provider value={{ updateHeaderData: updateFunc }}>\n    <TableProvider>\n      <TableHeader headerRows={columns} />\n    </TableProvider>\n  </TableContext.Provider>\n);\n\nMockedTableChanges.propTypes = {\n  updateFunc: PropTypes.func,\n  columns: PropTypes.array\n};\n\nMockedTableChanges.defaultProps = {\n  updateFunc: () => undefined,\n  columns: []\n};\n\nexport default MockedTableChanges;\n"],"file":"MockedTableChanges.js"}