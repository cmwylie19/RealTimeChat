{"version":3,"sources":["../../../../src/components/LoginPage/LoginForm.tsx"],"names":["React","Form","FormGroup","ActionGroup","FormHelperText","TextInput","Button","Checkbox","LoginForm","noAutoFocus","className","showHelperText","helperText","usernameLabel","usernameValue","onChangeUsername","undefined","isValidUsername","passwordLabel","passwordValue","onChangePassword","isValidPassword","loginButtonLabel","isLoginButtonDisabled","onLoginButtonClick","rememberMeLabel","isRememberMeChecked","onChangeRememberMe","rememberMeAriaLabel","props","length"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\n\nexport interface LoginFormProps extends React.HTMLProps<HTMLFormElement> {\n  /** Flag to indicate if the first dropdown item should not gain initial focus */\n  noAutoFocus?: boolean;\n  /** Additional classes added to the Login Main Body's Form */\n  className?: string;\n  /** Flag indicating the Helper Text is visible * */\n  showHelperText?: boolean;\n  /** Content displayed in the Helper Text component * */\n  helperText?: React.ReactNode;\n  /** Label for the Username Input Field */\n  usernameLabel?: string;\n  /** Value for the Username */\n  usernameValue?: string;\n  /** Function that handles the onChange event for the Username */\n  onChangeUsername?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Username is valid */\n  isValidUsername?: boolean;\n  /** Label for the Password Input Field */\n  passwordLabel?: string;\n  /** Value for the Password */\n  passwordValue?: string;\n  /** Function that handles the onChange event for the Password */\n  onChangePassword?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Password is valid */\n  isValidPassword?: boolean;\n  /** Label for the Log in Button Input */\n  loginButtonLabel?: string;\n  /** Flag indicating if the Login Button is disabled */\n  isLoginButtonDisabled?: boolean;\n  /** Function that is called when the Login button is clicked */\n  onLoginButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */\n  rememberMeLabel?: string;\n  /** Flag indicating if the remember me Checkbox is checked. */\n  isRememberMeChecked?: boolean;\n  /** Function that handles the onChange event for the Remember Me Checkbox */\n  onChangeRememberMe?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /* THIS PROP IS DEPRECATED AND NO LONGER USED; remove in a future breaking change release\n   * Aria Label for the Remember me checkbox, use this to override using the rememberMeLabel\n   * */\n  rememberMeAriaLabel?: string;\n}\n\nexport const LoginForm: React.FunctionComponent<LoginFormProps> = ({\n  noAutoFocus = false,\n  className = '',\n  showHelperText = false,\n  helperText = null,\n  usernameLabel = 'Username',\n  usernameValue = '',\n  onChangeUsername =  () => undefined as any,\n  isValidUsername = true,\n  passwordLabel = 'Password',\n  passwordValue = '',\n  onChangePassword =  () => undefined as any,\n  isValidPassword = true,\n  loginButtonLabel = 'Log In',\n  isLoginButtonDisabled = false,\n  onLoginButtonClick =  () => undefined as any,\n  rememberMeLabel = '',\n  isRememberMeChecked = false,\n  onChangeRememberMe =  () => undefined as any,\n  rememberMeAriaLabel = '',\n  ...props\n}: LoginFormProps) => (\n  <Form className={className} {...props}>\n    <FormHelperText isError={!isValidUsername || !isValidPassword} isHidden={!showHelperText}>\n      {helperText}\n    </FormHelperText>\n    <FormGroup label={usernameLabel} isRequired isValid={isValidUsername} fieldId=\"pf-login-username-id\">\n      <TextInput autoFocus={!noAutoFocus}\n        id=\"pf-login-username-id\"\n        isRequired\n        isValid={isValidUsername}\n        type=\"text\"\n        name=\"pf-login-username-id\"\n        value={usernameValue}\n        onChange={onChangeUsername}\n      />\n    </FormGroup>\n    <FormGroup label={passwordLabel} isRequired isValid={isValidPassword} fieldId=\"pf-login-password-id\">\n      <TextInput\n        isRequired\n        type=\"password\"\n        id=\"pf-login-password-id\"\n        name=\"pf-login-password-id\"\n        isValid={isValidPassword}\n        value={passwordValue}\n        onChange={onChangePassword}\n      />\n    </FormGroup>\n    {rememberMeLabel.length > 0 && (\n      <FormGroup fieldId=\"pf-login-remember-me-id\">\n        <Checkbox\n          id=\"pf-login-remember-me-id\"\n          label={rememberMeLabel}\n          checked={isRememberMeChecked}\n          onChange={onChangeRememberMe}\n        />\n      </FormGroup>\n    )}\n    <ActionGroup>\n      <Button variant=\"primary\" type=\"submit\" onClick={onLoginButtonClick} isBlock isDisabled={isLoginButtonDisabled}>\n        {loginButtonLabel}\n      </Button>\n    </ActionGroup>\n  </Form>\n);\n"],"file":"LoginForm.js"}