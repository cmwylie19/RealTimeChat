{"version":3,"sources":["../../../../../src/components/Table/base/body-row.tsx"],"names":["BodyRow","nextProps","props","columns","rowData","renderers","row","shouldComponentUpdate","call","onRow","rowKey","rowIndex","React","createElement","map","column","columnIndex","property","cell","evaluatedProperty","transforms","formatters","extraParameters","transformed","console","warn","key","children","Component","Object"],"mappings":"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","sourcesContent":["/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport { isEqual, isFunction } from 'lodash';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, formatterValueType, ColumnType, ColumnsType, RowType, RendererType } from './types';\n\nexport interface BodyRowProps {\n  columns: ColumnsType;\n  renderers: RendererType;\n  onRow?: Function;\n  rowIndex: number;\n  rowData: RowType;\n  rowKey: string;\n}\n\nexport class BodyRow extends React.Component<BodyRowProps, {}> {\n  static defaultProps = {\n    onRow: (...args: any) => Object\n  };\n\n  shouldComponentUpdate(nextProps: BodyRowProps) {\n    const {columns, rowData} = this.props;\n\n    // Check for row based override.\n    const { renderers } = nextProps;\n\n    if (renderers && renderers.row && (renderers.row as React.Component).shouldComponentUpdate) {\n      if (isFunction((renderers.row as React.Component).shouldComponentUpdate)) {\n        return (renderers.row as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !(\n      columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData)    \n      );\n  }\n  render() {\n    const { columns, renderers, onRow, rowKey, rowIndex, rowData } = this.props;\n\n    return React.createElement(\n      renderers.row as createElementType,\n      onRow(rowData, { rowIndex, rowKey }),\n      (columns as []).map((column: ColumnType, columnIndex: number) => {\n        const { property, cell, props } = column;\n        const evaluatedProperty = (property || (cell && cell.property)) as string;\n        const { transforms = [], formatters = [] } = cell || {};\n        const extraParameters = {\n          columnIndex,\n          property: evaluatedProperty,\n          column,\n          rowData,\n          rowIndex,\n          rowKey\n        };\n        const transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n        if (!transformed) {\n          // tslint:disable-next-line:no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n\n        return React.createElement(\n          renderers.cell as createElementType,\n          {\n            key: `${columnIndex}-cell`,\n            ...mergeProps(props, cell && cell.props, transformed)\n          },\n          transformed.children ||\n            evaluateFormatters(formatters)(\n              rowData[`_${evaluatedProperty}`] || rowData[evaluatedProperty] as formatterValueType,\n              extraParameters\n            )\n        );\n      })\n    );\n  }\n}\n"],"file":"body-row.js"}