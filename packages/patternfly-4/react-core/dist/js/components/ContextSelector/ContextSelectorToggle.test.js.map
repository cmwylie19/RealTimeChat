{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelectorToggle.test.tsx"],"names":["test","view","expect","toMatchSnapshot","mockfnOnToggle","jest","fn","find","at","simulate","mock","calls","toHaveLength","key"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,IAAI,CAAC,+BAAD,EAAkC,YAAM;AAC1C,MAAMC,IAAI,GAAG,qBAAQ,gCAAC,4CAAD;AAAuB,IAAA,EAAE,EAAC;AAA1B,IAAR,CAAb;AACAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,4BAAD,EAA+B,YAAM;AACvC,MAAMI,cAAc,GAAGC,IAAI,CAACC,EAAL,EAAvB;AACA,MAAML,IAAI,GAAG,mBAAM,gCAAC,4CAAD;AAAuB,IAAA,QAAQ,EAAEG,cAAjC;AAAiD,IAAA,EAAE,EAAC;AAApD,IAAN,CAAb;AACAH,EAAAA,IAAI,CACDM,IADH,CACQ,QADR,EAEGC,EAFH,CAEM,CAFN,EAGGC,QAHH,CAGY,OAHZ;AAIAP,EAAAA,MAAM,CAACE,cAAc,CAACM,IAAf,CAAoBC,KAArB,CAAN,CAAkCC,YAAlC,CAA+C,CAA/C;AACD,CARG,CAAJ;AAUAZ,IAAI,CAAC,mBAAD,EAAsB,YAAM;AAC9B,MAAMC,IAAI,GAAG,mBAAM,gCAAC,4CAAD;AAAuB,IAAA,MAAM,MAA7B;AAA8B,IAAA,EAAE,EAAC;AAAjC,IAAN,CAAb;AACAA,EAAAA,IAAI,CAACQ,QAAL,CAAc,SAAd,EAAyB;AAAEI,IAAAA,GAAG,EAAE;AAAP,GAAzB;AACAX,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAJG,CAAJ;AAMAH,IAAI,CAAC,kCAAD,EAAqC,YAAM;AAC7C,MAAMC,IAAI,GAAG,mBAAM,gCAAC,4CAAD;AAAuB,IAAA,QAAQ,EAAEI,IAAI,CAACC,EAAL,EAAjC;AAA4C,IAAA,EAAE,EAAC;AAA/C,IAAN,CAAb;AACAL,EAAAA,IAAI,CAACQ,QAAL,CAAc,SAAd,EAAyB;AAAEI,IAAAA,GAAG,EAAE;AAAP,GAAzB;AACAX,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAJG,CAAJ;AAMAH,IAAI,CAAC,qBAAD,EAAwB,YAAM;AAChC,MAAMC,IAAI,GAAG,mBAAM,gCAAC,4CAAD;AAAuB,IAAA,MAAM,MAA7B;AAA8B,IAAA,EAAE,EAAC;AAAjC,IAAN,CAAb;AACAA,EAAAA,IAAI,CAACQ,QAAL,CAAc,SAAd,EAAyB;AAAEI,IAAAA,GAAG,EAAE;AAAP,GAAzB;AACAX,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAJG,CAAJ;AAMAH,IAAI,CAAC,uBAAD,EAA0B,YAAM;AAClC,MAAMC,IAAI,GAAG,mBAAM,gCAAC,4CAAD;AAAuB,IAAA,QAAQ,EAAEI,IAAI,CAACC,EAAL,EAAjC;AAA4C,IAAA,OAAO,EAAED,IAAI,CAACC,EAAL,EAArD;AAAgE,IAAA,EAAE,EAAC;AAAnE,IAAN,CAAb;AACAL,EAAAA,IAAI,CAACQ,QAAL,CAAc,SAAd,EAAyB;AAAEI,IAAAA,GAAG,EAAE;AAAP,GAAzB;AACAX,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAJG,CAAJ","sourcesContent":["import React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\n\ntest('Renders ContextSelectorToggle', () => {\n  const view = shallow(<ContextSelectorToggle id=\"toggle-id\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('Verify onToggle is called ', () => {\n  const mockfnOnToggle = jest.fn();\n  const view = mount(<ContextSelectorToggle onToggle={mockfnOnToggle} id=\"toggle-id\" />);\n  view\n    .find('button')\n    .at(0)\n    .simulate('click');\n  expect(mockfnOnToggle.mock.calls).toHaveLength(1);\n});\n\ntest('Verify ESC press ', () => {\n  const view = mount(<ContextSelectorToggle isOpen id=\"toggle-id\" />);\n  view.simulate('keyDown', { key: 'Escape' });\n  expect(view).toMatchSnapshot();\n});\n\ntest('Verify ESC press with not isOpen', () => {\n  const view = mount(<ContextSelectorToggle onToggle={jest.fn()} id=\"toggle-id\" />);\n  view.simulate('keyDown', { key: 'Escape' });\n  expect(view).toMatchSnapshot();\n});\n\ntest('Verify keydown tab ', () => {\n  const view = mount(<ContextSelectorToggle isOpen id=\"toggle-id\" />);\n  view.simulate('keyDown', { key: 'Tab' });\n  expect(view).toMatchSnapshot();\n});\n\ntest('Verify keydown enter ', () => {\n  const view = mount(<ContextSelectorToggle onToggle={jest.fn()} onEnter={jest.fn()} id=\"toggle-id\" />);\n  view.simulate('keyDown', { key: 'Enter' });\n  expect(view).toMatchSnapshot();\n});\n"],"file":"ContextSelectorToggle.test.js"}