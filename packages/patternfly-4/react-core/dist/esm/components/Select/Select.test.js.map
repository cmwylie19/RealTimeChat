{"version":3,"sources":["../../../../src/components/Select/Select.test.tsx"],"names":["React","mount","Select","SelectOption","CheckboxSelectOption","SelectGroup","CheckboxSelectGroup","SelectVariant","SelectDirection","User","constructor","title","firstName","lastName","selectOptions","checkboxSelectOptions","selectOptionsCustom","describe","test","view","single","jest","fn","expect","toMatchSnapshot","up","customFilter","e","input","RegExp","target","value","err","replace","typeaheadFilteredChildren","filter","child","props","typeahead","find","simulate","update","state","length","toBe","checkbox","mockEvent","inst","instance","onChange","typeaheadMulti","mockToggle","mockSelect","at","mock","calls","toHaveLength","myMock","global","console","error","not","toBeCalled","ToggleIcon"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mount } from 'enzyme';\nimport { Select } from './Select';\nimport { SelectOption, SelectOptionObject } from './SelectOption';\nimport { CheckboxSelectOption } from './CheckboxSelectOption';\nimport { SelectGroup } from './SelectGroup';\nimport { CheckboxSelectGroup } from './CheckboxSelectGroup';\nimport { SelectVariant, SelectDirection } from './selectConstants';\n\nclass User implements SelectOptionObject {\n  private firstName: string;\n  private lastName: string;\n  private title: string;\n\n  constructor(title: string, firstName: string, lastName: string) {\n    this.title = title;\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  toString = (): string => `${this.title}: ${this.firstName} ${this.lastName}`;\n}\n\nconst selectOptions = [\n  <SelectOption value=\"Mr\" key=\"0\" />,\n  <SelectOption value=\"Mrs\" key=\"1\" />,\n  <SelectOption value=\"Ms\" key=\"2\" />,\n  <SelectOption value=\"Other\" key=\"3\" />\n];\n\nconst checkboxSelectOptions = [\n  <CheckboxSelectOption value=\"Mr\" key=\"0\" />,\n  <CheckboxSelectOption value=\"Mrs\" key=\"1\" />,\n  <CheckboxSelectOption value=\"Ms\" key=\"2\" />,\n  <CheckboxSelectOption value=\"Other\" key=\"3\" />\n];\n\nconst selectOptionsCustom = [\n  <SelectOption value={new User('Mr', 'User', 'One')} key=\"0\" />,\n  <SelectOption value={new User('Mrs', 'New', 'User')} key=\"1\" />,\n  <SelectOption value={new User('Ms', 'Test', 'Three')} key=\"2\" />\n];\n\ndescribe('select', () => {\n  describe('single select', () => {\n    test('renders closed successfully', () => {\n      const view = mount(\n        <Select variant={SelectVariant.single} onSelect={jest.fn()} onToggle={jest.fn()}>\n          {selectOptions}\n        </Select>\n      );\n      expect(view).toMatchSnapshot();\n    });\n\n    test('renders disabled successfully', () => {\n      const view = mount(\n        <Select variant={SelectVariant.single} onSelect={jest.fn()} onToggle={jest.fn()} isDisabled>\n          {selectOptions}\n        </Select>\n      );\n      expect(view).toMatchSnapshot();\n    });\n\n    test('renders expanded successfully', () => {\n      const view = mount(\n        <Select variant={SelectVariant.single} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n          {selectOptions}\n        </Select>\n      );\n      expect(view).toMatchSnapshot();\n    });\n    test('renders expanded successfully with custom objects', () => {\n      const view = mount(\n        <Select variant={SelectVariant.single} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n          {selectOptionsCustom}\n        </Select>\n      );\n      expect(view).toMatchSnapshot();\n    });\n  });\n\n  test('renders up drection successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.single} direction={SelectDirection.up} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  describe('custom select filter', () => {\n    test('filters properly', () => {\n      const customFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let input: RegExp;\n        try {\n          input = new RegExp(e.target.value, 'i');\n        } catch (err) {\n          input = new RegExp(e.target.value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n        }\n        const typeaheadFilteredChildren =\n          e.target.value !== ''\n            ? selectOptions.filter((child: React.ReactNode) => input.test((child as React.ReactElement).props.value))\n            : selectOptions;\n        return typeaheadFilteredChildren;\n      };\n      const view = mount(\n        <Select\n          variant={SelectVariant.typeahead}\n          onSelect={jest.fn()}\n          onToggle={jest.fn()}\n          onFilter={customFilter}\n          isExpanded\n        >\n          {selectOptions}\n        </Select>\n      );\n      view.find('input').simulate('change', { target: { value: 'r' } });\n      view.update();\n      expect((view.state('typeaheadFilteredChildren') as []).length).toBe(3);\n      expect(view).toMatchSnapshot();\n    });\n  });\n\n  test('renders select groups successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.single} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded isGrouped>\n        <SelectGroup label=\"group 1\">{selectOptions}</SelectGroup>\n        <SelectGroup label=\"group 2\">{selectOptions}</SelectGroup>\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ndescribe('checkbox select', () => {\n  test('renders closed successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders closed successfully - old classes', () => {\n    const view = mount(\n      <Select variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {checkboxSelectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders expanded successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders expanded successfully - old classes', () => {\n    const view = mount(\n      <Select variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n        {checkboxSelectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders expanded successfully with custom objects', () => {\n    const view = mount(\n      <Select variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n        {selectOptionsCustom}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders checkbox select groups successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded isGrouped>\n        <SelectGroup label=\"group 1\">{selectOptions}</SelectGroup>\n        <SelectGroup label=\"group 2\">{selectOptions}</SelectGroup>\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders checkbox select groups successfully - old classes', () => {\n    const view = mount(\n      <Select variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded isGrouped>\n        <CheckboxSelectGroup label=\"group 1\">{checkboxSelectOptions}</CheckboxSelectGroup>\n        <CheckboxSelectGroup label=\"group 2\">{checkboxSelectOptions}</CheckboxSelectGroup>\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ndescribe('typeahead select', () => {\n  test('renders closed successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.typeahead} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders expanded successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.typeahead} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders selected successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.typeahead} selections=\"Mr\" onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('test onChange', () => {\n    const mockEvent = { target: { value: 'test' } } as React.ChangeEvent<HTMLInputElement>;\n    const view = mount(\n      <Select\n        variant={SelectVariant.typeahead}\n        onSelect={jest.fn()}\n        onToggle={jest.fn()}\n        onClear={jest.fn()}\n        isExpanded\n      >\n        {selectOptions}\n      </Select>\n    );\n    const inst = view.instance() as Select;\n    inst.onChange(mockEvent);\n    view.update();\n    expect(view).toMatchSnapshot();\n  });\n\n  test('test creatable option', () => {\n    const mockEvent = { target: { value: 'test' } } as React.ChangeEvent<HTMLInputElement>;\n    const view = mount(\n      <Select\n        variant={SelectVariant.typeahead}\n        onToggle={jest.fn()}\n        isExpanded\n        isCreatable\n      >\n        {selectOptions}\n      </Select>\n    );\n    const inst = view.instance() as Select;\n    inst.onChange(mockEvent);\n    view.update();\n    expect(view).toMatchSnapshot();\n  });\n});\n\ndescribe('typeahead multi select', () => {\n  test('renders closed successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.typeaheadMulti} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders expanded successfully', () => {\n    const view = mount(\n      <Select variant={SelectVariant.typeaheadMulti} onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('renders selected successfully', () => {\n    const view = mount(\n      <Select\n        variant={SelectVariant.typeaheadMulti}\n        selections={['Mr', 'Mrs']}\n        onSelect={jest.fn()}\n        onToggle={jest.fn()}\n        isExpanded\n      >\n        {selectOptions}\n      </Select>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('test onChange', () => {\n    const mockEvent = { target: { value: 'test' } } as React.ChangeEvent<HTMLInputElement>;\n    const view = mount(\n      <Select\n        variant={SelectVariant.typeahead}\n        onSelect={jest.fn()}\n        onToggle={jest.fn()}\n        onClear={jest.fn()}\n        isExpanded\n      >\n        {selectOptions}\n      </Select>\n    );\n    const inst = view.instance() as Select;\n    inst.onChange(mockEvent);\n    view.update();\n    expect(view).toMatchSnapshot();\n  });\n});\n\ndescribe('API', () => {\n  test('click on item', () => {\n    const mockToggle = jest.fn();\n    const mockSelect = jest.fn();\n    const view = mount(\n      <Select variant=\"single\" onToggle={mockToggle} onSelect={mockSelect} isExpanded>\n        {selectOptions}\n      </Select>\n    );\n    view\n      .find('button')\n      .at(1)\n      .simulate('click');\n    expect(mockToggle.mock.calls).toHaveLength(0);\n    expect(mockSelect.mock.calls).toHaveLength(1);\n  });\n\n  test('children only, no console error', () => {\n    const myMock = jest.fn();\n    global.console = { ...global.console, error: myMock };\n    mount(\n      <Select variant=\"single\" onSelect={jest.fn()} onToggle={jest.fn()} isExpanded>\n        {selectOptions}\n      </Select>\n    );\n    expect(myMock).not.toBeCalled();\n  });\n});\n\ndescribe('toggle icon', () => {\n  const ToggleIcon = <div>Icon</div>;\n  test('select single', () => {\n    const view = mount(\n      <Select toggleIcon={ToggleIcon} variant={SelectVariant.single} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view.find('span.pf-c-select__toggle-icon')).toMatchSnapshot();\n  });\n\n  test('select checkbox', () => {\n    const view = mount(\n      <Select toggleIcon={ToggleIcon} variant={SelectVariant.checkbox} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view.find('span.pf-c-select__toggle-icon')).toMatchSnapshot();\n  });\n\n  test('typeahead select', () => {\n    const view = mount(\n      <Select toggleIcon={ToggleIcon} variant={SelectVariant.typeahead} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view.find('span.pf-c-select__toggle-icon')).toMatchSnapshot();\n  });\n\n  test('typeahead multi select', () => {\n    const view = mount(\n      <Select toggleIcon={ToggleIcon} variant={SelectVariant.typeaheadMulti} onSelect={jest.fn()} onToggle={jest.fn()}>\n        {selectOptions}\n      </Select>\n    );\n    expect(view.find('span.pf-c-select__toggle-icon')).toMatchSnapshot();\n  });\n});\n"],"file":"Select.test.js"}