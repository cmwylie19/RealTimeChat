{"version":3,"sources":["../../../../src/components/Accordion/AccordionContent.tsx"],"names":["React","css","styles","AccordionContext","AccordionContent","className","children","id","isHidden","isFixed","ariaLabel","component","props","ContentContainer","Container","accordionExpandedContent","modifiers","fixed","expanded","accordionExpandedContentBody"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6DAAnB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAmBA,OAAO,MAAMC,gBAAgE,GAAG;AAAA,MAAC;AAC/EC,IAAAA,SAAS,GAAG,EADmE;AAE/EC,IAAAA,QAAQ,GAAG,IAFoE;AAG/EC,IAAAA,EAAE,GAAG,EAH0E;AAI/EC,IAAAA,QAAQ,GAAG,KAJoE;AAK/EC,IAAAA,OAAO,GAAG,KALqE;AAM/E,kBAAcC,SAAS,GAAG,EANqD;AAO/EC,IAAAA;AAP+E,GAAD;AAAA,MAQ3EC,KAR2E;;AAAA,SAU9E,oBAAC,gBAAD,CAAkB,QAAlB,QACG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAA0B;AACzB,UAAMC,SAAS,GAAGH,SAAS,IAAIE,gBAA/B;AACA,WACE,oBAAC,SAAD;AACE,MAAA,EAAE,EAAEN,EADN;AAEE,MAAA,SAAS,EAAEN,GAAG,CACZC,MAAM,CAACa,wBADK,EAEZN,OAAO,IAAIP,MAAM,CAACc,SAAP,CAAiBC,KAFhB,EAGZ,CAACT,QAAD,IAAaN,MAAM,CAACc,SAAP,CAAiBE,QAHlB,EAIZb,SAJY,CAFhB;AAQE,MAAA,MAAM,EAAEG,QARV;AASE,oBAAYE;AATd,OAUME,KAVN,GAYE;AAAK,MAAA,SAAS,EAAEX,GAAG,CAACC,MAAM,CAACiB,4BAAR;AAAnB,OAA2Db,QAA3D,CAZF,CADF;AAgBD,GAnBH,CAV8E;AAAA,CAAzE;;AAfLA,EAAAA,Q;AAEAD,EAAAA,S;AAEAE,EAAAA,E;AAEAC,EAAAA,Q;AAEAC,EAAAA,O;AAEA,c;AAEAE,EAAAA,S","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AccordionContext } from './AccordionContext';\n\nexport interface AccordionContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the Accordion  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion content  */\n  className?: string;\n  /** Identify the AccordionContent item  */\n  id?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isHidden?: boolean;\n  /** Flag to indicate Accordion content is fixed  */\n  isFixed?: boolean;\n  /** Adds accessible text to the Accordion content */\n  'aria-label'?: string;\n  /** Component to use as content container */\n  component?: React.ElementType;\n}\n\nexport const AccordionContent: React.FunctionComponent<AccordionContentProps> = ({\n  className = '',\n  children = null,\n  id = '',\n  isHidden = false,\n  isFixed = false,\n  'aria-label': ariaLabel = '',\n  component,\n  ...props\n}: AccordionContentProps) => (\n  <AccordionContext.Consumer>\n    {({ ContentContainer }) => {\n      const Container = component || ContentContainer;\n      return (\n        <Container\n          id={id}\n          className={css(\n            styles.accordionExpandedContent,\n            isFixed && styles.modifiers.fixed,\n            !isHidden && styles.modifiers.expanded,\n            className\n          )}\n          hidden={isHidden}\n          aria-label={ariaLabel}\n          {...props}\n        >\n          <div className={css(styles.accordionExpandedContentBody)}>{children}</div>\n        </Container>\n      );\n    }}\n  </AccordionContext.Consumer>\n);\n"],"file":"AccordionContent.js"}