{"version":3,"sources":["../../../../src/components/Select/SelectToggle.tsx"],"names":["React","styles","buttonStyles","css","CaretDownIcon","KeyTypes","SelectVariant","SelectToggle","Component","constructor","props","event","parentRef","isExpanded","onToggle","onClose","current","contains","target","toggle","focus","variant","key","Tab","checkbox","Escape","onEnter","handleTypeaheadKeys","ArrowDown","ArrowUp","typeahead","typeaheadMulti","Enter","Space","preventDefault","isTypeahead","createRef","componentDidMount","document","addEventListener","onDocClick","onEscPress","componentWillUnmount","removeEventListener","render","className","children","isFocused","isActive","isHovered","isPlain","isDisabled","id","type","ariaLabelledBy","ariaLabelToggle","toggleProps","selectToggle","modifiers","hover","disabled","active","plain","_event","onKeyDown","selectToggleArrow","button","selectToggleButton","stopPropagation","Function","prototype"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { KeyTypes, SelectVariant } from './selectConstants';\n\nexport interface SelectToggleProps extends React.HTMLProps<HTMLElement> {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if select is expanded */\n  isExpanded?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Callback for toggle close */\n  onClose?: () => void;\n  /** Internal callback for toggle keyboard navigation */\n  handleTypeaheadKeys?: (position: string) => void;\n  /** Element which wraps toggle */\n  parentRef: React.RefObject<HTMLDivElement>;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Flag indicating if select is disabled */\n  isDisabled?: boolean;\n  /** Type of the toggle button, defaults to 'button' */\n  type?: 'reset' | 'button' | 'submit' | undefined;\n  /** Id of label for the Select aria-labelledby */\n  ariaLabelledBy?: string;\n  /** Label for toggle of select variants */\n  ariaLabelToggle?: string;\n  /** Flag for variant, determines toggle rules and interaction */\n  variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n}\n\nexport class SelectToggle extends React.Component<SelectToggleProps> {\n  private toggle: React.RefObject<HTMLDivElement> | React.RefObject<HTMLButtonElement>;\n\n  static defaultProps = {\n    className: '',\n    isExpanded: false,\n    isFocused: false,\n    isHovered: false,\n    isActive: false,\n    isPlain: false,\n    isDisabled: false,\n    variant: false,\n    ariaLabelledBy: '',\n    ariaLabelToggle: '',\n    type: 'button',\n    onToggle: Function.prototype,\n    onEnter: Function.prototype,\n    onClose: Function.prototype\n  };\n\n  constructor(props: SelectToggleProps) {\n    super(props);\n    const { variant } = props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    this.toggle = isTypeahead ? React.createRef<HTMLDivElement>() : React.createRef<HTMLButtonElement>();\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  }\n\n  onDocClick = (event: Event) => {\n    const { parentRef, isExpanded, onToggle, onClose } = this.props;\n    if (isExpanded && parentRef && !parentRef.current.contains(event.target as Node)) {\n      onToggle(false);\n      onClose();\n      this.toggle.current.focus();\n    }\n  }\n\n  onEscPress = (event: KeyboardEvent) => {\n    const { parentRef, isExpanded, variant, onToggle, onClose } = this.props;\n    if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n      return;\n    }\n    if (\n      isExpanded &&\n      (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) &&\n      parentRef &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggle(false);\n      onClose();\n      this.toggle.current.focus();\n    }\n  }\n\n  onKeyDown = (event: React.KeyboardEvent) => {\n    const { isExpanded, onToggle, variant, onClose, onEnter, handleTypeaheadKeys } = this.props;\n    if (\n      (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) &&\n      (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)\n    ) {\n      handleTypeaheadKeys((event.key === KeyTypes.ArrowDown && 'down') || (event.key === KeyTypes.ArrowUp && 'up'));\n    }\n    if (\n      event.key === KeyTypes.Enter &&\n      (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)\n    ) {\n      if (isExpanded) {\n        handleTypeaheadKeys('enter');\n      } else {\n        onToggle(!isExpanded);\n      }\n    }\n\n    if (\n      (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) ||\n      (event.key === KeyTypes.Tab && !isExpanded) ||\n      (event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space) ||\n      ((event.key === KeyTypes.Space || event.key === KeyTypes.Enter) &&\n        (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti))\n    ) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isExpanded) {\n      onToggle(!isExpanded);\n      onClose();\n      this.toggle.current.focus();\n    } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isExpanded) {\n      onToggle(!isExpanded);\n      onEnter();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      isExpanded,\n      isFocused,\n      isActive,\n      isHovered,\n      isPlain,\n      isDisabled,\n      variant,\n      onToggle,\n      onEnter,\n      onClose,\n      handleTypeaheadKeys,\n      parentRef,\n      id,\n      type,\n      ariaLabelledBy,\n      ariaLabelToggle,\n      ...props\n    } = this.props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    const toggleProps: {\n      id: string;\n      'aria-labelledby': string;\n      'aria-expanded': boolean;\n      'aria-haspopup': 'listbox' | null;\n    } = {\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-expanded': isExpanded,\n      'aria-haspopup': (variant !== SelectVariant.checkbox && 'listbox') || null\n    };\n    return (\n      <React.Fragment>\n        {!isTypeahead && (\n          <button\n            {...props}\n            {...toggleProps}\n            ref={this.toggle as React.RefObject<HTMLButtonElement>}\n            type={type}\n            className={css(\n              styles.selectToggle,\n              isFocused && styles.modifiers.focus,\n              isHovered && styles.modifiers.hover,\n              isDisabled && styles.modifiers.disabled,\n              isActive && styles.modifiers.active,\n              isPlain && styles.modifiers.plain,\n              className\n            )}\n            onClick={(_event) => {\n              onToggle(!isExpanded);\n              if (isExpanded) {\n                onClose();\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n            disabled={isDisabled}\n          >\n            {children}\n            <CaretDownIcon className={css(styles.selectToggleArrow)} />\n          </button>\n        )}\n        {isTypeahead && (\n          <div\n            {...props}\n            ref={this.toggle as React.RefObject<HTMLDivElement>}\n            className={css(\n              styles.selectToggle,\n              isFocused && styles.modifiers.focus,\n              isHovered && styles.modifiers.hover,\n              isActive && styles.modifiers.active,\n              isDisabled && styles.modifiers.disabled,\n              isPlain && styles.modifiers.plain,\n              isTypeahead && styles.modifiers.typeahead,\n              className\n            )}\n            onClick={(_event) => {\n              if (!isDisabled) {\n                onToggle(true);\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n          >\n            {children}\n            <button\n              {...toggleProps}\n              className={css(buttonStyles.button, styles.selectToggleButton)}\n              aria-label={ariaLabelToggle}\n              onClick={(_event) => {\n                _event.stopPropagation();\n                onToggle(!isExpanded);\n                if (isExpanded) {\n                  onClose();\n                }\n              }}\n              disabled={isDisabled}\n            >\n              <CaretDownIcon className={css(styles.selectToggleArrow)} />\n            </button>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n"],"file":"SelectToggle.js"}