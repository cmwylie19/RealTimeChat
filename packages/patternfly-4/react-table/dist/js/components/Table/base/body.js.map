{"version":3,"sources":["../../../../../src/components/Table/base/body.tsx"],"names":["BaseBody","props","onRow","ret","nextProps","renderers","body","wrapper","shouldComponentUpdate","call","omitOnRow","rows","rowKey","columns","children","map","rowData","index","key","rowIndex","React","createElement","BodyRow","Component","mappedRows","className","Object","Body"],"mappings":";;;;;;;;;AAMA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYMA,Q;;;;;;;;;;;;;;;;;;gEAsBQ,UAACC,KAAD,EAAsB;AAAA,UACxBC,KADwB,GACND,KADM,CACxBC,KADwB;AAAA,UACdC,GADc,4BACNF,KADM;;AAEhC,aAAOE,GAAP;AACD,K;;;;;;;0CApBqBC,S,EAAsB;AAC1C;AACA;AACA;AACA;AAJ0C,UAKlCC,SALkC,GAKpBD,SALoB,CAKlCC,SALkC;;AAO1C,UAAIA,SAAS,IAAIA,SAAS,CAACC,IAAvB,IAA+BD,SAAS,CAACC,IAAV,CAAeC,OAA9C,IAA0DF,SAAS,CAACC,IAAV,CAAeC,OAAhB,CAA4CC,qBAAzG,EAAgI;AAC9H,YAAI,wBAAYH,SAAS,CAACC,IAAV,CAAeC,OAAhB,CAA4CC,qBAAvD,CAAJ,EAAmF;AACjF,iBAAQH,SAAS,CAACC,IAAV,CAAeC,OAAhB,CAA4CC,qBAA5C,CAAkEC,IAAlE,CAAuE,IAAvE,EAA6EL,SAA7E,EAAwF,EAAxF,EAA4F,EAA5F,CAAP;AACD;;AACD,eAAO,IAAP;AACD;;AAED,aAAO,CAAE,qBAAQ,KAAKM,SAAL,CAAe,KAAKT,KAApB,CAAR,EAAoC,KAAKS,SAAL,CAAeN,SAAf,CAApC,CAAT;AACD;;;6BAOQ;AAAA,wBACuD,KAAKH,KAD5D;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQS,IADR,eACQA,IADR;AAAA,UACcC,MADd,eACcA,MADd;AAAA,UACsBC,OADtB,eACsBA,OADtB;AAAA,UAC+BR,SAD/B,eAC+BA,SAD/B;AAAA,UAC6CJ,KAD7C;;AAEP,UAAMa,QAAQ,GAAIH,IAAD,CAAaI,GAAb,CAAiB,UAACC,OAAD,EAAmBC,KAAnB,EAAqC;AACrE,YAAMC,GAAG,GAAG,kCAAc;AAAEF,UAAAA,OAAO,EAAPA,OAAF;AAAWG,UAAAA,QAAQ,EAAEF,KAArB;AAA4BL,UAAAA,MAAM,EAANA;AAA5B,SAAd,CAAZ;AACA,eAAOQ,KAAK,CAACC,aAAN,CAAoBC,gBAApB,EAA6B;AAClCJ,UAAAA,GAAG,EAAHA,GADkC;AAElCb,UAAAA,SAAS,EAAEA,SAAS,CAACC,IAFa;AAGlCJ,UAAAA,KAAK,EAALA,KAHkC;AAIlCU,UAAAA,MAAM,EAAEM,GAJ0B;AAKlCC,UAAAA,QAAQ,EAAEF,KALwB;AAMlCD,UAAAA,OAAO,EAAPA,OANkC;AAOlCH,UAAAA,OAAO,EAAPA;AAPkC,SAA7B,CAAP;AASD,OAXgB,CAAjB;AAaA,aAAOO,KAAK,CAACC,aAAN,CACLhB,SAAS,CAACC,IAAV,CAAeC,OADV,EAELN,KAFK,EAGLa,QAHK,CAAP;AAKD;;;;EA/CoBM,KAAK,CAACG,S;;gBAAvBvB,Q;AATJE,EAAAA,K;AACAS,EAAAA,I;AACAC,EAAAA,M;AACAC,EAAAA,O;AAEAW,EAAAA,U;AACAC,EAAAA,S;;;gBAGIzB,Q,kBACkB;AACpBE,EAAAA,KAAK,EAAE;AAAA,WAAkBwB,MAAlB;AAAA;AADa,C;;AAiDjB,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAC1B,KAAD;AAAA,SAClB,oBAAC,yBAAD,CAAiB,QAAjB,QACG;AAAA,QAAGY,OAAH,QAAGA,OAAH;AAAA,QAAYR,SAAZ,QAAYA,SAAZ;AAAA,WAA4B,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEQ,OAAnB;AAA4B,MAAA,SAAS,EAAER;AAAvC,OAAsDJ,KAAtD,EAA5B;AAAA,GADH,CADkB;AAAA,CAAb;;;;AA3DLC,EAAAA,K;AACAS,EAAAA,I;AACAC,EAAAA,M;AACAC,EAAAA,O;AAEAW,EAAAA,U;AACAC,EAAAA,S","sourcesContent":["/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { isEqual, isFunction } from 'lodash';\nimport { RowsType, RowType, RowKeyType, RenderersTypes, createElementType, ColumnsType } from './types';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nexport interface BodyProps {\n  onRow?: Function;\n  rows: RowsType;\n  rowKey?: RowKeyType;\n  columns?: ColumnsType;\n  renderers?: RenderersTypes['renderers'];\n  mappedRows?: any;\n  className?: string;\n}\n\nclass BaseBody extends React.Component<BodyProps, {}> {\n  static defaultProps = {\n    onRow: (...args: any) => Object\n  };\n\n  shouldComponentUpdate(nextProps: BodyProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const { renderers } = nextProps;\n\n    if (renderers && renderers.body && renderers.body.wrapper && (renderers.body.wrapper as React.Component).shouldComponentUpdate) {\n      if (isFunction((renderers.body.wrapper as React.Component).shouldComponentUpdate)) {\n        return (renderers.body.wrapper as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n      return true;\n    }\n\n    return !(isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps)));\n  }\n\n  omitOnRow = (props: BodyProps) => {\n    const { onRow, ...ret } = props;\n    return ret;\n  }\n\n  render() {\n    const { onRow, rows, rowKey, columns, renderers, ...props } = this.props;\n    const children = (rows as []).map((rowData: RowType, index: number) => {\n      const key = resolveRowKey({ rowData, rowIndex: index, rowKey });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n\n    return React.createElement(\n      renderers.body.wrapper as createElementType,\n      props,\n      children\n    );\n  }\n}\n\nexport const Body = (props: BodyProps) => (\n  <ProviderContext.Consumer>\n    {({ columns, renderers }) => <BaseBody columns={columns} renderers={renderers} {...props} />}\n  </ProviderContext.Consumer>\n);\n"],"file":"body.js"}