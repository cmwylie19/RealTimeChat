{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggleCheckbox.test.tsx"],"names":["props","onChange","jest","fn","isChecked","test","view","expect","toMatchSnapshot","newValue","event","target","checked","find","simulate","mock","calls","toBe","toMatchObject"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAEC,IAAI,CAACC,EAAL,EADE;AAEZC,EAAAA,SAAS,EAAE;AAFC,CAAd;AAKAC,IAAI,CAAC,YAAD,EAAe,YAAM;AACvB,MAAMC,IAAI,GAAG,qBAAQ,oBAAC,8CAAD;AAAwB,IAAA,SAAS,MAAjC;AAAkC,IAAA,EAAE,EAAC,OAArC;AAA6C,kBAAW;AAAxD,IAAR,CAAb;AACAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,cAAD,EAAiB,YAAM;AACzB,MAAMC,IAAI,GAAG,qBAAQ,oBAAC,8CAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,kBAAW;AAA9C,IAAR,CAAb;AACAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,WAAD,EAAc,YAAM;AACtB,MAAMC,IAAI,GAAG,qBAAQ,oBAAC,8CAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,IAAA,UAAU,MAA7C;AAA8C,kBAAW;AAAzD,iBAAR,CAAb;AACAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,YAAD,EAAe,YAAM;AACvB,MAAMC,IAAI,GAAG,qBAAQ,oBAAC,8CAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,IAAA,UAAU,MAA7C;AAA8C,kBAAW;AAAzD,IAAR,CAAb;AACAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,WAAD,EAAc,YAAM;AACtB,MAAMC,IAAI,GAAG,qBAAQ,oBAAC,8CAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,IAAA,SAAS,EAAE,IAA9C;AAAoD,kBAAW;AAA/D,IAAR,CAAb;AACAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,eAAD,EAAkB,YAAM;AAC1B,MAAMC,IAAI,GAAG,qBACX,oBAAC,8CAAD;AAAwB,IAAA,KAAK,EAAC,OAA9B;AAAsC,IAAA,SAAS,EAAC,WAAhD;AAA4D,IAAA,EAAE,EAAC,OAA/D;AAAuE,IAAA,SAAS,MAAhF;AAAiF,kBAAW;AAA5F,IADW,CAAb;AAGAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CALG,CAAJ;AAOAH,IAAI,CAAC,wBAAD,EAA2B,YAAM;AACnC,MAAMC,IAAI,GAAG,qBACX,oBAAC,8CAAD;AAAwB,IAAA,KAAK,EAAC,OAA9B;AAAsC,uBAAgB,SAAtD;AAAgE,IAAA,EAAE,EAAC,OAAnE;AAA2E,IAAA,SAAS,MAApF;AAAqF,kBAAW;AAAhG,IADW,CAAb;AAGAC,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CALG,CAAJ;AAOAH,IAAI,CAAC,qDAAD,EAAwD,YAAM;AAChE,MAAMI,QAAQ,GAAG,IAAjB;AACA,MAAMC,KAAK,GAAG;AACZC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,OAAO,EAAEH;AAAX;AADI,GAAd;AAGA,MAAMH,IAAI,GAAG,mBAAM,oBAAC,8CAAD;AAAwB,IAAA,EAAE,EAAC;AAA3B,KAAuCN,KAAvC;AAA8C,kBAAW;AAAzD,KAAN,CAAb;AACAM,EAAAA,IAAI,CAACO,IAAL,CAAU,OAAV,EAAmBC,QAAnB,CAA4B,QAA5B,EAAsCJ,KAAtC;AACAH,EAAAA,MAAM,CAACP,KAAK,CAACC,QAAN,CAAec,IAAf,CAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAAN,CAAwCC,IAAxC,CAA6CR,QAA7C;AACAF,EAAAA,MAAM,CAACP,KAAK,CAACC,QAAN,CAAec,IAAf,CAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAAN,CAAwCE,aAAxC,CAAsDR,KAAtD;AACD,CATG,CAAJ","sourcesContent":["import * as React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { DropdownToggleCheckbox } from './DropdownToggleCheckbox';\n\nconst props = {\n  onChange: jest.fn(),\n  isChecked: false\n};\n\ntest('controlled', () => {\n  const view = shallow(<DropdownToggleCheckbox isChecked id=\"check\" aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('uncontrolled', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('with text', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" isDisabled aria-label=\"check\">Some text</DropdownToggleCheckbox>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isDisabled', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" isDisabled aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('3rd state', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" isChecked={null} aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('passing class', () => {\n  const view = shallow(\n    <DropdownToggleCheckbox label=\"label\" className=\"class-123\" id=\"check\" isChecked aria-label=\"check\" />\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('passing HTML attribute', () => {\n  const view = shallow(\n    <DropdownToggleCheckbox label=\"label\" aria-labelledby=\"labelId\" id=\"check\" isChecked aria-label=\"check\" />\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('checkbox passes value and event to onChange handler', () => {\n  const newValue = true;\n  const event = {\n    target: { checked: newValue }\n  };\n  const view = mount(<DropdownToggleCheckbox id=\"check\" {...props} aria-label=\"check\" />);\n  view.find('input').simulate('change', event);\n  expect(props.onChange.mock.calls[0][0]).toBe(newValue);\n  expect(props.onChange.mock.calls[0][1]).toMatchObject(event);\n});\n"],"file":"DropdownToggleCheckbox.test.js"}