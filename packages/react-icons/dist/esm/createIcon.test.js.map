{"version":3,"sources":["../../src/createIcon.test.js"],"names":["React","createIcon","shallow","IconSize","iconDef","name","width","height","svgPath","Icon","test","view","expect","find","prop","toBe","displayName","sm","toMatchSnapshot","exists","title","text","labelledby","id","first","second","not"],"mappings":"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","sourcesContent":["import React from 'react';\nimport createIcon from './createIcon';\nimport { shallow } from 'enzyme';\nimport { IconSize } from './common';\n\nconst iconDef = {\n  name: 'IconName',\n  width: 10,\n  height: 20,\n  svgPath: 'svgPath'\n};\n\nconst Icon = createIcon(iconDef);\n\ntest('sets correct viewBox', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('svg').prop('viewBox')).toBe(`0 0 ${iconDef.width} ${iconDef.height}`);\n});\n\ntest('sets correct svgPath', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('path').prop('d')).toBe(iconDef.svgPath);\n});\n\ntest('sets correct displayName', () => {\n  expect(Icon.displayName).toBe(iconDef.name);\n});\n\ntest('height and width are set from size', () => {\n  const view = shallow(<Icon size={IconSize.sm} />);\n  expect(view.find('svg').prop('width')).toMatchSnapshot('width');\n  expect(view.find('svg').prop('height')).toMatchSnapshot('height');\n});\n\ntest('aria-hidden is true if no title is specified', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('svg').prop('aria-hidden')).toBe(true);\n});\n\ntest('title is not renderd if a title is not passed', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('title').exists()).toBe(false);\n});\n\ntest('aria-labelledby is null if a title is not passed', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('svg').prop('aria-labelledby')).toBe(null);\n});\n\ntest('title is rendered', () => {\n  const title = 'icon title';\n  const view = shallow(<Icon title={title} />);\n  expect(view.find('title').text()).toBe(title);\n});\n\ntest('aria-labelledby matches title id', () => {\n  const view = shallow(<Icon title=\"icon title\" />);\n  const labelledby = view.find('svg').prop('aria-labelledby');\n  const id = view.find('title').prop('id');\n  expect(labelledby).toBe(id);\n});\n\ntest('ids should be unique for each rendered icon', () => {\n  const first = shallow(<Icon title=\"icon title\" />);\n  const second = shallow(<Icon title=\"icon title\" />);\n  expect(first.find('title').prop('id')).not.toBe(second.find('title').prop('id'));\n});\n\ntest('additional props should be spread to the root svg element', () => {\n  const view = shallow(<Icon data-testid=\"icon\" />);\n  expect(view.find('svg')).toMatchSnapshot();\n});\n"],"file":"createIcon.test.js"}