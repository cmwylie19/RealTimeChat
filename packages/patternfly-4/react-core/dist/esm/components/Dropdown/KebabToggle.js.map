{"version":3,"sources":["../../../../src/components/Dropdown/KebabToggle.tsx"],"names":["React","EllipsisVIcon","Toggle","KebabToggle","id","children","className","isOpen","ariaLabel","parentRef","isFocused","isHovered","isActive","isPlain","isDisabled","onToggle","undefined","ref","props","type"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,MAAT,QAAuB,UAAvB;AA+BA,OAAO,MAAMC,WAAsD,GAAG;AAAA,MAAC;AACrEC,IAAAA,EAAE,GAAG,EADgE;AAErEC,IAAAA,QAAQ,GAAG,IAF0D;AAGrEC,IAAAA,SAAS,GAAG,EAHyD;AAIrEC,IAAAA,MAAM,GAAG,KAJ4D;AAKrE,kBAAeC,SAAS,GAAG,SAL0C;AAMrEC,IAAAA,SAAS,GAAG,IANyD;AAOrEC,IAAAA,SAAS,GAAG,KAPyD;AAQrEC,IAAAA,SAAS,GAAG,KARyD;AASrEC,IAAAA,QAAQ,GAAG,KAT0D;AAUrEC,IAAAA,OAAO,GAAG,KAV2D;AAWrEC,IAAAA,UAAU,GAAG,KAXwD;AAYrEC,IAAAA,QAAQ,GAAG,MAAMC,SAZoD;AAarEC,IAAAA;AAbqE,GAAD;AAAA,MAcjEC,KAdiE;;AAAA,SAgBpE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAEd,EADN;AAEE,IAAA,SAAS,EAAEE,SAFb;AAGE,IAAA,MAAM,EAAEC,MAHV;AAIE,kBAAYC,SAJd;AAKE,IAAA,SAAS,EAAEC,SALb;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,SAAS,EAAEC,SAPb;AAQE,IAAA,QAAQ,EAAEC,QARZ;AASE,IAAA,OAAO,EAAEC,OATX;AAUE,IAAA,UAAU,EAAEC,UAVd;AAWE,IAAA,QAAQ,EAAEC;AAXZ,KAYMG,KAZN,GAaE,oBAAC,aAAD,OAbF,CAhBoE;AAAA,CAA/D;;AA3BLd,EAAAA,E;AAEAC,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,M;AAEA,c;AAEAQ,EAAAA,Q;AAEAN,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,Q;AAEAE,EAAAA,U;AAEAD,EAAAA,O;AAEAM,EAAAA,I,aAAO,Q,EAAW,Q,EAAW,O","sourcesContent":["import * as React from 'react';\nimport { DropdownToggleProps } from './DropdownToggle';\nimport { EllipsisVIcon } from '@patternfly/react-icons';\nimport { Toggle } from './Toggle';\n\nexport interface KebabToggleProps extends DropdownToggleProps {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classess applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Label Toggle button */\n  'aria-label'?: string;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isOpen: boolean) => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n}\n\nexport const KebabToggle: React.FunctionComponent<KebabToggleProps> = ({\n  id = '',\n  children = null,\n  className = '',\n  isOpen = false,\n  'aria-label' : ariaLabel = 'Actions',\n  parentRef = null,\n  isFocused = false,\n  isHovered = false,\n  isActive = false,\n  isPlain = false,\n  isDisabled = false,\n  onToggle = () => undefined as void,\n  ref, // Types of Ref are different for React.FC vs React.Component\n  ...props\n}: KebabToggleProps) => (\n  <Toggle\n    id={id}\n    className={className}\n    isOpen={isOpen}\n    aria-label={ariaLabel}\n    parentRef={parentRef}\n    isFocused={isFocused}\n    isHovered={isHovered}\n    isActive={isActive}\n    isPlain={isPlain}\n    isDisabled={isDisabled}\n    onToggle={onToggle}\n    {...props}>\n    <EllipsisVIcon />\n  </Toggle>\n);\n"],"file":"KebabToggle.js"}