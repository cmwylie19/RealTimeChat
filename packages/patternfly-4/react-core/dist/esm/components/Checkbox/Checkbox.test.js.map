{"version":3,"sources":["../../../../src/components/Checkbox/Checkbox.test.tsx"],"names":["React","shallow","Checkbox","props","onChange","jest","fn","isChecked","test","view","expect","toMatchSnapshot","functionLabel","newValue","event","currentTarget","checked","find","simulate","toBeCalledWith"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { shallow } from 'enzyme';\nimport { Checkbox } from './Checkbox';\n\nconst props = {\n  onChange: jest.fn(),\n  isChecked: false\n};\n\ntest('controlled', () => {\n  const view = shallow(<Checkbox isChecked id=\"check\" aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('controlled - 3rd state', () => {\n  const view = shallow(<Checkbox isChecked={null} id=\"check\" aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('uncontrolled', () => {\n  const view = shallow(<Checkbox id=\"check\" aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isDisabled', () => {\n  const view = shallow(<Checkbox id=\"check\" isDisabled aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('label is string', () => {\n  const view = shallow(<Checkbox label=\"Label\" id=\"check\" isChecked aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('label is function', () => {\n  const functionLabel = () => <h1>Header</h1>;\n  const view = shallow(<Checkbox label={functionLabel()} id=\"check\" isChecked aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('label is node', () => {\n  const view = shallow(<Checkbox label={<h1>Header</h1>} id=\"check\" isChecked aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('passing class', () => {\n  const view = shallow(<Checkbox label=\"label\" className=\"class-123\" id=\"check\" isChecked aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('passing HTML attribute', () => {\n  const view = shallow(<Checkbox label=\"label\" aria-labelledby=\"labelId\" id=\"check\" isChecked aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('checkbox passes value and event to onChange handler', () => {\n  const newValue = true;\n  const event = {\n    currentTarget: { checked: newValue }\n  };\n  const view = shallow(<Checkbox id=\"check\" {...props} aria-label=\"check\" />);\n  view.find('input').simulate('change', event);\n  expect(props.onChange).toBeCalledWith(newValue, event);\n});\n"],"file":"Checkbox.test.js"}