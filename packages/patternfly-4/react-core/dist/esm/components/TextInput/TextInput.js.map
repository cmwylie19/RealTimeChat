{"version":3,"sources":["../../../../src/components/TextInput/TextInput.tsx"],"names":["React","styles","css","TextInputTypes","TextInput","Component","constructor","props","event","onChange","currentTarget","value","id","console","error","render","className","type","isValid","isReadOnly","isRequired","isDisabled","formControl","handleChange","undefined"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAIA,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAmCZ,OAAO,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwD;AAY7DC,EAAAA,WAAW,CAACC,KAAD,EAAwB;AACjC,UAAMA,KAAN;;AADiC,0CAQnBC,KAAD,IAA8C;AAC3D,UAAI,KAAKD,KAAL,CAAWE,QAAf,EAAyB;AACvB,aAAKF,KAAL,CAAWE,QAAX,CAAoBD,KAAK,CAACE,aAAN,CAAoBC,KAAxC,EAA+CH,KAA/C;AACD;AACF,KAZkC;;AAEjC,QAAI,CAACD,KAAK,CAACK,EAAP,IAAa,CAACL,KAAK,CAAC,YAAD,CAAnB,IAAqC,CAACA,KAAK,CAAC,iBAAD,CAA/C,EAAoE;AAClE;AACAM,MAAAA,OAAO,CAACC,KAAR,CAAc,aAAd,EAA6B,gEAA7B;AACD;AACF;;AAQDC,EAAAA,MAAM,GAAG;AACP,wBAAoG,KAAKR,KAAzG;AAAA,UAAM;AAAES,MAAAA,SAAF;AAAaC,MAAAA,IAAb;AAAmBN,MAAAA,KAAnB;AAA0BF,MAAAA,QAA1B;AAAoCS,MAAAA,OAApC;AAA6CC,MAAAA,UAA7C;AAAyDC,MAAAA,UAAzD;AAAqEC,MAAAA;AAArE,KAAN;AAAA,UAA0Fd,KAA1F;;AACA,WACE,0CACMA,KADN;AAEE,MAAA,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACqB,WAAR,EAAqBN,SAArB,CAFhB;AAGE,MAAA,QAAQ,EAAE,KAAKO,YAHjB;AAIE,MAAA,IAAI,EAAEN,IAJR;AAKE,MAAA,KAAK,EAAEN,KALT;AAME,sBAAc,CAACO,OANjB;AAOE,MAAA,QAAQ,EAAEE,UAPZ;AAQE,MAAA,QAAQ,EAAEC,UARZ;AASE,MAAA,QAAQ,EAAEF;AATZ,OADF;AAaD;;AAzC4D;;gBAAlDf,S;AAnBXY,EAAAA,S;AAEAK,EAAAA,U;AAEAF,EAAAA,U;AAEAC,EAAAA,U;AAEAF,EAAAA,O;AAEAT,EAAAA,Q;AAEAQ,EAAAA,I,aAAO,M,EAAS,M,EAAS,gB,EAAmB,O,EAAU,O,EAAU,Q,EAAW,U,EAAa,Q,EAAW,K,EAAQ,M,EAAS,K;AAEpHN,EAAAA,K;AAEA,c;;;gBAGWP,S,kBACW;AACpB,gBAAc,IADM;AAEpB,eAAa,EAFO;AAGpB,gBAAc,KAHM;AAIpB,aAAW,IAJS;AAKpB,gBAAc,KALM;AAMpB,gBAAc,KANM;AAOpB,UAAQ,MAPY;AAQpB,cAAY,MAAWoB;AARH,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { Omit } from '../../helpers/typeUtils';\nimport { FormEvent } from 'react';\n\nexport enum TextInputTypes {\n  text = 'text',\n  date = 'date',\n  datetimeLocal = 'datetime-local',\n  email = 'email',\n  month = 'month',\n  number = 'number',\n  password = 'password',\n  search = 'search',\n  tel = 'tel',\n  time = 'time',\n  url = 'url'\n}\n\nexport interface TextInputProps extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'disabled'> {\n  /** Additional classes added to the TextInput. */\n  className?: string;\n  /** Flag to show if the input is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if the input is required. */\n  isRequired?: boolean;\n  /** Flag to show if the input is valid or invalid. */\n  isValid?: boolean;\n  /** A callback for when the input value changes. */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Type that the input accepts. */\n  type?: 'text' | 'date' | 'datetime-local' | 'email' | 'month' | 'number' | 'password' | 'search' | 'tel' | 'time' | 'url';\n  /** Value of the input. */\n  value?: string | number;\n  /** Aria-label. The input requires an associated id or aria-label. */\n  'aria-label'?: string;\n}\n\nexport class TextInput extends React.Component<TextInputProps> {\n  static defaultProps = {\n    'aria-label': null as string,\n    \"className\": '',\n    \"isRequired\": false,\n    \"isValid\": true,\n    \"isDisabled\": false,\n    \"isReadOnly\": false,\n    \"type\": 'text',\n    \"onChange\": (): any => undefined\n  };\n\n  constructor(props: TextInputProps) {\n    super(props);\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // tslint:disable-next-line:no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n  }\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    if (this.props.onChange) {\n      this.props.onChange(event.currentTarget.value, event);\n    }\n  }\n\n  render() {\n    const { className, type, value, onChange, isValid, isReadOnly, isRequired, isDisabled, ...props } = this.props;\n    return (\n      <input\n        {...props}\n        className={css(styles.formControl, className)}\n        onChange={this.handleChange}\n        type={type}\n        value={value}\n        aria-invalid={!isValid}\n        required={isRequired}\n        disabled={isDisabled}\n        readOnly={isReadOnly}\n      />\n    );\n  }\n}\n"],"file":"TextInput.js"}