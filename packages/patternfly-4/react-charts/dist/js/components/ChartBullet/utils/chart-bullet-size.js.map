{"version":3,"sources":["../../../../../src/components/ChartBullet/utils/chart-bullet-size.ts"],"names":["getComparativeMeasureErrorWidth","height","horizontal","themeColor","themeVariant","width","theme","scaleBarWidth","defaultSize","bar","value","ChartBulletStyles","comparativeMeasureErrorWidth","getComparativeMeasureWidth","comparativeMeasureWidth","getComparativeMeasureWarningWidth","comparativeMeasureWarningWidth","getPrimaryDotMeasureSize","scaleSize","group","primaryDotMeasureSize","getPrimarySegmentedMeasureWidth","scale","primarySegmentedMeasureWidth","getQualitativeRangeBarWidth","qualitativeRangeWidth","props","Math","max","rest","round"],"mappings":"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","sourcesContent":["import { ChartThemeDefinition } from '../../ChartTheme';\nimport { ChartBulletStyles }  from '../../ChartTheme';\nimport {\n  getBulletComparativeErrorMeasureTheme,\n  getBulletComparativeMeasureTheme,\n  getBulletComparativeWarningMeasureTheme,\n  getBulletPrimaryDotMeasureTheme,\n  getBulletPrimarySegmentedMeasureTheme,\n  getBulletQualitativeRangeTheme\n} from '../../ChartUtils';\n\ninterface ChartBulletScaleInterface {\n  defaultSize: number; // The default chart size from the theme\n  height: number; // The chart height -- not SVG height\n  horizontal?: boolean; // Flag indicating chart is shown horizontally\n  scale?: number; // The scale factor to reduce / increase the bar width\n  value: number; // The bar height or scatter size from the theme\n  width: number; // The chart width -- not SVG width\n}\n\ninterface ChartBulletSizeInterface {\n  height: number; // The chart height -- not SVG height\n  horizontal?: boolean; // Flag indicating chart is shown horizontally\n  theme?: ChartThemeDefinition;\n  themeColor?: string;\n  themeVariant?: string;\n  width: number;  // The chart width -- not SVG width\n}\n\nexport const getComparativeMeasureErrorWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletComparativeErrorMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.bar.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.comparativeMeasureErrorWidth,\n  width\n});\n\nexport const getComparativeMeasureWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletComparativeMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.bar.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.comparativeMeasureWidth,\n  width\n});\n\nexport const getComparativeMeasureWarningWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletComparativeWarningMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.bar.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.comparativeMeasureWarningWidth,\n  width\n});\n\nexport const getPrimaryDotMeasureSize = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletPrimaryDotMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleSize({\n  defaultSize: theme.group.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.primaryDotMeasureSize,\n  width\n});\n\nexport const getPrimarySegmentedMeasureWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletPrimarySegmentedMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.group.height,\n  height,\n  horizontal,\n  scale: .3,\n  value: ChartBulletStyles.primarySegmentedMeasureWidth,\n  width\n});\n\nexport const getQualitativeRangeBarWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletQualitativeRangeTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.group.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.qualitativeRangeWidth,\n  width\n});\n\nconst scale = ({\n  defaultSize,\n  height,\n  horizontal = true,\n  scale = 1,\n  value,\n  width\n}: ChartBulletScaleInterface) => horizontal\n  ? height > defaultSize\n    ? value + (height - defaultSize) * scale\n    : value - (defaultSize - height) * scale\n  : width > defaultSize\n    ? value + (width - defaultSize) * scale\n    : value - (defaultSize - width) * scale;\n\n// Scale bar width per the given size properties\nexport const scaleBarWidth = (props: ChartBulletScaleInterface) => Math.max(scale(props), 0);\n\n// Scale size per the given size properties\nexport const scaleSize = ({\n  value,\n  ...rest\n}: ChartBulletScaleInterface) => Math.round(\n  scale({\n    scale: 1 / value,\n    value,\n    ...rest,\n  })\n);\n"],"file":"chart-bullet-size.js"}