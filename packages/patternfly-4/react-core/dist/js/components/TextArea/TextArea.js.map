{"version":3,"sources":["../../../../src/components/TextArea/TextArea.tsx"],"names":["TextArea","props","event","onChange","currentTarget","value","id","console","error","className","isValid","isRequired","styles","formControl","handleChange","defaultValue","React","Component"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBaA,Q;;;;;AAQX,oBAAYC,KAAZ,EAAkC;AAAA;;AAAA;;AAChC,kFAAMA,KAAN;;AADgC,mEAQX,UAACC,KAAD,EAAmD;AACxE,UAAI,MAAKD,KAAL,CAAWE,QAAf,EAA0B;AACxB,cAAKF,KAAL,CAAWE,QAAX,CAAoBD,KAAK,CAACE,aAAN,CAAoBC,KAAxC,EAA+CH,KAA/C;AACD;AACF,KAZiC;;AAEhC,QAAI,CAACD,KAAK,CAACK,EAAP,IAAa,CAACL,KAAK,CAAC,YAAD,CAAvB,EAAuC;AACrC;AACAM,MAAAA,OAAO,CAACC,KAAR,CAAc,wEAAd;AACD;;AAL+B;AAMjC;;;;6BAQQ;AAAA,wBAC+D,KAAKP,KADpE;AAAA,UACCQ,SADD,eACCA,SADD;AAAA,UACYJ,KADZ,eACYA,KADZ;AAAA,UACmBF,QADnB,eACmBA,QADnB;AAAA,UAC6BO,OAD7B,eAC6BA,OAD7B;AAAA,UACsCC,UADtC,eACsCA,UADtC;AAAA,UACqDV,KADrD;;AAEP,aACE;AACE,QAAA,SAAS,EAAE,sBAAIW,wBAAOC,WAAX,EAAwBJ,SAAxB,CADb;AAEE,QAAA,QAAQ,EAAE,KAAKK;AAFjB,SAGO,OAAO,KAAKb,KAAL,CAAWc,YAAlB,KAAmC,QAApC,IAAiD;AAAEV,QAAAA,KAAK,EAALA;AAAF,OAHvD;AAIE,wBAAc,CAACK,OAJjB;AAKE,QAAA,QAAQ,EAAEC;AALZ,SAMMV,KANN,EADF;AAUD;;;;EAlC2Be,KAAK,CAACC,S;;;;gBAAvBjB,Q;AAbXS,EAAAA,S;AAEAE,EAAAA,U;AAEAD,EAAAA,O;AAEAL,EAAAA,K;AAEAF,EAAAA,Q;AAEA,c;;;gBAGWH,Q,kBACW;AACpB,eAAa,EADO;AAEpB,gBAAc,KAFM;AAGpB,aAAW,IAHS;AAIpB,gBAAc;AAJM,C","sourcesContent":["import * as React from 'react';\nimport { HTMLProps } from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface TextAreaProps extends Omit<HTMLProps<HTMLTextAreaElement>, 'onChange'> {\n  /** Additional classes added to the TextArea. */\n  className?: string;\n  /** Flag to show if the TextArea is required. */\n  isRequired?: boolean;\n  /** Flag to show if the TextArea is valid or invalid. */\n  isValid?: boolean;\n  /** Value of the TextArea. */\n  value?: string | number;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /** Custom flag to show that the TextArea requires an associated id or aria-label. */\n  'aria-label'?: string;\n}\n\nexport class TextArea extends React.Component<TextAreaProps> {\n  static defaultProps = {\n    \"className\": '',\n    \"isRequired\": false,\n    \"isValid\": true,\n    'aria-label': null as string\n  };\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    if (!props.id && !props['aria-label']) {\n      // tslint:disable-next-line:no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChange ) {\n      this.props.onChange(event.currentTarget.value, event);\n    }\n  }\n\n  render() {\n    const { className, value, onChange, isValid, isRequired, ...props } = this.props;\n    return (\n      <textarea\n        className={css(styles.formControl, className)}\n        onChange={this.handleChange}\n        {...(typeof this.props.defaultValue !== 'string') && { value }}\n        aria-invalid={!isValid}\n        required={isRequired}\n        {...props}\n      />\n    );\n  }\n}\n"],"file":"TextArea.js"}