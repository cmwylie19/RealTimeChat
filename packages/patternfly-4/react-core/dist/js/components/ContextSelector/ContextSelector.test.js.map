{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelector.test.tsx"],"names":["items","test","view","expect","toMatchSnapshot","mockfn","jest","fn","find","at","simulate","mock","calls","toHaveLength"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,KAAK,GAAG,CACZ,gCAAC,wCAAD;AAAqB,EAAA,GAAG,EAAC;AAAzB,gBADY,EAEZ,gCAAC,wCAAD;AAAqB,EAAA,GAAG,EAAC;AAAzB,uBAFY,EAGZ,gCAAC,wCAAD;AAAqB,EAAA,GAAG,EAAC;AAAzB,wBAHY,EAIZ,gCAAC,wCAAD;AAAqB,EAAA,GAAG,EAAC;AAAzB,SAJY,EAKZ,gCAAC,wCAAD;AAAqB,EAAA,GAAG,EAAC;AAAzB,WALY,CAAd;AAQAC,IAAI,CAAC,yBAAD,EAA4B,YAAM;AACpC,MAAMC,IAAI,GAAG,qBAAQ,gCAAC,gCAAD,aAAmBF,KAAnB,MAAR,CAAb;AACAG,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,8BAAD,EAAiC,YAAM;AACzC,MAAMC,IAAI,GAAG,qBAAQ,gCAAC,gCAAD;AAAiB,IAAA,MAAM;AAAvB,UAA0BF,KAA1B,MAAR,CAAb;AACAG,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,4BAAD,EAA+B,YAAM;AACvC,MAAMI,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACA,MAAML,IAAI,GAAG,mBAAM,gCAAC,gCAAD;AAAiB,IAAA,QAAQ,EAAEG;AAA3B,UAAqCL,KAArC,MAAN,CAAb;AACAE,EAAAA,IAAI,CACDM,IADH,CACQ,QADR,EAEGC,EAFH,CAEM,CAFN,EAGGC,QAHH,CAGY,OAHZ;AAIAP,EAAAA,MAAM,CAACE,MAAM,CAACM,IAAP,CAAYC,KAAb,CAAN,CAA0BC,YAA1B,CAAuC,CAAvC;AACD,CARG,CAAJ","sourcesContent":["import React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { ContextSelector } from './ContextSelector';\nimport { ContextSelectorItem } from './ContextSelectorItem';\n\nconst items = [\n  <ContextSelectorItem key=\"0\">My Project</ContextSelectorItem>,\n  <ContextSelectorItem key=\"1\">OpenShift Cluster</ContextSelectorItem>,\n  <ContextSelectorItem key=\"2\">Production Ansible</ContextSelectorItem>,\n  <ContextSelectorItem key=\"3\">AWS</ContextSelectorItem>,\n  <ContextSelectorItem key=\"4\">Azure</ContextSelectorItem>\n];\n\ntest('Renders ContextSelector', () => {\n  const view = shallow(<ContextSelector> {items} </ContextSelector>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('Renders ContextSelector open', () => {\n  const view = shallow(<ContextSelector isOpen> {items} </ContextSelector>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('Verify onToggle is called ', () => {\n  const mockfn = jest.fn();\n  const view = mount(<ContextSelector onToggle={mockfn}> {items} </ContextSelector>);\n  view\n    .find('button')\n    .at(0)\n    .simulate('click');\n  expect(mockfn.mock.calls).toHaveLength(1);\n});\n"],"file":"ContextSelector.test.js"}