{"version":3,"sources":["../../../../../../src/components/InlineEdit/utils/formatters/inlineEditFormatterFactory.test.js"],"names":["default","inlineEditFormatterFactory","blue","alteredValue","buildAdditionalData","data","isEditing","activeEditId","rowData","editConfig","describe","test","additionalData","expect","toBe","resolveValue","value","renderValue","renderEdit"],"mappings":"AAAA,SAASA,OAAO,IAAIC,0BAApB,QAAsD,8BAAtD;AAEA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,YAAY,GAAG,QAArB;;AAEA,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAOC,SAAS,GAAG,IAAnB,EAAyBC,YAAY,GAAG,QAAxC,MAAsD;AAChFC,EAAAA,OAAO,EAAE;AACPF,IAAAA,SADO;AAEPG,IAAAA,UAAU,EAAE;AACVF,MAAAA;AADU,KAFL;AAKPF,IAAAA;AALO;AADuE,CAAtD,CAA5B;;AAUAK,QAAQ,CAAC,4BAAD,EAA+B,MAAM;AAC3CC,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClC,UAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,CAA1C;AAEAU,IAAAA,MAAM,CAACZ,0BAA0B,GAAGC,IAAH,EAASU,cAAT,CAA3B,CAAN,CAA2DE,IAA3D,CAAgEZ,IAAhE;AACD,GAJG,CAAJ;AAMAS,EAAAA,IAAI,CAAC,wBAAD,EAA2B,MAAM;AACnC,UAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,CAA1C;AAEAU,IAAAA,MAAM,CACJZ,0BAA0B,CAAC;AACzBc,MAAAA,YAAY,EAAE,CAACC,KAAD,EAAQ;AAAER,QAAAA;AAAF,OAAR,KAAwBA,OAAO,CAACH;AADrB,KAAD,CAA1B,CAEGH,IAFH,EAESU,cAFT,CADI,CAAN,CAIEE,IAJF,CAIOX,YAJP;AAKD,GARG,CAAJ;AAUAQ,EAAAA,IAAI,CAAC,mCAAD,EAAsC,MAAM;AAC9C,UAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,EAAe,KAAf,CAA1C;AAEAU,IAAAA,MAAM,CACJZ,0BAA0B,CAAC;AACzBc,MAAAA,YAAY,EAAE,CAACC,KAAD,EAAQ;AAAER,QAAAA;AAAF,OAAR,KAAwBA,OAAO,CAACH,IADrB;AAEzBY,MAAAA,WAAW,EAAED,KAAK,IAAK,SAAQA,KAAM,EAFZ;AAGzBE,MAAAA,UAAU,EAAEF,KAAK,IAAK,WAAUA,KAAM;AAHb,KAAD,CAA1B,CAIGd,IAJH,EAISU,cAJT,CADI,CAAN,CAMEE,IANF,CAMQ,SAAQX,YAAa,EAN7B;AAOD,GAVG,CAAJ;AAYAQ,EAAAA,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,UAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,CAA1C;AAEAU,IAAAA,MAAM,CACJZ,0BAA0B,CAAC;AACzBc,MAAAA,YAAY,EAAE,CAACC,KAAD,EAAQ;AAAER,QAAAA;AAAF,OAAR,KAAwBA,OAAO,CAACH,IADrB;AAEzBa,MAAAA,UAAU,EAAEF,KAAK,IAAK,SAAQA,KAAM;AAFX,KAAD,CAA1B,CAGGd,IAHH,EAGSU,cAHT,CADI,CAAN,CAKEE,IALF,CAKQ,SAAQX,YAAa,EAL7B;AAMD,GATG,CAAJ;AAWAQ,EAAAA,IAAI,CAAC,sBAAD,EAAyB,MAAM;AACjC,UAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,EAAe,IAAf,EAAqB,MAArB,CAA1C;AAEAU,IAAAA,MAAM,CACJZ,0BAA0B,CAAC;AACzBiB,MAAAA,UAAU,EAAE,CAACF,KAAD,EAAQX,IAAR,EAAc;AAAEE,QAAAA;AAAF,OAAd,KAAmCA;AADtB,KAAD,CAA1B,CAEGL,IAFH,EAESU,cAFT,CADI,CAAN,CAIEE,IAJF,CAIO,MAJP;AAKD,GARG,CAAJ;AASD,CAjDO,CAAR","sourcesContent":["import { default as inlineEditFormatterFactory } from './inlineEditFormatterFactory';\n\nconst blue = 'blue';\nconst alteredValue = 'violet';\n\nconst buildAdditionalData = (data, isEditing = true, activeEditId = 'testId') => ({\n  rowData: {\n    isEditing,\n    editConfig: {\n      activeEditId\n    },\n    data\n  }\n});\n\ndescribe('inlineEditFormatterFactory', () => {\n  test('renders default value', () => {\n    const additionalData = buildAdditionalData(alteredValue);\n\n    expect(inlineEditFormatterFactory()(blue, additionalData)).toBe(blue);\n  });\n\n  test('renders resolved value', () => {\n    const additionalData = buildAdditionalData(alteredValue);\n\n    expect(\n      inlineEditFormatterFactory({\n        resolveValue: (value, { rowData }) => rowData.data\n      })(blue, additionalData)\n    ).toBe(alteredValue);\n  });\n\n  test('renders resolved and render value', () => {\n    const additionalData = buildAdditionalData(alteredValue, false);\n\n    expect(\n      inlineEditFormatterFactory({\n        resolveValue: (value, { rowData }) => rowData.data,\n        renderValue: value => `ultra ${value}`,\n        renderEdit: value => `violent ${value}`\n      })(blue, additionalData)\n    ).toBe(`ultra ${alteredValue}`);\n  });\n\n  test('renders resolved and render edit value', () => {\n    const additionalData = buildAdditionalData(alteredValue);\n\n    expect(\n      inlineEditFormatterFactory({\n        resolveValue: (value, { rowData }) => rowData.data,\n        renderEdit: value => `ultra ${value}`\n      })(blue, additionalData)\n    ).toBe(`ultra ${alteredValue}`);\n  });\n\n  test('passes computed data', () => {\n    const additionalData = buildAdditionalData(alteredValue, true, 'myId');\n\n    expect(\n      inlineEditFormatterFactory({\n        renderEdit: (value, data, { activeEditId }) => activeEditId\n      })(blue, additionalData)\n    ).toBe('myId');\n  });\n});\n"],"file":"inlineEditFormatterFactory.test.js"}