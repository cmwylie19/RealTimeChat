{"version":3,"sources":["../../../../src/components/Progress/Progress.tsx"],"names":["ProgressSize","Progress","props","id","className","size","value","title","label","variant","measureLocation","min","max","valueText","additionalProps","ariaProps","scaledValue","Math","floor","styles","progress","ProgressMeasureLocation","inside","lg","React","Component","top","ProgressVariant","info"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { ProgressContainer, ProgressMeasureLocation, ProgressVariant } from './ProgressContainer';\nimport { getUniqueId } from '../../helpers/util';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport enum ProgressSize {\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n}\n\nexport interface ProgressProps extends Omit<React.HTMLProps<HTMLDivElement>, 'size' | 'label'> {\n  /** Classname for progress component. */\n  className?: string;\n  /** Size variant of progress. */\n  size?: 'sm' | 'md' | 'lg';\n  /** Where the measure percent will be located. */\n  measureLocation?: 'outside' | 'inside' | 'top' | 'none';\n  /** Status variant of progress. */\n  variant?: 'danger' | 'success' | 'info';\n  /** Title above progress. */\n  title?: string;\n  /** Text description of current progress value to display instead of percentage. */\n  label?: React.ReactNode;\n  /** Actual value of progress. */\n  value?: number;\n  /** DOM id for progress component. */\n  id?: string;\n  /** Minimal value of progress. */\n  min?: number;\n  /** Maximum value of progress. */\n  max?: number;\n  /** Accessible text description of current progress value, for when value is not a percentage. Use with label. */\n  valueText?: string;\n}\n\nexport class Progress extends React.Component<ProgressProps> {\n  static defaultProps = {\n    className: '',\n    measureLocation: ProgressMeasureLocation.top,\n    variant: ProgressVariant.info,\n    id: '',\n    title: '',\n    min: 0,\n    max: 100,\n    size: null as ProgressSize,\n    label: null as React.ReactNode,\n    value: 0,\n    valueText: null as string\n  };\n\n  id = this.props.id || getUniqueId();\n\n  render() {\n    const {\n      id,\n      className,\n      size,\n      value,\n      title,\n      label,\n      variant,\n      measureLocation,\n      min,\n      max,\n      valueText,\n      ...props\n    } = this.props;\n    const additionalProps = {\n      ...props,\n      ...(valueText ? { 'aria-valuetext': valueText } : { 'aria-describedby': `${this.id}-description` })\n    };\n\n    const ariaProps: {[k: string]: any} = {\n      'aria-describedby': `${this.id}-description`,\n      'aria-valuemin': min,\n      'aria-valuenow': value,\n      'aria-valuemax': max\n    };\n\n    if (valueText) {\n      ariaProps['aria-valuetext'] = valueText;\n    }\n\n    const scaledValue = Math.min(100, Math.max(0, Math.floor(((value - min) / (max - min)) * 100)));\n    return (\n      <div\n        {...additionalProps}\n        className={css(\n          styles.progress,\n          getModifier(styles, variant, ''),\n          getModifier(styles, measureLocation, ''),\n          getModifier(styles, measureLocation === ProgressMeasureLocation.inside ? ProgressSize.lg : size, ''),\n          !title && getModifier(styles, 'singleline', ''),\n          className\n        )}\n        id={this.id}\n        role=\"progressbar\"\n      >\n        <ProgressContainer\n          parentId={this.id}\n          value={scaledValue}\n          title={title}\n          label={label}\n          variant={variant}\n          measureLocation={measureLocation}\n          ariaProps={ariaProps}\n        />\n      </div>\n    );\n  }\n}\n"],"file":"Progress.js"}