{"version":3,"sources":["../../../../src/components/Nav/NavList.tsx"],"names":["React","NavVariants","styles","css","AngleLeftIcon","AngleRightIcon","isElementInView","NavContext","NavList","Component","createRef","navList","current","updateScrollButtonState","context","container","showLeftScrollButton","firstChild","showRightScrollButton","lastChild","childrenArr","Array","from","children","firstElementInView","lastElementOutOfView","i","length","scrollLeft","scrollWidth","handleScrollButtons","lastElementInView","firstElementOutOfView","componentDidMount","variant","props","isHorizontal","horizontal","tertiary","window","addEventListener","componentWillUnmount","document","removeEventListener","render","className","ariaLeftScroll","ariaRightScroll","variantStyle","default","simple","navSimpleList","navHorizontalList","navTertiaryList","navScrollButton","scrollRight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { NavVariants } from './NavVariants';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport { AngleLeftIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\n\nexport interface NavListProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement> {\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Additional classes added to the list */\n  className?: string;\n  /** Indicates the list type. */\n  variant?: 'default' | 'simple' | 'horizontal' | 'tertiary';\n  /** aria-label for the left scroll button */\n  ariaLeftScroll?: string;\n  /** aria-label for the right scroll button */\n  ariaRightScroll?: string;\n}\n\nexport class NavList extends React.Component<NavListProps> {\n  static contextType = NavContext;\n\n  static defaultProps: NavListProps = {\n    variant: 'default',\n    children: null as React.ReactNode,\n    className: '',\n    ariaLeftScroll: 'Scroll left',\n    ariaRightScroll: 'Scroll right'\n  };\n\n  navList = React.createRef<HTMLUListElement>();\n\n  handleScrollButtons = () => {\n    if (this.navList.current) {\n      const { updateScrollButtonState } = this.context;\n      const container = this.navList.current;\n      // get first element and check if it is in view\n      const showLeftScrollButton = !isElementInView(container, container.firstChild as HTMLElement, false);\n\n      // get last element and check if it is in view\n      const showRightScrollButton = !isElementInView(container, container.lastChild as HTMLElement, false);\n\n      updateScrollButtonState({\n        showLeftScrollButton,\n        showRightScrollButton\n      });\n    }\n  }\n\n  scrollLeft = () => {\n    // find first Element that is fully in view on the left, then scroll to the element before it\n    if (this.navList.current) {\n      const container = this.navList.current;\n      const childrenArr = Array.from(container.children);\n      let firstElementInView: Element;\n      let lastElementOutOfView: Element;\n      for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          firstElementInView = childrenArr[i];\n          lastElementOutOfView = childrenArr[i - 1];\n        }\n      }\n      if (lastElementOutOfView) {\n        container.scrollLeft -= lastElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  }\n\n  scrollRight = () => {\n    // find last Element that is fully in view on the right, then scroll to the element after it\n    if (this.navList.current) {\n      const container = this.navList.current;\n      const childrenArr = Array.from(container.children);\n      let lastElementInView: Element;\n      let firstElementOutOfView: Element;\n      for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          lastElementInView = childrenArr[i];\n          firstElementOutOfView = childrenArr[i + 1];\n        }\n      }\n      if (firstElementOutOfView) {\n        container.scrollLeft += firstElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  }\n\n  componentDidMount() {\n    const { variant } = this.props;\n    const isHorizontal = variant === NavVariants.horizontal || variant === NavVariants.tertiary;\n    if (isHorizontal) {\n      window.addEventListener('resize', this.handleScrollButtons, false);\n      // call the handle resize function to check if scroll buttons should be shown\n      this.handleScrollButtons();\n    }\n  }\n\n  componentWillUnmount() {\n    const { variant } = this.props;\n    const isHorizontal = variant === NavVariants.horizontal || variant === NavVariants.tertiary;\n    if (isHorizontal) {\n      document.removeEventListener('resize', this.handleScrollButtons, false);\n    }\n  }\n\n  render() {\n    const { variant, children, className, ariaLeftScroll, ariaRightScroll, ...props } = this.props;\n    const variantStyle = {\n      [NavVariants.default]: styles.navList,\n      [NavVariants.simple]: styles.navSimpleList,\n      [NavVariants.horizontal]: styles.navHorizontalList,\n      [NavVariants.tertiary]: styles.navTertiaryList\n    };\n    const isHorizontal = variant === NavVariants.horizontal || variant === NavVariants.tertiary;\n\n    return (\n      <>\n        {isHorizontal && (\n          <button className={css(styles.navScrollButton)} aria-label={ariaLeftScroll} onClick={this.scrollLeft}>\n            <AngleLeftIcon />\n          </button>\n        )}\n        <ul ref={this.navList} className={css(variantStyle[variant], className)} {...props}>\n          {children}\n        </ul>\n        {isHorizontal && (\n          <button className={css(styles.navScrollButton)} aria-label={ariaRightScroll} onClick={this.scrollRight}>\n            <AngleRightIcon />\n          </button>\n        )}\n      </>\n    );\n  }\n}\n"],"file":"NavList.js"}