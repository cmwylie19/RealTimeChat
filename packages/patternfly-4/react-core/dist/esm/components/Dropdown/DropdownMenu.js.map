{"version":3,"sources":["../../../../src/components/Dropdown/DropdownMenu.tsx"],"names":["React","ReactDOM","styles","css","keyHandler","DropdownPosition","DropdownArrowContext","DropdownContext","DropdownMenu","Component","index","position","custom","refsCollection","props","isGrouped","Children","toArray","children","node","isDisabled","isSeparator","innerNode","childNodes","length","getAttribute","findDOMNode","componentDidMount","autoFocus","component","focusTarget","find","ref","hasAttribute","focus","searchedFocusTarget","extendChildren","map","groupedChildren","group","cloneElement","constructor","Array","option","child","render","className","isOpen","openedOnEnter","childKeyHandler","sendRef","onSelect","menuClass","right","modifiers","alignRight","event","menuComponent","MenuComponent","left"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { keyHandler } from '../../helpers/util';\nimport { DropdownPosition, DropdownArrowContext, DropdownContext } from './dropdownConstants';\nimport { KEY_CODES, KEYHANDLER_DIRECTION } from '../../helpers/constants';\n\nexport interface DropdownMenuProps {\n  /** Anything which can be rendered as dropdown items */\n  children?: React.ReactNode;\n  /** Classess applied to root element of dropdown menu */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Flag to indicate if menu should be opened on enter */\n  openedOnEnter?: boolean;\n  /** Flag to indicate if the first dropdown item should gain initial focus, set false when adding\n   * a specific auto-focus item (like a current selection) otherwise leave as true\n   */\n  autoFocus?: boolean;\n  /** Indicates which component will be used as dropdown menu */\n  component?: React.ReactNode;\n  /** Indicates where menu will be alligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Flag to indicate if menu is grouped */\n  isGrouped?: boolean;\n}\n\nexport interface DropdownMenuItem extends React.HTMLAttributes<any> {\n  isDisabled: boolean;\n  disabled: boolean;\n  isHovered: boolean;\n  ref: HTMLElement;\n}\n\nexport class DropdownMenu extends React.Component<DropdownMenuProps> {\n  refsCollection = [] as HTMLElement[];\n\n  static defaultProps = {\n    className: '',\n    isOpen: true,\n    openedOnEnter: false,\n    autoFocus: true,\n    position: DropdownPosition.left,\n    component: 'ul',\n    isGrouped: false\n  };\n\n  componentDidMount() {\n    const { autoFocus } = this.props;\n    if (this.props.component === 'ul' && autoFocus) {\n      const focusTarget = this.refsCollection.find(\n        (ref) => {\n          return ref && !ref.hasAttribute('disabled')\n        }\n      );\n      if (focusTarget) {\n        if (focusTarget.focus) {\n          focusTarget.focus();\n        } else {\n          const searchedFocusTarget = ReactDOM.findDOMNode(focusTarget) as HTMLElement;\n          searchedFocusTarget.focus();\n        }\n      } else if (focusTarget) {\n         // eslint-disable-line react/no-find-dom-node\n      }\n    }\n  }\n\n  childKeyHandler = (index: number, position: string, custom = false) => {\n    keyHandler(\n      index,\n      position,\n      this.refsCollection,\n      this.props.isGrouped ? this.refsCollection : React.Children.toArray(this.props.children),\n      custom\n    );\n  }\n\n  sendRef = (index: number, node: any, isDisabled: boolean, isSeparator: boolean) => {\n    // since the ref is on the outer <li>, target the inner child for focusing and keyboard navigation\n    const innerNode = node.childNodes && node.childNodes.length ? node.childNodes[0] : node;\n    if (!innerNode.getAttribute) {\n      // eslint-disable-line react/no-find-dom-node\n      this.refsCollection[index] = ReactDOM.findDOMNode(innerNode) as HTMLElement;\n    } else if (isDisabled || isSeparator) {\n      this.refsCollection[index] = null;\n    } else {\n      this.refsCollection[index] = innerNode;\n    }\n  }\n\n  extendChildren() {\n    const { children, isGrouped } = this.props;\n    if (isGrouped) {\n      let index = 0;\n      return React.Children.map(children, (groupedChildren) => {\n          const group = groupedChildren as React.ReactElement<{children: React.ReactNode}>;\n          return React.cloneElement(group, {\n            ...(group.props && group.props.children && {\n              children:\n                (group.props.children.constructor === Array &&\n                  React.Children.map(group.props.children as React.ReactElement<any>,\n                    (option: React.ReactElement<any>) =>\n                      React.cloneElement(option, {\n                        index: index++\n                      })\n                  )) ||\n                React.cloneElement(group.props.children as React.ReactElement<any>, {\n                  index: index++\n                })\n            })\n          });\n      });\n    }\n    return React.Children.map(children, (child, index) =>\n      React.cloneElement(child as React.ReactElement<any>, {\n        index\n      })\n    );\n  }\n\n  render() {\n    const {\n      className,\n      isOpen,\n      position,\n      children,\n      component,\n      isGrouped,\n      openedOnEnter,\n      ...props\n    } = this.props;\n    return (\n      <DropdownArrowContext.Provider\n        value={{\n          keyHandler: this.childKeyHandler,\n          sendRef: this.sendRef\n        }}\n      >\n        {component === 'div' ? (\n          <DropdownContext.Consumer>\n            {({ onSelect, menuClass }) => (\n              <div\n                className={css(\n                  menuClass,\n                  position === DropdownPosition.right && styles.modifiers.alignRight,\n                  className\n                )}\n                hidden={!isOpen}\n                onClick={(event) => onSelect && onSelect(event)}\n              >\n                {children}\n              </div>\n            )}\n          </DropdownContext.Consumer>\n        ) : (\n          (isGrouped && (\n            <DropdownContext.Consumer>\n              {({ menuClass, menuComponent }) => {\n                const MenuComponent = (menuComponent || 'div') as any;\n                return (\n                  <MenuComponent\n                    {...props}\n                    className={css(\n                      menuClass,\n                      position === DropdownPosition.right && styles.modifiers.alignRight,\n                      className\n                    )}\n                    hidden={!isOpen}\n                    role=\"menu\"\n                  >\n                    {this.extendChildren()}\n                  </MenuComponent>\n                );\n              }}\n            </DropdownContext.Consumer>\n          )) || (\n            <DropdownContext.Consumer>\n              {({ menuClass, menuComponent }) => {\n                const MenuComponent = (menuComponent || component) as any;\n                return (\n                  <MenuComponent\n                    {...props}\n                    className={css(\n                      menuClass,\n                      position === DropdownPosition.right && styles.modifiers.alignRight,\n                      className\n                    )}\n                    hidden={!isOpen}\n                    role=\"menu\"\n                  >\n                    {this.extendChildren()}\n                  </MenuComponent>\n                );\n              }}\n            </DropdownContext.Consumer>\n          )\n        )}\n      </DropdownArrowContext.Provider>\n    );\n  }\n}\n"],"file":"DropdownMenu.js"}