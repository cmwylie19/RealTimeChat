{"version":3,"sources":["../../../../src/components/TextArea/TextArea.test.js"],"names":["React","shallow","TextArea","props","onChange","jest","fn","value","test","newValue","event","currentTarget","view","find","simulate","expect","toBeCalledWith","toMatchSnapshot","myMock","global","console","error","toBeCalled","not"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAEC,IAAI,CAACC,EAAL,EADE;AAEZC,EAAAA,KAAK,EAAE;AAFK,CAAd;AAKAC,IAAI,CAAC,2DAAD,EAA8D,MAAM;AACtE,QAAMC,QAAQ,GAAG,mBAAjB;AACA,QAAMC,KAAK,GAAG;AACZC,IAAAA,aAAa,EAAE;AAAEJ,MAAAA,KAAK,EAAEE;AAAT;AADH,GAAd;AAGA,QAAMG,IAAI,GAAGX,OAAO,CAAC,oBAAC,QAAD,eAAcE,KAAd;AAAqB,kBAAW;AAAhC,KAAD,CAApB;AACAS,EAAAA,IAAI,CAACC,IAAL,CAAU,UAAV,EAAsBC,QAAtB,CAA+B,QAA/B,EAAyCJ,KAAzC;AACAK,EAAAA,MAAM,CAACZ,KAAK,CAACC,QAAP,CAAN,CAAuBY,cAAvB,CAAsCP,QAAtC,EAAgDC,KAAhD;AACD,CARG,CAAJ;AAUAF,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9B,QAAMI,IAAI,GAAGX,OAAO,CAAC,oBAAC,QAAD,eAAcE,KAAd;AAAqB,kBAAW;AAAhC,KAAD,CAApB;AACAY,EAAAA,MAAM,CAACH,IAAD,CAAN,CAAaK,eAAb;AACD,CAHG,CAAJ;AAKAT,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/B,QAAMI,IAAI,GAAGX,OAAO,CAAC,oBAAC,QAAD,eAAcE,KAAd;AAAqB,IAAA,QAAQ,MAA7B;AAA8B,IAAA,OAAO,EAAE,KAAvC;AAA8C,kBAAW;AAAzD,KAAD,CAApB;AACAY,EAAAA,MAAM,CAACH,IAAD,CAAN,CAAaK,eAAb;AACD,CAHG,CAAJ;AAKAT,IAAI,CAAC,8DAAD,EAAiE,MAAM;AACzE,QAAMU,MAAM,GAAGb,IAAI,CAACC,EAAL,EAAf;AACAa,EAAAA,MAAM,CAACC,OAAP,GAAiB;AAAEC,IAAAA,KAAK,EAAEH;AAAT,GAAjB;AACAjB,EAAAA,OAAO,CAAC,oBAAC,QAAD,EAAcE,KAAd,CAAD,CAAP;AACAY,EAAAA,MAAM,CAACG,MAAD,CAAN,CAAeI,UAAf;AACD,CALG,CAAJ;AAOAd,IAAI,CAAC,mEAAD,EAAsE,MAAM;AAC9E,QAAMU,MAAM,GAAGb,IAAI,CAACC,EAAL,EAAf;AACAa,EAAAA,MAAM,CAACC,OAAP,GAAiB;AAAEC,IAAAA,KAAK,EAAEH;AAAT,GAAjB;AACAjB,EAAAA,OAAO,CAAC,oBAAC,QAAD,eAAcE,KAAd;AAAqB,IAAA,EAAE,EAAC;AAAxB,KAAD,CAAP;AACAY,EAAAA,MAAM,CAACG,MAAD,CAAN,CAAeK,GAAf,CAAmBD,UAAnB;AACD,CALG,CAAJ;AAOAd,IAAI,CAAC,mEAAD,EAAsE,MAAM;AAC9E,QAAMU,MAAM,GAAGb,IAAI,CAACC,EAAL,EAAf;AACAa,EAAAA,MAAM,CAACC,OAAP,GAAiB;AAAEC,IAAAA,KAAK,EAAEH;AAAT,GAAjB;AACAjB,EAAAA,OAAO,CAAC,oBAAC,QAAD,eAAcE,KAAd;AAAqB,kBAAW;AAAhC,KAAD,CAAP;AACAY,EAAAA,MAAM,CAACG,MAAD,CAAN,CAAeK,GAAf,CAAmBD,UAAnB;AACD,CALG,CAAJ","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { TextArea } from './TextArea';\n\nconst props = {\n  onChange: jest.fn(),\n  value: 'test textarea'\n};\n\ntest('textarea input passes value and event to onChange handler', () => {\n  const newValue = 'new test textarea';\n  const event = {\n    currentTarget: { value: newValue }\n  };\n  const view = shallow(<TextArea {...props} aria-label=\"test textarea\" />);\n  view.find('textarea').simulate('change', event);\n  expect(props.onChange).toBeCalledWith(newValue, event);\n});\n\ntest('simple text input', () => {\n  const view = shallow(<TextArea {...props} aria-label=\"simple textarea\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('invalid text input', () => {\n  const view = shallow(<TextArea {...props} required isValid={false} aria-label=\"invalid textarea\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('should throw console error when no aria-label or id is given', () => {\n  const myMock = jest.fn();\n  global.console = { error: myMock };\n  shallow(<TextArea {...props} />);\n  expect(myMock).toBeCalled();\n});\n\ntest('should not throw console error when id is given but no aria-label', () => {\n  const myMock = jest.fn();\n  global.console = { error: myMock };\n  shallow(<TextArea {...props} id=\"5\" />);\n  expect(myMock).not.toBeCalled();\n});\n\ntest('should not throw console error when aria-label is given but no id', () => {\n  const myMock = jest.fn();\n  global.console = { error: myMock };\n  shallow(<TextArea {...props} aria-label=\"test textarea\" />);\n  expect(myMock).not.toBeCalled();\n});\n"],"file":"TextArea.test.js"}