{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelectorMenuList.tsx"],"names":["React","styles","css","ContextSelectorMenuList","Component","index","ref","refsCollection","props","className","isOpen","children","contextSelectorMenuList","extendChildren","Children","map","child","cloneElement","sendRef"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,0EAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAWA,OAAO,MAAMC,uBAAN,SAAsCH,KAAK,CAACI,SAA5C,CAAoF;AAAA;AAAA;;AAAA,4CAQxE,EARwE;;AAAA,qCAU/E,CAACC,KAAD,EAAgBC,GAAhB,KAA6B;AACrC,WAAKC,cAAL,CAAoBF,KAApB,IAA6BC,GAA7B;AACD,KAZwF;;AAAA,oCAuBhF,MAAM;AACb,0BAKI,KAAKE,KALT;AAAA,YAAM;AACJC,QAAAA,SADI;AAEJC,QAAAA,MAFI;AAGJC,QAAAA;AAHI,OAAN;AAAA,YAIKH,KAJL;;AAMA,aACE;AAAI,QAAA,SAAS,EAAEN,GAAG,CAACD,MAAM,CAACW,uBAAR,EAAiCH,SAAjC,CAAlB;AAA+D,QAAA,MAAM,EAAE,CAACC,MAAxE;AAAgF,QAAA,IAAI,EAAC;AAArF,SAAgGF,KAAhG,GACG,KAAKK,cAAL,EADH,CADF;AAKD,KAnCwF;AAAA;;AAczFA,EAAAA,cAAc,GAAG;AACf,WAAOb,KAAK,CAACc,QAAN,CAAeC,GAAf,CAAmB,KAAKP,KAAL,CAAWG,QAA9B,EAAwC,CAACK,KAAD,EAAQX,KAAR,KAC7CL,KAAK,CAACiB,YAAN,CAAmBD,KAAnB,EAAqD;AACnDE,MAAAA,OAAO,EAAE,KAAKA,OADqC;AAEnDb,MAAAA;AAFmD,KAArD,CADK,CAAP;AAMD;;AArBwF;;gBAA9EF,uB;AAPXQ,EAAAA,Q;AAEAF,EAAAA,S;AAEAC,EAAAA,M;;;gBAGWP,uB,kBAEW;AACpBQ,EAAAA,QAAQ,EAAE,IADU;AAEpBF,EAAAA,SAAS,EAAE,EAFS;AAGpBC,EAAAA,MAAM,EAAE;AAHY,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\n\nexport interface ContextSelectorMenuListProps {\n  /** Content rendered inside the Context Selector Menu */\n  children?: React.ReactNode;\n  /** Classess applied to root element of Context Selector menu */\n  className?: string;\n  /** Flag to indicate if Context Selector menu is opened */\n  isOpen?: boolean;\n}\n\nexport class ContextSelectorMenuList extends React.Component<ContextSelectorMenuListProps> {\n\n  static defaultProps = {\n    children: null as React.ReactNode,\n    className: '',\n    isOpen: true\n  };\n\n  refsCollection = [] as any;\n\n  sendRef = (index: number, ref: any) => {\n    this.refsCollection[index] = ref;\n  }\n\n  extendChildren() {\n    return React.Children.map(this.props.children, (child, index) =>\n      React.cloneElement(child as React.ReactElement<any>, {\n        sendRef: this.sendRef,\n        index\n      })\n    );\n  }\n\n  render = () => {\n    const {\n      className,\n      isOpen,\n      children,\n      ...props\n    } = this.props;\n    return (\n      <ul className={css(styles.contextSelectorMenuList, className)} hidden={!isOpen} role=\"menu\" {...props}>\n        {this.extendChildren()}\n      </ul>\n    );\n  }\n}\n"],"file":"ContextSelectorMenuList.js"}