{"version":3,"sources":["../../../../src/components/ChartUtils/chart-label.ts"],"names":["getBulletLabelX","chartWidth","dx","labelPosition","Math","round","getBulletLabelY","chartHeight","dy","ChartCommonStyles","label","margin","getPieLabelX","height","legendPosition","padding","width","origin","radius","Helpers","getRadius","x","getPieLabelY","y","overpassFontCharacterConstant","getLabelTextSize","text","theme","style","legend","labels","TextSize","approximateTextSize","characterConstant"],"mappings":"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","sourcesContent":["import { Helpers, TextSize } from 'victory-core';\nimport { getPieOrigin } from './chart-origin';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\n\ninterface ChartBulletLabelInterface {\n  dx?: number; // Horizontal shift from the x coordinate\n  dy?: number; // Vertical shift from the x coordinate\n  chartHeight?: number; // Width of chart within SVG\n  chartWidth?: number; // Width of chart (e.g., donut) within SVG\n  labelPosition?: 'bottom' | 'left' | 'top' | 'top-left'; // Position of label\n  legendPosition?: 'bottom' | 'bottom-left' | 'right'; // Position of legend\n  svgHeight?: number; // Overall height of SVG\n  svgWidth?: number; // Overall width of SVG\n  width?: number; // Chart width\n}\n\ninterface ChartPieLabelInterface {\n  dx?: number; // Horizontal shift from the x coordinate\n  dy?: number; // Horizontal shift from the y coordinate\n  height: number; // Chart height\n  labelPosition?: 'bottom' | 'center' | 'right' ; // Position of label\n  legendPosition?: 'bottom' | 'right'; // Position of legend\n  padding: any; // Chart padding\n  width: number; // Chart width\n}\n\ninterface ChartLabelTextSizeInterface {\n  text: any; // The text to size\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n}\n\n// Returns x coordinate for bullet labels\nexport const getBulletLabelX = ({\n  chartWidth,\n  dx = 0,\n  labelPosition\n}: ChartBulletLabelInterface) => {\n  return (labelPosition === 'top' && chartWidth) ? Math.round(chartWidth / 2) : dx;\n};\n\n// Returns y coordinate for bullet labels\nexport const getBulletLabelY = ({\n  chartHeight,\n  dy = 0,\n  labelPosition\n}: ChartBulletLabelInterface) => {\n  switch (labelPosition) {\n    case 'bottom':\n      return chartHeight + ChartCommonStyles.label.margin + dy;\n    case 'left':\n      return chartHeight ? Math.round(chartHeight / 2) + dy : dy;\n    default:\n      return dy;\n  }\n};\n\n// Returns x coordinate for pie labels\nexport const getPieLabelX = ({\n  dx = 0,\n  height,\n  labelPosition,\n  legendPosition,\n  padding,\n  width\n}: ChartPieLabelInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n\n  switch (labelPosition) {\n    case 'bottom':\n    case 'center':\n      return origin.x + dx;\n    case 'right':\n      switch (legendPosition) {\n        case 'bottom':\n          return origin.x + ChartCommonStyles.label.margin + dx + radius;\n        case 'right':\n          return origin.x + ChartCommonStyles.label.margin + dx;\n        default:\n          return dx;\n      }\n    default:\n      return dx;\n  }\n};\n\n// Returns x coordinate for pie labels\nexport const getPieLabelY = ({\n  dy = 0,\n  height,\n  labelPosition,\n  padding,\n  width\n}: ChartPieLabelInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n\n  switch (labelPosition) {\n    case 'center':\n    case 'right':\n      return origin.y + dy;\n    case 'bottom':\n      return origin.y + radius + ChartCommonStyles.label.margin * 2 + dy;\n    default:\n      return dy;\n  }\n};\n\n// Average pixels per glyph for overpass / Red Hat fonts\nexport const overpassFontCharacterConstant = 2.5875;\n\n// Returns an approximate size for the give text\nexport const getLabelTextSize = ({\n  text,\n  theme\n}: ChartLabelTextSizeInterface): {height: number, width: number} => {\n  const style = theme.legend.style.labels;\n  return TextSize.approximateTextSize(text,  {\n    ...style,\n    characterConstant: overpassFontCharacterConstant\n  });\n};\n"],"file":"chart-label.js"}