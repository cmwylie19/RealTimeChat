{"version":3,"sources":["../../../../src/components/Dropdown/KebabToggle.tsx"],"names":["KebabToggle","id","children","className","isOpen","ariaLabel","parentRef","isFocused","isHovered","isActive","isPlain","isDisabled","onToggle","undefined","ref","props","type"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AA+BO,IAAMA,WAAsD,GAAG,SAAzDA,WAAyD;AAAA,qBACpEC,EADoE;AAAA,MACpEA,EADoE,wBAC/D,EAD+D;AAAA,2BAEpEC,QAFoE;AAAA,MAEpEA,QAFoE,8BAEzD,IAFyD;AAAA,4BAGpEC,SAHoE;AAAA,MAGpEA,SAHoE,+BAGxD,EAHwD;AAAA,yBAIpEC,MAJoE;AAAA,MAIpEA,MAJoE,4BAI3D,KAJ2D;AAAA,4BAKpE,YALoE;AAAA,MAKrDC,SALqD,+BAKzC,SALyC;AAAA,4BAMpEC,SANoE;AAAA,MAMpEA,SANoE,+BAMxD,IANwD;AAAA,4BAOpEC,SAPoE;AAAA,MAOpEA,SAPoE,+BAOxD,KAPwD;AAAA,4BAQpEC,SARoE;AAAA,MAQpEA,SARoE,+BAQxD,KARwD;AAAA,2BASpEC,QAToE;AAAA,MASpEA,QAToE,8BASzD,KATyD;AAAA,0BAUpEC,OAVoE;AAAA,MAUpEA,OAVoE,6BAU1D,KAV0D;AAAA,6BAWpEC,UAXoE;AAAA,MAWpEA,UAXoE,gCAWvD,KAXuD;AAAA,2BAYpEC,QAZoE;AAAA,MAYpEA,QAZoE,8BAYzD;AAAA,WAAMC,SAAN;AAAA,GAZyD;AAAA,MAapEC,GAboE,QAapEA,GAboE;AAAA,MAcjEC,KAdiE;;AAAA,SAgBpE,oBAAC,cAAD;AACE,IAAA,EAAE,EAAEd,EADN;AAEE,IAAA,SAAS,EAAEE,SAFb;AAGE,IAAA,MAAM,EAAEC,MAHV;AAIE,kBAAYC,SAJd;AAKE,IAAA,SAAS,EAAEC,SALb;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,SAAS,EAAEC,SAPb;AAQE,IAAA,QAAQ,EAAEC,QARZ;AASE,IAAA,OAAO,EAAEC,OATX;AAUE,IAAA,UAAU,EAAEC,UAVd;AAWE,IAAA,QAAQ,EAAEC;AAXZ,KAYMG,KAZN,GAaE,oBAAC,yBAAD,OAbF,CAhBoE;AAAA,CAA/D;;;;AA3BLd,EAAAA,E;AAEAC,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,M;AAEA,c;AAEAQ,EAAAA,Q;AAEAN,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,Q;AAEAE,EAAAA,U;AAEAD,EAAAA,O;AAEAM,EAAAA,I,+BAAO,Q,EAAW,Q,EAAW,O","sourcesContent":["import * as React from 'react';\nimport { DropdownToggleProps } from './DropdownToggle';\nimport { EllipsisVIcon } from '@patternfly/react-icons';\nimport { Toggle } from './Toggle';\n\nexport interface KebabToggleProps extends DropdownToggleProps {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classess applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Label Toggle button */\n  'aria-label'?: string;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isOpen: boolean) => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n}\n\nexport const KebabToggle: React.FunctionComponent<KebabToggleProps> = ({\n  id = '',\n  children = null,\n  className = '',\n  isOpen = false,\n  'aria-label' : ariaLabel = 'Actions',\n  parentRef = null,\n  isFocused = false,\n  isHovered = false,\n  isActive = false,\n  isPlain = false,\n  isDisabled = false,\n  onToggle = () => undefined as void,\n  ref, // Types of Ref are different for React.FC vs React.Component\n  ...props\n}: KebabToggleProps) => (\n  <Toggle\n    id={id}\n    className={className}\n    isOpen={isOpen}\n    aria-label={ariaLabel}\n    parentRef={parentRef}\n    isFocused={isFocused}\n    isHovered={isHovered}\n    isActive={isActive}\n    isPlain={isPlain}\n    isDisabled={isDisabled}\n    onToggle={onToggle}\n    {...props}>\n    <EllipsisVIcon />\n  </Toggle>\n);\n"],"file":"KebabToggle.js"}