{"version":3,"sources":["../../../../src/components/Select/SelectToggle.tsx"],"names":["SelectToggle","props","event","parentRef","isExpanded","onToggle","onClose","current","contains","target","toggle","focus","variant","key","KeyTypes","Tab","SelectVariant","checkbox","Escape","onEnter","handleTypeaheadKeys","ArrowDown","ArrowUp","typeahead","typeaheadMulti","Enter","Space","preventDefault","isTypeahead","React","createRef","document","addEventListener","onDocClick","onEscPress","removeEventListener","className","children","isFocused","isActive","isHovered","isPlain","isDisabled","id","type","ariaLabelledBy","ariaLabelToggle","toggleProps","styles","selectToggle","modifiers","hover","disabled","active","plain","_event","onKeyDown","selectToggleArrow","buttonStyles","button","selectToggleButton","stopPropagation","Component","Function","prototype"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { KeyTypes, SelectVariant } from './selectConstants';\n\nexport interface SelectToggleProps extends React.HTMLProps<HTMLElement> {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if select is expanded */\n  isExpanded?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Callback for toggle close */\n  onClose?: () => void;\n  /** Internal callback for toggle keyboard navigation */\n  handleTypeaheadKeys?: (position: string) => void;\n  /** Element which wraps toggle */\n  parentRef: React.RefObject<HTMLDivElement>;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Flag indicating if select is disabled */\n  isDisabled?: boolean;\n  /** Type of the toggle button, defaults to 'button' */\n  type?: 'reset' | 'button' | 'submit' | undefined;\n  /** Id of label for the Select aria-labelledby */\n  ariaLabelledBy?: string;\n  /** Label for toggle of select variants */\n  ariaLabelToggle?: string;\n  /** Flag for variant, determines toggle rules and interaction */\n  variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n}\n\nexport class SelectToggle extends React.Component<SelectToggleProps> {\n  private toggle: React.RefObject<HTMLDivElement> | React.RefObject<HTMLButtonElement>;\n\n  static defaultProps = {\n    className: '',\n    isExpanded: false,\n    isFocused: false,\n    isHovered: false,\n    isActive: false,\n    isPlain: false,\n    isDisabled: false,\n    variant: false,\n    ariaLabelledBy: '',\n    ariaLabelToggle: '',\n    type: 'button',\n    onToggle: Function.prototype,\n    onEnter: Function.prototype,\n    onClose: Function.prototype\n  };\n\n  constructor(props: SelectToggleProps) {\n    super(props);\n    const { variant } = props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    this.toggle = isTypeahead ? React.createRef<HTMLDivElement>() : React.createRef<HTMLButtonElement>();\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  }\n\n  onDocClick = (event: Event) => {\n    const { parentRef, isExpanded, onToggle, onClose } = this.props;\n    if (isExpanded && parentRef && !parentRef.current.contains(event.target as Node)) {\n      onToggle(false);\n      onClose();\n      this.toggle.current.focus();\n    }\n  }\n\n  onEscPress = (event: KeyboardEvent) => {\n    const { parentRef, isExpanded, variant, onToggle, onClose } = this.props;\n    if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n      return;\n    }\n    if (\n      isExpanded &&\n      (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) &&\n      parentRef &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggle(false);\n      onClose();\n      this.toggle.current.focus();\n    }\n  }\n\n  onKeyDown = (event: React.KeyboardEvent) => {\n    const { isExpanded, onToggle, variant, onClose, onEnter, handleTypeaheadKeys } = this.props;\n    if (\n      (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) &&\n      (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)\n    ) {\n      handleTypeaheadKeys((event.key === KeyTypes.ArrowDown && 'down') || (event.key === KeyTypes.ArrowUp && 'up'));\n    }\n    if (\n      event.key === KeyTypes.Enter &&\n      (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)\n    ) {\n      if (isExpanded) {\n        handleTypeaheadKeys('enter');\n      } else {\n        onToggle(!isExpanded);\n      }\n    }\n\n    if (\n      (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) ||\n      (event.key === KeyTypes.Tab && !isExpanded) ||\n      (event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space) ||\n      ((event.key === KeyTypes.Space || event.key === KeyTypes.Enter) &&\n        (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti))\n    ) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isExpanded) {\n      onToggle(!isExpanded);\n      onClose();\n      this.toggle.current.focus();\n    } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isExpanded) {\n      onToggle(!isExpanded);\n      onEnter();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      isExpanded,\n      isFocused,\n      isActive,\n      isHovered,\n      isPlain,\n      isDisabled,\n      variant,\n      onToggle,\n      onEnter,\n      onClose,\n      handleTypeaheadKeys,\n      parentRef,\n      id,\n      type,\n      ariaLabelledBy,\n      ariaLabelToggle,\n      ...props\n    } = this.props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    const toggleProps: {\n      id: string;\n      'aria-labelledby': string;\n      'aria-expanded': boolean;\n      'aria-haspopup': 'listbox' | null;\n    } = {\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-expanded': isExpanded,\n      'aria-haspopup': (variant !== SelectVariant.checkbox && 'listbox') || null\n    };\n    return (\n      <React.Fragment>\n        {!isTypeahead && (\n          <button\n            {...props}\n            {...toggleProps}\n            ref={this.toggle as React.RefObject<HTMLButtonElement>}\n            type={type}\n            className={css(\n              styles.selectToggle,\n              isFocused && styles.modifiers.focus,\n              isHovered && styles.modifiers.hover,\n              isDisabled && styles.modifiers.disabled,\n              isActive && styles.modifiers.active,\n              isPlain && styles.modifiers.plain,\n              className\n            )}\n            onClick={(_event) => {\n              onToggle(!isExpanded);\n              if (isExpanded) {\n                onClose();\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n            disabled={isDisabled}\n          >\n            {children}\n            <CaretDownIcon className={css(styles.selectToggleArrow)} />\n          </button>\n        )}\n        {isTypeahead && (\n          <div\n            {...props}\n            ref={this.toggle as React.RefObject<HTMLDivElement>}\n            className={css(\n              styles.selectToggle,\n              isFocused && styles.modifiers.focus,\n              isHovered && styles.modifiers.hover,\n              isActive && styles.modifiers.active,\n              isDisabled && styles.modifiers.disabled,\n              isPlain && styles.modifiers.plain,\n              isTypeahead && styles.modifiers.typeahead,\n              className\n            )}\n            onClick={(_event) => {\n              if (!isDisabled) {\n                onToggle(true);\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n          >\n            {children}\n            <button\n              {...toggleProps}\n              className={css(buttonStyles.button, styles.selectToggleButton)}\n              aria-label={ariaLabelToggle}\n              onClick={(_event) => {\n                _event.stopPropagation();\n                onToggle(!isExpanded);\n                if (isExpanded) {\n                  onClose();\n                }\n              }}\n              disabled={isDisabled}\n            >\n              <CaretDownIcon className={css(styles.selectToggleArrow)} />\n            </button>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n"],"file":"SelectToggle.js"}