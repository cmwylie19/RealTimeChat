{"version":3,"sources":["../../../../src/components/ChartLegend/ChartLegendWrapper.tsx"],"names":["React","ChartLegend","ChartCommonStyles","getLegendX","getLegendY","getTheme","ChartLegendConfigChartType","ChartLegendWrapper","chartType","dx","dy","legendComponent","padding","position","legend","themeColor","themeVariant","theme","orientation","height","chart","width","legendProps","props","legendX","legendData","data","legendOrientation","legendPosition","legendY","cloneElement","standalone","x","y"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { PaddingProps } from 'victory';\nimport { ChartLegend, ChartLegendOrientation, ChartLegendPosition } from '../ChartLegend';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { getLegendX, getLegendY, getTheme } from '../ChartUtils';\n\nexport enum ChartLegendConfigChartType {\n  chart = 'chart',\n  pie = 'pie'\n}\n\n/**\n * Helper to position a legend component within a component's SVG\n *\n * Example:\n *\n * <ChartLegendWrapper\n *   chartHeight={200}\n *   chartWidth={600}\n *   legendComponent={<ChartLegend data={[{ name: 'Cats' }, { name: 'Dogs' }]} orientation=\"vertical\"/>}\n *   position=\"right\"\n *   svgHeight={200}\n *   svgWidth={800}\n * />\n */\nexport interface ChartLegendWrapperProps {\n  /**\n   * The type of chart the legend will apply to. Valid types are; 'area', 'bar', 'line', 'pie', and 'stack'\n   *\n   * Note: This is used to calculate padding defined by the theme\n   */\n  chartType?: string;\n  /**\n   * Defines a horizontal shift from the x coordinate.\n   */\n  dx?: number;\n  /**\n   * Defines a vertical shift from the y coordinate.\n   */\n  dy?: number;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   */\n  height?: number;\n  /**\n   * The legend component to render with chart.\n   *\n   * Note: Use legendData so the legend width can be calculated and positioned properly.\n   * Default legend properties may be applied\n   */\n  legendComponent?: React.ReactElement<any>;\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * The legend position relation to the donut chart. Valid values are 'bottom', 'bottom-left', and 'right'\n   */\n  position?: 'bottom' | 'bottom-left' | 'right';\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartLegend as a solo component, implement the theme directly on\n   * ChartLegend. If you are wrapping ChartLegend in ChartChart or\n   * ChartGroup, please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   */\n  width?: number;\n}\n\nexport const ChartLegendWrapper: React.FunctionComponent<ChartLegendWrapperProps> = ({\n  chartType = 'chart',\n  dx = 0,\n  dy = 0,\n  legendComponent = <ChartLegend />,\n  padding,\n  position = ChartCommonStyles.legend.position as ChartLegendPosition,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  orientation = theme.legend.orientation as ChartLegendOrientation,\n  height = theme.chart.height,\n  width = theme.chart.width\n}: ChartLegendWrapperProps) => {\n  const legendProps = legendComponent.props ? legendComponent.props : {};\n\n  const legendX = getLegendX({\n    chartType,\n    dx,\n    height,\n    legendData: legendProps.data,\n    legendOrientation: legendProps.legendOrientation ? legendProps.legendOrientation : orientation,\n    legendPosition: position,\n    legendProps,\n    padding,\n    theme,\n    width\n  });\n\n  const legendY = getLegendY({\n    chartType,\n    dy,\n    height,\n    legendData: legendProps.data,\n    legendOrientation: legendProps.legendOrientation ? legendProps.legendOrientation : orientation,\n    legendProps: legendProps,\n    legendPosition: position,\n    padding,\n    theme,\n    width\n  });\n\n  const legend = React.cloneElement(legendComponent, {\n    orientation,\n    standalone: false,\n    theme,\n    x: legendX > 0 ? legendX : 0,\n    y: legendY > 0 ? legendY : 0,\n    ...legendComponent.props\n  });\n\n  return (\n    <React.Fragment>\n      {legend}\n    </React.Fragment>\n  );\n};\n"],"file":"ChartLegendWrapper.js"}