{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/collapsible.tsx"],"names":["React","css","styles","CollapseColumn","ExpandableRowContent","collapsible","value","rowIndex","columnIndex","rowData","column","property","extraParams","onCollapse","rowLabeledBy","expandId","extraData","onToggle","event","isOpen","className","undefined","tableToggle","isVisible","fullWidth","children","expandable","hasOwnProperty","expandedRow","colSpan","expandedRowFormatter","contentId","id","noPadding","modifiers"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,qDAAnB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,oBAAT,QAAqC,4BAArC;AAGA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAA6B;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,WAAZ;AAAyBC,EAAAA,OAAzB;AAAkCC,EAAAA,MAAlC;AAA0CC,EAAAA;AAA1C,CAA7B,KAA8F;AACvH,QAAM;AACJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,YAAY,GAAG,aAA7B;AAA4CC,MAAAA,QAAQ,GAAG;AAAvD;AADT,MAEFL,MAFJ;AAGA,QAAMM,SAAS,GAAG;AAChBT,IAAAA,QADgB;AAEhBC,IAAAA,WAFgB;AAGhBE,IAAAA,MAHgB;AAIhBC,IAAAA;AAJgB,GAAlB;;AAOA,WAASM,QAAT,CAAkBC,KAAlB,EAA0E;AACxE;AACAL,IAAAA,UAAU,IAAIA,UAAU,CAACK,KAAD,EAAQX,QAAR,EAAkBE,OAAO,IAAI,CAACA,OAAO,CAACU,MAAtC,EAA8CV,OAA9C,EAAuDO,SAAvD,CAAxB;AACD;;AAED,SAAO;AACLI,IAAAA,SAAS,EAAEX,OAAO,CAACU,MAAR,KAAmBE,SAAnB,IAAgCpB,GAAG,CAACC,MAAM,CAACoB,WAAR,CADzC;AAELC,IAAAA,SAAS,EAAE,CAACd,OAAO,CAACe,SAFf;AAGLC,IAAAA,QAAQ,EACN,oBAAC,cAAD;AACE,yBAAkB,GAAEX,YAAa,GAAEP,QAAS,IAAGQ,QAAS,GAAER,QAAS,EADrE;AAEE,MAAA,QAAQ,EAAEU,QAFZ;AAGE,MAAA,EAAE,EAAEF,QAAQ,GAAGR,QAHjB;AAIE,MAAA,MAAM,EAAEE,OAAO,IAAIA,OAAO,CAACU;AAJ7B,OAMGb,KANH;AAJG,GAAP;AAcD,CA9BM;AAgCP,OAAO,MAAMoB,UAAU,GAAG,CAACpB,KAAD,EAA6B;AAAEG,EAAAA;AAAF,CAA7B,KACxBA,OAAO,CAACkB,cAAR,CAAuB,QAAvB,IAAmC,oBAAC,oBAAD,QAAuBrB,KAAvB,CAAnC,GAA0FA,KADrF;AAGP,OAAO,MAAMsB,WAAW,GAAIC,OAAD,IAAqB;AAC9C,QAAMC,oBAAoB,GAAG,CAC3BxB,KAD2B,EAE3B;AACEC,IAAAA,QADF;AAEEE,IAAAA,OAFF;AAGEC,IAAAA,MAAM,EAAE;AACNE,MAAAA,WAAW,EAAE;AAAEmB,QAAAA,SAAS,GAAG;AAAd;AADP;AAHV,GAF2B,KAU3BtB,OAAO,CAACkB,cAAR,CAAuB,QAAvB,KAAoC;AAClC;AACAE,IAAAA,OAAO,EAAEA,OAAO,GAAI,CAAC,CAACpB,OAAO,CAACe,SAFI;AAGlCQ,IAAAA,EAAE,EAAED,SAAS,GAAGxB,QAHkB;AAIlCa,IAAAA,SAAS,EAAEX,OAAO,CAACwB,SAAR,IAAqBhC,GAAG,CAACC,MAAM,CAACgC,SAAP,CAAiBD,SAAlB;AAJD,GAVtC;;AAgBA,SAAOH,oBAAP;AACD,CAlBM","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nimport { IExtra, IFormatterValueType } from '../../Table';\n\nexport const collapsible = (value: IFormatterValueType, { rowIndex, columnIndex, rowData, column, property }: IExtra) => {\n  const {\n    extraParams: { onCollapse, rowLabeledBy = 'simple-node', expandId = 'expand-toggle' }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n\n  function onToggle(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, rowData && !rowData.isOpen, rowData, extraData);\n  }\n\n  return {\n    className: rowData.isOpen !== undefined && css(styles.tableToggle),\n    isVisible: !rowData.fullWidth,\n    children: (\n      <CollapseColumn\n        aria-labelledby={`${rowLabeledBy}${rowIndex} ${expandId}${rowIndex}`}\n        onToggle={onToggle}\n        id={expandId + rowIndex}\n        isOpen={rowData && rowData.isOpen}\n      >\n        {value}\n      </CollapseColumn>\n    )\n  };\n};\n\nexport const expandable = (value: IFormatterValueType, { rowData }: IExtra) =>\n  rowData.hasOwnProperty('parent') ? <ExpandableRowContent>{value}</ExpandableRowContent> : value;\n\nexport const expandedRow = (colSpan: number) => {\n  const expandedRowFormatter = (\n    value: IFormatterValueType,\n    {\n      rowIndex,\n      rowData,\n      column: {\n        extraParams: { contentId = 'expanded-content' }\n      }\n    }: IExtra\n  ) =>\n    rowData.hasOwnProperty('parent') && {\n      // todo: rewrite this logic, it is not type safe\n      colSpan: colSpan + (!!rowData.fullWidth as any),\n      id: contentId + rowIndex,\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  return expandedRowFormatter;\n};\n"],"file":"collapsible.js"}