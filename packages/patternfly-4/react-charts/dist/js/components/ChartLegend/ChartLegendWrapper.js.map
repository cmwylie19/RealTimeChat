{"version":3,"sources":["../../../../src/components/ChartLegend/ChartLegendWrapper.tsx"],"names":["ChartLegendConfigChartType","ChartLegendWrapper","chartType","dx","dy","legendComponent","padding","position","ChartCommonStyles","legend","themeColor","themeVariant","theme","orientation","height","chart","width","legendProps","props","legendX","legendData","data","legendOrientation","legendPosition","legendY","React","cloneElement","standalone","x","y"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { PaddingProps } from 'victory';\nimport { ChartLegend, ChartLegendOrientation, ChartLegendPosition } from '../ChartLegend';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { getLegendX, getLegendY, getTheme } from '../ChartUtils';\n\nexport enum ChartLegendConfigChartType {\n  chart = 'chart',\n  pie = 'pie'\n}\n\n/**\n * Helper to position a legend component within a component's SVG\n *\n * Example:\n *\n * <ChartLegendWrapper\n *   chartHeight={200}\n *   chartWidth={600}\n *   legendComponent={<ChartLegend data={[{ name: 'Cats' }, { name: 'Dogs' }]} orientation=\"vertical\"/>}\n *   position=\"right\"\n *   svgHeight={200}\n *   svgWidth={800}\n * />\n */\nexport interface ChartLegendWrapperProps {\n  /**\n   * The type of chart the legend will apply to. Valid types are; 'area', 'bar', 'line', 'pie', and 'stack'\n   *\n   * Note: This is used to calculate padding defined by the theme\n   */\n  chartType?: string;\n  /**\n   * Defines a horizontal shift from the x coordinate.\n   */\n  dx?: number;\n  /**\n   * Defines a vertical shift from the y coordinate.\n   */\n  dy?: number;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   */\n  height?: number;\n  /**\n   * The legend component to render with chart.\n   *\n   * Note: Use legendData so the legend width can be calculated and positioned properly.\n   * Default legend properties may be applied\n   */\n  legendComponent?: React.ReactElement<any>;\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * The legend position relation to the donut chart. Valid values are 'bottom', 'bottom-left', and 'right'\n   */\n  position?: 'bottom' | 'bottom-left' | 'right';\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartLegend as a solo component, implement the theme directly on\n   * ChartLegend. If you are wrapping ChartLegend in ChartChart or\n   * ChartGroup, please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   */\n  width?: number;\n}\n\nexport const ChartLegendWrapper: React.FunctionComponent<ChartLegendWrapperProps> = ({\n  chartType = 'chart',\n  dx = 0,\n  dy = 0,\n  legendComponent = <ChartLegend />,\n  padding,\n  position = ChartCommonStyles.legend.position as ChartLegendPosition,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  orientation = theme.legend.orientation as ChartLegendOrientation,\n  height = theme.chart.height,\n  width = theme.chart.width\n}: ChartLegendWrapperProps) => {\n  const legendProps = legendComponent.props ? legendComponent.props : {};\n\n  const legendX = getLegendX({\n    chartType,\n    dx,\n    height,\n    legendData: legendProps.data,\n    legendOrientation: legendProps.legendOrientation ? legendProps.legendOrientation : orientation,\n    legendPosition: position,\n    legendProps,\n    padding,\n    theme,\n    width\n  });\n\n  const legendY = getLegendY({\n    chartType,\n    dy,\n    height,\n    legendData: legendProps.data,\n    legendOrientation: legendProps.legendOrientation ? legendProps.legendOrientation : orientation,\n    legendProps: legendProps,\n    legendPosition: position,\n    padding,\n    theme,\n    width\n  });\n\n  const legend = React.cloneElement(legendComponent, {\n    orientation,\n    standalone: false,\n    theme,\n    x: legendX > 0 ? legendX : 0,\n    y: legendY > 0 ? legendY : 0,\n    ...legendComponent.props\n  });\n\n  return (\n    <React.Fragment>\n      {legend}\n    </React.Fragment>\n  );\n};\n"],"file":"ChartLegendWrapper.js"}