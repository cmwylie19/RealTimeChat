{"version":3,"sources":["../../../../src/components/Dropdown/DropdownWithContext.tsx"],"names":["React","styles","css","DropdownMenu","DropdownPosition","DropdownDirection","DropdownContext","DropdownWithContext","Component","constructor","props","createRef","openedOnEnter","dropdownItems","length","children","Error","componentDidUpdate","isOpen","render","className","direction","isPlain","isGrouped","onSelect","position","toggle","autoFocus","id","currentId","component","renderedContent","ariaHasPopup","Children","toArray","baseClass","baseComponent","contextId","BaseComponent","up","modifiers","top","expanded","baseComponentRef","map","oneToggle","cloneElement","parentRef","onEnter","left","down","Function","prototype"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownMenu } from './DropdownMenu';\nimport { DropdownProps } from './Dropdown';\nimport { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants';\n\nexport class DropdownWithContext extends React.Component<DropdownProps> {\n  openedOnEnter = false;\n  baseComponentRef = React.createRef<any>();\n\n  // seed for the aria-labelledby ID\n  static currentId = 0;\n\n  static defaultProps = {\n    className: '',\n    dropdownItems: [] as any[],\n    isOpen: false,\n    isPlain: false,\n    isGrouped: false,\n    position: DropdownPosition.left,\n    direction: DropdownDirection.down,\n    onSelect: Function.prototype,\n    autoFocus: true\n  };\n\n  constructor(props: DropdownProps) {\n    super(props);\n    if (props.dropdownItems && props.dropdownItems.length > 0 && props.children) {\n      throw new Error(\n        'Children and dropdownItems props have been provided. Only the dropdownItems prop items will be rendered '\n      );\n    }\n  }\n\n  onEnter = () => {\n    this.openedOnEnter = true;\n  }\n\n  componentDidUpdate() {\n    if (!this.props.isOpen) { this.openedOnEnter = false; }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      direction,\n      dropdownItems,\n      isOpen,\n      isPlain,\n      isGrouped,\n      onSelect,\n      position,\n      toggle,\n      autoFocus,\n      ...props\n    } = this.props;\n    const id = toggle.props.id || `pf-toggle-id-${DropdownWithContext.currentId++}`;\n    let component: string;\n    let renderedContent: React.ReactNode[];\n    let ariaHasPopup = false;\n    if (dropdownItems && dropdownItems.length > 0) {\n      component = 'ul';\n      renderedContent = dropdownItems;\n      ariaHasPopup = true;\n    } else {\n      component = 'div';\n      renderedContent = React.Children.toArray(children);\n    }\n    const openedOnEnter = this.openedOnEnter;\n    return (\n      <DropdownContext.Consumer>\n        {({ baseClass, baseComponent, id: contextId }) => {\n          const BaseComponent = baseComponent as any;\n          return (\n            <BaseComponent\n              {...props}\n              className={css(\n                baseClass,\n                direction === DropdownDirection.up && styles.modifiers.top,\n                isOpen && styles.modifiers.expanded,\n                className\n              )}\n              ref={this.baseComponentRef}\n            >\n              {React.Children.map(toggle, (oneToggle) =>\n                React.cloneElement(oneToggle, {\n                  parentRef: this.baseComponentRef,\n                  isOpen,\n                  id,\n                  isPlain,\n                  ariaHasPopup,\n                  onEnter: () => this.onEnter()\n                })\n              )}\n              {isOpen && (\n                <DropdownMenu\n                  component={component}\n                  isOpen={isOpen}\n                  position={position}\n                  aria-labelledby={contextId ? `${contextId}-toggle` : id}\n                  openedOnEnter={openedOnEnter}\n                  isGrouped={isGrouped}\n                  autoFocus={openedOnEnter && autoFocus}\n                >\n                  {renderedContent}\n                </DropdownMenu>\n              )}\n            </BaseComponent>\n          );\n        }}\n      </DropdownContext.Consumer>\n    );\n  }\n}"],"file":"DropdownWithContext.js"}