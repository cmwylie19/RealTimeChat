{"version":3,"sources":["../../../../src/components/Table/Body.tsx"],"names":["React","Body","BaseBody","TableContext","isRowExpanded","flagVisibility","rows","visibleRows","filter","oneRow","parent","isExpanded","length","isFirstVisible","isLastVisible","ContextBody","Component","row","rowProps","onRowClick","onRow","props","extendedRowProps","onMouseDown","event","computedData","isInput","target","tagName","isButton","headerData","rowKey","additionalColsIndexShift","extraParams","firstUserColumnIndex","cells","reduce","acc","cell","cellIndex","isCellObject","Object","mappedCell","property","title","isVisible","colSpan","id","undefined","render","className","children","mappedRows","map","oneRowKey","mapCells","isFirst","isLast","TableBody","args","rest"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { RowType, RowKeyType } from './base/types';\nimport { TableContext, IRow, IRowCell } from './Table';\nimport { isRowExpanded } from './utils';\n\nexport interface TableBodyProps {\n  className?: string;\n  children?: React.ReactNode;\n  headerData?: IRow[];\n  rows?: IRow[];\n  rowKey?: RowKeyType;\n  onRowClick?: Function;\n  onRow?: Function;\n}\n\nconst flagVisibility = (rows: IRow[]) => {\n  const visibleRows = (rows as []).filter((oneRow: IRow) => !oneRow.parent || oneRow.isExpanded) as IRow[];\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\n\nclass ContextBody extends React.Component<TableBodyProps, {}> {\n  onRow = (row: IRow, rowProps: any) => {\n    const { onRowClick, onRow } = this.props;\n    const extendedRowProps = {\n      ...rowProps,\n      ...(onRow ? onRow(row, rowProps) : {})\n    };\n    return {\n      row,\n      rowProps: extendedRowProps,\n      onMouseDown: (event: React.MouseEvent) => {\n        const computedData = {\n          isInput: (event.target as HTMLElement).tagName !== 'INPUT',\n          isButton: (event.target as HTMLElement).tagName !== 'BUTTON'\n        };\n        onRowClick(event, row, rowProps, computedData);\n      }\n    };\n  }\n\n  mapCells = (headerData: IRow[], row: IRow, rowKey: number) => {\n    // column indexes start after generated optional columns\n    let additionalColsIndexShift = headerData[0].extraParams.firstUserColumnIndex;\n\n    return {\n      ...(row &&\n        (row.cells || row).reduce(\n          (acc: object, cell: IRowCell, cellIndex: number) => {\n            const isCellObject = cell === Object(cell);\n\n            const mappedCell = {\n              [headerData[cellIndex + additionalColsIndexShift].property]: {\n                title: isCellObject ? cell.title : cell,\n                props: {\n                  isVisible: true,\n                  ...(isCellObject ? cell.props : null)\n                }\n              }\n            };\n\n            // increment the shift index when a cell spans multiple columns\n            if (isCellObject && cell.props && cell.props.colSpan) {\n              additionalColsIndexShift += cell.props.colSpan - 1;\n            }\n            return {\n              ...acc,\n              ...mappedCell\n            };\n          },\n          { id: row.id !== undefined ? row.id : rowKey }\n        ))\n    };\n  }\n\n  render() {\n    const { className, headerData, rows, rowKey, children, onRowClick, ...props } = this.props;\n\n    let mappedRows;\n    if (headerData.length > 0) {\n      mappedRows = (rows as []).map((oneRow: IRow, oneRowKey: number) => ({\n        ...oneRow,\n        ...this.mapCells(headerData, oneRow, oneRowKey),\n        isExpanded: isRowExpanded(oneRow, rows),\n        isFirst: oneRowKey === 0,\n        isLast: oneRowKey === rows.length - 1,\n        isFirstVisible: false,\n        isLastVisible: false\n      })) as IRow[];\n      flagVisibility(mappedRows);\n    }\n\n    return (\n      <React.Fragment>\n        {mappedRows && (\n          <BaseBody\n            {...props}\n            mappedRows={mappedRows}\n            rows={mappedRows as RowType[]}\n            onRow={this.onRow}\n            rowKey={rowKey}\n            className={className}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport const TableBody = ({\n  onRow = (...args: any) => Object,\n  className = '' as string,\n  children = null as React.ReactNode,\n  rowKey = 'id' as string,\n  onRowClick = (...args: any) => undefined as any,\n  ...props\n}: TableBodyProps) => (\n  <TableContext.Consumer>\n    {({ headerData = [], rows = [], ...rest }) =>\n      <ContextBody\n        headerData={headerData}\n        rows={rows as IRow[]}\n        onRow={onRow}\n        className={className}\n        children={children}\n        rowKey={rowKey}\n        onRowClick={onRowClick} {...props} {...rest} />}\n  </TableContext.Consumer>\n);\n"],"file":"Body.js"}