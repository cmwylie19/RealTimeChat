{"version":3,"sources":["../../../../src/components/Pagination/OptionsToggle.tsx"],"names":["OptionsToggle","itemsTitle","optionsToggle","itemsPerPageTitle","firstIndex","lastIndex","itemCount","widgetId","showToggle","onToggle","_isOpen","undefined","isOpen","isDisabled","parentRef","toggleTemplate","ToggleTemplate","onEnter","styles","optionsMenuToggle","modifiers","disabled","plain","text","optionsMenuToggleText","optionsMenuToggleButton"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;;;;;AAiCO,IAAMA,aAA0D,GAAG,SAA7DA,aAA6D,OAe/C;AAAA,6BAdzBC,UAcyB;AAAA,MAdzBA,UAcyB,gCAdZ,OAcY;AAAA,gCAbzBC,aAayB;AAAA,MAbzBA,aAayB,mCAbT,QAaS;AAAA,mCAZzBC,iBAYyB;AAAA,MAZzBA,iBAYyB,sCAZL,gBAYK;AAAA,6BAXzBC,UAWyB;AAAA,MAXzBA,UAWyB,gCAXZ,CAWY;AAAA,4BAVzBC,SAUyB;AAAA,MAVzBA,SAUyB,+BAVb,CAUa;AAAA,4BATzBC,SASyB;AAAA,MATzBA,SASyB,+BATb,CASa;AAAA,2BARzBC,QAQyB;AAAA,MARzBA,QAQyB,8BARd,EAQc;AAAA,6BAPzBC,UAOyB;AAAA,MAPzBA,UAOyB,gCAPZ,IAOY;AAAA,2BANzBC,QAMyB;AAAA,MANzBA,QAMyB,8BANd,UAACC,OAAD;AAAA,WAAsBC,SAAtB;AAAA,GAMc;AAAA,yBALzBC,MAKyB;AAAA,MALzBA,MAKyB,4BALhB,KAKgB;AAAA,6BAJzBC,UAIyB;AAAA,MAJzBA,UAIyB,gCAJZ,KAIY;AAAA,4BAHzBC,SAGyB;AAAA,MAHzBA,SAGyB,+BAHb,IAGa;AAAA,iCAFzBC,cAEyB;AAAA,MAFTC,cAES,oCAFQ,EAER;AAAA,0BADzBC,OACyB;AAAA,MADzBA,OACyB,6BADf,IACe;AACzB,SACE;AAAK,IAAA,SAAS,EAAE,sBAAIC,wBAAOC,iBAAX,EAA8BN,UAAU,IAAIK,wBAAOE,SAAP,CAAiBC,QAA7D,EAAuEH,wBAAOE,SAAP,CAAiBE,KAAxF,EAA+FJ,wBAAOE,SAAP,CAAiBG,IAAhH;AAAhB,KACGf,UAAU,IACT,oBAAC,KAAD,CAAO,QAAP,QACE;AAAM,IAAA,SAAS,EAAE,sBAAIU,wBAAOM,qBAAX;AAAjB,KACG,OAAOR,cAAP,KAA0B,QAA1B,GACC,2BAAaA,cAAb,EAA6B;AAAEZ,IAAAA,UAAU,EAAVA,UAAF;AAAcC,IAAAA,SAAS,EAATA,SAAd;AAAyBC,IAAAA,SAAS,EAATA,SAAzB;AAAoCL,IAAAA,UAAU,EAAVA;AAApC,GAA7B,CADD,GAGC,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAEG,UAA5B;AAAwC,IAAA,SAAS,EAAEC,SAAnD;AAA8D,IAAA,SAAS,EAAEC,SAAzE;AAAoF,IAAA,UAAU,EAAEL;AAAhG,IAJJ,CADF,EAQE,oBAAC,wBAAD;AACE,IAAA,OAAO,EAAEgB,OADX;AAEE,kBAAYf,aAFd;AAGE,IAAA,QAAQ,EAAEO,QAHZ;AAIE,IAAA,UAAU,EAAEI,UAAU,IAAIP,SAAS,IAAI,CAJzC;AAKE,IAAA,MAAM,EAAEM,MALV;AAME,IAAA,EAAE,YAAKL,QAAL,YANJ;AAOE,IAAA,SAAS,EAAEW,wBAAOO,uBAPpB;AAQE,IAAA,SAAS,EAAEX;AARb,IARF,CAFJ,CADF;AAyBD,CAzCM;;;;AA7BLb,EAAAA,U;AAEAC,EAAAA,a;AAEAC,EAAAA,iB;AAEAC,EAAAA,U;AAEAC,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,Q;AAEAC,EAAAA,U;AAEAC,EAAAA,Q;AAEAG,EAAAA,M;AAEAC,EAAAA,U;AAEAC,EAAAA,S;AAEAC,EAAAA,c;AAEAE,EAAAA,O","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { DropdownToggle } from '../Dropdown';\n\nexport interface OptionsToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** The text to be displayed on the Options Toggle */\n  optionsToggle?: string;\n  /** The Title of the Pagination Options Menu */\n  itemsPerPageTitle?: string;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** Id added to the title of the Pagination Options Menu */\n  widgetId?: string;\n  /** showToggle */\n  showToggle?: boolean;\n  /** Event function that fires when user clicks the Options Menu toggle */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag indicating if the Options Menu dropdown is open or not */\n  isOpen?: boolean;\n  /** Flag indicating if the Options Menu is disabled */\n  isDisabled?: boolean;\n  /** */\n  parentRef?: HTMLElement;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n}\n\nexport const OptionsToggle: React.FunctionComponent<OptionsToggleProps> = ({\n  itemsTitle = 'items',\n  optionsToggle = 'Select',\n  itemsPerPageTitle = 'Items per page',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount = 0,\n  widgetId = '',\n  showToggle = true,\n  onToggle = (_isOpen: boolean) => undefined as any,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate = '',\n  onEnter = null\n}: OptionsToggleProps ) => {\n  return (\n    <div className={css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text)} >\n      {showToggle && (\n        <React.Fragment>\n          <span className={css(styles.optionsMenuToggleText)}>\n            {typeof ToggleTemplate === 'string' ? (\n              fillTemplate(ToggleTemplate, { firstIndex, lastIndex, itemCount, itemsTitle })\n            ) : (\n              <ToggleTemplate firstIndex={firstIndex} lastIndex={lastIndex} itemCount={itemCount} itemsTitle={itemsTitle}/>\n            )}\n          </span>\n          <DropdownToggle\n            onEnter={onEnter}\n            aria-label={optionsToggle}\n            onToggle={onToggle}\n            isDisabled={isDisabled || itemCount <= 0}\n            isOpen={isOpen}\n            id={`${widgetId}-toggle`}\n            className={styles.optionsMenuToggleButton}\n            parentRef={parentRef}\n          >\n          </DropdownToggle>\n        </React.Fragment>\n      )}\n    </div>);\n};\n"],"file":"OptionsToggle.js"}