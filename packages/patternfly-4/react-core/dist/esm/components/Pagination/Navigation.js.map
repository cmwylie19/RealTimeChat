{"version":3,"sources":["../../../../src/components/Pagination/Navigation.tsx"],"names":["React","styles","css","AngleLeftIcon","AngleDoubleLeftIcon","AngleRightIcon","AngleDoubleRightIcon","Button","ButtonVariant","pluralize","KEY_CODES","Navigation","Component","constructor","props","state","userInputPage","page","parseInteger","input","lastPage","inputPage","Number","parseInt","isNaN","onChange","event","target","value","setState","onKeyDown","onPageInput","onSetPage","keyCode","ENTER","componentDidUpdate","lastState","render","isDisabled","firstPage","pagesTitle","toLastPage","toNextPage","toFirstPage","toPreviousPage","currPage","paginationTitle","onNextClick","onPreviousClick","onFirstClick","onLastClick","className","isCompact","paginationNav","plain","newPage","paginationNavPageSelect","formControl","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport { AngleLeftIcon, AngleDoubleLeftIcon, AngleRightIcon, AngleDoubleRightIcon } from '@patternfly/react-icons';\nimport { Button, ButtonVariant } from '../Button';\nimport { pluralize } from '../../helpers';\nimport { KEY_CODES } from '../../helpers/constants';\n\nexport interface NavigationProps extends React.HTMLProps<HTMLElement> {\n  /** Additional classes for the container */\n  className?: string;\n  /** Flag indicating if the pagination is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if the pagination is compact */\n  isCompact?: boolean;\n  /** The number of the last page */\n  lastPage?: number;\n  /** The number of first page where pagination starts */\n  firstPage?: number;\n  /** The title of a page displayed beside the page number */\n  pagesTitle?: string;\n  /** Accessible label for the button which moves to the last page */\n  toLastPage?: string;\n  /** Accessible label for the button which moves to the previous page */\n  toPreviousPage?: string;\n  /** Accessible label for the button which moves to the next page */\n  toNextPage?: string;\n  /** Accessible label for the button which moves to the first page */\n  toFirstPage?: string;\n  /** Accessible label for the input displaying the current page */\n  currPage?: string;\n  /** Accessible label for the pagination component */\n  paginationTitle?: string;\n  /** The number of the current page */\n  page: React.ReactText;\n  /** Function called when page is changed */\n  onSetPage: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to next page */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to previous page */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to first page */\n  onFirstClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to last page */\n  onLastClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user inputs page number */\n  onPageInput?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n}\n\nexport interface NavigationState {\n  userInputPage?: React.ReactText;\n}\n\nexport class Navigation extends React.Component<NavigationProps, NavigationState> {\n  constructor(props: NavigationProps) {\n    super(props);\n    this.state = { userInputPage: this.props.page };\n  }\n\n  static defaultProps = {\n    className: '',\n    isDisabled: false,\n    isCompact: false,\n    lastPage: 0,\n    firstPage: 0,\n    pagesTitle: '',\n    toLastPage: 'Go to last page',\n    toNextPage: 'Go to next page',\n    toFirstPage: 'Go to first page',\n    toPreviousPage: 'Go to previous page',\n    currPage: 'Current page',\n    paginationTitle: 'Pagination',\n    onNextClick: () => undefined as any,\n    onPreviousClick: () => undefined as any,\n    onFirstClick: () => undefined as any,\n    onLastClick: () => undefined as any,\n    onPageInput: () => undefined as any,\n  };\n\n  private static parseInteger(input: React.ReactText, lastPage: number): number {\n    let inputPage = Number.parseInt(input as string, 10);\n    if (!Number.isNaN(inputPage)) {\n      inputPage = inputPage > lastPage ? lastPage : inputPage;\n      inputPage = inputPage < 1 ? 1 : inputPage;\n    }\n    return inputPage;\n  }\n\n  private onChange(event: React.ChangeEvent<HTMLInputElement>, lastPage: number): void {\n    const inputPage = Navigation.parseInteger(event.target.value, lastPage);\n    this.setState({ userInputPage: Number.isNaN(inputPage as number) ? event.target.value : inputPage });\n  }\n\n  private onKeyDown(event: React.KeyboardEvent<HTMLInputElement>, page: number | string, lastPage: number, onPageInput: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void, onSetPage: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void): void {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      const inputPage = Navigation.parseInteger(this.state.userInputPage, lastPage) as number;\n      onPageInput(event, Number.isNaN(inputPage) ? page as number : inputPage);\n      onSetPage(event, Number.isNaN(inputPage) ? page as number : inputPage);\n    }\n  }\n\n  componentDidUpdate(lastState: NavigationProps) {\n    if (this.props.page !== lastState.page && this.props.page <= this.props.lastPage && this.state.userInputPage !== this.props.page) {\n      this.setState({ userInputPage: this.props.page });\n    }\n   }\n\n  render() {\n    const {\n      page,\n      isDisabled,\n      lastPage,\n      firstPage,\n      pagesTitle,\n      toLastPage,\n      toNextPage,\n      toFirstPage,\n      toPreviousPage,\n      currPage,\n      paginationTitle,\n      onSetPage,\n      onNextClick,\n      onPreviousClick,\n      onFirstClick,\n      onLastClick,\n      onPageInput,\n      className,\n      isCompact,\n      ...props\n    } = this.props;\n    const { userInputPage } = this.state;\n    return (\n      <nav className={css(styles.paginationNav, className)} aria-label={paginationTitle} {...props}>\n        {!isCompact && (\n          <Button\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled || page === firstPage}\n            aria-label={toFirstPage}\n            data-action=\"first\"\n            onClick={(event) => {\n              onFirstClick(event, 1);\n              onSetPage(event, 1);\n              this.setState({ userInputPage: 1 });\n            }}\n          >\n            <AngleDoubleLeftIcon />\n          </Button>  \n        )}\n        <Button\n          variant={ButtonVariant.plain}\n          isDisabled={isDisabled || page === firstPage}\n          data-action=\"previous\"\n          onClick={(event) => {\n            const newPage = page as number - 1 >= 1 ? page as number - 1 : 1;\n            onPreviousClick(event, newPage);\n            onSetPage(event, newPage);\n            this.setState({ userInputPage: newPage });\n          }}\n          aria-label={toPreviousPage}\n        >\n          <AngleLeftIcon />\n        </Button>\n        {!isCompact && (\n          <div className={css(styles.paginationNavPageSelect)}>\n            <input\n              className={css(styles.formControl)}\n              aria-label={currPage}\n              type=\"number\"\n              disabled={isDisabled || page === firstPage && page === lastPage}\n              min={lastPage <= 0 && firstPage <= 0 ? 0 : 1}\n              max={lastPage}\n              value={userInputPage}\n              onKeyDown={(event) => this.onKeyDown(event, page, lastPage, onPageInput, onSetPage)}\n              onChange={(event) => this.onChange(event, lastPage)}\n            />\n            <span aria-hidden=\"true\">\n              of {pagesTitle ? pluralize(lastPage, pagesTitle) : lastPage}\n            </span>\n          </div>\n        )}\n        <Button\n          variant={ButtonVariant.plain}\n          isDisabled={isDisabled || page === lastPage}\n          aria-label={toNextPage}\n          data-action=\"next\"\n          onClick={(event) => {\n            const newPage = page as number + 1 <= lastPage ? page as number + 1 : lastPage;\n            onNextClick(event, newPage);\n            onSetPage(event, newPage);\n            this.setState({ userInputPage: newPage });\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n        {!isCompact && (\n          <Button\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled || page === lastPage}\n            aria-label={toLastPage}\n            data-action=\"last\"\n            onClick={(event) => {\n              onLastClick(event, lastPage);\n              onSetPage(event, lastPage);\n              this.setState({ userInputPage: lastPage });\n            }}\n          >\n            <AngleDoubleRightIcon />\n          </Button>\n        )}\n      </nav>\n    );\n  }\n}\n"],"file":"Navigation.js"}