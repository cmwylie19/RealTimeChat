{"version":3,"sources":["../../../../src/layouts/Grid/Grid.tsx"],"names":["Grid","children","className","gutter","span","props","classes","styles","grid","Object","entries","DeviceSizes","forEach","propKey","gridSpanModifier","key","propValue","push","css","modifiers","sm","md","lg","xl","xl2"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAyBO,IAAMA,IAAwC,GAAI,SAA5CA,IAA4C,OAMxC;AAAA,2BALfC,QAKe;AAAA,MALfA,QAKe,8BALJ,IAKI;AAAA,4BAJfC,SAIe;AAAA,MAJfA,SAIe,+BAJH,EAIG;AAAA,yBAHfC,MAGe;AAAA,MAHfA,MAGe,4BAHN,IAGM;AAAA,uBAFfC,IAEe;AAAA,MAFfA,IAEe,0BAFR,IAEQ;AAAA,MADZC,KACY;;AACf,MAAMC,OAAO,GAAG,CAACC,iBAAOC,IAAR,EAAcJ,IAAI,IAAI,8BAAYG,gBAAZ,gBAA2BH,IAA3B,SAAtB,CAAhB;AAEAK,EAAAA,MAAM,CAACC,OAAP,CAAeC,kBAAf,EAA4BC,OAA5B,CAAoC,iBAAiC;AAAA;AAAA,QAA/BC,OAA+B;AAAA,QAAtBC,gBAAsB;;AACnE,QAAMC,GAAG,GAAGF,OAAZ;AACA,QAAMG,SAAS,GAAGX,KAAK,CAACU,GAAD,CAAvB;;AACA,QAAIC,SAAJ,EAAe;AACbV,MAAAA,OAAO,CAACW,IAAR,CAAa,8BAAYV,gBAAZ,gBAA2BS,SAA3B,kBAA4CF,gBAA5C,EAAb;AACD;;AACD,WAAOT,KAAK,CAACU,GAAD,CAAZ;AACD,GAPD;AASA,SACE;AACE,IAAA,SAAS,EAAEG,+BACNZ,OADM,SAETH,MAAM,IAAII,iBAAOY,SAAP,CAAiBhB,MAFlB,EAGTD,SAHS;AADb,KAMMG,KANN,GAQGJ,QARH,CADF;AAYD,CA9BM;;;;AAnBLA,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,M,+BAAS,I,EAAO,I,EAAO,I;AAEvBC,EAAAA,I,+BAVmC,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,E,EAAK,E,EAAK,E;AAYjFgB,EAAAA,E,+BAZmC,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,E,EAAK,E,EAAK,E;AAcjFC,EAAAA,E,+BAdmC,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,E,EAAK,E,EAAK,E;AAgBjFC,EAAAA,E,+BAhBmC,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,E,EAAK,E,EAAK,E;AAkBjFC,EAAAA,E,+BAlBmC,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,E,EAAK,E,EAAK,E;AAoBjFC,EAAAA,G,+BApBmC,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,C,EAAI,E,EAAK,E,EAAK,E","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/layouts/Grid/grid';\nimport { css } from '@patternfly/react-styles';\nimport { getModifier } from '@patternfly/react-styles';\nimport { DeviceSizes } from '../../styles/sizes';\n\nexport type gridItemSpanValueShape = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\nexport interface GridProps extends React.HTMLProps<HTMLDivElement> {\n  /** content rendered inside the Grid layout */\n  children?: React.ReactNode;\n  /** additional classes added to the Grid layout */\n  className?: string;\n  /** Adds space between children. */\n  gutter?: 'sm' | 'md' | 'lg';\n  /** The number of rows a column in the grid should span.  Value should be a number 1-12 */\n  span?: gridItemSpanValueShape;\n  /** the number of columns all grid items should span on a small device */\n  sm?: gridItemSpanValueShape;\n  /** the number of columns all grid items should span on a medium device */\n  md?: gridItemSpanValueShape;\n  /** the number of columns all grid items should span on a large device */\n  lg?: gridItemSpanValueShape;\n  /** the number of columns all grid items should span on a xLarge device */\n  xl?: gridItemSpanValueShape;\n  /** the number of columns all grid items should span on a 2xLarge device */\n  xl2?: gridItemSpanValueShape;\n}\n\nexport const Grid: React.FunctionComponent<GridProps>  = ({\n  children = null,\n  className = '',\n  gutter = null,\n  span = null,\n  ...props\n}: GridProps) => {\n  const classes = [styles.grid, span && getModifier(styles, `all_${span}Col`)];\n\n  Object.entries(DeviceSizes).forEach(([propKey, gridSpanModifier]) => {\n    const key = propKey as keyof typeof DeviceSizes;\n    const propValue = props[key] as gridItemSpanValueShape;\n    if (propValue) {\n      classes.push(getModifier(styles, `all_${propValue}ColOn${gridSpanModifier}`));\n    }\n    delete props[key];\n  });\n\n  return (\n    <div\n      className={css(\n        ...classes,\n        gutter && styles.modifiers.gutter,\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n"],"file":"Grid.js"}