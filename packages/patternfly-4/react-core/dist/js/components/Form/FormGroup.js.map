{"version":3,"sources":["../../../../src/components/Form/FormGroup.tsx"],"names":["FormGroup","children","className","label","isRequired","isValid","isInline","helperText","helperTextInvalid","fieldId","props","isHorizontal","styles","formGroup","formLabel","formLabelText","formLabelRequired","ASTERISK","formHorizontalGroup","formHelperText"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAuBO,IAAMA,SAAkD,GAAG,SAArDA,SAAqD;AAAA,2BAChEC,QADgE;AAAA,MAChEA,QADgE,8BACrD,IADqD;AAAA,4BAEhEC,SAFgE;AAAA,MAEhEA,SAFgE,+BAEpD,EAFoD;AAAA,MAGhEC,KAHgE,QAGhEA,KAHgE;AAAA,6BAIhEC,UAJgE;AAAA,MAIhEA,UAJgE,gCAInD,KAJmD;AAAA,0BAKhEC,OALgE;AAAA,MAKhEA,OALgE,6BAKtD,IALsD;AAAA,2BAMhEC,QANgE;AAAA,MAMhEA,QANgE,8BAMrD,KANqD;AAAA,MAOhEC,UAPgE,QAOhEA,UAPgE;AAAA,MAQhEC,iBARgE,QAQhEA,iBARgE;AAAA,MAShEC,OATgE,QAShEA,OATgE;AAAA,MAU7DC,KAV6D;;AAAA,SAYhE,oBAAC,wBAAD,CAAa,QAAb,QACG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,wCAASD,KAAT;AAAgB,MAAA,SAAS,EAAE,sBAAIE,iBAAOC,SAAX,EAAsBP,QAAQ,GAAG,8BAAYM,gBAAZ,EAAoB,QAApB,EAA8BV,SAA9B,CAAH,GAA8CA,SAA5E;AAA3B,QACGC,KAAK,IACJ;AAAO,MAAA,SAAS,EAAE,sBAAIS,iBAAOE,SAAX,CAAlB;AAAyC,MAAA,OAAO,EAAEL;AAAlD,OACE;AAAM,MAAA,SAAS,EAAE,sBAAIG,iBAAOG,aAAX;AAAjB,OACGZ,KADH,CADF,EAIGC,UAAU,IACT;AAAM,MAAA,SAAS,EAAE,sBAAIQ,iBAAOI,iBAAX,CAAjB;AAAgD,qBAAY;AAA5D,OACGC,uBADH,CALJ,CAFJ,EAaGN,YAAY,GAAG;AAAK,MAAA,SAAS,EAAE,sBAAIC,iBAAOM,mBAAX;AAAhB,OAAkDjB,QAAlD,CAAH,GAAuEA,QAbtF,EAcG,CAAEI,OAAO,IAAIE,UAAZ,IAA4B,CAACF,OAAD,IAAYG,iBAAzC,KACC;AACE,MAAA,SAAS,EAAE,sBAAII,iBAAOO,cAAX,EAA2B,CAACd,OAAD,GAAW,8BAAYO,gBAAZ,EAAoB,OAApB,CAAX,GAA0C,EAArE,CADb;AAEE,MAAA,EAAE,YAAKH,OAAL,YAFJ;AAGE,mBAAU;AAHZ,OAKGJ,OAAO,GAAGE,UAAH,GAAgBC,iBAL1B,CAfJ,CADD;AAAA,GADH,CAZgE;AAAA,CAA3D;;;;AAnBLP,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,K;AAEAC,EAAAA,U;AAEAC,EAAAA,O;AAEAC,EAAAA,Q;AAEAC,EAAAA,U;AAEAC,EAAAA,iB;AAEAC,EAAAA,O","sourcesContent":["import * as React from 'react';\nimport { Omit } from '../../helpers/typeUtils';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { FormContext } from './FormContext';\nimport { css, getModifier } from '@patternfly/react-styles';\n\nexport interface FormGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as FormGroup content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the FormGroup. */\n  className?: string;\n  /** Label text before the field. */\n  label?: React.ReactNode;\n  /** Sets the FormGroup required. */\n  isRequired?: boolean;\n  /** Sets the FormGroup isValid. */\n  isValid?: boolean;\n  /** Sets the FormGroup isInline. */\n  isInline?: boolean;\n  /** Helper text after the field. It can be a simple text or an object. */\n  helperText?: React.ReactNode;\n  /** Helper text after the field when the field is isValid. It can be a simple text or an object. */\n  helperTextInvalid?: React.ReactNode;\n  /** ID of the included field. It has to be the same for proper working. */\n  fieldId: string;\n}\n\nexport const FormGroup: React.FunctionComponent<FormGroupProps> = ({\n  children = null,\n  className = '',\n  label,\n  isRequired = false,\n  isValid = true,\n  isInline = false,\n  helperText,\n  helperTextInvalid,\n  fieldId,\n  ...props\n}: FormGroupProps) => (\n  <FormContext.Consumer>\n    {({ isHorizontal }: { isHorizontal: boolean }) => (\n      <div {...props} className={css(styles.formGroup, isInline ? getModifier(styles, 'inline', className) : className)}>\n        {label && (\n          <label className={css(styles.formLabel)} htmlFor={fieldId}>\n            <span className={css(styles.formLabelText)}>\n              {label}\n            </span>\n            {isRequired && (\n              <span className={css(styles.formLabelRequired)} aria-hidden=\"true\">\n                {ASTERISK}\n              </span>\n            )}\n          </label>\n        )}\n        {isHorizontal ? <div className={css(styles.formHorizontalGroup)}>{children}</div> : children}\n        {((isValid && helperText) || (!isValid && helperTextInvalid)) && (\n          <div\n            className={css(styles.formHelperText, !isValid ? getModifier(styles, 'error') : '')}\n            id={`${fieldId}-helper`}\n            aria-live=\"polite\"\n          >\n            {isValid ? helperText : helperTextInvalid}\n          </div>\n        )}\n      </div>\n    )}\n  </FormContext.Consumer>\n);\n"],"file":"FormGroup.js"}