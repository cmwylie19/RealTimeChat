{"version":3,"sources":["../../../../src/components/ChartBullet/ChartBulletComparativeWarningMeasure.tsx"],"names":["ChartBulletComparativeWarningMeasure","ariaDesc","ariaTitle","barWidth","constrainToVisibleArea","data","domain","horizontal","labelComponent","labels","measureComponent","padding","standalone","themeColor","themeVariant","y","theme","height","bar","width","rest","measure","React","cloneElement","props","VictoryBar"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAOA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;AAiJO,IAAMA,oCAAwG,GAAG,SAA3GA,oCAA2G,OAsBvE;AAAA,MArB/CC,QAqB+C,QArB/CA,QAqB+C;AAAA,MApB/CC,SAoB+C,QApB/CA,SAoB+C;AAAA,MAnB/CC,QAmB+C,QAnB/CA,QAmB+C;AAAA,mCAlB/CC,sBAkB+C;AAAA,MAlB/CA,sBAkB+C,sCAlBtB,KAkBsB;AAAA,MAjB/CC,IAiB+C,QAjB/CA,IAiB+C;AAAA,MAhB/CC,MAgB+C,QAhB/CA,MAgB+C;AAAA,6BAf/CC,UAe+C;AAAA,MAf/CA,UAe+C,gCAflC,IAekC;AAAA,MAd/CC,cAc+C,QAd/CA,cAc+C;AAAA,MAb/CC,MAa+C,QAb/CA,MAa+C;AAAA,mCAZ/CC,gBAY+C;AAAA,MAZ/CA,gBAY+C,sCAZ5B,oBAAC,4DAAD,OAY4B;AAAA,MAX/CC,OAW+C,QAX/CA,OAW+C;AAAA,6BAV/CC,UAU+C;AAAA,MAV/CA,UAU+C,gCAVlC,IAUkC;AAAA,MAT/CC,UAS+C,QAT/CA,UAS+C;AAAA,MAR/CC,YAQ+C,QAR/CA,YAQ+C;AAAA,MAP/CC,CAO+C,QAP/CA,CAO+C;AAAA,wBAJ/CC,KAI+C;AAAA,MAJ/CA,KAI+C,2BAJvC,yDAAwCH,UAAxC,EAAoDC,YAApD,CAIuC;AAAA,yBAH/CG,MAG+C;AAAA,MAH/CA,MAG+C,4BAHtCD,KAAK,CAACE,GAAN,CAAUD,MAG4B;AAAA,wBAF/CE,KAE+C;AAAA,MAF/CA,KAE+C,2BAFvCH,KAAK,CAACE,GAAN,CAAUC,KAE6B;AAAA,MAD5CC,IAC4C;;AAC/C;AACA,MAAMC,OAAO,GAAGC,KAAK,CAACC,YAAN,CAAmBb,gBAAnB;AACdT,IAAAA,QAAQ,EAARA,QADc;AAEdC,IAAAA,SAAS,EAATA,SAFc;AAGdC,IAAAA,QAAQ,EAARA,QAHc;AAIdC,IAAAA,sBAAsB,EAAtBA,sBAJc;AAKdC,IAAAA,IAAI,EAAJA,IALc;AAMdC,IAAAA,MAAM,EAANA,MANc;AAOdW,IAAAA,MAAM,EAANA,MAPc;AAQdV,IAAAA,UAAU,EAAVA,UARc;AASdC,IAAAA,cAAc,EAAdA,cATc;AAUdC,IAAAA,MAAM,EAANA,MAVc;AAWdE,IAAAA,OAAO,EAAPA,OAXc;AAYdC,IAAAA,UAAU,EAAE,KAZE;AAadI,IAAAA,KAAK,EAALA,KAbc;AAcdG,IAAAA,KAAK,EAALA,KAdc;AAedJ,IAAAA,CAAC,EAADA;AAfc,KAgBXL,gBAAgB,CAACc,KAhBN,EAAhB;AAmBA,SAAOZ,UAAU,GACf,oBAAC,8BAAD;AAAgB,IAAA,IAAI,EAAEX,QAAtB;AAAgC,IAAA,MAAM,EAAEgB,MAAxC;AAAgD,IAAA,KAAK,EAAEf,SAAvD;AAAkE,IAAA,KAAK,EAAEiB;AAAzE,KACGE,OADH,CADe,GAKf,oBAAC,KAAD,CAAO,QAAP,QACGA,OADH,CALF;AASD,CApDM,C,CAsDP;;;;;AA3LEpB,EAAAA,Q;AAOAC,EAAAA,S;AAQAC,EAAAA,Q;AAMAC,EAAAA,sB;AASAC,EAAAA,I;AAWAC,EAAAA,M;AAKAW,EAAAA,M;AAMAV,EAAAA,U;AAYAC,EAAAA,c;AASAC,EAAAA,M;AAIAC,EAAAA,gB;AAOAC,EAAAA,O;AAMAC,EAAAA,U;AAQAI,EAAAA,K;AAQAH,EAAAA,U;AAQAC,EAAAA,Y;AAKAK,EAAAA,K;AAWAJ,EAAAA,C;;AA0DF,sCAAqBf,oCAArB,EAA2DyB,mBAA3D","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  DataGetterPropType,\n  DomainPropType,\n  NumberOrCallback,\n  PaddingProps,\n  VictoryBar,\n} from 'victory';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartThemeDefinition}  from '../ChartTheme';\nimport { getBulletComparativeWarningMeasureTheme } from '../ChartUtils';\nimport { ChartBulletComparativeMeasure } from './ChartBulletComparativeMeasure';\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartBulletComparativeWarningMeasureProps {\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The barWidth prop is used to specify the width of each bar. This prop may be given as\n   * a number of pixels or as a function that returns a number. When this prop is given as\n   * a function, it will be evaluated with the arguments datum, and active. When this value\n   * is not given, a default value will be calculated based on the overall dimensions of\n   * the chart, and the number of bars.\n   */\n  barWidth?: NumberOrCallback;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The data prop specifies the data to be plotted. Data should be in the form of an array\n   * of data points, or an array of arrays of data points for multiple datasets.\n   * Each data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\n   * but by default, an object with y properties is expected.\n   *\n   * @example data={[{ y: 50 }]}\n   */\n  data?: any[];\n  /**\n   * The domain prop describes the range of values your chart will cover. This prop can be\n   * given as a array of the minimum and maximum expected values for your bar chart,\n   * or as an object that specifies separate arrays for x and y.\n   * If this prop is not provided, a domain will be calculated from data, or other\n   * available information.\n   * @example {x: [0, 2], y: [0, 100]}\n   *\n   * Note: The x domain is expected to be `x: [0, 2]` in order to position all measures properly\n   */\n  domain?: DomainPropType;\n  /**\n   * The height props specifies the height the svg viewBox of the chart container.\n   * This value should be given as a number of pixels\n   */\n  height?: number;\n  /**\n   * The horizontal prop determines whether data will be plotted horizontally.\n   * When this prop is set to true, the independent variable will be plotted on the y axis\n   * and the dependent variable will be plotted on the x axis.\n   */\n  horizontal?: boolean;\n  /**\n   * The labelComponent prop takes in an entire label component which will be used\n   * to create a label for the bar. The new element created from the passed labelComponent\n   * will be supplied with the following properties: x, y, index, data, verticalAnchor,\n   * textAnchor, angle, style, text, and events. any of these props may be overridden\n   * by passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If labelComponent is omitted, a new ChartLabel\n   * will be created with props described above. This labelComponent prop should be used to\n   * provide a series label for ChartBar. If individual labels are required for each\n   * data point, they should be created by composing ChartBar with VictoryScatter\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * The labels prop defines labels that will appear above each bar in your chart.\n   * This prop should be given as an array of values or as a function of data.\n   * If given as an array, the number of elements in the array should be equal to\n   * the length of the data array. Labels may also be added directly to the data object\n   * like data={[{y: 1, label: \"first\"}]}.\n   * @example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title\n   */\n  labels?: Function | string[] | number[];\n  /**\n   * The measureComponent prop takes an entire component which will be used to create the chart\n   */\n  measureComponent?: React.ReactElement<any>;\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartLine with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartLine as a solo component, implement the theme directly on\n   * ChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\n   * please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The width props specifies the width of the svg viewBox of the chart container\n   * This value should be given as a number of pixels\n   */\n  width?: number;\n  /**\n   * The y prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  y?: DataGetterPropType;\n}\n\nexport const ChartBulletComparativeWarningMeasure: React.FunctionComponent<ChartBulletComparativeWarningMeasureProps> = ({\n  ariaDesc,\n  ariaTitle,\n  barWidth,\n  constrainToVisibleArea = false,\n  data,\n  domain,\n  horizontal = true,\n  labelComponent,\n  labels,\n  measureComponent = <ChartBulletComparativeMeasure />,\n  padding,\n  standalone = true,\n  themeColor,\n  themeVariant,\n  y,\n\n  // destructure last\n  theme = getBulletComparativeWarningMeasureTheme(themeColor, themeVariant),\n  height = theme.bar.height,\n  width = theme.bar.width,\n  ...rest\n}: ChartBulletComparativeWarningMeasureProps) => {\n  // Comparative measure component\n  const measure = React.cloneElement(measureComponent, {\n    ariaDesc,\n    ariaTitle,\n    barWidth,\n    constrainToVisibleArea,\n    data,\n    domain,\n    height,\n    horizontal,\n    labelComponent,\n    labels,\n    padding,\n    standalone: false,\n    theme,\n    width,\n    y,\n    ...measureComponent.props\n  });\n\n  return standalone ? (\n    <ChartContainer desc={ariaDesc} height={height} title={ariaTitle} width={width}>\n      {measure}\n    </ChartContainer>\n  ) : (\n    <React.Fragment>\n      {measure}\n    </React.Fragment>\n  );\n};\n\n// Note: VictoryBar.role must be hoisted\nhoistNonReactStatics(ChartBulletComparativeWarningMeasure, VictoryBar);\n"],"file":"ChartBulletComparativeWarningMeasure.js"}