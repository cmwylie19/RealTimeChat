{"version":3,"sources":["../../../../src/components/Progress/ProgressContainer.tsx"],"names":["React","progressStyle","css","CheckCircleIcon","TimesCircleIcon","ProgressBar","ProgressMeasureLocation","ProgressVariant","variantToIcon","danger","success","ProgressContainer","ariaProps","value","title","parentId","label","variant","info","measureLocation","top","StatusIcon","hasOwnProperty","progressDescription","progressStatus","outside","progressMeasure","progressStatusIcon","inside"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,2DAA1B;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,yBAAjD;AACA,SAAoBC,WAApB,QAAuC,eAAvC;AAGA,WAAYC,uBAAZ;;WAAYA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;GAAAA,uB,KAAAA,uB;;AAOZ,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAuBZ,MAAMC,aAAqD,GAAG;AAC5DC,EAAAA,MAAM,EAAEL,eADoD;AAE5DM,EAAAA,OAAO,EAAEP;AAFmD,CAA9D;AAKA,OAAO,MAAMQ,iBAAkE,GAAG,CAAC;AACjFC,EAAAA,SADiF;AAEjFC,EAAAA,KAFiF;AAGjFC,EAAAA,KAAK,GAAG,EAHyE;AAIjFC,EAAAA,QAJiF;AAKjFC,EAAAA,KAAK,GAAG,IALyE;AAMjFC,EAAAA,OAAO,GAAGV,eAAe,CAACW,IANuD;AAOjFC,EAAAA,eAAe,GAAGb,uBAAuB,CAACc;AAPuC,CAAD,KAQpD;AAC5B,QAAMC,UAAU,GAAGb,aAAa,CAACc,cAAd,CAA6BL,OAA7B,KAAyCT,aAAa,CAACS,OAAD,CAAzE;AACA,SACE,oBAAC,KAAD,CAAO,QAAP,QACE;AAAK,IAAA,SAAS,EAAEf,GAAG,CAACD,aAAa,CAACsB,mBAAf,CAAnB;AAAwD,IAAA,EAAE,EAAG,GAAER,QAAS;AAAxE,KACGD,KADH,CADF,EAIE;AAAK,IAAA,SAAS,EAAEZ,GAAG,CAACD,aAAa,CAACuB,cAAf;AAAnB,KACG,CAACL,eAAe,KAAKb,uBAAuB,CAACc,GAA5C,IAAmDD,eAAe,KAAKb,uBAAuB,CAACmB,OAAhG,KACC;AAAM,IAAA,SAAS,EAAEvB,GAAG,CAACD,aAAa,CAACyB,eAAf;AAApB,KAAsDV,KAAK,IAAK,GAAEH,KAAM,GAAxE,CAFJ,EAIGL,aAAa,CAACc,cAAd,CAA6BL,OAA7B,KACC;AAAM,IAAA,SAAS,EAAEf,GAAG,CAACD,aAAa,CAAC0B,kBAAf;AAApB,KACE,oBAAC,UAAD,OADF,CALJ,CAJF,EAcE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEf,SAAxB;AAAmC,IAAA,KAAK,EAAEC;AAA1C,KACGM,eAAe,KAAKb,uBAAuB,CAACsB,MAA5C,IAAuD,GAAEf,KAAM,GADlE,CAdF,CADF;AAoBD,CA9BM;;AApBLD,EAAAA,S;AAEAG,EAAAA,Q;AAEAD,EAAAA,K;AAEAE,EAAAA,K;AAEAC,EAAAA,O,aAAU,Q,EAAW,S,EAAY,M;AAEjCE,EAAAA,e,aAAkB,S,EAAY,Q,EAAW,K,EAAQ,M;AAEjDN,EAAAA,K","sourcesContent":["import * as React from 'react';\nimport progressStyle from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nimport { CheckCircleIcon, TimesCircleIcon } from '@patternfly/react-icons';\nimport { AriaProps, ProgressBar } from './ProgressBar';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport enum ProgressMeasureLocation {\n  outside = 'outside',\n  inside = 'inside',\n  top = 'top',\n  none = 'none'\n}\n\nexport enum ProgressVariant {\n  danger = 'danger',\n  success = 'success',\n  info = 'info'\n}\n\nexport interface ProgressContainerProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Properties needed for aria support */\n  ariaProps: AriaProps;\n  /** Progress component DOM ID. */\n  parentId: string;\n  /** Progress title. */\n  title?: string;\n  /** Label to indicate what progress is showing. */\n  label?: React.ReactNode;\n  /** Type of progress status. */\n  variant?: 'danger' | 'success' | 'info';\n  /** Location of progress value. */\n  measureLocation?: 'outside' | 'inside' | 'top' | 'none';\n  /** Actual progress value. */\n  value: number;\n}\n\nconst variantToIcon: {[k: string]: React.FunctionComponent} = {\n  danger: TimesCircleIcon,\n  success: CheckCircleIcon\n};\n\nexport const ProgressContainer: React.FunctionComponent<ProgressContainerProps> = ({\n  ariaProps,\n  value,\n  title = '',\n  parentId,\n  label = null,\n  variant = ProgressVariant.info,\n  measureLocation = ProgressMeasureLocation.top\n}: ProgressContainerProps) => {\n  const StatusIcon = variantToIcon.hasOwnProperty(variant) && variantToIcon[variant];\n  return (\n    <React.Fragment>\n      <div className={css(progressStyle.progressDescription)} id={`${parentId}-description`}>\n        {title}\n      </div>\n      <div className={css(progressStyle.progressStatus)}>\n        {(measureLocation === ProgressMeasureLocation.top || measureLocation === ProgressMeasureLocation.outside) && (\n          <span className={css(progressStyle.progressMeasure)}>{label || `${value}%`}</span>\n        )}\n        {variantToIcon.hasOwnProperty(variant) && (\n          <span className={css(progressStyle.progressStatusIcon)}>\n            <StatusIcon />\n          </span>\n        )}\n      </div>\n      <ProgressBar ariaProps={ariaProps} value={value}>\n        {measureLocation === ProgressMeasureLocation.inside && `${value}%`}\n      </ProgressBar>\n    </React.Fragment>\n  );\n};\n"],"file":"ProgressContainer.js"}