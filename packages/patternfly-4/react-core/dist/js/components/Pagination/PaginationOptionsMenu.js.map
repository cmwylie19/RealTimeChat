{"version":3,"sources":["../../../../src/components/Pagination/PaginationOptionsMenu.tsx"],"names":["PaginationOptionsMenu","props","React","createRef","isOpen","setState","prevState","perPageOptions","perPage","onPerPageSelect","perPageSuffix","map","value","title","event","paginationStyles","paginationMenuText","styles","optionsMenuMenuItemIcon","state","widgetId","isDisabled","itemsPerPageTitle","dropDirection","optionsToggle","toggleTemplate","firstIndex","lastIndex","itemCount","itemsTitle","id","onSelect","toggleIconClass","optionsMenuToggleIcon","toggleTextClass","optionsMenuToggleText","menuClass","optionsMenuMenu","itemClass","optionsMenuMenuItem","toggleClass","baseClass","optionsMenu","disabledClass","modifiers","disabled","menuComponent","baseComponent","length","onToggle","parentRef","current","renderItems","Component","className","DropdownDirection","down"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport paginationStyles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport { Dropdown, DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport { CheckIcon } from '@patternfly/react-icons';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { PerPageOptions } from './Pagination';\n\nexport interface PaginationOptionsMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom class name added to the Pagination Options Menu */\n  className?: string;\n  /** Id added to the title of the Pagination Options Menu */\n  widgetId?: string;\n  /** Flag indicating if Pagination Options Menu is disabled */\n  isDisabled?: boolean;\n  /** Menu will open up or open down from the Options menu toggle */\n  dropDirection?: 'up' | 'down';\n  /** Array of titles and values which will be the options on the Options Menu dropdown */\n  perPageOptions?: PerPageOptions[];\n  /** The Title of the Pagination Options Menu */\n  itemsPerPageTitle?: string;\n  /** The suffix to be displayed after each option on the Options Menu dropdown */\n  perPageSuffix?: string;\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** The text to be displayed on the Options Toggle */\n  optionsToggle?: string;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** The number of items to be displayed per page */\n  perPage?: number;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Function called when user selects number of items per page. */\n  onPerPageSelect?: (event: React.MouseEvent | React.KeyboardEvent | MouseEvent, perPage: number) => void;\n}\n\ninterface PaginationOptionsMenuState {\n  isOpen: boolean;\n}\n\nexport class PaginationOptionsMenu extends React.Component<PaginationOptionsMenuProps, PaginationOptionsMenuState> {\n  private parentRef = React.createRef<HTMLDivElement>();\n  static defaultProps = {\n   className: '',\n   widgetId: '',\n   isDisabled: false,\n   dropDirection: DropdownDirection.down,\n   perPageOptions: [] as PerPageOptions[],\n   itemsPerPageTitle: 'Items per page',\n   perPageSuffix: 'per page',\n   optionsToggle: 'Select',\n   perPage: 0,\n   firstIndex: 0,\n   lastIndex: 0,\n   itemCount: 0,\n   itemsTitle: 'items',\n   toggleTemplate: ({firstIndex, lastIndex, itemCount, itemsTitle}: ToggleTemplateProps) => (\n     <React.Fragment>\n       <b>\n         {firstIndex} - {lastIndex}\n       </b>{' '}\n       of<b>{itemCount}</b> {itemsTitle}\n     </React.Fragment>\n   ),\n   onPerPageSelect: () => null as any\n };\n\n  constructor(props: PaginationOptionsMenuProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  onToggle = (isOpen: boolean) => {\n    this.setState({ isOpen });\n  }\n\n  onSelect = () => {\n    this.setState((prevState: PaginationOptionsMenuState) => {\n      return { isOpen: !prevState.isOpen };\n    });\n  }\n\n  renderItems = () => {\n    const { perPageOptions, perPage, onPerPageSelect, perPageSuffix } = this.props;\n\n    return perPageOptions.map(({ value, title }) => (\n      <DropdownItem\n        key={value}\n        component=\"button\"\n        data-action={`per-page-${value}`}\n        className={css(perPage === value && 'pf-m-selected')}\n        onClick={(event) => onPerPageSelect(event, value)}\n      >\n        {title}\n        <span className={css(paginationStyles.paginationMenuText)}>{` ${perPageSuffix}`}</span>\n        {perPage === value && (\n          <i className={css(styles.optionsMenuMenuItemIcon)}>\n            <CheckIcon />\n          </i>\n        )}\n      </DropdownItem>\n    ));\n  }\n\n  render() {\n    const { widgetId, isDisabled, itemsPerPageTitle, dropDirection, optionsToggle, perPageOptions, toggleTemplate, firstIndex, lastIndex, itemCount, itemsTitle } = this.props;\n    const { isOpen } = this.state;\n\n    return (\n      <DropdownContext.Provider\n        value={{\n          id: widgetId,\n          onSelect: this.onSelect, \n          toggleIconClass: styles.optionsMenuToggleIcon,\n          toggleTextClass: styles.optionsMenuToggleText,\n          menuClass: styles.optionsMenuMenu,\n          itemClass: styles.optionsMenuMenuItem,\n          toggleClass: \" \",\n          baseClass: styles.optionsMenu,\n          disabledClass: styles.modifiers.disabled,\n          menuComponent: 'ul',\n          baseComponent: 'div'\n        }}\n      >\n        <DropdownWithContext\n          direction={dropDirection}\n          isOpen={isOpen}\n          toggle={\n            <OptionsToggle\n              optionsToggle={optionsToggle}\n              itemsPerPageTitle={itemsPerPageTitle}\n              showToggle={perPageOptions && perPageOptions.length > 0}\n              onToggle={this.onToggle}\n              isOpen={isOpen}\n              widgetId={widgetId}\n              firstIndex={firstIndex}\n              lastIndex={lastIndex}\n              itemCount={itemCount}\n              itemsTitle={itemsTitle}\n              toggleTemplate={toggleTemplate}\n              parentRef={this.parentRef.current}\n              isDisabled={isDisabled}\n            />\n          }\n          dropdownItems={this.renderItems()}\n          isPlain\n        />\n      </DropdownContext.Provider>\n    );\n  }\n}\n"],"file":"PaginationOptionsMenu.js"}