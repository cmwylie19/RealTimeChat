{"version":3,"sources":["../../../esm/components/TopologyControlBar/TopologyControlBar.test.js"],"names":["React","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","describe","test","controlButtons","mockfn","jest","fn","view","createElement","TopologyControlBar","className","id","onButtonClick","expect","toMatchSnapshot","find","ZOOM_IN","at","simulate","mock","calls","toHaveLength","defaultControlButtonsOptions","zoomInCallback","zoomInAriaLabel","zoomInIcon","zoomInTip","fitToScreenHidden","resetViewDisabled","legend"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { mount } from 'enzyme';\nimport { TopologyControlBar, createTopologyControlButtons, defaultControlButtonsOptions, ZOOM_IN } from './TopologyControlBar';\ndescribe('TopologyControlBar', () => {\n  test('should display the default controls correctly', () => {\n    const controlButtons = createTopologyControlButtons();\n    const mockfn = jest.fn();\n    const view = mount(React.createElement(TopologyControlBar, {\n      className: \"default-test-class\",\n      id: \"default-test-id\",\n      controlButtons: controlButtons,\n      onButtonClick: mockfn\n    }));\n    expect(view).toMatchSnapshot();\n    view.find(`#${ZOOM_IN}`).at(0).simulate('click');\n    expect(mockfn.mock.calls).toHaveLength(1);\n  });\n  test('should accept button options correctly', () => {\n    const mockfn = jest.fn();\n    const controlButtons = createTopologyControlButtons(_objectSpread({}, defaultControlButtonsOptions, {\n      zoomInCallback: mockfn,\n      zoomInAriaLabel: 'test-zoom-in-aria-label',\n      zoomInIcon: React.createElement(\"span\", null, \"test zoom in\"),\n      zoomInTip: 'test zoom in tooltip',\n      fitToScreenHidden: true,\n      resetViewDisabled: true,\n      legend: false\n    }));\n    const view = mount(React.createElement(TopologyControlBar, {\n      className: \"default-test-class\",\n      id: \"default-test-id\",\n      controlButtons: controlButtons\n    }));\n    expect(view).toMatchSnapshot();\n    view.find(`#${ZOOM_IN}`).at(0).simulate('click');\n    expect(mockfn.mock.calls).toHaveLength(1);\n  });\n});\n//# sourceMappingURL=TopologyControlBar.test.js.map"],"file":"TopologyControlBar.test.js"}