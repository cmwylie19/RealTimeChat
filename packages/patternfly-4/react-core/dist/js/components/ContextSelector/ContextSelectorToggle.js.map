{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelectorToggle.tsx"],"names":["ContextSelectorToggle","React","createRef","document","addEventListener","onDocClick","onEscPress","removeEventListener","event","props","isOpen","parentRef","onToggle","contains","target","toggle","current","focus","keyCode","which","KEY_CODES","ESCAPE_KEY","onEnter","TAB","key","ENTER","preventDefault","SPACE","className","toggleText","isFocused","isActive","isHovered","id","styles","contextSelectorToggle","modifiers","hover","active","onKeyDown","contextSelectorToggleText","contextSelectorToggleIcon","Component","undefined","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\n\nexport interface ContextSelectorToggleProps {\n  /** HTML ID of toggle */\n  id: string;\n  /** Classes applied to root element of toggle */\n  className?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n}\n\nexport class ContextSelectorToggle extends React.Component<ContextSelectorToggleProps> {\n  static defaultProps = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined as any,\n    parentRef: null as any,\n    isFocused: false,\n    isHovered: false,\n    isActive: false,\n    onToggle: (event: any, value: boolean) => undefined as any\n  };\n\n  toggle: React.RefObject<HTMLButtonElement> = React.createRef();\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  }\n\n  onDocClick = (event: any) => {\n    const { isOpen, parentRef, onToggle } = this.props;\n    if (isOpen && parentRef && !parentRef.contains(event.target)) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  }\n\n  onEscPress = (event: any) => {\n    const { isOpen, parentRef, onToggle } = this.props;\n    const keyCode = event.keyCode || event.which;\n    if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY && parentRef && parentRef.contains(event.target)) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  }\n\n  onKeyDown = (event: any) => {\n    const { isOpen, onToggle, onEnter } = this.props;\n    if ((event.keyCode === KEY_CODES.TAB && !isOpen) || event.key !== KEY_CODES.ENTER) { return; }\n    event.preventDefault();\n    if (\n      (event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) &&\n      isOpen\n    ) {\n      onToggle(null, !isOpen);\n    } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n      onToggle(null, !isOpen);\n      onEnter();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      toggleText,\n      isOpen,\n      isFocused,\n      isActive,\n      isHovered,\n      onToggle,\n      onEnter,\n      parentRef,\n      id,\n      ...props\n    } = this.props;\n    return (\n      <button\n        {...props}\n        id={id}\n        ref={this.toggle}\n        className={css(\n          styles.contextSelectorToggle,\n          isFocused && styles.modifiers.focus,\n          isHovered && styles.modifiers.hover,\n          isActive && styles.modifiers.active,\n          className\n        )}\n        type=\"button\"\n        onClick={(event) => onToggle(event, !isOpen)}\n        aria-expanded={isOpen}\n        onKeyDown={this.onKeyDown}\n      >\n        <span className={css(styles.contextSelectorToggleText)}>{toggleText}</span>\n        <CaretDownIcon className={css(styles.contextSelectorToggleIcon)} aria-hidden />\n      </button>\n    );\n  }\n}\n"],"file":"ContextSelectorToggle.js"}