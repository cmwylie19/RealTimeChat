{"version":3,"sources":["../../src/StyleSheet.js"],"names":["css","emotionCSS","cx","injectGlobal","formatClassName","getCSSClasses","isModifier","createStyleDeclaration","isValidStyleDeclaration","getClassName","StyleSheet","create","styleObj","keys","Object","length","reduce","prev","key","parse","input","classes","map","className","value","modifiers","inject","raw","styles","filteredStyles","forEach","style","push"],"mappings":";;;;;;AAAA,SAASA,GAAG,IAAIC,UAAhB,EAA4BC,EAA5B,EAAgCC,YAAhC,QAAoD,SAApD;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,UAHF,EAIEC,sBAJF,EAKEC,uBALF,EAMEC,YANF,QAOO,SAPP;AASA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,MAAM,CAACC,QAAD,EAAW;AACf,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,QAAZ,CAAb;;AACA,QAAIC,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,aAAOF,IAAI,CAACG,MAAL,CACL,CAACC,IAAD,EAAOC,GAAP,uBACKD,IADL;AAEE,SAACC,GAAD,GAAOjB,UAAU,CAACW,QAAQ,CAACM,GAAD,CAAT;AAFnB,QADK,EAKL,EALK,CAAP;AAOD;;AACD,WAAOjB,UAAU,CAACW,QAAD,CAAjB;AACD,GAbuB;;AAcxBO,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACX,UAAMC,OAAO,GAAGhB,aAAa,CAACe,KAAD,CAA7B;;AACA,QAAI,CAACC,OAAL,EAAc;AACZ,aAAO,EAAP;AACD;;AAED,WAAOA,OAAO,CAACL,MAAR,CACL,CAACM,GAAD,EAAMC,SAAN,KAAoB;AAClB,YAAML,GAAG,GAAGd,eAAe,CAACmB,SAAD,CAA3B;;AACA,UAAID,GAAG,CAACJ,GAAD,CAAP,EAAc;AACZ,eAAOI,GAAP;AACD;;AAED,YAAME,KAAK,GAAGjB,sBAAsB,CAACgB,SAAD,EAAYH,KAAZ,CAApC;;AAEA,UAAId,UAAU,CAACiB,SAAD,CAAd,EAA2B;AACzBD,QAAAA,GAAG,CAACG,SAAJ,CAAcP,GAAd,IAAqBM,KAArB;AACD,OAFD,MAEO;AACLF,QAAAA,GAAG,CAACJ,GAAD,CAAH,GAAWM,KAAX;AACD;;AAED,aAAOF,GAAP;AACD,KAhBI,EAiBL;AACEG,MAAAA,SAAS,EAAE,EADb;AAEEC,MAAAA,MAAM,EAAE,MAAMvB,YAAY,CAACiB,KAAD,CAF5B;AAGEO,MAAAA,GAAG,EAAEP;AAHP,KAjBK,CAAP;AAuBD;;AA3CuB,CAAnB;AA8CP,OAAO,SAASpB,GAAT,CAAa,GAAG4B,MAAhB,EAAwB;AAC7B,QAAMC,cAAc,GAAG,EAAvB;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAI;AACtB,QAAIvB,uBAAuB,CAACuB,KAAD,CAA3B,EAAoC;AAClC;AACA;AACAF,MAAAA,cAAc,CAACG,IAAf,CAAoBvB,YAAY,CAACsB,KAAD,CAAhC;AACA;AACD;;AACDF,IAAAA,cAAc,CAACG,IAAf,CAAoBD,KAApB;AACD,GARD;AAUA,SAAO7B,EAAE,CAAC,GAAG2B,cAAJ,CAAT;AACD","sourcesContent":["import { css as emotionCSS, cx, injectGlobal } from 'emotion';\nimport {\n  formatClassName,\n  getCSSClasses,\n  isModifier,\n  createStyleDeclaration,\n  isValidStyleDeclaration,\n  getClassName\n} from './utils';\n\nexport const StyleSheet = {\n  create(styleObj) {\n    const keys = Object.keys(styleObj);\n    if (keys.length > 0) {\n      return keys.reduce(\n        (prev, key) => ({\n          ...prev,\n          [key]: emotionCSS(styleObj[key])\n        }),\n        {}\n      );\n    }\n    return emotionCSS(styleObj);\n  },\n  parse(input) {\n    const classes = getCSSClasses(input);\n    if (!classes) {\n      return {};\n    }\n\n    return classes.reduce(\n      (map, className) => {\n        const key = formatClassName(className);\n        if (map[key]) {\n          return map;\n        }\n\n        const value = createStyleDeclaration(className, input);\n\n        if (isModifier(className)) {\n          map.modifiers[key] = value;\n        } else {\n          map[key] = value;\n        }\n\n        return map;\n      },\n      {\n        modifiers: {},\n        inject: () => injectGlobal(input),\n        raw: input\n      }\n    );\n  }\n};\n\nexport function css(...styles) {\n  const filteredStyles = [];\n  styles.forEach(style => {\n    if (isValidStyleDeclaration(style)) {\n      // remove global injection of styles in favor of require(css) in the component\n      // style.__inject();\n      filteredStyles.push(getClassName(style));\n      return;\n    }\n    filteredStyles.push(style);\n  });\n\n  return cx(...filteredStyles);\n}\n"],"file":"StyleSheet.js"}