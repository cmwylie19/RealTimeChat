{"version":3,"sources":["../../../../src/components/Dropdown/Toggle.tsx"],"names":["React","styles","DropdownContext","css","KEY_CODES","Toggle","Component","createRef","document","addEventListener","event","onDocClick","onEscPress","removeEventListener","props","isOpen","parentRef","current","contains","target","onToggle","buttonRef","focus","keyCode","which","ESCAPE_KEY","key","preventDefault","onEnter","render","className","children","isFocused","isActive","isHovered","isDisabled","isPlain","isPrimary","isSplitButton","ariaHasPopup","id","type","toggleClass","dropdownToggleButton","dropdownToggle","modifiers","hover","active","plain","primary","onKeyDown","Function","prototype"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\n\nexport interface ToggleProps {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isOpen: boolean, event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>) => void;\n  /** Callback called when the Enter key is pressed */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle with a primary button style */\n  isPrimary?: boolean;\n  /** Style the toggle as a child of a split button */\n  isSplitButton?: boolean;\n  /** Flag for aria popup */\n  ariaHasPopup?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'listbox' | 'tree';\n}\n\nexport class Toggle extends React.Component<ToggleProps> {\n  private buttonRef = React.createRef<HTMLButtonElement>();\n\n  static defaultProps = {\n    className: '',\n    isOpen: false,\n    isFocused: false,\n    isHovered: false,\n    isActive: false,\n    isDisabled: false,\n    isPlain: false,\n    isPrimary: false,\n    isSplitButton: false,\n    onToggle: Function.prototype,\n    onEnter: Function.prototype\n  };\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', event => this.onDocClick(event));\n    document.addEventListener('touchstart', event => this.onDocClick(event));\n    document.addEventListener('keydown', event => this.onEscPress(event));\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', event => this.onDocClick(event));\n    document.removeEventListener('touchstart', event => this.onDocClick(event));\n    document.removeEventListener('keydown', event => this.onEscPress(event));\n  }\n\n  onDocClick = (event: MouseEvent | TouchEvent) => {\n    if (this.props.isOpen && this.props.parentRef && this.props.parentRef.current && !this.props.parentRef.current.contains(event.target)) {\n      this.props.onToggle(false, event);\n      this.buttonRef.current.focus();\n    }\n  }\n\n  onEscPress = (event: KeyboardEvent) => {\n    const { parentRef } = this.props;\n    const keyCode = event.keyCode || event.which;\n    if (\n      this.props.isOpen &&\n      (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') &&\n      parentRef && parentRef.current && \n      parentRef.current.contains(event.target)\n    ) {\n      this.props.onToggle(false, event);\n      this.buttonRef.current.focus();\n    }\n  }\n\n  onKeyDown = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Tab' && !this.props.isOpen) { return; }\n    event.preventDefault();\n    if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n      this.props.onToggle(!this.props.isOpen, event);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n      this.props.onToggle(!this.props.isOpen, event);\n      this.props.onEnter();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      isOpen,\n      isFocused,\n      isActive,\n      isHovered,\n      isDisabled,\n      isPlain,\n      isPrimary,\n      isSplitButton,\n      ariaHasPopup,\n      onToggle,\n      onEnter,\n      parentRef,\n      id,\n      type,\n      ...props\n    } = this.props;\n    return (\n      <DropdownContext.Consumer>\n        {({ toggleClass }) => (\n          <button\n            {...props}\n            id={id}\n            ref={this.buttonRef}\n            className={css(\n              isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle,\n              isFocused && styles.modifiers.focus,\n              isHovered && styles.modifiers.hover,\n              isActive && styles.modifiers.active,\n              isPlain && styles.modifiers.plain,\n              isPrimary && styles.modifiers.primary,\n              className\n            )}\n            type={type || 'button'}\n            onClick={(event) => onToggle(!isOpen, event)}\n            aria-expanded={isOpen}\n            aria-haspopup={ariaHasPopup}\n            onKeyDown={event => this.onKeyDown(event)}\n            disabled={isDisabled}\n          >\n            {children}\n          </button>\n        )}\n      </DropdownContext.Consumer>\n    );\n  }\n}\n"],"file":"Toggle.js"}