{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelectorMenuList.tsx"],"names":["ContextSelectorMenuList","index","ref","refsCollection","props","className","isOpen","children","styles","contextSelectorMenuList","extendChildren","React","Children","map","child","cloneElement","sendRef","Component"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAWaA,uB;;;;;;;;;;;;;;;;;;qEAQM,E;;8DAEP,UAACC,KAAD,EAAgBC,GAAhB,EAA6B;AACrC,YAAKC,cAAL,CAAoBF,KAApB,IAA6BC,GAA7B;AACD,K;;6DAWQ,YAAM;AAAA,wBAMT,MAAKE,KANI;AAAA,UAEXC,SAFW,eAEXA,SAFW;AAAA,UAGXC,MAHW,eAGXA,MAHW;AAAA,UAIXC,QAJW,eAIXA,QAJW;AAAA,UAKRH,KALQ;;AAOb,aACE;AAAI,QAAA,SAAS,EAAE,sBAAII,4BAAOC,uBAAX,EAAoCJ,SAApC,CAAf;AAA+D,QAAA,MAAM,EAAE,CAACC,MAAxE;AAAgF,QAAA,IAAI,EAAC;AAArF,SAAgGF,KAAhG,GACG,MAAKM,cAAL,EADH,CADF;AAKD,K;;;;;;;qCArBgB;AAAA;;AACf,aAAOC,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmB,KAAKT,KAAL,CAAWG,QAA9B,EAAwC,UAACO,KAAD,EAAQb,KAAR;AAAA,eAC7CU,KAAK,CAACI,YAAN,CAAmBD,KAAnB,EAAqD;AACnDE,UAAAA,OAAO,EAAE,MAAI,CAACA,OADqC;AAEnDf,UAAAA,KAAK,EAALA;AAFmD,SAArD,CAD6C;AAAA,OAAxC,CAAP;AAMD;;;;EArB0CU,KAAK,CAACM,S;;;;gBAAtCjB,uB;AAPXO,EAAAA,Q;AAEAF,EAAAA,S;AAEAC,EAAAA,M;;;gBAGWN,uB,kBAEW;AACpBO,EAAAA,QAAQ,EAAE,IADU;AAEpBF,EAAAA,SAAS,EAAE,EAFS;AAGpBC,EAAAA,MAAM,EAAE;AAHY,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\n\nexport interface ContextSelectorMenuListProps {\n  /** Content rendered inside the Context Selector Menu */\n  children?: React.ReactNode;\n  /** Classess applied to root element of Context Selector menu */\n  className?: string;\n  /** Flag to indicate if Context Selector menu is opened */\n  isOpen?: boolean;\n}\n\nexport class ContextSelectorMenuList extends React.Component<ContextSelectorMenuListProps> {\n\n  static defaultProps = {\n    children: null as React.ReactNode,\n    className: '',\n    isOpen: true\n  };\n\n  refsCollection = [] as any;\n\n  sendRef = (index: number, ref: any) => {\n    this.refsCollection[index] = ref;\n  }\n\n  extendChildren() {\n    return React.Children.map(this.props.children, (child, index) =>\n      React.cloneElement(child as React.ReactElement<any>, {\n        sendRef: this.sendRef,\n        index\n      })\n    );\n  }\n\n  render = () => {\n    const {\n      className,\n      isOpen,\n      children,\n      ...props\n    } = this.props;\n    return (\n      <ul className={css(styles.contextSelectorMenuList, className)} hidden={!isOpen} role=\"menu\" {...props}>\n        {this.extendChildren()}\n      </ul>\n    );\n  }\n}\n"],"file":"ContextSelectorMenuList.js"}