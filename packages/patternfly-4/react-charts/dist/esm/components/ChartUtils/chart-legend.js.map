{"version":3,"sources":["../../../../src/components/ChartUtils/chart-legend.ts"],"names":["VictoryLegend","Helpers","TextSize","ChartCommonStyles","overpassFontCharacterConstant","getPieOrigin","getLegendDimensions","legendData","legendOrientation","legendProps","theme","data","getDimensions","orientation","getLegendX","chartType","rest","getPieLegendX","getChartLegendX","getLegendY","getPieLegendY","getBulletLegendY","getChartLegendY","dy","height","legendPosition","padding","width","left","right","getPadding","chartSize","legend","margin","legendDimensions","legendPadding","length","dx","top","bottom","Math","abs","textSizeWorkAround","getTextSizeWorkAround","round","originX","origin","radius","getRadius","x","label","y","style","labels","result","name","forEach","textSize","approximateTextSize","adjustedTextSize","characterConstant"],"mappings":"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","sourcesContent":["import { VictoryLegend } from 'victory';\nimport { Helpers, TextSize } from 'victory-core';\nimport { ChartLegendProps } from '../ChartLegend';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { overpassFontCharacterConstant } from './chart-label';\nimport {getPieOrigin} from \"./chart-origin\";\n\ninterface ChartLegendInterface {\n  chartType?: string; // The type of chart (e.g., pie) to lookup for props\n  dx?: number; // Horizontal shift from the x coordinate\n  dy?: number; // Vertical shift from the x coordinate\n  height?: number; // Overall height of SVG\n  legendData: any[]; // The legend data used to determine width\n  legendOrientation: 'horizontal' | 'vertical'; // Orientation of legend\n  legendPosition: 'bottom' | 'bottom-left' | 'right'; // Position of legend\n  legendProps: any; // The legend props used to determine width\n  padding?: any; // Chart padding\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n  width?: number; // Overall width of SVG\n}\n\ninterface ChartLegendDimensionsInterface {\n  legendData: any[]; // The legend data used to determine width\n  legendOrientation: 'horizontal' | 'vertical'; // Orientation of legend\n  legendProps: ChartLegendProps; // Legend properties\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n}\n\ninterface ChartLegendTextSizeInterface {\n  legendData: any[]; // The legend data used to determine width\n  legendOrientation?: 'horizontal' | 'vertical'; // Orientation of legend\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n}\n\n// Returns legend dimensions\nexport const getLegendDimensions = ({\n  legendData,\n  legendOrientation,\n  legendProps,\n  theme\n}: ChartLegendDimensionsInterface) => {\n  if (legendData || legendProps.data) {\n    return (VictoryLegend as any).getDimensions({\n      data: legendData,\n      orientation: legendOrientation,\n      theme,\n      ...legendProps // override above\n    });\n  }\n  return {};\n};\n\n// Returns x coordinate for legend\nexport const getLegendX = ({\n  chartType,\n  ...rest\n}: ChartLegendInterface) => (chartType === 'pie') ? getPieLegendX(rest) : getChartLegendX(rest);\n\n// Returns y coordinate for legend\nexport const getLegendY = ({\n  chartType,\n  ...rest\n}: ChartLegendInterface) => {\n  switch (chartType) {\n    case 'pie':\n      return getPieLegendY(rest);\n    case 'bullet':\n      return getBulletLegendY(rest);\n    default:\n      return getChartLegendY(rest);\n  }\n}\n\n// Returns y coordinate for bullet legends\nexport const getBulletLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const { left, right } = Helpers.getPadding({padding});\n  const chartSize = {\n    height: height, // Fixed size\n    width: width - left - right\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin + dy;\n    case 'right': {\n      // Legend height with padding\n      const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n      });\n      const legendPadding = (legendData: any[]) => (legendData && legendData.length > 0 ? 17 : 0);\n      return (chartSize.height - legendDimensions.height) / 2 + legendPadding(legendData);\n    }\n    default:\n      return dy;\n  }\n};\n\n// Returns x coordinate for chart legends\nexport const getChartLegendX = ({\n  dx = 0,\n  height,\n  legendData,\n  legendOrientation,\n  legendPosition,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const { top, bottom, left, right } = Helpers.getPadding({padding});\n  const chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n  const legendDimensions = getLegendDimensions({\n    legendData,\n    legendOrientation,\n    legendProps,\n    theme\n  });\n  const textSizeWorkAround = getTextSizeWorkAround({\n    legendData,\n    legendOrientation,\n    theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width - textSizeWorkAround\n        ? Math.round((width - (legendDimensions.width - textSizeWorkAround)) / 2) + dx : dx;\n    case 'bottom-left':\n      return left + dx;\n    case 'right':\n      return chartSize.width + ChartCommonStyles.legend.margin + left + dx;\n    default:\n      return dx;\n  }\n};\n\n// Returns y coordinate for chart legends\nexport const getChartLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const { top, bottom, left, right } = Helpers.getPadding({padding});\n  const chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin * 2 + top + dy;\n    case 'right': {\n      // Legend height with padding\n      const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n      });\n      const originX = chartSize.height / 2 + top;\n      const legendPadding = (legendData: any[]) => (legendData && legendData.length > 0 ? 2 : 0);\n      return (originX - legendDimensions.height / 2) + legendPadding(legendData);\n    }\n    default:\n      return dy;\n  }\n};\n\n// Returns x coordinate for pie legends\nexport const getPieLegendX = ({\n  dx = 0,\n  height,\n  legendData,\n  legendOrientation,\n  legendPosition,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n  const legendDimensions = getLegendDimensions({\n    legendData,\n    legendOrientation,\n    legendProps,\n    theme\n  });\n  const textSizeWorkAround = getTextSizeWorkAround({\n    legendData,\n    legendOrientation,\n    theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width - textSizeWorkAround\n        ? Math.round((width - (legendDimensions.width - textSizeWorkAround)) / 2) + dx : dx;\n    case 'right':\n      return origin.x + ChartCommonStyles.label.margin + dx + radius;\n    default:\n      return dx;\n  }\n};\n\n// Returns y coordinate for pie legends\nexport const getPieLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return origin.y + ChartCommonStyles.legend.margin + radius + dy;\n    case 'right': {\n      // Legend height with padding\n      const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n      });\n      const legendPadding = (legendData: any[]) => (legendData && legendData.length > 0 ? 2 : 0);\n      return (origin.y - legendDimensions.height / 2) + legendPadding(legendData);\n    }\n    default:\n      return dy;\n  }\n};\n\n// Returns an approximation of over-sized text width due to growing character count\n//\n// See https://github.com/FormidableLabs/victory/issues/864\nconst getTextSizeWorkAround = ({\n  legendData,\n  legendOrientation,\n  theme\n}: ChartLegendTextSizeInterface) => {\n  const style = theme.legend.style.labels;\n  if (!(legendData && legendData.length)) {\n    return 0;\n  }\n\n  // For horizontal legends, account for the growing char count of the last legend item\n  let result = legendData[legendData.length - 1].name;\n\n  // For vertical legends, account for the growing char count of the longest legend item\n  if (legendOrientation === 'vertical') {\n    legendData.forEach((data) => {\n      if (data.name && data.name.length > result.length) {\n        result = data.name;\n      }\n    });\n  }\n  const textSize = TextSize.approximateTextSize(result,  style);\n  const adjustedTextSize = TextSize.approximateTextSize(result,  {\n    ...style,\n    characterConstant: overpassFontCharacterConstant\n  });\n  return Math.abs(textSize.width - adjustedTextSize.width);\n};\n"],"file":"chart-legend.js"}