{"version":3,"sources":["../../../../src/components/Dropdown/Dropdown.tsx"],"names":["Dropdown","onSelect","ref","props","event","toggleTextClass","styles","dropdownToggleText","toggleIconClass","dropdownToggleIcon","menuClass","dropdownMenu","itemClass","dropdownMenuItem","toggleClass","dropdownToggle","baseClass","dropdown","baseComponent","sectionClass","dropdownGroup","sectionTitleClass","dropdownGroupTitle","sectionComponent","disabledClass","modifiers","disabled","hoverClass","hover","separatorClass","dropdownSeparator","children","className","dropdownItems","isOpen","isPlain","position","direction","isGrouped","toggle","autoFocus"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;AA6BO,IAAMA,QAAgD,GAAG,SAAnDA,QAAmD;AAAA,MAC9DC,QAD8D,QAC9DA,QAD8D;AAAA,MAE9DC,GAF8D,QAE9DA,GAF8D;AAAA,MAG3DC,KAH2D;;AAAA,SAK9D,oBAAC,kCAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QAAE,UAACG,KAAD;AAAA,eAAWH,QAAQ,IAAIA,QAAQ,CAACG,KAAD,CAA/B;AAAA,OAAF,CADH;AAELC,MAAAA,eAAe,EAAEC,qBAAOC,kBAFnB;AAGLC,MAAAA,eAAe,EAAEF,qBAAOG,kBAHnB;AAILC,MAAAA,SAAS,EAAEJ,qBAAOK,YAJb;AAKLC,MAAAA,SAAS,EAAEN,qBAAOO,gBALb;AAMLC,MAAAA,WAAW,EAAER,qBAAOS,cANf;AAOLC,MAAAA,SAAS,EAAEV,qBAAOW,QAPb;AAQLC,MAAAA,aAAa,EAAE,KARV;AASLC,MAAAA,YAAY,EAAEb,qBAAOc,aAThB;AAULC,MAAAA,iBAAiB,EAAEf,qBAAOgB,kBAVrB;AAWLC,MAAAA,gBAAgB,EAAE,SAXb;AAYLC,MAAAA,aAAa,EAAElB,qBAAOmB,SAAP,CAAiBC,QAZ3B;AAaLC,MAAAA,UAAU,EAAErB,qBAAOmB,SAAP,CAAiBG,KAbxB;AAcLC,MAAAA,cAAc,EAAEvB,qBAAOwB;AAdlB;AADT,KAkBE,oBAAC,wCAAD,EAAyB3B,KAAzB,CAlBF,CAL8D;AAAA,CAAzD;;;;AAzBL4B,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,a;AAEAC,EAAAA,M;AAEAC,EAAAA,O;AAEAC,EAAAA,Q,2FAA8B,O,iCAAU,M;AAExCC,EAAAA,S,2FAAgC,I,iCAAO,M;AAEvCC,EAAAA,S;AAEAC,EAAAA,M;AAMAC,EAAAA,S","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\n\nexport interface DropdownProps extends React.HTMLProps<HTMLDivElement> {\n  /** Anything which can be rendered in a dropdown */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown */\n  className?: string;\n  /** Array of DropdownItem nodes that will be rendered in the dropdown Menu list */\n  dropdownItems?: any[];\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Indicates where menu will be aligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Display menu above or below dropdown toggle */\n  direction?: DropdownDirection | 'up' | 'down';\n  /** Flag to indicate if dropdown has groups */\n  isGrouped?: boolean;\n  /** Toggle for the dropdown, examples: <DropdownToggle> or <DropdownToggleCheckbox> */\n  toggle: React.ReactElement<any>;\n  /** Function callback called when user selects item */\n  onSelect?(event: React.SyntheticEvent<HTMLDivElement>): void;\n  /** Flag to indicate if the first dropdown item should gain initial focus, set false when adding\n   * a specific auto-focus item (like a current selection) otherwise leave as true\n   */\n  autoFocus?: boolean;\n}\n\nexport const Dropdown: React.FunctionComponent<DropdownProps> = ({\n  onSelect,\n  ref, // Types of Ref are different for React.FC vs React.Component\n  ...props\n}: DropdownProps) => (\n  <DropdownContext.Provider\n    value={{\n      onSelect: (event) => onSelect && onSelect(event),\n      toggleTextClass: styles.dropdownToggleText,\n      toggleIconClass: styles.dropdownToggleIcon,\n      menuClass: styles.dropdownMenu,\n      itemClass: styles.dropdownMenuItem,\n      toggleClass: styles.dropdownToggle,\n      baseClass: styles.dropdown,\n      baseComponent: 'div',\n      sectionClass: styles.dropdownGroup,\n      sectionTitleClass: styles.dropdownGroupTitle,\n      sectionComponent: 'section',\n      disabledClass: styles.modifiers.disabled,\n      hoverClass: styles.modifiers.hover,\n      separatorClass: styles.dropdownSeparator\n    }}\n  >\n    <DropdownWithContext {...props} />\n  </DropdownContext.Provider>\n);\n"],"file":"Dropdown.js"}