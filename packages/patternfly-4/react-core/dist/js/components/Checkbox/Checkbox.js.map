{"version":3,"sources":["../../../../src/components/Checkbox/Checkbox.tsx"],"names":["defaultOnChange","Checkbox","props","event","onChange","currentTarget","checked","ariaLabel","className","isValid","isDisabled","isChecked","label","defaultChecked","checkedProps","includes","styles","check","checkInput","handleChange","elem","indeterminate","checkLabel","id","React","Component"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM,CAAE,CAAhC;;IAEaC,Q;;;;;AASX,oBAAYC,KAAZ,EAAwB;AAAA;;AAAA;;AACtB,kFAAMA,KAAN;;AADsB,mEAID,UAACC,KAAD,EAAoD;AACzE,YAAKD,KAAL,CAAWE,QAAX,CAAoBD,KAAK,CAACE,aAAN,CAAoBC,OAAxC,EAAiDH,KAAjD;AACD,KANuB;;AAAA;AAEvB;;;;6BAMQ;AAAA,wBAYH,KAAKD,KAZF;AAAA,UAESK,SAFT,eAEL,YAFK;AAAA,UAGLC,SAHK,eAGLA,SAHK;AAAA,UAILJ,QAJK,eAILA,QAJK;AAAA,UAKLK,OALK,eAKLA,OALK;AAAA,UAMLC,UANK,eAMLA,UANK;AAAA,UAOLC,SAPK,eAOLA,SAPK;AAAA,UAQLC,KARK,eAQLA,KARK;AAAA,UASLN,OATK,eASLA,OATK;AAAA,UAULO,cAVK,eAULA,cAVK;AAAA,UAWFX,KAXE;;AAaP,UAAMY,YAA6D,GAAG,EAAtE;;AACA,UAAI,CAAC,IAAD,EAAO,KAAP,EAAcC,QAAd,CAAuBT,OAAvB,KAAmCK,SAAS,KAAK,IAArD,EAA2D;AACzDG,QAAAA,YAAY,CAACR,OAAb,GAAwBA,OAAO,IAAIK,SAAnC;AACD;;AACD,UAAIP,QAAQ,KAAKJ,eAAjB,EAAkC;AAChCc,QAAAA,YAAY,CAACR,OAAb,GAAuBK,SAAvB;AACD;;AACD,UAAI,CAAC,KAAD,EAAQ,IAAR,EAAcI,QAAd,CAAuBF,cAAvB,CAAJ,EAA4C;AAC1CC,QAAAA,YAAY,CAACD,cAAb,GAA8BA,cAA9B;AACD;;AAEDC,MAAAA,YAAY,CAACR,OAAb,GAAuBQ,YAAY,CAACR,OAAb,KAAyB,IAAzB,GAAgC,KAAhC,GAAwCQ,YAAY,CAACR,OAA5E;AACA,aACE;AAAK,QAAA,SAAS,EAAE,sBAAIU,kBAAOC,KAAX,EAAkBT,SAAlB;AAAhB,SACE,0CACMN,KADN;AAEE,QAAA,SAAS,EAAE,sBAAIc,kBAAOE,UAAX,CAFb;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,QAAQ,EAAE,KAAKC,YAJjB;AAKE,wBAAc,CAACV,OALjB;AAME,sBAAYF,SANd;AAOE,QAAA,QAAQ,EAAEG,UAPZ;AAQE,QAAA,GAAG,EAAE,aAACU,IAAD;AAAA,iBAAUA,IAAI,KAAKA,IAAI,CAACC,aAAL,GAAqBV,SAAS,KAAK,IAAxC,CAAd;AAAA;AARP,SASMG,YATN,EADF,EAYGF,KAAK,IACJ;AACE,QAAA,SAAS,EAAE,sBAAII,kBAAOM,UAAX,EAAuBZ,UAAU,GAAG,8BAAYM,iBAAZ,EAAoB,UAApB,CAAH,GAAqC,EAAtE,CADb;AAEE,QAAA,OAAO,EAAEd,KAAK,CAACqB;AAFjB,SAIGX,KAJH,CAbJ,CADF;AAuBD;;;;EAjE2BY,KAAK,CAACC,S;;;;gBAAvBxB,Q;AArBXO,EAAAA,S;AAEAC,EAAAA,O;AAEAC,EAAAA,U;AAEAC,EAAAA,S;AACAL,EAAAA,O;AAEAF,EAAAA,Q;AAEAQ,EAAAA,K;AAEAW,EAAAA,E;AAEA,c;;;gBAMWtB,Q,kBACW;AACpBO,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,OAAO,EAAE,IAFW;AAGpBC,EAAAA,UAAU,EAAE,KAHQ;AAIpBC,EAAAA,SAAS,EAAE,KAJS;AAKpBP,EAAAA,QAAQ,EAAEJ;AALU,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface CheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'label'> {\n  /** Additional classes added to the Checkbox. */\n  className?: string;\n  /** Flag to show if the Checkbox selection is valid or invalid. */\n  isValid?: boolean;\n  /** Flag to show if the Checkbox is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the Checkbox is checked. */\n  isChecked?: boolean;\n  checked?: boolean;\n  /** A callback for when the Checkbox selection changes. */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Label text of the checkbox. */\n  label?: React.ReactNode;\n  /** Id of the checkbox. */\n  id: string;\n  /** Aria-label of the checkbox. */\n  'aria-label'?: string;\n}\n\n// tslint:disable-next-line:no-empty\nconst defaultOnChange = () => {};\n\nexport class Checkbox extends React.Component<CheckboxProps> {\n  static defaultProps = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    isChecked: false,\n    onChange: defaultOnChange\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  private handleChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    this.props.onChange(event.currentTarget.checked, event);\n  }\n\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      className,\n      onChange,\n      isValid,\n      isDisabled,\n      isChecked,\n      label,\n      checked,\n      defaultChecked,\n      ...props\n    } = this.props;\n    const checkedProps: { checked?: boolean; defaultChecked?: boolean } = {};\n    if ([true, false].includes(checked) || isChecked === true) {\n      checkedProps.checked =  checked || isChecked;\n    }\n    if (onChange !== defaultOnChange) {\n      checkedProps.checked = isChecked;\n    }\n    if ([false, true].includes(defaultChecked)) {\n      checkedProps.defaultChecked = defaultChecked;\n    }\n\n    checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n    return (\n      <div className={css(styles.check, className)}>\n        <input\n          {...props}\n          className={css(styles.checkInput)}\n          type=\"checkbox\"\n          onChange={this.handleChange}\n          aria-invalid={!isValid}\n          aria-label={ariaLabel}\n          disabled={isDisabled}\n          ref={(elem) => elem && (elem.indeterminate = isChecked === null)}\n          {...checkedProps}\n        />\n        {label && (\n          <label\n            className={css(styles.checkLabel, isDisabled ? getModifier(styles, 'disabled') : '')}\n            htmlFor={props.id}\n          >\n            {label}\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n"],"file":"Checkbox.js"}