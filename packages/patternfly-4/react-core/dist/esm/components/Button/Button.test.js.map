{"version":3,"sources":["../../../../src/components/Button/Button.test.tsx"],"names":["Button","ButtonVariant","React","mount","CartArrowDownIcon","Object","values","forEach","variant","test","view","expect","toMatchSnapshot","label","find","props","toBe","link","component","type","Component"],"mappings":"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","sourcesContent":["import { Button, ButtonVariant } from './Button';\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { CartArrowDownIcon } from '@patternfly/react-icons';\n\nObject.values(ButtonVariant).forEach((variant) => {\n  test(`${variant} button`, () => {\n    const view = mount(\n      <Button variant={variant} aria-label={variant}>\n        {variant} Button\n      </Button>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ntest('it adds an aria-label to plain buttons', () => {\n  const label = 'aria-label test';\n  const view = mount(<Button aria-label={label} />);\n  expect(view.find('button').props()['aria-label']).toBe(label);\n});\n\ntest('link with icon', () => {\n  const view = mount(\n    <Button variant={ButtonVariant.link} icon={<CartArrowDownIcon />}>\n      Block Button\n    </Button>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('isBlock', () => {\n  const view = mount(<Button isBlock>Block Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isDisabled', () => {\n  const view = mount(<Button isDisabled>Disabled Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isFocus', () => {\n  const view = mount(<Button isFocus>Focused Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isHover', () => {\n  const view = mount(<Button isHover>Hovered Button</Button>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isInline', () => {\n  const view = mount(\n    <Button variant={ButtonVariant.link} isInline>\n      Hovered Button\n    </Button>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('allows passing in a string as the component', () => {\n  const component = 'a';\n  const view = mount(<Button component={component} />);\n  expect(view.find(component).type()).toBe(component);\n});\n\ntest('allows passing in a React Component as the component', () => {\n  const Component = () => <div>im a div</div>;\n  const view = mount(<Button component={Component} />);\n  expect(view.find(Component).type()).toBe(Component);\n});\n\ntest('aria-disabled is set to true and tabIndex to -1 if component is not a button and is disabled', () => {\n  const view = mount(\n    <Button component=\"a\" isDisabled>\n      Disabled Anchor Button\n    </Button>\n  );\n  expect(view).toMatchSnapshot();\n});\n"],"file":"Button.test.js"}