{"version":3,"sources":["../../../../src/components/InlineEdit/InlineEdit.api.test.js"],"names":["firstColTitle","lastColTitle","firstInputName","secondInputName","editRowIndex","firstColEditedRowInputId","rowIndex","columnIndex","column","property","name","lastColEditedRowInputId","columns","length","describe","mountOptions","container","beforeEach","attachTo","getDOMNode","getAttribute","contains","elem","selector","getElementsByTagName","undefined","afterEach","unmount","test","ComposedBody","TableBody","ComposedRowWrapper","RowWrapper","onBlur","jest","fn","inlineEditingFormatter","renderEdit","value","activeEditId","firstInputId","secondInputId","editableCols","title","cellFormatters","editableRows","rows","map","row","cells","isEditing","editConfig","onEditCellClicked","editConfirmationType","TableEditConfirmation","ROW","onEditConfirmed","onEditCanceled","view","editTextInputWrapper","find","TextInput","first","prop","currentTarget","expect","toHaveBeenCalled","mock","calls","toHaveLength","toBe","hostNodes","simulate","setTimeout"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport { Table, TableHeader, TableBody, RowWrapper } from '@patternfly/react-table';\nimport { TextInput } from '@patternfly/react-core';\n\nimport { default as editableRowWrapper } from './editableRowWrapper';\nimport { default as editableTableBody } from './editableTableBody';\nimport { inlineEditFormatterFactory } from './utils';\nimport { TableEditConfirmation } from './constants';\nimport { TableTextInput } from '../TableTextInput';\n\nimport { rows, columns } from '../../test-helpers/data-sets';\nimport { mockClosest, makeTableId } from '../../test-helpers/helpers';\n\nconst firstColTitle = 'editcolfirst';\nconst lastColTitle = 'editcollast';\nconst firstInputName = 'inputOne';\nconst secondInputName = 'inputTwo';\n\nconst editRowIndex = 2;\n\nconst firstColEditedRowInputId = {\n  rowIndex: editRowIndex,\n  columnIndex: 0,\n  column: {\n    property: firstColTitle\n  },\n  name: firstInputName\n};\n\nconst lastColEditedRowInputId = {\n  rowIndex: editRowIndex,\n  columnIndex: columns.length + 2 - 1,\n  column: {\n    property: lastColTitle\n  },\n  name: secondInputName\n};\n\ndescribe('Editable table', () => {\n  let mountOptions;\n  let container;\n\n  beforeEach(() => {\n    container = mount(<div />);\n\n    mountOptions = {\n      attachTo: container.getDOMNode()\n    };\n\n    // mock closest for selecting the first column (firing onEditCellClicked) and resolving table for confirm buttons\n    mockClosest(\n      {\n        '[data-key]': {\n          getAttribute: () => firstColEditedRowInputId.columnIndex,\n          contains: elem => elem.getAttribute('id') === makeTableId(firstColEditedRowInputId)\n        },\n        '[id]': {\n          getAttribute: () => makeTableId(firstColEditedRowInputId)\n        }\n      },\n      selector => (selector === 'table' ? container.getDOMNode().getElementsByTagName('table')[0] : undefined),\n      true\n    );\n  });\n\n  afterEach(() => {\n    container.unmount();\n  });\n\n  test('should call correct function', () => {\n    const ComposedBody = editableTableBody(TableBody);\n    const ComposedRowWrapper = editableRowWrapper(RowWrapper);\n\n    const onBlur = jest.fn();\n\n    const inlineEditingFormatter = inlineEditFormatterFactory({\n      renderEdit: (value, { columnIndex, rowIndex, column }, { activeEditId }) => {\n        const firstInputId = makeTableId({\n          rowIndex,\n          columnIndex,\n          column,\n          name: firstInputName\n        });\n        const secondInputId = makeTableId({\n          rowIndex,\n          columnIndex,\n          column,\n          name: secondInputName\n        });\n        return (\n          <React.Fragment>\n            <TableTextInput\n              id={firstInputId}\n              defaultValue={value}\n              onBlur={onBlur}\n              autoFocus={activeEditId === firstInputId}\n            />\n            <TableTextInput\n              id={secondInputId}\n              defaultValue={value}\n              onBlur={onBlur}\n              autoFocus={activeEditId === secondInputId}\n            />\n          </React.Fragment>\n        );\n      }\n    });\n\n    const editableCols = [\n      {\n        title: firstColTitle,\n        cellFormatters: [inlineEditingFormatter]\n      },\n      ...columns,\n      {\n        title: lastColTitle,\n        cellFormatters: [inlineEditingFormatter]\n      }\n    ];\n\n    const editableRows = rows.map(row => ({\n      ...row,\n      cells: ['', ...row.cells, ''] // add two new columns\n    }));\n    editableRows[editRowIndex].isEditing = true;\n\n    const editConfig = {\n      activeEditId: makeTableId(lastColEditedRowInputId),\n      onEditCellClicked: jest.fn(),\n      editConfirmationType: TableEditConfirmation.ROW,\n      onEditConfirmed: jest.fn(),\n      onEditCanceled: jest.fn()\n    };\n    const view = mount(\n      <Table caption=\"Editable table\" cells={editableCols} rows={editableRows} rowWrapper={ComposedRowWrapper}>\n        <TableHeader />\n        <ComposedBody editConfig={editConfig} />\n      </Table>,\n      mountOptions\n    );\n\n    // calls onBlur properly\n    const editTextInputWrapper = view\n      .find(TextInput)\n      .find(`#${makeTableId(lastColEditedRowInputId)}`)\n      .first();\n    editTextInputWrapper.prop('onBlur')({ currentTarget: { value: 'water' } });\n\n    expect(onBlur).toHaveBeenCalled();\n    expect(onBlur.mock.calls).toHaveLength(1);\n    expect(onBlur.mock.calls[0][0]).toBe('water');\n\n    // responds to cell click\n    view\n      .find(`#${makeTableId(firstColEditedRowInputId)}`)\n      .hostNodes()\n      .simulate('mousedown');\n\n    // should immediately call onEditCellClicked\n    setTimeout(() => expect(editConfig.onEditCellClicked).toHaveBeenCalled(), 0);\n\n    // responds to confirmation button clicks\n    view.find('.pf-c-table__inline-edit-buttons button.pf-c-button.pf-m-primary').simulate('mouseup');\n    expect(editConfig.onEditConfirmed).toHaveBeenCalled();\n\n    view.find('.pf-c-table__inline-edit-buttons button.pf-c-button.pf-m-plain').simulate('mouseup');\n    expect(editConfig.onEditCanceled).toHaveBeenCalled();\n  });\n});\n"],"file":"InlineEdit.api.test.js"}