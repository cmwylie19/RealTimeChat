{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggle.tsx"],"names":["DropdownToggle","id","children","className","isOpen","parentRef","isFocused","isHovered","isActive","isDisabled","isPlain","isPrimary","onToggle","_isOpen","undefined","iconComponent","IconComponent","CaretDownIcon","splitButtonItems","ariaHasPopup","ref","props","toggle","toggleTextClass","toggleIconClass","styles","dropdownToggle","modifiers","splitButton","disabled","type","onEnter"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\n\nexport interface DropdownToggleProps extends React.HTMLProps<HTMLButtonElement> {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle button */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle button */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isOpen: boolean) => void;\n  /** Element which wraps toggle */\n  parentRef?: HTMLElement;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Whether or not the <div> has a disabled state */\n  isDisabled?: boolean;\n  /** Whether or not the dropdown toggle button should have primary button styling */\n  isPrimary?: boolean;\n  /** The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon. */\n  iconComponent?: React.ElementType | null;\n  /** Elements to display before the toggle button. When included, renders the toggle as a split button. */\n  splitButtonItems?: React.ReactNode[];\n  /** Accessible label for the dropdown toggle button */\n  'aria-label'?: string;\n  /** Accessibility property to indicate correct has popup */\n  ariaHasPopup?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'listbox' | 'tree';\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Callback called when the Enter key is pressed */\n  onEnter?: (event?: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const DropdownToggle: React.FunctionComponent<DropdownToggleProps> = ({\n  id = '',\n  children = null,\n  className = '',\n  isOpen = false,\n  parentRef = null,\n  isFocused = false,\n  isHovered = false,\n  isActive = false,\n  isDisabled = false,\n  isPlain = false,\n  isPrimary = false,\n  onToggle = (_isOpen: boolean) => undefined as any,\n  iconComponent: IconComponent = CaretDownIcon,\n  splitButtonItems,\n  ariaHasPopup,\n  ref, // Types of Ref are different for React.FC vs React.Component\n  ...props\n}: DropdownToggleProps) => {\n  const toggle = (\n    <DropdownContext.Consumer>\n      {({ toggleTextClass, toggleIconClass }) => (\n        <Toggle\n          {...props}\n          id={id}\n          className={className}\n          isOpen={isOpen}\n          parentRef={parentRef}\n          isFocused={isFocused}\n          isHovered={isHovered}\n          isActive={isActive}\n          isDisabled={isDisabled}\n          isPlain={isPlain}\n          isPrimary={isPrimary}\n          onToggle={onToggle}\n          ariaHasPopup={ariaHasPopup}\n          {...splitButtonItems && { \"isSplitButton\": true, 'aria-label': props['aria-label'] || 'Select' }}>\n          {children && <span className={IconComponent && css(toggleTextClass)}>{children}</span>}\n          {IconComponent && <IconComponent className={css(children && toggleIconClass)} />}\n        </Toggle>\n      )}\n    </DropdownContext.Consumer>\n  );\n\n  if (splitButtonItems) {\n    return (\n      <div\n        className={css(\n          styles.dropdownToggle,\n          styles.modifiers.splitButton,\n          isDisabled && styles.modifiers.disabled\n        )}\n      >\n        {splitButtonItems}\n        {toggle}\n      </div>\n    );\n  }\n\n  return toggle;\n};\n"],"file":"DropdownToggle.js"}