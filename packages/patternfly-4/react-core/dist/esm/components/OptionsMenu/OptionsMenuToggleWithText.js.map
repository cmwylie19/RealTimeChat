{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenuToggleWithText.tsx"],"names":["React","css","getModifier","styles","OptionsMenuToggle","OptionsMenuToggleWithText","parentId","toggleText","toggleTextClassName","toggleButtonContents","toggleButtonContentsClassName","onToggle","isOpen","isPlain","isHovered","isActive","isFocused","isDisabled","ariaHasPopup","parentRef","onEnter","ariaLabel","props","optionsMenuToggle","optionsMenuToggleText"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,0BAAjC;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAqCA,OAAO,MAAMC,yBAAkF,GAAG,UAkB5D;AAAA,MAlB6D;AACjGC,IAAAA,QAAQ,GAAG,EADsF;AAEjGC,IAAAA,UAFiG;AAGjGC,IAAAA,mBAAmB,GAAG,EAH2E;AAIjGC,IAAAA,oBAJiG;AAKjGC,IAAAA,6BAA6B,GAAG,EALiE;AAMjGC,IAAAA,QAAQ,GAAG,MAAM,IANgF;AAOjGC,IAAAA,MAAM,GAAG,KAPwF;AAQjGC,IAAAA,OAAO,GAAG,KARuF;AASjGC,IAAAA,SAAS,GAAG,KATqF;AAUjGC,IAAAA,QAAQ,GAAG,KAVsF;AAWjGC,IAAAA,SAAS,GAAG,KAXqF;AAYjGC,IAAAA,UAAU,GAAG,KAZoF;AAajGC,IAAAA,YAbiG;AAcjGC,IAAAA,SAdiG;AAejGC,IAAAA,OAfiG;AAgBjG,kBAAcC,SAAS,GAAG;AAhBuE,GAkB7D;AAAA,MADjCC,KACiC;;AACpC,SAEA;AAAK,IAAA,SAAS,EAAErB,GAAG,CAACE,MAAM,CAACoB,iBAAR,EACjBrB,WAAW,CAACC,MAAD,EAAS,MAAT,CADM,EAEjBU,OAAO,IAAIX,WAAW,CAACC,MAAD,EAAS,OAAT,CAFL,EAGjBW,SAAS,IAAIZ,WAAW,CAACC,MAAD,EAAS,OAAT,CAHP,EAIjBY,QAAQ,IAAIb,WAAW,CAACC,MAAD,EAAS,QAAT,CAJN,EAKjBa,SAAS,IAAId,WAAW,CAACC,MAAD,EAAS,OAAT,CALP,EAMjBc,UAAU,IAAIf,WAAW,CAACC,MAAD,EAAS,UAAT,CANR;AAAnB,KAOMmB,KAPN,GAQE;AAAM,IAAA,SAAS,EAAErB,GAAG,CAACE,MAAM,CAACqB,qBAAR,EAA+BhB,mBAA/B;AAApB,KAA0ED,UAA1E,CARF,EASE,oBAAC,iBAAD;AAAmB,IAAA,SAAS,EAAEG,6BAA9B;AACI,IAAA,UAAU,EAAEO,UADhB;AAEI,kBAAYI,SAFhB;AAGI,IAAA,MAAM,EAAET,MAHZ;AAII,IAAA,aAAa,MAJjB;AAKI,IAAA,QAAQ,EAAED,QALd;AAMI,qBAAc,SANlB;AAOI,IAAA,SAAS,EAAEQ,SAPf;AAQI,IAAA,OAAO,EAAEC,OARb;AASI,IAAA,cAAc,EAAEX;AATpB,IATF,CAFA;AAuBC,CA1CI;;AAjCLH,EAAAA,Q;AAEAC,EAAAA,U;AAEAC,EAAAA,mB;AAEAC,EAAAA,oB;AAEAC,EAAAA,6B;AAEAC,EAAAA,Q;AAEAS,EAAAA,O;AAEAR,EAAAA,M;AAEAC,EAAAA,O;AAEAG,EAAAA,S;AAEAF,EAAAA,S;AAEAC,EAAAA,Q;AAEAE,EAAAA,U;AAEAE,EAAAA,S;AAEAD,EAAAA,Y,sCAAyB,Q,eAAW,M,eAAS,O,eAAU,M,eAAS,S,eAAY,M,eAAS,M;AAErF,c","sourcesContent":["import * as React from 'react';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { OptionsMenuToggle } from './OptionsMenuToggle';\n\nexport interface OptionsMenuToggleWithTextProps extends React.HTMLProps<HTMLDivElement> {\n  /** Id of the parent Options menu component */\n  parentId?: string;\n  /** Content to be rendered inside the Options menu toggle as text or another non-interactive element */\n  toggleText: React.ReactNode;\n  /** classes to be added to the Options menu toggle text */\n  toggleTextClassName?: string;\n  /** Content to be rendered inside the Options menu toggle button */\n  toggleButtonContents?: React.ReactNode;\n  /** Classes to be added to the Options menu toggle button */\n  toggleButtonContentsClassName?: string;\n  /** Callback for when this Options menu is toggled */\n  onToggle?: (event: boolean) => void;\n  /** Inner function to indicate open on Enter */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  /** Forces display of the focused state of the Options menu button */\n  isFocused?: boolean;\n  /** Forces display of the hover state of the Options menu button */\n  isHovered?: boolean;\n  /** Forces display of the active state of the Options menu button */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** Internal parent reference */\n  parentRef?: HTMLElement;\n  /** Indicates that the element has a popup context menu or sub-level menu */\n  ariaHasPopup?: boolean | 'dialog' | 'menu' | 'false' | 'true' | 'listbox' | 'tree' | 'grid';\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n}\n\nexport const OptionsMenuToggleWithText: React.FunctionComponent<OptionsMenuToggleWithTextProps> = ({\n  parentId = '',\n  toggleText,\n  toggleTextClassName = '',\n  toggleButtonContents,\n  toggleButtonContentsClassName = '',\n  onToggle = () => null as any,\n  isOpen = false,\n  isPlain = false,\n  isHovered = false,\n  isActive = false,\n  isFocused = false,\n  isDisabled = false,\n  ariaHasPopup,\n  parentRef,\n  onEnter,\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleWithTextProps) => {\n  return (\n\n  <div className={css(styles.optionsMenuToggle,\n    getModifier(styles, 'text'),\n    isPlain && getModifier(styles, 'plain'),\n    isHovered && getModifier(styles, 'hover'),\n    isActive && getModifier(styles, 'active'),\n    isFocused && getModifier(styles, 'focus'),\n    isDisabled && getModifier(styles, 'disabled'))}\n    {...props}>\n    <span className={css(styles.optionsMenuToggleText, toggleTextClassName)}>{toggleText}</span>\n    <OptionsMenuToggle className={toggleButtonContentsClassName}\n        isDisabled={isDisabled}\n        aria-label={ariaLabel}\n        isOpen={isOpen}\n        isSplitButton\n        onToggle={onToggle}\n        aria-haspopup=\"listbox\"\n        parentRef={parentRef}\n        onEnter={onEnter}\n        toggleTemplate={toggleButtonContents}\n      />\n  </div>\n);};\n"],"file":"OptionsMenuToggleWithText.js"}