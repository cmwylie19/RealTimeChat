{"version":3,"sources":["../../../../src/components/InlineEdit/editableTableBody.js"],"names":["propTypes","TableBody","editConfig","PropTypes","shape","editConfirmationType","oneOf","Object","values","TableEditConfirmation","onEditCellClicked","func","onEditConfirmed","onEditCanceled","isRequired","onRowClick","defaultProps","undefined","resolveCascadeEditability","rows","isRowExpandedIndexes","Set","map","row","idx","filter","parent","isEditing","has","isEditableTogetherWithParent","forEach","isChildEditing","isParentEditing","lastVisibleRow","pop","parentRow","isLastVisibleParent","onRow","event","rowProps","computedData","target","cell","closest","cellNumber","parseInt","getAttribute","hasCellNumber","Number","isNaN","idElement","elementId","contains","columnIndex","setTimeout","Body","BodyComponent","props","isTableEditing","some","mappedRows","any","array","editableTableBody","InlineEditBody","consumedProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TableContext, TableBody, isRowExpanded } from '@patternfly/react-table';\n\nimport PropTypes from 'prop-types';\nimport { TableEditConfirmation } from './constants';\nimport { showIdWarnings } from './utils/utils';\n\nconst propTypes = {\n  ...TableBody.propTypes,\n  editConfig: PropTypes.shape({\n    editConfirmationType: PropTypes.oneOf(Object.values(TableEditConfirmation)),\n    onEditCellClicked: PropTypes.func,\n    onEditConfirmed: PropTypes.func,\n    onEditCanceled: PropTypes.func\n  }).isRequired,\n  /** Function that is fired when user clicks on a row if not editing.  */\n  onRowClick: PropTypes.func\n};\n\nconst defaultProps = {\n  ...TableBody.defaultProps,\n  editConfig: null,\n  onRowClick: () => undefined\n};\n\nconst resolveCascadeEditability = rows => {\n  const isRowExpandedIndexes = new Set(\n    rows.map((row, idx) => (isRowExpanded(row, rows) ? idx : null)).filter(row => row !== null)\n  );\n\n  // flag parents and their children which are edited together\n  rows\n    .filter(\n      (row, idx) =>\n        row.parent !== undefined &&\n        row.isEditing &&\n        isRowExpandedIndexes.has(idx) &&\n        row.isEditableTogetherWithParent &&\n        rows[row.parent].isEditing\n    )\n    .forEach(row => {\n      rows[row.parent].isChildEditing = true;\n      row.isParentEditing = true;\n    });\n\n  const lastVisibleRow = rows.filter((row, idx) => !row.parent || isRowExpandedIndexes.has(idx)).pop();\n\n  // flag last parent row if there are only descendants under it\n  if (lastVisibleRow && lastVisibleRow.isParentEditing) {\n    let parentRow = lastVisibleRow;\n    while (parentRow.parent !== undefined && parentRow.isEditableTogetherWithParent) {\n      parentRow = rows[parentRow.parent];\n    }\n    parentRow.isLastVisibleParent = true;\n  }\n};\n\nconst onRow = (event, row, rowProps, computedData, { onRowClick, editConfig }) => {\n  const { target } = event;\n  const cell = target.closest('[data-key]');\n  const cellNumber = parseInt(cell && cell.getAttribute('data-key'), 10);\n  const hasCellNumber = !Number.isNaN(cellNumber);\n\n  let onEditCellClicked;\n\n  if (hasCellNumber && editConfig && typeof editConfig.onEditCellClicked === 'function') {\n    // resolve closest (e.g. for dropdowns) usable id of a clicked element inside a cell\n    const idElement = target.closest('[id]');\n    const elementId = idElement && cell.contains(idElement) ? idElement.getAttribute('id') || null : null;\n\n    if (!elementId) {\n      showIdWarnings(row, target);\n    }\n\n    onEditCellClicked = () => {\n      editConfig.onEditCellClicked(event, row, {\n        ...rowProps,\n        columnIndex: cellNumber,\n        elementId\n      });\n    };\n  }\n\n  // give priority to fire onChange/onBlur callbacks\n\n  setTimeout(() => {\n    if (!row.isEditing) {\n      onRowClick(event, row, rowProps, computedData);\n      if (onEditCellClicked) {\n        // edit cell after rerender\n        setTimeout(onEditCellClicked, 0);\n      }\n    } else if (onEditCellClicked) {\n      onEditCellClicked();\n    }\n  }, 0);\n};\n\nconst Body = ({ BodyComponent, rows, editConfig, onRowClick, ...props }) => {\n  const isTableEditing = rows.some(row => row.isEditing);\n  const mappedRows = rows.map(row => ({\n    ...row,\n    editConfig,\n    isTableEditing\n  }));\n\n  resolveCascadeEditability(mappedRows);\n\n  return (\n    <BodyComponent\n      {...props}\n      rows={mappedRows}\n      onRowClick={(event, row, rowProps, computedData) =>\n        onRow(event, row, rowProps, computedData, { onRowClick, editConfig })\n      }\n    />\n  );\n};\n\nBody.propTypes = {\n  BodyComponent: PropTypes.any.isRequired,\n  rows: PropTypes.array,\n  editConfig: PropTypes.any,\n  onRowClick: PropTypes.func\n};\n\nBody.defaultProps = {\n  rows: [],\n  editConfig: null,\n  onRowClick: () => undefined\n};\n\nconst editableTableBody = BodyComponent => {\n  const InlineEditBody = ({ editConfig, onRowClick, ...props }) => (\n    <TableContext.Consumer>\n      {({ rows, ...consumedProps }) => (\n        <Body\n          {...consumedProps}\n          rows={rows}\n          {...props}\n          editConfig={editConfig}\n          onRowClick={onRowClick}\n          BodyComponent={BodyComponent}\n        />\n      )}\n    </TableContext.Consumer>\n  );\n\n  InlineEditBody.propTypes = propTypes;\n  InlineEditBody.defaultProps = defaultProps;\n\n  return InlineEditBody;\n};\n\nexport default editableTableBody;\n"],"file":"editableTableBody.js"}