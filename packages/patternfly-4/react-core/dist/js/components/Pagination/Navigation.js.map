{"version":3,"sources":["../../../../src/components/Pagination/Navigation.tsx"],"names":["Navigation","props","state","userInputPage","page","event","lastPage","inputPage","parseInteger","target","value","setState","Number","isNaN","onPageInput","onSetPage","keyCode","KEY_CODES","ENTER","lastState","isDisabled","firstPage","pagesTitle","toLastPage","toNextPage","toFirstPage","toPreviousPage","currPage","paginationTitle","onNextClick","onPreviousClick","onFirstClick","onLastClick","className","isCompact","styles","paginationNav","ButtonVariant","plain","newPage","paginationNavPageSelect","formControl","onKeyDown","onChange","input","parseInt","React","Component","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport { AngleLeftIcon, AngleDoubleLeftIcon, AngleRightIcon, AngleDoubleRightIcon } from '@patternfly/react-icons';\nimport { Button, ButtonVariant } from '../Button';\nimport { pluralize } from '../../helpers';\nimport { KEY_CODES } from '../../helpers/constants';\n\nexport interface NavigationProps extends React.HTMLProps<HTMLElement> {\n  /** Additional classes for the container */\n  className?: string;\n  /** Flag indicating if the pagination is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if the pagination is compact */\n  isCompact?: boolean;\n  /** The number of the last page */\n  lastPage?: number;\n  /** The number of first page where pagination starts */\n  firstPage?: number;\n  /** The title of a page displayed beside the page number */\n  pagesTitle?: string;\n  /** Accessible label for the button which moves to the last page */\n  toLastPage?: string;\n  /** Accessible label for the button which moves to the previous page */\n  toPreviousPage?: string;\n  /** Accessible label for the button which moves to the next page */\n  toNextPage?: string;\n  /** Accessible label for the button which moves to the first page */\n  toFirstPage?: string;\n  /** Accessible label for the input displaying the current page */\n  currPage?: string;\n  /** Accessible label for the pagination component */\n  paginationTitle?: string;\n  /** The number of the current page */\n  page: React.ReactText;\n  /** Function called when page is changed */\n  onSetPage: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to next page */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to previous page */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to first page */\n  onFirstClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to last page */\n  onLastClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user inputs page number */\n  onPageInput?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n}\n\nexport interface NavigationState {\n  userInputPage?: React.ReactText;\n}\n\nexport class Navigation extends React.Component<NavigationProps, NavigationState> {\n  constructor(props: NavigationProps) {\n    super(props);\n    this.state = { userInputPage: this.props.page };\n  }\n\n  static defaultProps = {\n    className: '',\n    isDisabled: false,\n    isCompact: false,\n    lastPage: 0,\n    firstPage: 0,\n    pagesTitle: '',\n    toLastPage: 'Go to last page',\n    toNextPage: 'Go to next page',\n    toFirstPage: 'Go to first page',\n    toPreviousPage: 'Go to previous page',\n    currPage: 'Current page',\n    paginationTitle: 'Pagination',\n    onNextClick: () => undefined as any,\n    onPreviousClick: () => undefined as any,\n    onFirstClick: () => undefined as any,\n    onLastClick: () => undefined as any,\n    onPageInput: () => undefined as any,\n  };\n\n  private static parseInteger(input: React.ReactText, lastPage: number): number {\n    let inputPage = Number.parseInt(input as string, 10);\n    if (!Number.isNaN(inputPage)) {\n      inputPage = inputPage > lastPage ? lastPage : inputPage;\n      inputPage = inputPage < 1 ? 1 : inputPage;\n    }\n    return inputPage;\n  }\n\n  private onChange(event: React.ChangeEvent<HTMLInputElement>, lastPage: number): void {\n    const inputPage = Navigation.parseInteger(event.target.value, lastPage);\n    this.setState({ userInputPage: Number.isNaN(inputPage as number) ? event.target.value : inputPage });\n  }\n\n  private onKeyDown(event: React.KeyboardEvent<HTMLInputElement>, page: number | string, lastPage: number, onPageInput: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void, onSetPage: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void): void {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      const inputPage = Navigation.parseInteger(this.state.userInputPage, lastPage) as number;\n      onPageInput(event, Number.isNaN(inputPage) ? page as number : inputPage);\n      onSetPage(event, Number.isNaN(inputPage) ? page as number : inputPage);\n    }\n  }\n\n  componentDidUpdate(lastState: NavigationProps) {\n    if (this.props.page !== lastState.page && this.props.page <= this.props.lastPage && this.state.userInputPage !== this.props.page) {\n      this.setState({ userInputPage: this.props.page });\n    }\n   }\n\n  render() {\n    const {\n      page,\n      isDisabled,\n      lastPage,\n      firstPage,\n      pagesTitle,\n      toLastPage,\n      toNextPage,\n      toFirstPage,\n      toPreviousPage,\n      currPage,\n      paginationTitle,\n      onSetPage,\n      onNextClick,\n      onPreviousClick,\n      onFirstClick,\n      onLastClick,\n      onPageInput,\n      className,\n      isCompact,\n      ...props\n    } = this.props;\n    const { userInputPage } = this.state;\n    return (\n      <nav className={css(styles.paginationNav, className)} aria-label={paginationTitle} {...props}>\n        {!isCompact && (\n          <Button\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled || page === firstPage}\n            aria-label={toFirstPage}\n            data-action=\"first\"\n            onClick={(event) => {\n              onFirstClick(event, 1);\n              onSetPage(event, 1);\n              this.setState({ userInputPage: 1 });\n            }}\n          >\n            <AngleDoubleLeftIcon />\n          </Button>  \n        )}\n        <Button\n          variant={ButtonVariant.plain}\n          isDisabled={isDisabled || page === firstPage}\n          data-action=\"previous\"\n          onClick={(event) => {\n            const newPage = page as number - 1 >= 1 ? page as number - 1 : 1;\n            onPreviousClick(event, newPage);\n            onSetPage(event, newPage);\n            this.setState({ userInputPage: newPage });\n          }}\n          aria-label={toPreviousPage}\n        >\n          <AngleLeftIcon />\n        </Button>\n        {!isCompact && (\n          <div className={css(styles.paginationNavPageSelect)}>\n            <input\n              className={css(styles.formControl)}\n              aria-label={currPage}\n              type=\"number\"\n              disabled={isDisabled || page === firstPage && page === lastPage}\n              min={lastPage <= 0 && firstPage <= 0 ? 0 : 1}\n              max={lastPage}\n              value={userInputPage}\n              onKeyDown={(event) => this.onKeyDown(event, page, lastPage, onPageInput, onSetPage)}\n              onChange={(event) => this.onChange(event, lastPage)}\n            />\n            <span aria-hidden=\"true\">\n              of {pagesTitle ? pluralize(lastPage, pagesTitle) : lastPage}\n            </span>\n          </div>\n        )}\n        <Button\n          variant={ButtonVariant.plain}\n          isDisabled={isDisabled || page === lastPage}\n          aria-label={toNextPage}\n          data-action=\"next\"\n          onClick={(event) => {\n            const newPage = page as number + 1 <= lastPage ? page as number + 1 : lastPage;\n            onNextClick(event, newPage);\n            onSetPage(event, newPage);\n            this.setState({ userInputPage: newPage });\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n        {!isCompact && (\n          <Button\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled || page === lastPage}\n            aria-label={toLastPage}\n            data-action=\"last\"\n            onClick={(event) => {\n              onLastClick(event, lastPage);\n              onSetPage(event, lastPage);\n              this.setState({ userInputPage: lastPage });\n            }}\n          >\n            <AngleDoubleRightIcon />\n          </Button>\n        )}\n      </nav>\n    );\n  }\n}\n"],"file":"Navigation.js"}