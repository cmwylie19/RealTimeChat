{"version":3,"sources":["../../../../src/components/Wizard/WizardToggle.tsx"],"names":["WizardToggle","isNavOpen","onNavToggle","nav","steps","activeStep","children","hasBodyPadding","props","activeStepIndex","activeStepName","activeStepSubName","i","length","id","name","step","styles","wizardToggle","wizardToggleList","wizardToggleListItem","wizardToggleNum","wizardToggleSeparator","wizardToggleIcon","wizardOuterWrap","wizardInnerWrap","component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { AngleRightIcon, CaretDownIcon } from '@patternfly/react-icons';\nimport { WizardStep } from './Wizard';\nimport { WizardBody } from './WizardBody';\n\nexport interface WizardToggleProps {\n  /** Function that returns the WizardNav component */\n  nav: any;\n  /** The wizard steps */\n  steps: WizardStep[];\n  /** The currently active WizardStep */\n  activeStep: WizardStep;\n  /** The WizardFooter */\n  children: React.ReactNode;\n  /** Set to false to remove body padding */\n  hasBodyPadding: boolean;\n  /** If the nav is open */\n  isNavOpen: boolean;\n  /** Callback function for when the nav is toggled */\n  onNavToggle: (isOpen: boolean) => void;\n}\n\nexport const WizardToggle: React.FunctionComponent<WizardToggleProps> = ({\n  isNavOpen,\n  onNavToggle,\n  nav,\n  steps,\n  activeStep,\n  children,\n  hasBodyPadding = true,\n  ...props\n}: WizardToggleProps) => {\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n  for (let i = 0; i < steps.length; i++) {\n    if ((activeStep.id && steps[i].id === activeStep.id) || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps!) {\n        if ((activeStep.id && step.id === activeStep.id) || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n  return (\n    <>\n      <button\n        onClick={() => onNavToggle(!isNavOpen)}\n        className={css(styles.wizardToggle, isNavOpen && 'pf-m-expanded')}\n        aria-expanded={isNavOpen}\n      >\n        <ol className={css(styles.wizardToggleList)}>\n          <li className={css(styles.wizardToggleListItem)}>\n            <span className={css(styles.wizardToggleNum)}>{activeStepIndex}</span> {activeStepName}\n            {activeStepSubName && <AngleRightIcon className={css(styles.wizardToggleSeparator)} aria-hidden=\"true\" />}\n          </li>\n          {activeStepSubName && <li className={css(styles.wizardToggleListItem)}>{activeStepSubName}</li>}\n        </ol>\n        <CaretDownIcon className={css(styles.wizardToggleIcon)} aria-hidden=\"true\" />\n      </button>\n      <div className={css(styles.wizardOuterWrap)}>\n        <div className={css(styles.wizardInnerWrap)}>\n          {nav(isNavOpen)}\n          <WizardBody hasBodyPadding={hasBodyPadding}>{activeStep.component}</WizardBody>\n        </div>\n        {children}\n      </div>\n    </>\n  );\n};\n"],"file":"WizardToggle.js"}