{"version":3,"sources":["../../../../../src/components/Wizard/examples/SampleForm.js"],"names":["propTypes","formValue","PropTypes","string","isFormValid","bool","onChange","func","defaultProps","undefined","SampleForm","value","props","isValid","test","setState","state","handleTextInputChange","React","Component"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAEC,sBAAUC,MADL;AAEhBC,EAAAA,WAAW,EAAEF,sBAAUG,IAFP;AAGhBC,EAAAA,QAAQ,EAAEJ,sBAAUK;AAHJ,CAAlB;AAMA,IAAMC,YAAY,GAAG;AACnBP,EAAAA,SAAS,EAAE,EADQ;AAEnBG,EAAAA,WAAW,EAAE,KAFM;AAGnBE,EAAAA,QAAQ,EAAE;AAAA,WAAMG,SAAN;AAAA;AAHS,CAArB;;IAMMC,U;;;;;;;;;;;;;;;;;;4DAII;AACNC,MAAAA,KAAK,EAAE,MAAKC,KAAL,CAAWX,SADZ;AAENY,MAAAA,OAAO,EAAE,MAAKD,KAAL,CAAWR;AAFd,K;;4EAKgB,UAAAO,KAAK,EAAI;AAC/B,UAAME,OAAO,GAAG,QAAQC,IAAR,CAAaH,KAAb,CAAhB;;AACA,YAAKI,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAALA,KAAF;AAASE,QAAAA,OAAO,EAAPA;AAAT,OAAd;;AACA,YAAKD,KAAL,CAAWN,QAAX,IAAuB,MAAKM,KAAL,CAAWN,QAAX,CAAoBO,OAApB,EAA6BF,KAA7B,CAAvB;AACD,K;;;;;;;6BAEQ;AAAA,wBACoB,KAAKK,KADzB;AAAA,UACCL,KADD,eACCA,KADD;AAAA,UACQE,OADR,eACQA,OADR;AAGP,aACE,gCAAC,eAAD,QACE,gCAAC,oBAAD;AACE,QAAA,KAAK,EAAC,MADR;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,UAAU,EAAC,uBAHb;AAIE,QAAA,iBAAiB,EAAC,wBAJpB;AAKE,QAAA,OAAO,EAAC,KALV;AAME,QAAA,OAAO,EAAEA;AANX,SAQE,gCAAC,oBAAD;AACE,QAAA,OAAO,EAAEA,OADX;AAEE,QAAA,KAAK,EAAEF,KAFT;AAGE,QAAA,EAAE,EAAC,KAHL;AAIE,4BAAiB,YAJnB;AAKE,QAAA,QAAQ,EAAE,KAAKM;AALjB,QARF,CADF,CADF;AAoBD;;;;EAtCsBC,kBAAMC,S;;gBAAzBT,U,eACeV,S;;gBADfU,U,kBAEkBF,Y;;eAuCTE,U","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\n\nconst propTypes = {\n  formValue: PropTypes.string,\n  isFormValid: PropTypes.bool,\n  onChange: PropTypes.func\n};\n\nconst defaultProps = {\n  formValue: '',\n  isFormValid: false,\n  onChange: () => undefined\n};\n\nclass SampleForm extends React.Component {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  state = {\n    value: this.props.formValue,\n    isValid: this.props.isFormValid\n  };\n\n  handleTextInputChange = value => {\n    const isValid = /^\\d+$/.test(value);\n    this.setState({ value, isValid });\n    this.props.onChange && this.props.onChange(isValid, value);\n  }\n\n  render() {\n    const { value, isValid } = this.state;\n\n    return (\n      <Form>\n        <FormGroup\n          label=\"Age:\"\n          type=\"number\"\n          helperText=\"Please write your age\"\n          helperTextInvalid=\"Age has to be a number\"\n          fieldId=\"age\"\n          isValid={isValid}\n        >\n          <TextInput\n            isValid={isValid}\n            value={value}\n            id=\"age\"\n            aria-describedby=\"age-helper\"\n            onChange={this.handleTextInputChange}\n          />\n        </FormGroup>\n      </Form>\n    );\n  }\n}\n\nexport default SampleForm;\n"],"file":"SampleForm.js"}