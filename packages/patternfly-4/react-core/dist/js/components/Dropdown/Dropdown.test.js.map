{"version":3,"sources":["../../../../src/components/Dropdown/Dropdown.test.tsx"],"names":["dropdownItems","describe","test","view","expect","toMatchSnapshot","DropdownPosition","right","DropdownDirection","up","mockToggle","jest","fn","mockSelect","find","first","simulate","mock","calls","toHaveLength","toThrowError","myMock","global","console","error","not","toBeCalled"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mount } from 'enzyme';\nimport { Dropdown } from './Dropdown';\nimport { DropdownPosition, DropdownDirection } from './dropdownConstants';\nimport { InternalDropdownItem } from './InternalDropdownItem';\nimport { DropdownSeparator } from './Separator';\nimport { DropdownToggle } from './DropdownToggle';\nimport { KebabToggle } from './KebabToggle';\n\nconst dropdownItems = [\n  <InternalDropdownItem key=\"link\">Link</InternalDropdownItem>,\n  <InternalDropdownItem key=\"action\" component=\"button\">\n    Action\n  </InternalDropdownItem>,\n  <InternalDropdownItem key=\"disabled link\" isDisabled>\n    Disabled Link\n  </InternalDropdownItem>,\n  <InternalDropdownItem key=\"disabled action\" isDisabled component=\"button\">\n    Disabled Action\n  </InternalDropdownItem>,\n  <DropdownSeparator key=\"separator\" />,\n  <InternalDropdownItem key=\"separated link\">Separated Link</InternalDropdownItem>,\n  <InternalDropdownItem key=\"separated action\" component=\"button\">\n    Separated Action\n  </InternalDropdownItem>\n];\n\ndescribe('dropdown', () => {\n  test('regular', () => {\n    const view = mount(\n      <Dropdown dropdownItems={dropdownItems} toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>} />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('right aligned', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        position={DropdownPosition.right}\n        toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('dropup', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        direction={DropdownDirection.up}\n        toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('dropup + right aligned', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        direction={DropdownDirection.up}\n        position={DropdownPosition.right}\n        toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('expanded', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        isOpen\n        toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('primary', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        toggle={<DropdownToggle id=\"Dropdown Toggle\" isPrimary>Dropdown</DropdownToggle>}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('basic', () => {\n    const view = mount(\n      <Dropdown isOpen toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}>\n        <div>BASIC</div>\n      </Dropdown>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ndescribe('KebabToggle', () => {\n  test('regular', () => {\n    const view = mount(<Dropdown dropdownItems={dropdownItems} toggle={<KebabToggle id=\"Dropdown Toggle\" />} />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('right aligned', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        position={DropdownPosition.right}\n        toggle={<KebabToggle id=\"Dropdown Toggle\" />}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('dropup', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        direction={DropdownDirection.up}\n        toggle={<KebabToggle id=\"Dropdown Toggle\" />}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('dropup + right aligned', () => {\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        direction={DropdownDirection.up}\n        position={DropdownPosition.right}\n        toggle={<KebabToggle id=\"Dropdown Toggle\" />}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('expanded', () => {\n    const view = mount(<Dropdown dropdownItems={dropdownItems} isOpen toggle={<KebabToggle id=\"Dropdown Toggle\" />} />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('plain', () => {\n    const view = mount(\n      <Dropdown dropdownItems={dropdownItems} isPlain toggle={<KebabToggle id=\"Dropdown Toggle\" />} />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('basic', () => {\n    const view = mount(\n      <Dropdown isOpen toggle={<KebabToggle id=\"Dropdown Toggle\" />}>\n        <div>BASIC</div>\n      </Dropdown>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ndescribe('API', () => {\n  test('click on item', () => {\n    const mockToggle = jest.fn();\n    const mockSelect = jest.fn();\n    const view = mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        onSelect={mockSelect}\n        isOpen\n        toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}\n      />\n    );\n    view\n      .find('a')\n      .first()\n      .simulate('click');\n    expect(mockToggle.mock.calls).toHaveLength(0);\n    expect(mockSelect.mock.calls).toHaveLength(1);\n  });\n\n  test('dropdownItems and children console error ', () => {\n    expect(() => mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        isOpen\n        toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}\n      >\n        <div>Children items</div>\n      </Dropdown>\n    )).toThrowError();\n  });\n\n  test('dropdownItems only, no console error ', () => {\n    const myMock = jest.fn();\n    global.console = { error: myMock } as any;\n    mount(\n      <Dropdown\n        dropdownItems={dropdownItems}\n        isOpen\n        toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}\n      />\n    );\n    expect(myMock).not.toBeCalled();\n  });\n\n  test('children only, no console ', () => {\n    const myMock = jest.fn();\n    global.console = { error: myMock } as any;\n    mount(\n      <Dropdown isOpen toggle={<DropdownToggle id=\"Dropdown Toggle\">Dropdown</DropdownToggle>}>\n        <div>Children items</div>\n      </Dropdown>\n    );\n    expect(myMock).not.toBeCalled();\n  });\n});\n"],"file":"Dropdown.test.js"}