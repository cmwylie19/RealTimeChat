{"version":3,"sources":["../../../../src/components/ChartDonut/ChartDonut.tsx"],"names":["React","hoistNonReactStatics","VictoryPie","Helpers","getDonutTheme","ChartContainer","ChartLabel","ChartPie","ChartCommonStyles","ChartDonutStyles","getPieLabelX","getPieLabelY","getPaddingForSide","ChartDonutLabelPosition","ChartDonutSortOrder","ChartDonutSubTitlePosition","ChartDonut","allowTooltip","ariaDesc","ariaTitle","capHeight","containerComponent","innerRadius","legendPosition","legend","position","padding","radius","standalone","subTitle","subTitleComponent","subTitlePosition","label","themeColor","themeVariant","title","titleComponent","theme","height","pie","width","rest","defaultPadding","bottom","left","right","top","chartRadius","getRadius","chartInnerRadius","getSubTitle","center","subTitleProps","props","cloneElement","style","text","textAnchor","verticalAnchor","x","labelPosition","y","getTitle","titleProps","showBoth","chart","StandaloneContainer","children","desc","animate","categories","colorScale","constrainToVisibleArea","cornerRadius","data","dataComponent","endAngle","eventKey","events","externalEventMutations","groupComponent","labelComponent","labelRadius","labels","legendComponent","legendData","name","symbol","fill","type"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  AnimatePropTypeInterface,\n  CategoryPropType,\n  ColorScalePropType,\n  DataGetterPropType,\n  EventPropTypeInterface,\n  PaddingProps,\n  StringOrNumberOrCallback,\n  VictoryPie,\n  VictoryStyleInterface\n} from 'victory';\nimport { Helpers } from \"victory-core\";\nimport { getDonutTheme } from '../ChartUtils/chart-theme';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartLabel } from '../ChartLabel';\nimport { ChartPie, ChartPieLegendPosition, ChartPieProps } from '../ChartPie';\nimport { ChartCommonStyles, ChartDonutStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { getPieLabelX, getPieLabelY, getPaddingForSide} from '../ChartUtils';\n\nexport enum ChartDonutLabelPosition {\n  centroid = 'centroid',\n  endAngle = 'endAngle',\n  startAngle = 'startAngle'\n}\n\nexport enum ChartDonutSortOrder {\n  ascending = 'ascending',\n  descending = 'descending'\n}\n\nexport enum ChartDonutSubTitlePosition {\n  bottom = 'bottom',\n  center = 'center',\n  right = 'right'\n}\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartDonutProps extends ChartPieProps {\n  /**\n   * Specifies the tooltip capability of the container component. A value of true allows the chart to add a\n   * ChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\n   * property is also provided.\n   */\n  allowTooltip?: boolean;\n  /**\n   * The animate prop specifies props for VictoryAnimation to use.\n   * The animate prop should also be used to specify enter and exit\n   * transition configurations with the `onExit` and `onEnter` namespaces respectively.\n   * @example\n   * {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\n   */\n  animate?: AnimatePropTypeInterface;\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\n   * This is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\n   * line height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\n   * unitless number, it is assumed to be ems.\n   */\n  capHeight?: StringOrNumberOrCallback;\n  /**\n   * The categories prop specifies how categorical data for a chart should be ordered.\n   * This prop should be given as an array of string values, or an object with\n   * these arrays of values specified for x and y. If this prop is not set,\n   * categorical data will be plotted in the order it was given in the data array\n   * @example [\"dogs\", \"cats\", \"mice\"]\n   */\n  categories?: CategoryPropType;\n  /**\n   * The colorScale prop is an optional prop that defines the color scale the pie\n   * will be created on. This prop should be given as an array of CSS colors, or as a string\n   * corresponding to one of the built in color scales. ChartDonut will automatically assign\n   * values from this color scale to the pie slices unless colors are explicitly provided in the\n   * data object\n   */\n  colorScale?: ColorScalePropType;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The containerComponent prop takes an entire component which will be used to\n   * create a container element for standalone charts.\n   * The new element created from the passed containerComponent wil be provided with\n   * these props from ChartDonut: height, width, children\n   * (the chart itself) and style. Props that are not provided by the\n   * child chart component include title and desc, both of which\n   * are intended to add accessibility to Victory components. The more descriptive these props\n   * are, the more accessible your data will be for people using screen readers.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a dataComponent is\n   * not provided, ChartDonut will use the default ChartContainer component.\n   * @example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />\n   */\n  containerComponent?: React.ReactElement<any>;\n  /**\n   * Set the cornerRadius for every dataComponent (Slice by default) within ChartDonut\n   */\n  cornerRadius?: number;\n  /**\n   * The data prop specifies the data to be plotted,\n   * where data X-value is the slice label (string or number),\n   * and Y-value is the corresponding number value represented by the slice\n   * Data should be in the form of an array of data points.\n   * Each data point may be any format you wish (depending on the `x` and `y` accessor props),\n   * but by default, an object with x and y properties is expected.\n   * @example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n   * [[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]\n   */\n  data?: any[];\n  /**\n   * The dataComponent prop takes an entire, HTML-complete data component which will be used to\n   * create slices for each datum in the pie chart. The new element created from the passed\n   * dataComponent will have the property datum set by the pie chart for the point it renders;\n   * properties style and pathFunction calculated by ChartDonut; an index property set\n   * corresponding to the location of the datum in the data provided to the pie; events bound to\n   * the ChartDonut; and the d3 compatible slice object.\n   * If a dataComponent is not provided, ChartDonut's Slice component will be used.\n   */\n  dataComponent?: React.ReactElement<any>;\n  /**\n   * The overall end angle of the pie in degrees. This prop is used in conjunction with\n   * startAngle to create a pie that spans only a segment of a circle.\n   */\n  endAngle?: number;\n  /**\n   * Similar to data accessor props `x` and `y`, this prop may be used to functionally\n   * assign eventKeys to data\n   */\n  eventKey?: StringOrNumberOrCallback;\n  /**\n   * The event prop takes an array of event objects. Event objects are composed of\n   * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace\n   * for a given component, so \"data\" and \"labels\" are all valid targets for ChartDonut\n   * events. The eventKey may optionally be used to select a single element by index rather than\n   * an entire set. The eventHandlers object should be given as an object whose keys are standard\n   * event names (i.e. onClick) and whose values are event callbacks. The return value\n   * of an event handler is used to modify elemnts. The return value should be given\n   * as an object or an array of objects with optional target and eventKey keys,\n   * and a mutation key whose value is a function. The target and eventKey keys\n   * will default to those corresponding to the element the event handler was attached to.\n   * The mutation function will be called with the calculated props for the individual selected\n   * element (i.e. a single bar), and the object returned from the mutation function\n   * will override the props of the selected element via object assignment.\n   * @example\n   * events={[\n   *   {\n   *     target: \"data\",\n   *     eventKey: 1,\n   *     eventHandlers: {\n   *       onClick: () => {\n   *         return [\n   *            {\n   *              eventKey: 2,\n   *              mutation: (props) => {\n   *                return {style: merge({}, props.style, {fill: \"orange\"})};\n   *              }\n   *            }, {\n   *              eventKey: 2,\n   *              target: \"labels\",\n   *              mutation: () => {\n   *                return {text: \"hey\"};\n   *              }\n   *            }\n   *          ];\n   *       }\n   *     }\n   *   }\n   * ]}\n   */\n  events?: EventPropTypeInterface<'data' | 'labels' | 'parent', StringOrNumberOrCallback | string[] | number[]>[];\n  /**\n   * ChartDonut uses the standard externalEventMutations prop.\n   */\n  externalEventMutations?: any[];\n  /**\n   * The groupComponent prop takes an entire component which will be used to\n   * create group elements for use within container elements. This prop defaults\n   * to a <g> tag on web, and a react-native-svg <G> tag on mobile\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   *\n   * Note: When adding a legend, height (the overall SVG height) may need to be larger than donutHeight (the donut size)\n   * in order to accommodate the extra legend.\n   *\n   * By default, donutHeight is the min. of either height or width. This covers most use cases in order to accommodate\n   * legends within the same SVG. However, donutHeight (not height) may need to be set in order to adjust the donut height.\n   *\n   * Typically, the parent container is set to the same width in order to maintain the aspect ratio.\n   */\n  height?: number;\n  /**\n   * When creating a donut chart, this prop determines the number of pixels between\n   * the center of the chart and the inner edge.\n   */\n  innerRadius?: number;\n  /**\n   * The labelComponent prop takes in an entire label component which will be used\n   * to create a label for the area. The new element created from the passed labelComponent\n   * will be supplied with the following properties: x, y, index, data, verticalAnchor,\n   * textAnchor, angle, style, text, and events. any of these props may be overridden\n   * by passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If labelComponent is omitted, a new ChartLabel\n   * will be created with props described above. This labelComponent prop should be used to\n   * provide a series label for ChartDonut. If individual labels are required for each\n   * data point, they should be created by composing ChartDonut with VictoryScatter\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\n   * When this prop is not given, the label will be positioned at the centroid of each slice.\n   */\n  labelPosition?: 'startAngle' | 'endAngle' | 'centroid';\n  /**\n   * The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\n   * If this prop is not set, the label radius will default to the radius of the pie + label padding.\n   */\n  labelRadius?: number;\n  /**\n   * The labels prop defines labels that will appear above each bar in your chart.\n   * This prop should be given as an array of values or as a function of data.\n   * If given as an array, the number of elements in the array should be equal to\n   * the length of the data array. Labels may also be added directly to the data object\n   * like data={[{x: 1, y: 1, label: \"first\"}]}.\n   * @example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title\n   */\n  labels?: string[] | ((data: any) => string);\n  /**\n   * The legend component to render with chart.\n   *\n   * Note: Use legendData so the legend width can be calculated and positioned properly.\n   * Default legend properties may be applied\n   */\n  legendComponent?: React.ReactElement<any>;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  legendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  legendOrientation?: 'horizontal' | 'vertical';\n  /**\n   * The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n   *\n   * Note: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\n   * cases, the legend may not be visible until enough padding is applied.\n   */\n  legendPosition?: 'bottom' | 'right';\n  /**\n   * The name prop is used to reference a component instance when defining shared events.\n   */\n  name?: string;\n  /**\n   * Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n   * **This prop should not be set manually.**\n   */\n  origin?: { x: number, y: number };\n  /**\n   * The padAngle prop determines the amount of separation between adjacent data slices\n   * in number of degrees\n   */\n  padAngle?: number;\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * Specifies the radius of the chart. If this property is not provided it is computed\n   * from width, height, and padding props\n   */\n  radius?: number;\n  /**\n   * The sharedEvents prop is used internally to coordinate events between components. It should not be set manually.\n   */\n  sharedEvents?: any;\n  /**\n   * Use the sortKey prop to indicate how data should be sorted. This prop\n   * is given directly to the lodash sortBy function to be executed on the\n   * final dataset.\n   */\n  sortKey?: string | string[] | Function;\n  /**\n   * The sortOrder prop specifies whether sorted data should be returned in ascending or descending order.\n   */\n  sortOrder?: 'ascending' | 'descending';\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartDonut with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The overall start angle of the pie in degrees. This prop is used in conjunction with\n   * endAngle to create a pie that spans only a segment of a circle.\n   */\n  startAngle?: number;\n  /**\n   * The style prop specifies styles for your pie. ChartDonut relies on Radium,\n   * so valid Radium style objects should work for this prop. Height, width, and\n   * padding should be specified via the height, width, and padding props.\n   * @example {data: {stroke: \"black\"}, label: {fontSize: 10}}\n   */\n  style?: VictoryStyleInterface;\n  /**\n   * The subtitle for the donut chart\n   */\n  subTitle?: string;\n  /**\n   * The label component to render the chart subTitle.\n   *\n   * Note: Default label properties may be applied\n   */\n  subTitleComponent?: React.ReactElement<any>;\n  /**\n   * The orientation of the donut chart in relation to the legend. Valid values are 'bottom', 'center', and 'right'\n   */\n  subTitlePosition?: 'bottom' | 'center' | 'right';\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartDonut as a solo component, implement the theme directly on\n   * ChartDonut. If you are wrapping ChartDonut in ChartChart or ChartGroup,\n   * please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The title for the donut chart\n   */\n  title?: string;\n  /**\n   * The label component to render the chart title.\n   *\n   * Note: Default label properties may be applied\n   */\n  titleComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  width?: number;\n  /**\n   * The x prop specifies how to access the X value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)\n   */\n  x?: DataGetterPropType;\n  /**\n   * The y prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  y?: DataGetterPropType;\n}\n\nexport const ChartDonut: React.FunctionComponent<ChartDonutProps> = ({\n  allowTooltip = true,\n  ariaDesc,\n  ariaTitle,\n  capHeight = 1.1,\n  containerComponent = <ChartContainer />,\n  innerRadius,\n  legendPosition = ChartCommonStyles.legend.position as ChartPieLegendPosition,\n  padding,\n  radius,\n  standalone = true,\n  subTitle,\n  subTitleComponent = <ChartLabel />,\n  subTitlePosition = ChartDonutStyles.label.subTitlePosition as ChartDonutSubTitlePosition,\n  themeColor,\n  themeVariant,\n  title,\n  titleComponent = <ChartLabel />,\n\n  // destructure last\n  theme = getDonutTheme(themeColor, themeVariant),\n  height = theme.pie.height,\n  width = theme.pie.width,\n  ...rest\n}: ChartDonutProps) => {\n  const defaultPadding = {\n    bottom: getPaddingForSide('bottom',  padding, theme.pie.padding),\n    left: getPaddingForSide('left', padding, theme.pie.padding),\n    right: getPaddingForSide('right', padding, theme.pie.padding),\n    top: getPaddingForSide('top', padding, theme.pie.padding),\n  };\n  const chartRadius = radius ? radius : Helpers.getRadius({\n    height,\n    width,\n    padding: defaultPadding\n  });\n  const chartInnerRadius = innerRadius ? innerRadius : chartRadius - 9; // Todo: Add pf-core variable\n\n  // Returns subtitle\n  const getSubTitle = () => {\n    if (!subTitle || subTitlePosition === ChartDonutSubTitlePosition.center) {\n      return null;\n    }\n    const subTitleProps = subTitleComponent.props ? subTitleComponent.props : {};\n\n    return React.cloneElement(subTitleComponent, {\n      style: ChartDonutStyles.label.subTitle,\n      text: subTitle,\n      textAnchor: subTitlePosition === 'right' ? 'start' : 'middle',\n      verticalAnchor: 'middle',\n      x: getPieLabelX({\n        height,\n        labelPosition: subTitlePosition,\n        legendPosition,\n        padding: defaultPadding,\n        width\n      }),\n      y: getPieLabelY({\n        height,\n        labelPosition: subTitlePosition,\n        padding: defaultPadding,\n        width\n      }),\n      ...subTitleProps\n    });\n  };\n\n  // Returns title\n  const getTitle = () => {\n    if (!title) {\n      return null;\n    }\n    const titleProps = titleComponent ? titleComponent.props : {};\n    const showBoth = title && subTitle && subTitlePosition == ChartDonutSubTitlePosition.center;\n\n    return React.cloneElement(titleComponent, {\n      ...showBoth && { capHeight },\n      style: [ChartDonutStyles.label.title, ChartDonutStyles.label.subTitle],\n      text: showBoth ? [title, subTitle] : title,\n      textAnchor: 'middle',\n      verticalAnchor: 'middle',\n      x: getPieLabelX({\n        height,\n        labelPosition: 'center',\n        legendPosition,\n        padding: defaultPadding,\n        width\n      }),\n      y: getPieLabelY({\n        height,\n        labelPosition: 'center',\n        padding: defaultPadding,\n        width\n      }),\n      ...titleProps\n    });\n  };\n\n  const chart = (\n    <ChartPie\n      allowTooltip={allowTooltip}\n      height={height}\n      innerRadius={chartInnerRadius > 0 ? chartInnerRadius : 0}\n      legendPosition={legendPosition}\n      padding={padding}\n      radius={chartRadius > 0 ? chartRadius : 0}\n      standalone={false}\n      theme={theme}\n      width={width}\n      {...rest}\n    />\n  );\n\n  // Clone so users can override container props\n  const StandaloneContainer = ({children}: any) => React.cloneElement(containerComponent, {\n    desc: ariaDesc,\n    height,\n    title: ariaTitle,\n    width,\n    theme,\n    ...containerComponent.props\n  }, children);\n\n  return standalone ? (\n    <StandaloneContainer>\n      {chart}\n      {getTitle()}\n      {getSubTitle()}\n    </StandaloneContainer>\n  ) : (\n    <React.Fragment>\n      {chart}\n      {getTitle()}\n      {getSubTitle()}\n    </React.Fragment>\n  );\n};\n\n// Note: VictoryPie.role must be hoisted\nhoistNonReactStatics(ChartDonut, VictoryPie);\n"],"file":"ChartDonut.js"}