{"version":3,"sources":["../../../../src/components/DataList/DataListToggle.tsx"],"names":["DataListToggle","className","isExpanded","ariaControls","ariaLabel","ariaLabelledBy","rowid","id","props","styles","dataListItemControl","dataListToggle","ButtonVariant","plain"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAmBO,IAAMA,cAA4D,GAAG,SAA/DA,cAA+D;AAAA,4BAC1EC,SAD0E;AAAA,MAC1EA,SAD0E,+BAC9D,EAD8D;AAAA,6BAE1EC,UAF0E;AAAA,MAE1EA,UAF0E,gCAE7D,KAF6D;AAAA,+BAG1E,eAH0E;AAAA,MAGzDC,YAHyD,kCAG1C,EAH0C;AAAA,4BAI1E,YAJ0E;AAAA,MAI5DC,SAJ4D,+BAIhD,SAJgD;AAAA,iCAK1E,iBAL0E;AAAA,MAKvDC,cALuD,oCAKtC,EALsC;AAAA,wBAM1EC,KAN0E;AAAA,MAM1EA,KAN0E,2BAMlE,EANkE;AAAA,MAO1EC,EAP0E,QAO1EA,EAP0E;AAAA,MAQvEC,KARuE;;AAAA,SAU1E;AAAK,IAAA,SAAS,EAAE,sBAAIC,qBAAOC,mBAAX,EAAgCT,SAAhC;AAAhB,KAAgEO,KAAhE,GACE;AAAK,IAAA,SAAS,EAAE,sBAAIC,qBAAOE,cAAX;AAAhB,KACE,oBAAC,cAAD;AACE,IAAA,EAAE,EAAEJ,EADN;AAEE,IAAA,OAAO,EAAEK,sBAAcC,KAFzB;AAGE,qBAAeV,YAAY,KAAK,EAAjB,IAAuBA,YAHxC;AAIE,kBAAYC,SAJd;AAKE,uBAAiBA,SAAS,KAAK,SAAd,GAA0B,IAA1B,aAAoCE,KAApC,cAA6CC,EAA7C,CALnB;AAME,qBAAeL;AANjB,KAQE,oBAAC,0BAAD,OARF,CADF,CADF,CAV0E;AAAA,CAArE;;;;AAfLD,EAAAA,S;AAEAC,EAAAA,U;AAEAK,EAAAA,E;AAEAD,EAAAA,K;AAEA,mB;AAEA,c;AAEA,iB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { AngleRightIcon } from '@patternfly/react-icons';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\n\nexport interface DataListToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Identify the DataList toggle number */\n  id: string;\n  /** Id for the row */\n  rowid?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-labelledby'?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-label'?: string;\n  /** Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */\n  'aria-controls'?: string;\n}\n\nexport const DataListToggle: React.FunctionComponent<DataListToggleProps> = ({\n  className = '',\n  isExpanded = false,\n  'aria-controls': ariaControls = '',\n  'aria-label': ariaLabel = 'Details',\n  'aria-labelledby': ariaLabelledBy = '',\n  rowid = '',\n  id,\n  ...props\n}: DataListToggleProps) => (\n  <div className={css(styles.dataListItemControl, className)} {...props}>\n    <div className={css(styles.dataListToggle)}>\n      <Button\n        id={id}\n        variant={ButtonVariant.plain}\n        aria-controls={ariaControls !== '' && ariaControls}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel !== 'Details' ? null : `${rowid} ${id}`}\n        aria-expanded={isExpanded}\n      >\n        <AngleRightIcon />\n      </Button>\n    </div>\n  </div>\n);\n"],"file":"DataListToggle.js"}