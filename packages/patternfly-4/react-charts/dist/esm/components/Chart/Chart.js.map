{"version":3,"sources":["../../../../src/components/Chart/Chart.tsx"],"names":["React","hoistNonReactStatics","VictoryChart","VictoryZoomContainer","ChartContainer","ChartLegend","ChartLegendPosition","ChartLegendWrapper","ChartCommonStyles","getClassName","getLabelTextSize","getPaddingForSide","getTheme","Chart","allowZoom","ariaDesc","ariaTitle","children","legendComponent","legendData","legendPosition","legend","position","padding","standalone","themeColor","themeVariant","theme","containerComponent","legendOrientation","orientation","height","chart","width","rest","defaultPadding","bottom","left","right","top","container","cloneElement","desc","title","props","className","data","getWrappedLegend","dx","dy","xAxisLabelHeight","legendTitleHeight","Children","toArray","map","child","type","role","label","dependentAxis","text","bottomLeft","animate","domain","domainPadding","endAngle","eventKey","events","externalEventMutations","groupComponent","horizontal","innerRadius","name","symbol","fill","maxDomain","x","y","minDomain","polar","range"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport {\n  AnimatePropTypeInterface,\n  D3Scale,\n  DomainPropType,\n  DomainPaddingPropType,\n  EventPropTypeInterface,\n  PaddingProps,\n  ScalePropType,\n  StringOrNumberOrCallback,\n  VictoryChart,\n  VictoryChartProps,\n  VictoryStyleInterface,\n  VictoryZoomContainer,\n} from 'victory';\nimport { ChartContainer } from '../ChartContainer';\nimport {\n  ChartLegend,\n  ChartLegendOrientation,\n  ChartLegendPosition,\n  ChartLegendWrapper\n} from '../ChartLegend';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { getClassName, getLabelTextSize, getPaddingForSide, getTheme } from '../ChartUtils';\n\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartProps extends VictoryChartProps {\n  /**\n   * Specifies the zoom capability of the container component. A value of true allows the chart to\n   * zoom in and out. Zoom events are controlled by scrolling. When zoomed in, panning events are\n   * controlled by dragging. By default this value is set to false.\n   *\n   * Note: Only compatible with charts that display an x, y axis\n   */\n  allowZoom?: boolean;\n  /**\n   * The animate prop specifies props for VictoryAnimation to use.\n   * The animate prop should also be used to specify enter and exit\n   * transition configurations with the `onExit` and `onEnter` namespaces respectively.\n   * @example\n   * {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\n   */\n  animate?: AnimatePropTypeInterface;\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The children to render with the chart\n   */\n  children?: React.ReactNode;\n  /**\n   * The containerComponent prop takes an entire component which will be used to\n   * create a container element for standalone charts.\n   * The new element created from the passed containerComponent wil be provided with\n   * these props from ChartArea: height, width, children\n   * (the chart itself) and style. Props that are not provided by the\n   * child chart component include title and desc, both of which\n   * are intended to add accessibility to Victory components. The more descriptive these props\n   * are, the more accessible your data will be for people using screen readers.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a dataComponent is\n   * not provided, ChartArea will use the default ChartContainer component.\n   * @example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />\n   */\n  containerComponent?: React.ReactElement<any>;\n  /**\n   * The domain prop describes the range of values your chart will include. This prop can be\n   * given as a array of the minimum and maximum expected values for your chart,\n   * or as an object that specifies separate arrays for x and y.\n   * If this prop is not provided, a domain will be calculated from data, or other\n   * available information.\n   * @example: [-1, 1], {x: [0, 100], y: [0, 1]}\n   */\n  domain?: DomainPropType;\n  /**\n   * The domainPadding prop specifies a number of pixels of padding to add to the\n   * beginning and end of a domain. This prop is useful for explicitly spacing ticks farther\n   * from the origin to prevent crowding. This prop should be given as an object with\n   * numbers specified for x and y.\n   */\n  domainPadding?: DomainPaddingPropType;\n  /**\n   * The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\n   * startAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\n   * This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\n   * proceeding counterclockwise.\n   */\n  endAngle?: number;\n  /**\n   * Similar to data accessor props `x` and `y`, this prop may be used to functionally\n   * assign eventKeys to data\n   */\n  eventKey?: StringOrNumberOrCallback;\n  /**\n   * The event prop takes an array of event objects. Event objects are composed of\n   * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace\n   * for a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\n   * events. The eventKey may optionally be used to select a single element by index rather than\n   * an entire set. The eventHandlers object should be given as an object whose keys are standard\n   * event names (i.e. onClick) and whose values are event callbacks. The return value\n   * of an event handler is used to modify elemnts. The return value should be given\n   * as an object or an array of objects with optional target and eventKey keys,\n   * and a mutation key whose value is a function. The target and eventKey keys\n   * will default to those corresponding to the element the event handler was attached to.\n   * The mutation function will be called with the calculated props for the individual selected\n   * element (i.e. a single bar), and the object returned from the mutation function\n   * will override the props of the selected element via object assignment.\n   * @example\n   * events={[\n   *   {\n   *     target: \"data\",\n   *     eventKey: 1,\n   *     eventHandlers: {\n   *       onClick: () => {\n   *         return [\n   *            {\n   *              eventKey: 2,\n   *              mutation: (props) => {\n   *                return {style: merge({}, props.style, {fill: \"orange\"})};\n   *              }\n   *            }, {\n   *              eventKey: 2,\n   *              target: \"labels\",\n   *              mutation: () => {\n   *                return {text: \"hey\"};\n   *              }\n   *            }\n   *          ];\n   *       }\n   *     }\n   *   }\n   * ]}\n   */\n  events?: EventPropTypeInterface<string, StringOrNumberOrCallback>[];\n  /**\n   * Chart uses the standard externalEventMutations prop.\n   */\n  externalEventMutations?: any[];\n  /**\n   * The groupComponent prop takes an entire component which will be used to\n   * create group elements for use within container elements. This prop defaults\n   * to a <g> tag on web, and a react-native-svg <G> tag on mobile\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  height?: number;\n  /**\n   * The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\n   * independent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis.\n   */\n  horizontal?: boolean;\n  /**\n   * When the innerRadius prop is set, polar charts will be hollow rather than circular.\n   */\n  innerRadius?: number;\n  /**\n   * The legend component to render with chart.\n   *\n   * Note: Use legendData so the legend width can be calculated and positioned properly.\n   * Default legend properties may be applied\n   */\n  legendComponent?: React.ReactElement<any>;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  legendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  legendOrientation?: 'horizontal' | 'vertical';\n  /**\n   * The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n   *\n   * Note: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\n   * cases, the legend may not be visible until enough padding is applied.\n   */\n  legendPosition?: 'bottom' | 'bottom-left' | 'right';\n  /**\n   * The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\n   * domain of a chart is static, while the minimum value depends on data or other variable information. If the domain\n   * prop is set in addition to maximumDomain, domain will be used.\n   *\n   * note: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\n   * dependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\n   * the y axis.\n   *\n   * examples:\n   *\n   * maxDomain={0}\n   * maxDomain={{ y: 0 }}\n   */\n  maxDomain?: number | { x?: number, y?: number };\n  /**\n   * The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\n   * domain of a chart is static, while the maximum value depends on data or other variable information. If the domain\n   * prop is set in addition to minimumDomain, domain will be used.\n   *\n   * note: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\n   * dependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\n   * the y axis.\n   *\n   * examples:\n   *\n   * minDomain={0}\n   * minDomain={{ y: 0 }}\n   */\n  minDomain?: number | { x?: number, y?: number };\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart.\n   * **This prop should not be set manually.**\n   */\n  polar?: boolean;\n  /**\n   * The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\n   * corresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\n   * corresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\n   * height, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\n   * chart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\n   * ChartGroup will have no effect. This prop is usually not set manually.\n   *\n   * examples:\n   *\n   * Cartesian: range={{ x: [50, 250], y: [50, 250] }}\n   * Polar: range={{ x: [0, 360], y: [0, 250] }}\n   */\n  range?: [number, number] | { x?: [number, number], y?: [number, number] };\n  /**\n   * The scale prop determines which scales your chart should use. This prop can be\n   * given as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\n   * as a d3 scale function, or as an object with scales specified for x and y\n   * @example d3Scale.time(), {x: \"linear\", y: \"log\"}\n   */\n  scale?: ScalePropType | D3Scale | {\n    x?: ScalePropType | D3Scale;\n    y?: ScalePropType | D3Scale;\n  };\n  /**\n   * The sharedEvents prop is used internally to coordinate events between components. It should not be set manually.\n   */\n  sharedEvents?: any;\n  /**\n   * By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\n   * values, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\n   * desired behavior in most cases. For users that need to apply padding without regard to quadrant, the\n   * singleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\n   * specified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\n   * without regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n   *\n   * note: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\n   * value refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\n   * will corresponds to the y axis.\n   *\n   * examples:\n   *\n   * singleQuadrantDomainPadding={false}\n   * singleQuadrantDomainPadding={{ x: false }}\n   */\n  singleQuadrantDomainPadding?: boolean | { x: boolean, y: boolean };\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose Chart with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\n   * with endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\n   * chart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\n   * and proceeding counterclockwise.\n   */\n  startAngle?: number;\n  /**\n   * The style prop defines the style of the component. The style prop should be given as an object with styles defined\n   * for data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\n   * via props as they determine relative layout for components in Chart.\n   */\n  style?: VictoryStyleInterface;\n  /**\n   * The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\n   * props defined in theme may be overwritten by props specified on the component instance.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  width?: number;\n}\n\nexport const Chart: React.FunctionComponent<ChartProps> = ({\n  allowZoom = false,\n  ariaDesc,\n  ariaTitle,\n  children,\n  legendComponent = <ChartLegend/>,\n  legendData,\n  legendPosition = ChartCommonStyles.legend.position as ChartLegendPosition,\n  padding,\n  standalone = true,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  containerComponent = allowZoom ? <VictoryZoomContainer /> : <ChartContainer />,\n  legendOrientation = theme.legend.orientation as ChartLegendOrientation,\n  height = theme.chart.height,\n  width = theme.chart.width,\n  ...rest\n}: ChartProps) => {\n  const defaultPadding = {\n    bottom: getPaddingForSide('bottom',  padding, theme.chart.padding),\n    left: getPaddingForSide('left', padding, theme.chart.padding),\n    right: getPaddingForSide('right', padding, theme.chart.padding),\n    top: getPaddingForSide('top', padding, theme.chart.padding),\n  };\n\n  // Clone so users can override container props\n  const container = React.cloneElement(containerComponent, {\n    desc: ariaDesc,\n    title: ariaTitle,\n    theme,\n    ...containerComponent.props,\n    className: getClassName({className: containerComponent.props.className}) // Override VictoryContainer class name\n  });\n\n  const legend = React.cloneElement(legendComponent, {\n    data: legendData,\n    orientation: legendOrientation,\n    theme,\n    ...legendComponent.props\n  });\n\n  // Returns a wrapped legend\n  const getWrappedLegend = () => {\n    if (!legend.props.data) {\n      return null;\n    }\n    let dx = 0;\n    let dy = 0;\n    let xAxisLabelHeight = 0;\n    let legendTitleHeight = legend.props.title ? 10 : 0;\n\n    // Adjust for axis label\n    React.Children.toArray(children).map((child: any) => {\n      if (child.type.role === 'axis' && child.props.label && !child.props.dependentAxis) {\n        xAxisLabelHeight = getLabelTextSize({text: child.props.label, theme}).height + 10;\n        legendTitleHeight = 0;\n      }\n    });\n\n    if (legendPosition === ChartLegendPosition.bottom) {\n      dy += xAxisLabelHeight + legendTitleHeight;\n    } else if (legendPosition === ChartLegendPosition.bottomLeft) {\n      dy += xAxisLabelHeight + legendTitleHeight;\n      dx = -10;\n    }\n    return (\n      <ChartLegendWrapper\n        chartType=\"chart\"\n        dx={dx}\n        dy={dy}\n        height={height}\n        legendComponent={legend}\n        orientation={legendOrientation}\n        padding={defaultPadding}\n        position={legendPosition}\n        theme={theme}\n        width={width}\n      />\n    );\n  };\n\n  return (\n    <VictoryChart\n      containerComponent={container}\n      height={height}\n      padding={defaultPadding}\n      theme={theme}\n      width={width}\n      {...rest}\n    >\n      {children}\n      {getWrappedLegend()}\n    </VictoryChart>\n  );\n};\n\nhoistNonReactStatics(Chart, VictoryChart);\n"],"file":"Chart.js"}