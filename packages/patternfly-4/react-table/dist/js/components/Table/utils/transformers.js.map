{"version":3,"sources":["../../../../../src/components/Table/utils/transformers.tsx"],"names":["emptyTD","scope","component","scopeColTransformer","emptyCol","label","parentId","_value","rowData","parent","mapProps","_label","property","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAIA,IAAMA,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAO;AACrBC,IAAAA,KAAK,EAAE,EADc;AAErBC,IAAAA,SAAS,EAAE;AAFU,GAAP;AAAA,CAAhB;;;;AAKA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAO;AACjCF,IAAAA,KAAK,EAAE;AAD0B,GAAP;AAAA,CAA5B;;;;AAIA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,2BACXA,KAAK,GAAG,EAAH,GAAQ;AAAEJ,IAAAA,KAAK,EAAE;AAAT,GADF;AAAA,CAAjB;;;;AAIA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD;AAAA,MAAgCC,OAAhC,QAAgCA,OAAhC;AAAA,SAAuD;AACtEF,IAAAA,QAAQ,EAAEE,OAAO,CAACC;AADoD,GAAvD;AAAA,CAAjB;;;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD;AAAA,MAAgCC,QAAhC,SAAgCA,QAAhC;AAAA,MAA0CJ,OAA1C,SAA0CA,OAA1C;AAAA,2BACXA,OAAO,CAACI,QAAD,CAAP,IAAqBJ,OAAO,CAACI,QAAD,CAAP,CAAkBC,KAD5B;AAAA,CAAjB","sourcesContent":["export { selectable } from './decorators/selectable';\nexport { sortable } from './decorators/sortable';\nexport { cellActions } from './decorators/cellActions';\nexport { cellWidth } from './decorators/cellWidth';\nexport { cellHeightAuto } from './decorators/cellHeightAuto';\nexport { wrappable } from './decorators/wrappable';\nexport { textCenter } from './decorators/textCenter';\nexport { collapsible, expandedRow, expandable } from './decorators/collapsible';\nexport { compoundExpand } from './decorators/compoundExpand';\nexport { headerCol } from './decorators/headerCol';\nexport { classNames, Visibility } from './decorators/classNames';\n\nimport { IFormatterValueType, IExtra } from '../Table';\n\nconst emptyTD = () => ({\n  scope: '',\n  component: 'td'\n});\n\nconst scopeColTransformer = () => ({\n  scope: 'col'\n});\n\nconst emptyCol = (label: IFormatterValueType) => ({\n  ...(label ? {} : { scope: '' })\n});\n\nconst parentId = (_value: IFormatterValueType, { rowData }: IExtra) => ({\n  parentId: rowData.parent\n});\n\nconst mapProps = (_label: IFormatterValueType, { property, rowData }: IExtra) => ({\n  ...(rowData[property] && rowData[property].props)\n});\n\nexport { emptyTD, scopeColTransformer, emptyCol, parentId, mapProps };\n"],"file":"transformers.js"}