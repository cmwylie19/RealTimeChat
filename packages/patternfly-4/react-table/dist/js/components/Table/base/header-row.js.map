{"version":3,"sources":["../../../../../src/components/Table/base/header-row.tsx"],"names":["HeaderRow","rowData","rowIndex","renderers","onRow","Object","React","createElement","row","map","column","columnIndex","property","header","props","evaluatedProperty","label","transforms","formatters","extraParameters","transformedProps","console","warn","cell","key","children"],"mappings":";;;;;;;;;AAMA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAUO,IAAMA,SAAkD,GAAG,SAArDA,SAAqD,OAK5D;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,wBADJC,KACI;AAAA,MADJA,KACI,2BADI;AAAA,WAAMC,MAAN;AAAA,GACJ;AACJ,SAAOC,KAAK,CAACC,aAAN,CACLJ,SAAS,CAACK,GADL,EAELJ,KAAK,CAACH,OAAD,EAAU;AAAEC,IAAAA,QAAQ,EAARA;AAAF,GAAV,CAFA,EAGJD,OAAD,CAAgBQ,GAAhB,CAAoB,UAACC,MAAD,EAAqBC,WAArB,EAA6C;AAAA,QACvDC,QADuD,GACHF,MADG,CACvDE,QADuD;AAAA,yBACHF,MADG,CAC7CG,MAD6C;AAAA,QAC7CA,MAD6C,+BACpC,EADoC;AAAA,wBACHH,MADG,CAClBI,KADkB;AAAA,QAClBA,KADkB,8BACV,EADU;AAE/D,QAAMC,iBAAiB,GAAGH,QAAQ,IAAKC,MAAM,IAAIA,MAAM,CAACD,QAAxD;AAF+D,QAGvDI,KAHuD,GAGXH,MAHW,CAGvDG,KAHuD;AAAA,6BAGXH,MAHW,CAGhDI,UAHgD;AAAA,QAGhDA,UAHgD,mCAGnC,EAHmC;AAAA,6BAGXJ,MAHW,CAG/BK,UAH+B;AAAA,QAG/BA,UAH+B,mCAGlB,EAHkB;AAI/D,QAAMC,eAAe,GAAG;AACtBR,MAAAA,WAAW,EAAXA,WADsB;AAEtBC,MAAAA,QAAQ,EAAEG,iBAFY;AAGtBL,MAAAA,MAAM,EAANA;AAHsB,KAAxB;AAKA,QAAMU,gBAAgB,GAAG,4CAAmBH,UAAnB,EAA+BD,KAA/B,EAAsCG,eAAtC,CAAzB;;AAEA,QAAI,CAACC,gBAAL,EAAuB;AACrB;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,uDAAb,EAFqB,CAEkD;AACxE;;AAED,WAAOhB,KAAK,CAACC,aAAN,CACLJ,SAAS,CAACoB,IADL;AAGHC,MAAAA,GAAG,YAAKb,WAAL;AAHA,OAIA,4BAAWG,KAAX,EAAkBD,MAAM,IAAIA,MAAM,CAACC,KAAnC,EAA0CM,gBAA1C,CAJA,GAMLA,gBAAgB,CAACK,QAAjB,IAA6B,4CAAmBP,UAAnB,EAA+BF,KAA/B,EAAsCG,eAAtC,CANxB,CAAP;AAQD,GAxBD,CAHK,CAAP;AA6BD,CAnCM;;;;AANLlB,EAAAA,O;AACAC,EAAAA,Q;AACAC,EAAAA,S;AACAC,EAAAA,K","sourcesContent":["/**\n * header-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, ColumnType, HeaderType, RowsType, RendererType } from './types';\n\nexport interface HeaderRowProps {\n  rowData: RowsType;\n  rowIndex: number;\n  renderers: RendererType;\n  onRow?: Function;\n}\n\nexport const HeaderRow: React.FunctionComponent<HeaderRowProps> = ({\n  rowData,\n  rowIndex,\n  renderers,\n  onRow = () => Object\n}) => {\n  return React.createElement(\n    renderers.row as createElementType,\n    onRow(rowData, { rowIndex }),\n    (rowData as []).map((column: ColumnType, columnIndex: number) => {\n      const { property, header = {} as HeaderType, props = {} } = column;\n      const evaluatedProperty = property || (header && header.property);\n      const { label, transforms = [], formatters = [] } = header;\n      const extraParameters = {\n        columnIndex,\n        property: evaluatedProperty,\n        column\n      };\n      const transformedProps = evaluateTransforms(transforms, label, extraParameters);\n\n      if (!transformedProps) {\n        // tslint:disable-next-line:no-console\n        console.warn('Table.Header - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console\n      }\n\n      return React.createElement(\n        renderers.cell as createElementType,\n        {\n          key: `${columnIndex}-header`,\n          ...mergeProps(props, header && header.props, transformedProps)\n        },\n        transformedProps.children || evaluateFormatters(formatters)(label, extraParameters)\n      );\n    })\n  );\n};\n"],"file":"header-row.js"}