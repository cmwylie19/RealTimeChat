{"version":3,"sources":["../../../../src/components/TopologyControlBar/TopologyControlBar.test.tsx"],"names":["React","mount","TopologyControlBar","createTopologyControlButtons","defaultControlButtonsOptions","ZOOM_IN","describe","test","controlButtons","mockfn","jest","fn","view","expect","toMatchSnapshot","find","at","simulate","mock","calls","toHaveLength","zoomInCallback","zoomInAriaLabel","zoomInIcon","zoomInTip","fitToScreenHidden","resetViewDisabled","legend"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,KAAR,QAAoB,QAApB;AACA,SAAQC,kBAAR,EAA4BC,4BAA5B,EAA0DC,4BAA1D,EAAwFC,OAAxF,QAAsG,sBAAtG;AAEAC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnCC,EAAAA,IAAI,CAAC,+CAAD,EAAkD,MAAM;AAC1D,UAAMC,cAAc,GAAGL,4BAA4B,EAAnD;AACA,UAAMM,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACA,UAAMC,IAAI,GAAGX,KAAK,CAChB,oBAAC,kBAAD;AACE,MAAA,SAAS,EAAC,oBADZ;AAEE,MAAA,EAAE,EAAC,iBAFL;AAEuB,MAAA,cAAc,EAAEO,cAFvC;AAGE,MAAA,aAAa,EAAEC;AAHjB,MADgB,CAAlB;AAMAI,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACAF,IAAAA,IAAI,CACDG,IADH,CACS,IAAGV,OAAQ,EADpB,EAEGW,EAFH,CAEM,CAFN,EAGGC,QAHH,CAGY,OAHZ;AAIAJ,IAAAA,MAAM,CAACJ,MAAM,CAACS,IAAP,CAAYC,KAAb,CAAN,CAA0BC,YAA1B,CAAuC,CAAvC;AACD,GAfG,CAAJ;AAiBAb,EAAAA,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,UAAME,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACA,UAAMH,cAAc,GAAGL,4BAA4B,mBAC5CC,4BAD4C;AAE/CiB,MAAAA,cAAc,EAAEZ,MAF+B;AAG/Ca,MAAAA,eAAe,EAAE,yBAH8B;AAI/CC,MAAAA,UAAU,EAAE,iDAJmC;AAK/CC,MAAAA,SAAS,EAAE,sBALoC;AAM/CC,MAAAA,iBAAiB,EAAE,IAN4B;AAO/CC,MAAAA,iBAAiB,EAAE,IAP4B;AAQ/CC,MAAAA,MAAM,EAAE;AARuC,OAAnD;AAUA,UAAMf,IAAI,GAAGX,KAAK,CAChB,oBAAC,kBAAD;AAAoB,MAAA,SAAS,EAAC,oBAA9B;AAAmD,MAAA,EAAE,EAAC,iBAAtD;AAAwE,MAAA,cAAc,EAAEO;AAAxF,MADgB,CAAlB;AAGAK,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACAF,IAAAA,IAAI,CACDG,IADH,CACS,IAAGV,OAAQ,EADpB,EAEGW,EAFH,CAEM,CAFN,EAGGC,QAHH,CAGY,OAHZ;AAIAJ,IAAAA,MAAM,CAACJ,MAAM,CAACS,IAAP,CAAYC,KAAb,CAAN,CAA0BC,YAA1B,CAAuC,CAAvC;AACD,GArBG,CAAJ;AAsBD,CAxCO,CAAR","sourcesContent":["import * as React from 'react';\nimport {mount} from 'enzyme';\nimport {TopologyControlBar, createTopologyControlButtons, defaultControlButtonsOptions, ZOOM_IN} from './TopologyControlBar';\n\ndescribe('TopologyControlBar', () => {\n  test('should display the default controls correctly', () => {\n    const controlButtons = createTopologyControlButtons();\n    const mockfn = jest.fn();\n    const view = mount(\n      <TopologyControlBar\n        className=\"default-test-class\"\n        id=\"default-test-id\" controlButtons={controlButtons}\n        onButtonClick={mockfn}/>\n    );\n    expect(view).toMatchSnapshot();\n    view\n      .find(`#${ZOOM_IN}`)\n      .at(0)\n      .simulate('click');\n    expect(mockfn.mock.calls).toHaveLength(1);\n  });\n\n  test('should accept button options correctly', () => {\n    const mockfn = jest.fn();\n    const controlButtons = createTopologyControlButtons(\n      { ...defaultControlButtonsOptions,\n        zoomInCallback: mockfn,\n        zoomInAriaLabel: 'test-zoom-in-aria-label',\n        zoomInIcon: <span>test zoom in</span>,\n        zoomInTip: 'test zoom in tooltip',\n        fitToScreenHidden: true,\n        resetViewDisabled: true,\n        legend: false\n      });\n    const view = mount(\n      <TopologyControlBar className=\"default-test-class\" id=\"default-test-id\" controlButtons={controlButtons}/>\n    );\n    expect(view).toMatchSnapshot();\n    view\n      .find(`#${ZOOM_IN}`)\n      .at(0)\n      .simulate('click');\n    expect(mockfn.mock.calls).toHaveLength(1);\n  });\n});\n"],"file":"TopologyControlBar.test.js"}