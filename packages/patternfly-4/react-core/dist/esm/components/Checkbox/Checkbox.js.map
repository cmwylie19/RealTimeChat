{"version":3,"sources":["../../../../src/components/Checkbox/Checkbox.tsx"],"names":["React","styles","css","getModifier","defaultOnChange","Checkbox","Component","constructor","props","event","onChange","currentTarget","checked","render","ariaLabel","className","isValid","isDisabled","isChecked","label","defaultChecked","checkedProps","includes","check","checkInput","handleChange","elem","indeterminate","checkLabel","id"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,qDAAnB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,0BAAjC;;AAwBA;AACA,MAAMC,eAAe,GAAG,MAAM,CAAE,CAAhC;;AAEA,OAAO,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAsD;AAS3DC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,0CAIAC,KAAD,IAAoD;AACzE,WAAKD,KAAL,CAAWE,QAAX,CAAoBD,KAAK,CAACE,aAAN,CAAoBC,OAAxC,EAAiDH,KAAjD;AACD,KANuB;AAEvB;;AAMDI,EAAAA,MAAM,GAAG;AACP,wBAWI,KAAKL,KAXT;AAAA,UAAM;AACJ,oBAAcM,SADV;AAEJC,MAAAA,SAFI;AAGJL,MAAAA,QAHI;AAIJM,MAAAA,OAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA,SANI;AAOJC,MAAAA,KAPI;AAQJP,MAAAA,OARI;AASJQ,MAAAA;AATI,KAAN;AAAA,UAUKZ,KAVL;;AAYA,UAAMa,YAA6D,GAAG,EAAtE;;AACA,QAAI,CAAC,IAAD,EAAO,KAAP,EAAcC,QAAd,CAAuBV,OAAvB,KAAmCM,SAAS,KAAK,IAArD,EAA2D;AACzDG,MAAAA,YAAY,CAACT,OAAb,GAAwBA,OAAO,IAAIM,SAAnC;AACD;;AACD,QAAIR,QAAQ,KAAKN,eAAjB,EAAkC;AAChCiB,MAAAA,YAAY,CAACT,OAAb,GAAuBM,SAAvB;AACD;;AACD,QAAI,CAAC,KAAD,EAAQ,IAAR,EAAcI,QAAd,CAAuBF,cAAvB,CAAJ,EAA4C;AAC1CC,MAAAA,YAAY,CAACD,cAAb,GAA8BA,cAA9B;AACD;;AAEDC,IAAAA,YAAY,CAACT,OAAb,GAAuBS,YAAY,CAACT,OAAb,KAAyB,IAAzB,GAAgC,KAAhC,GAAwCS,YAAY,CAACT,OAA5E;AACA,WACE;AAAK,MAAA,SAAS,EAAEV,GAAG,CAACD,MAAM,CAACsB,KAAR,EAAeR,SAAf;AAAnB,OACE,0CACMP,KADN;AAEE,MAAA,SAAS,EAAEN,GAAG,CAACD,MAAM,CAACuB,UAAR,CAFhB;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,QAAQ,EAAE,KAAKC,YAJjB;AAKE,sBAAc,CAACT,OALjB;AAME,oBAAYF,SANd;AAOE,MAAA,QAAQ,EAAEG,UAPZ;AAQE,MAAA,GAAG,EAAGS,IAAD,IAAUA,IAAI,KAAKA,IAAI,CAACC,aAAL,GAAqBT,SAAS,KAAK,IAAxC;AARrB,OASMG,YATN,EADF,EAYGF,KAAK,IACJ;AACE,MAAA,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAAC2B,UAAR,EAAoBX,UAAU,GAAGd,WAAW,CAACF,MAAD,EAAS,UAAT,CAAd,GAAqC,EAAnE,CADhB;AAEE,MAAA,OAAO,EAAEO,KAAK,CAACqB;AAFjB,OAIGV,KAJH,CAbJ,CADF;AAuBD;;AAjE0D;;gBAAhDd,Q;AArBXU,EAAAA,S;AAEAC,EAAAA,O;AAEAC,EAAAA,U;AAEAC,EAAAA,S;AACAN,EAAAA,O;AAEAF,EAAAA,Q;AAEAS,EAAAA,K;AAEAU,EAAAA,E;AAEA,c;;;gBAMWxB,Q,kBACW;AACpBU,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,OAAO,EAAE,IAFW;AAGpBC,EAAAA,UAAU,EAAE,KAHQ;AAIpBC,EAAAA,SAAS,EAAE,KAJS;AAKpBR,EAAAA,QAAQ,EAAEN;AALU,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface CheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'label'> {\n  /** Additional classes added to the Checkbox. */\n  className?: string;\n  /** Flag to show if the Checkbox selection is valid or invalid. */\n  isValid?: boolean;\n  /** Flag to show if the Checkbox is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the Checkbox is checked. */\n  isChecked?: boolean;\n  checked?: boolean;\n  /** A callback for when the Checkbox selection changes. */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Label text of the checkbox. */\n  label?: React.ReactNode;\n  /** Id of the checkbox. */\n  id: string;\n  /** Aria-label of the checkbox. */\n  'aria-label'?: string;\n}\n\n// tslint:disable-next-line:no-empty\nconst defaultOnChange = () => {};\n\nexport class Checkbox extends React.Component<CheckboxProps> {\n  static defaultProps = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    isChecked: false,\n    onChange: defaultOnChange\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  private handleChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    this.props.onChange(event.currentTarget.checked, event);\n  }\n\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      className,\n      onChange,\n      isValid,\n      isDisabled,\n      isChecked,\n      label,\n      checked,\n      defaultChecked,\n      ...props\n    } = this.props;\n    const checkedProps: { checked?: boolean; defaultChecked?: boolean } = {};\n    if ([true, false].includes(checked) || isChecked === true) {\n      checkedProps.checked =  checked || isChecked;\n    }\n    if (onChange !== defaultOnChange) {\n      checkedProps.checked = isChecked;\n    }\n    if ([false, true].includes(defaultChecked)) {\n      checkedProps.defaultChecked = defaultChecked;\n    }\n\n    checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n    return (\n      <div className={css(styles.check, className)}>\n        <input\n          {...props}\n          className={css(styles.checkInput)}\n          type=\"checkbox\"\n          onChange={this.handleChange}\n          aria-invalid={!isValid}\n          aria-label={ariaLabel}\n          disabled={isDisabled}\n          ref={(elem) => elem && (elem.indeterminate = isChecked === null)}\n          {...checkedProps}\n        />\n        {label && (\n          <label\n            className={css(styles.checkLabel, isDisabled ? getModifier(styles, 'disabled') : '')}\n            htmlFor={props.id}\n          >\n            {label}\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n"],"file":"Checkbox.js"}