{"version":3,"sources":["../../src/StyleSheet.js"],"names":["StyleSheet","create","styleObj","keys","Object","length","reduce","prev","key","parse","input","classes","map","className","value","modifiers","inject","raw","css","filteredStyles","styles","forEach","style","push","cx"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;AASO,IAAMA,UAAU,GAAG;AACxBC,EAAAA,MADwB,kBACjBC,QADiB,EACP;AACf,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,QAAZ,CAAb;;AACA,QAAIC,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,aAAOF,IAAI,CAACG,MAAL,CACL,UAACC,IAAD,EAAOC,GAAP;AAAA,iCACKD,IADL,sBAEGC,GAFH,EAES,kBAAWN,QAAQ,CAACM,GAAD,CAAnB,CAFT;AAAA,OADK,EAKL,EALK,CAAP;AAOD;;AACD,WAAO,kBAAWN,QAAX,CAAP;AACD,GAbuB;AAcxBO,EAAAA,KAdwB,iBAclBC,KAdkB,EAcX;AACX,QAAMC,OAAO,GAAG,0BAAcD,KAAd,CAAhB;;AACA,QAAI,CAACC,OAAL,EAAc;AACZ,aAAO,EAAP;AACD;;AAED,WAAOA,OAAO,CAACL,MAAR,CACL,UAACM,GAAD,EAAMC,SAAN,EAAoB;AAClB,UAAML,GAAG,GAAG,4BAAgBK,SAAhB,CAAZ;;AACA,UAAID,GAAG,CAACJ,GAAD,CAAP,EAAc;AACZ,eAAOI,GAAP;AACD;;AAED,UAAME,KAAK,GAAG,mCAAuBD,SAAvB,EAAkCH,KAAlC,CAAd;;AAEA,UAAI,uBAAWG,SAAX,CAAJ,EAA2B;AACzBD,QAAAA,GAAG,CAACG,SAAJ,CAAcP,GAAd,IAAqBM,KAArB;AACD,OAFD,MAEO;AACLF,QAAAA,GAAG,CAACJ,GAAD,CAAH,GAAWM,KAAX;AACD;;AAED,aAAOF,GAAP;AACD,KAhBI,EAiBL;AACEG,MAAAA,SAAS,EAAE,EADb;AAEEC,MAAAA,MAAM,EAAE;AAAA,eAAM,2BAAaN,KAAb,CAAN;AAAA,OAFV;AAGEO,MAAAA,GAAG,EAAEP;AAHP,KAjBK,CAAP;AAuBD;AA3CuB,CAAnB;;;AA8CA,SAASQ,GAAT,GAAwB;AAC7B,MAAMC,cAAc,GAAG,EAAvB;;AAD6B,oCAARC,MAAQ;AAARA,IAAAA,MAAQ;AAAA;;AAE7BA,EAAAA,MAAM,CAACC,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtB,QAAI,oCAAwBA,KAAxB,CAAJ,EAAoC;AAClC;AACA;AACAH,MAAAA,cAAc,CAACI,IAAf,CAAoB,yBAAaD,KAAb,CAApB;AACA;AACD;;AACDH,IAAAA,cAAc,CAACI,IAAf,CAAoBD,KAApB;AACD,GARD;AAUA,SAAOE,0BAAML,cAAN,CAAP;AACD","sourcesContent":["import { css as emotionCSS, cx, injectGlobal } from 'emotion';\nimport {\n  formatClassName,\n  getCSSClasses,\n  isModifier,\n  createStyleDeclaration,\n  isValidStyleDeclaration,\n  getClassName\n} from './utils';\n\nexport const StyleSheet = {\n  create(styleObj) {\n    const keys = Object.keys(styleObj);\n    if (keys.length > 0) {\n      return keys.reduce(\n        (prev, key) => ({\n          ...prev,\n          [key]: emotionCSS(styleObj[key])\n        }),\n        {}\n      );\n    }\n    return emotionCSS(styleObj);\n  },\n  parse(input) {\n    const classes = getCSSClasses(input);\n    if (!classes) {\n      return {};\n    }\n\n    return classes.reduce(\n      (map, className) => {\n        const key = formatClassName(className);\n        if (map[key]) {\n          return map;\n        }\n\n        const value = createStyleDeclaration(className, input);\n\n        if (isModifier(className)) {\n          map.modifiers[key] = value;\n        } else {\n          map[key] = value;\n        }\n\n        return map;\n      },\n      {\n        modifiers: {},\n        inject: () => injectGlobal(input),\n        raw: input\n      }\n    );\n  }\n};\n\nexport function css(...styles) {\n  const filteredStyles = [];\n  styles.forEach(style => {\n    if (isValidStyleDeclaration(style)) {\n      // remove global injection of styles in favor of require(css) in the component\n      // style.__inject();\n      filteredStyles.push(getClassName(style));\n      return;\n    }\n    filteredStyles.push(style);\n  });\n\n  return cx(...filteredStyles);\n}\n"],"file":"StyleSheet.js"}