{"version":3,"sources":["../../../../src/components/ApplicationLauncher/ApplicationLauncher.test.js"],"names":["dropdownItems","describe","test","view","expect","toMatchSnapshot","DropdownPosition","right","DropdownDirection","up"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AAEA,IAAMA,aAAa,GAAG,CACpB,gCAAC,0BAAD;AAAc,EAAA,GAAG,EAAC;AAAlB,UADoB,EAEpB,gCAAC,0BAAD;AAAc,EAAA,GAAG,EAAC,QAAlB;AAA2B,EAAA,SAAS,EAAC;AAArC,YAFoB,EAKpB,gCAAC,0BAAD;AAAc,EAAA,GAAG,EAAC,eAAlB;AAAkC,EAAA,UAAU;AAA5C,mBALoB,EAQpB,gCAAC,0BAAD;AAAc,EAAA,GAAG,EAAC,iBAAlB;AAAoC,EAAA,UAAU,MAA9C;AAA+C,EAAA,SAAS,EAAC;AAAzD,qBARoB,EAWpB,gCAAC,4BAAD;AAAmB,EAAA,GAAG,EAAC;AAAvB,EAXoB,EAYpB,gCAAC,0BAAD;AAAc,EAAA,GAAG,EAAC;AAAlB,oBAZoB,EAapB,gCAAC,0BAAD;AAAc,EAAA,GAAG,EAAC,kBAAlB;AAAqC,EAAA,SAAS,EAAC;AAA/C,sBAboB,CAAtB;AAkBAC,QAAQ,CAAC,qBAAD,EAAwB,YAAM;AACpCC,EAAAA,IAAI,CAAC,SAAD,EAAY,YAAM;AACpB,QAAMC,IAAI,GAAG,mBAAM,gCAAC,wCAAD;AAAqB,MAAA,aAAa,EAAEH;AAApC,MAAN,CAAb;AACAI,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHG,CAAJ;AAKAH,EAAAA,IAAI,CAAC,eAAD,EAAkB,YAAM;AAC1B,QAAMC,IAAI,GAAG,mBAAM,gCAAC,wCAAD;AAAqB,MAAA,aAAa,EAAEH,aAApC;AAAmD,MAAA,QAAQ,EAAEM,oCAAiBC;AAA9E,MAAN,CAAb;AACAH,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHG,CAAJ;AAKAH,EAAAA,IAAI,CAAC,QAAD,EAAW,YAAM;AACnB,QAAMC,IAAI,GAAG,mBAAM,gCAAC,wCAAD;AAAqB,MAAA,aAAa,EAAEH,aAApC;AAAmD,MAAA,SAAS,EAAEQ,qCAAkBC;AAAhF,MAAN,CAAb;AACAL,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHG,CAAJ;AAKAH,EAAAA,IAAI,CAAC,wBAAD,EAA2B,YAAM;AACnC,QAAMC,IAAI,GAAG,mBACX,gCAAC,wCAAD;AACE,MAAA,aAAa,EAAEH,aADjB;AAEE,MAAA,SAAS,EAAEQ,qCAAkBC,EAF/B;AAGE,MAAA,QAAQ,EAAEH,oCAAiBC;AAH7B,MADW,CAAb;AAOAH,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GATG,CAAJ;AAWAH,EAAAA,IAAI,CAAC,UAAD,EAAa,YAAM;AACrB,QAAMC,IAAI,GAAG,mBAAM,gCAAC,wCAAD;AAAqB,MAAA,aAAa,EAAEH,aAApC;AAAmD,MAAA,MAAM;AAAzD,MAAN,CAAb;AACAI,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHG,CAAJ;AAKAH,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAM;AACxB,QAAMC,IAAI,GAAG,mBACX,gCAAC,wCAAD;AAAqB,MAAA,aAAa,EAAEH,aAApC;AAAmD,MAAA,MAAM,MAAzD;AAA0D,MAAA,UAAU,EAAE,gCAAC,oBAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAtE,MADW,CAAb;AAGAI,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GALG,CAAJ;AAMD,CAtCO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport { ApplicationLauncher } from './ApplicationLauncher';\nimport { DropdownItem } from '../Dropdown/DropdownItem';\n\nimport { DropdownPosition, DropdownDirection } from '../Dropdown/dropdownConstants';\nimport { DropdownSeparator } from '../Dropdown/Separator';\n\nconst dropdownItems = [\n  <DropdownItem key=\"link\">Link</DropdownItem>,\n  <DropdownItem key=\"action\" component=\"button\">\n    Action\n  </DropdownItem>,\n  <DropdownItem key=\"disabled link\" isDisabled>\n    Disabled Link\n  </DropdownItem>,\n  <DropdownItem key=\"disabled action\" isDisabled component=\"button\">\n    Disabled Action\n  </DropdownItem>,\n  <DropdownSeparator key=\"separator\" />,\n  <DropdownItem key=\"separated link\">Separated Link</DropdownItem>,\n  <DropdownItem key=\"separated action\" component=\"button\">\n    Separated Action\n  </DropdownItem>\n];\n\ndescribe('ApplicationLauncher', () => {\n  test('regular', () => {\n    const view = mount(<ApplicationLauncher dropdownItems={dropdownItems} />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('right aligned', () => {\n    const view = mount(<ApplicationLauncher dropdownItems={dropdownItems} position={DropdownPosition.right} />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('dropup', () => {\n    const view = mount(<ApplicationLauncher dropdownItems={dropdownItems} direction={DropdownDirection.up} />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('dropup + right aligned', () => {\n    const view = mount(\n      <ApplicationLauncher\n        dropdownItems={dropdownItems}\n        direction={DropdownDirection.up}\n        position={DropdownPosition.right}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('expanded', () => {\n    const view = mount(<ApplicationLauncher dropdownItems={dropdownItems} isOpen />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('custom icon', () => {\n    const view = mount(\n      <ApplicationLauncher dropdownItems={dropdownItems} isOpen toggleIcon={<HelpIcon id=\"test-icon\" />} />\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n"],"file":"ApplicationLauncher.test.js"}