{"version":3,"sources":["../../../../src/components/ApplicationLauncher/ApplicationLauncherItem.tsx"],"names":["ApplicationLauncherItemContext","React","createContext","isExternal","icon","ApplicationLauncherItem","className","children","href","tooltip","tooltipProps","component","props","styles","modifiers","external"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEO,IAAMA,8BAA8B,GAAGC,KAAK,CAACC,aAAN,CAAoB;AAAEC,EAAAA,UAAU,EAAE,KAAd;AAAqBC,EAAAA,IAAI,EAAE;AAA3B,CAApB,CAAvC;;;AAuBA,IAAMC,uBAAkG,GAAG,SAArGA,uBAAqG;AAAA,4BAChHC,SADgH;AAAA,MAChHA,SADgH,+BACpG,EADoG;AAAA,MAEhHC,QAFgH,QAEhHA,QAFgH;AAAA,uBAGhHH,IAHgH;AAAA,MAGhHA,IAHgH,0BAGzG,IAHyG;AAAA,6BAIhHD,UAJgH;AAAA,MAIhHA,UAJgH,gCAInG,KAJmG;AAAA,MAKhHK,IALgH,QAKhHA,IALgH;AAAA,0BAMhHC,OANgH;AAAA,MAMhHA,OANgH,6BAMtG,IANsG;AAAA,+BAOhHC,YAPgH;AAAA,MAOhHA,YAPgH,kCAOjG,IAPiG;AAAA,4BAQhHC,SARgH;AAAA,MAQhHA,SARgH,+BAQpG,GARoG;AAAA,MAS7GC,KAT6G;;AAAA,SAWhH,oBAAC,8BAAD,CAAgC,QAAhC;AAAyC,IAAA,KAAK,EAAE;AAAET,MAAAA,UAAU,EAAVA,UAAF;AAAcC,MAAAA,IAAI,EAAJA;AAAd;AAAhD,KACE,oBAAC,sBAAD;AACE,IAAA,SAAS,EAAEO,SADb;AAEE,IAAA,IAAI,EAAEH,IAAI,IAAI,IAFhB;AAGE,IAAA,SAAS,EAAE,sBAAIL,UAAU,IAAIU,wBAAOC,SAAP,CAAiBC,QAAnC,EAA6CT,SAA7C,CAHb;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,YAAY,EAAEC;AALhB,KAMME,KANN,GAQGL,QAAQ,IAAI,oBAAC,sDAAD,QAA6BA,QAA7B,CARf,CADF,CAXgH;AAAA,CAA3G;;;;AAnBLH,EAAAA,I;AAEAD,EAAAA,U;AAEAM,EAAAA,O;AAEAC,EAAAA,Y;AAUAC,EAAAA,S","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/AppLauncher/app-launcher';\nimport { DropdownItem, DropdownItemProps } from '../Dropdown';\nimport { ApplicationLauncherContent } from './ApplicationLauncherContent';\n\nexport const ApplicationLauncherItemContext = React.createContext({ isExternal: false, icon: null });\n\nexport interface ApplicationLauncherItemProps {\n  /** Icon rendered before the text */\n  icon?: React.ReactNode;\n  /** If clicking on the item should open the page in a separate window */\n  isExternal?: boolean;\n  /** Tooltip to display when hovered over the item */\n  tooltip?: React.ReactNode;\n  /** Additional tooltip props forwarded to the Tooltip component */\n  tooltipProps?: any;\n  /** The component that will wrap the item.\n   * If you need to render a custom component, for example a react router Link component,\n   * then pass the component here. Example:\n   * <ApplicationLauncherItem key=\"router1\" component={\n   *   <Link to=\"/components/alert/\">\n   *     <ApplicationLauncherContent>Router link</ApplicationLauncherContent>\n   *   </Link>\n   * } />\n   */\n  component?: React.ReactNode;\n}\n\nexport const ApplicationLauncherItem: React.FunctionComponent<ApplicationLauncherItemProps & DropdownItemProps> = ({\n  className = '',\n  children,\n  icon = null,\n  isExternal = false,\n  href,\n  tooltip = null,\n  tooltipProps = null,\n  component = 'a',\n  ...props\n}: ApplicationLauncherItemProps & DropdownItemProps) => (\n  <ApplicationLauncherItemContext.Provider value={{ isExternal, icon }}>\n    <DropdownItem\n      component={component}\n      href={href || null}\n      className={css(isExternal && styles.modifiers.external, className)}\n      tooltip={tooltip}\n      tooltipProps={tooltipProps}\n      {...props}\n    >\n      {children && <ApplicationLauncherContent>{children}</ApplicationLauncherContent>}\n    </DropdownItem>\n  </ApplicationLauncherItemContext.Provider>\n);\n"],"file":"ApplicationLauncherItem.js"}