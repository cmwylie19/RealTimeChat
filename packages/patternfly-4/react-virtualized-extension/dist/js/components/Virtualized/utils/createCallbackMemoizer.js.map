{"version":3,"sources":["../../../../../src/components/Virtualized/utils/createCallbackMemoizer.ts"],"names":["createCallbackMemoizer","requireAllKeys","cachedIndices","callback","indices","keys","Object","allInitialized","every","key","value","Array","isArray","length","indexChanged","some","cachedValue","join"],"mappings":";;;;;;;AAAA;;;AAGe,SAASA,sBAAT,GAAuD;AAAA,MAAvBC,cAAuB,uEAAN,IAAM;AACpE,MAAIC,aAAa,GAAG,EAApB;AAEA,SAAO,gBAA2B;AAAA,QAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AAChC,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,OAAZ,CAAb;AACA,QAAMG,cAAc,GAClB,CAACN,cAAD,IACAI,IAAI,CAACG,KAAL,CAAW,UAACC,GAAD,EAAS;AAClB,UAAMC,KAAK,GAAGN,OAAO,CAACK,GAAD,CAArB;AACA,aAAOE,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBA,KAAK,CAACG,MAAN,GAAe,CAAtC,GAA0CH,KAAK,IAAI,CAA1D;AACD,KAHD,CAFF;AAMA,QAAMI,YAAY,GAChBT,IAAI,CAACQ,MAAL,KAAgBP,MAAM,CAACD,IAAP,CAAYH,aAAZ,EAA2BW,MAA3C,IACAR,IAAI,CAACU,IAAL,CAAU,UAACN,GAAD,EAAS;AACjB,UAAMO,WAAW,GAAGd,aAAa,CAACO,GAAD,CAAjC;AACA,UAAMC,KAAK,GAAGN,OAAO,CAACK,GAAD,CAArB;AAEA,aAAOE,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBM,WAAW,CAACC,IAAZ,CAAiB,GAAjB,MAA0BP,KAAK,CAACO,IAAN,CAAW,GAAX,CAAjD,GAAmED,WAAW,KAAKN,KAA1F;AACD,KALD,CAFF;AASAR,IAAAA,aAAa,GAAGE,OAAhB;;AAEA,QAAIG,cAAc,IAAIO,YAAtB,EAAoC;AAClCX,MAAAA,QAAQ,CAACC,OAAD,CAAR;AACD;AACF,GAtBD;AAuBD","sourcesContent":["/**\n * Helper utility that updates the specified callback whenever any of the specified indices have changed.\n */\nexport default function createCallbackMemoizer(requireAllKeys = true) {\n  let cachedIndices = {};\n\n  return ({ callback, indices }) => {\n    const keys = Object.keys(indices);\n    const allInitialized =\n      !requireAllKeys ||\n      keys.every((key) => {\n        const value = indices[key];\n        return Array.isArray(value) ? value.length > 0 : value >= 0;\n      });\n    const indexChanged =\n      keys.length !== Object.keys(cachedIndices).length ||\n      keys.some((key) => {\n        const cachedValue = cachedIndices[key];\n        const value = indices[key];\n\n        return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;\n      });\n\n    cachedIndices = indices;\n\n    if (allInitialized && indexChanged) {\n      callback(indices);\n    }\n  };\n}\n"],"file":"createCallbackMemoizer.js"}