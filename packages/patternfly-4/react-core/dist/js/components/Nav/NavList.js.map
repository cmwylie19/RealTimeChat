{"version":3,"sources":["../../../../src/components/Nav/NavList.tsx"],"names":["NavList","React","createRef","navList","current","updateScrollButtonState","context","container","showLeftScrollButton","firstChild","showRightScrollButton","lastChild","childrenArr","Array","from","children","firstElementInView","lastElementOutOfView","i","length","scrollLeft","scrollWidth","handleScrollButtons","lastElementInView","firstElementOutOfView","variant","props","isHorizontal","NavVariants","horizontal","tertiary","window","addEventListener","document","removeEventListener","className","ariaLeftScroll","ariaRightScroll","variantStyle","styles","simple","navSimpleList","navHorizontalList","navTertiaryList","navScrollButton","scrollRight","Component","NavContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { NavVariants } from './NavVariants';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport { AngleLeftIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\n\nexport interface NavListProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement> {\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Additional classes added to the list */\n  className?: string;\n  /** Indicates the list type. */\n  variant?: 'default' | 'simple' | 'horizontal' | 'tertiary';\n  /** aria-label for the left scroll button */\n  ariaLeftScroll?: string;\n  /** aria-label for the right scroll button */\n  ariaRightScroll?: string;\n}\n\nexport class NavList extends React.Component<NavListProps> {\n  static contextType = NavContext;\n\n  static defaultProps: NavListProps = {\n    variant: 'default',\n    children: null as React.ReactNode,\n    className: '',\n    ariaLeftScroll: 'Scroll left',\n    ariaRightScroll: 'Scroll right'\n  };\n\n  navList = React.createRef<HTMLUListElement>();\n\n  handleScrollButtons = () => {\n    if (this.navList.current) {\n      const { updateScrollButtonState } = this.context;\n      const container = this.navList.current;\n      // get first element and check if it is in view\n      const showLeftScrollButton = !isElementInView(container, container.firstChild as HTMLElement, false);\n\n      // get last element and check if it is in view\n      const showRightScrollButton = !isElementInView(container, container.lastChild as HTMLElement, false);\n\n      updateScrollButtonState({\n        showLeftScrollButton,\n        showRightScrollButton\n      });\n    }\n  }\n\n  scrollLeft = () => {\n    // find first Element that is fully in view on the left, then scroll to the element before it\n    if (this.navList.current) {\n      const container = this.navList.current;\n      const childrenArr = Array.from(container.children);\n      let firstElementInView: Element;\n      let lastElementOutOfView: Element;\n      for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          firstElementInView = childrenArr[i];\n          lastElementOutOfView = childrenArr[i - 1];\n        }\n      }\n      if (lastElementOutOfView) {\n        container.scrollLeft -= lastElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  }\n\n  scrollRight = () => {\n    // find last Element that is fully in view on the right, then scroll to the element after it\n    if (this.navList.current) {\n      const container = this.navList.current;\n      const childrenArr = Array.from(container.children);\n      let lastElementInView: Element;\n      let firstElementOutOfView: Element;\n      for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          lastElementInView = childrenArr[i];\n          firstElementOutOfView = childrenArr[i + 1];\n        }\n      }\n      if (firstElementOutOfView) {\n        container.scrollLeft += firstElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  }\n\n  componentDidMount() {\n    const { variant } = this.props;\n    const isHorizontal = variant === NavVariants.horizontal || variant === NavVariants.tertiary;\n    if (isHorizontal) {\n      window.addEventListener('resize', this.handleScrollButtons, false);\n      // call the handle resize function to check if scroll buttons should be shown\n      this.handleScrollButtons();\n    }\n  }\n\n  componentWillUnmount() {\n    const { variant } = this.props;\n    const isHorizontal = variant === NavVariants.horizontal || variant === NavVariants.tertiary;\n    if (isHorizontal) {\n      document.removeEventListener('resize', this.handleScrollButtons, false);\n    }\n  }\n\n  render() {\n    const { variant, children, className, ariaLeftScroll, ariaRightScroll, ...props } = this.props;\n    const variantStyle = {\n      [NavVariants.default]: styles.navList,\n      [NavVariants.simple]: styles.navSimpleList,\n      [NavVariants.horizontal]: styles.navHorizontalList,\n      [NavVariants.tertiary]: styles.navTertiaryList\n    };\n    const isHorizontal = variant === NavVariants.horizontal || variant === NavVariants.tertiary;\n\n    return (\n      <>\n        {isHorizontal && (\n          <button className={css(styles.navScrollButton)} aria-label={ariaLeftScroll} onClick={this.scrollLeft}>\n            <AngleLeftIcon />\n          </button>\n        )}\n        <ul ref={this.navList} className={css(variantStyle[variant], className)} {...props}>\n          {children}\n        </ul>\n        {isHorizontal && (\n          <button className={css(styles.navScrollButton)} aria-label={ariaRightScroll} onClick={this.scrollRight}>\n            <AngleRightIcon />\n          </button>\n        )}\n      </>\n    );\n  }\n}\n"],"file":"NavList.js"}