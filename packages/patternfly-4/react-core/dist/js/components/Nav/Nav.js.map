{"version":3,"sources":["../../../../src/components/Nav/Nav.tsx"],"names":["NavContext","React","createContext","Nav","showLeftScrollButton","showRightScrollButton","state","setState","event","groupId","itemId","to","preventDefault","onClick","props","onSelect","toggleValue","onToggle","isExpanded","ariaLabel","children","className","theme","childrenProps","expanded","updateScrollButtonState","styles","nav","modifiers","dark","start","end","variant","Component","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport { NavVariants } from './NavVariants';\n\nimport { Omit } from '../../helpers/typeUtils';\n\nexport type NavSelectClickHandler = (\n  e: React.FormEvent<HTMLInputElement>,\n  itemId: number | string,\n  groupId: number | string,\n  to: string\n) => void;\n\nexport interface NavProps extends Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, 'onSelect'> {\n  /** Anything that can be rendered inside of the nav */\n  children?: React.ReactNode;\n  /** Additional classes added to the container */\n  className?: string;\n  /** Callback for updating when item selection changes */\n  onSelect?: (selectedItem: {groupId: number | string; itemId: number | string; to: string, event: React.FormEvent<HTMLInputElement>}) => void;\n  /** Callback for when a list is expanded or collapsed */\n  onToggle?: (toggledItem: {groupId: number | string ; isExpanded: boolean; event: React.FormEvent<HTMLInputElement>}) => void;\n  /** Accessibility label */\n  'aria-label'?: string;\n  /** Indicates which theme color to use */\n  theme?: 'dark' | 'light'\n}\n\nexport const NavContext = React.createContext({});\n\nexport class Nav extends React.Component<NavProps> {\n  static defaultProps: NavProps = {\n    'aria-label': '',\n    \"children\": null,\n    \"className\": '',\n    \"onSelect\": () => undefined,\n    \"onToggle\": () => undefined,\n    \"theme\": 'light'\n  };\n\n  state = {\n    showLeftScrollButton: false,\n    showRightScrollButton: false\n  };\n\n  updateScrollButtonState = (state: { showLeftScrollButton: boolean, showRightScrollButton: boolean }) => {\n    const { showLeftScrollButton, showRightScrollButton } = state;\n    this.setState({\n      showLeftScrollButton,\n      showRightScrollButton\n    });\n  }\n\n  // Callback from NavItem\n  onSelect(\n    event: React.FormEvent<HTMLInputElement>,\n    groupId: number | string,\n    itemId: number | string,\n    to: string,\n    preventDefault: boolean,\n    onClick: NavSelectClickHandler\n  ) {\n    if (preventDefault) {\n      event.preventDefault();\n    }\n\n    this.props.onSelect({ groupId, itemId, event, to });\n\n    if (onClick) {\n      onClick(event, itemId, groupId, to);\n    }\n  }\n\n  // Callback from NavExpandable\n  onToggle(event: React.MouseEvent<HTMLInputElement>, groupId: number | string, toggleValue: boolean) {\n    this.props.onToggle({\n      event,\n      groupId,\n      isExpanded: toggleValue\n    });\n  }\n\n  render() {\n    const { 'aria-label': ariaLabel, children, className, onSelect, onToggle, theme, ...props } = this.props;\n    const { showLeftScrollButton, showRightScrollButton } = this.state;\n    const childrenProps: any = (children as any).props;\n\n    return (\n      <NavContext.Provider\n        value={{\n          onSelect: (\n            event: React.FormEvent<HTMLInputElement>,\n            groupId: number | string,\n            itemId: number | string,\n            to: string,\n            preventDefault: boolean,\n            onClick: (e: React.FormEvent<HTMLInputElement>, itemId: number | string, groupId: number | string, to: string) => void\n          ) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),\n          onToggle: (event: React.MouseEvent<HTMLInputElement>, groupId: number | string, expanded: boolean) => this.onToggle(event, groupId, expanded),\n          updateScrollButtonState: this.updateScrollButtonState\n        }}\n      >\n        <nav\n          className={css(styles.nav, theme === 'dark' && styles.modifiers.dark, showLeftScrollButton && styles.modifiers.start, showRightScrollButton && styles.modifiers.end, className)}\n          aria-label={\n            ariaLabel === ''\n              ? typeof childrenProps !== 'undefined' && childrenProps.variant === 'tertiary' ? 'Local' : 'Global'\n              : ariaLabel\n          }\n          {...props}\n        >\n          {children}\n        </nav>\n      </NavContext.Provider>\n    );\n  }\n}\n"],"file":"Nav.js"}