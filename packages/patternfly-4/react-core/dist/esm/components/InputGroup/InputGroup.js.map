{"version":3,"sources":["../../../../src/components/InputGroup/InputGroup.tsx"],"names":["React","styles","css","FormSelect","TextArea","TextInput","InputGroup","className","children","props","formCtrls","map","comp","toString","idItem","Children","toArray","find","child","includes","type","id","inputGroup","cloneElement"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,gEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,SAAT,QAA0B,cAA1B;AASA,OAAO,MAAMC,UAAoD,GAAG,UAI7C;AAAA,MAJ8C;AACnEC,IAAAA,SAAS,GAAG,EADuD;AAEnEC,IAAAA;AAFmE,GAI9C;AAAA,MADlBC,KACkB;;AACrB,QAAMC,SAAS,GAAG,CAACP,UAAD,EAAaC,QAAb,EAAuBC,SAAvB,EAAkCM,GAAlC,CAAuCC,IAAD,IAAUA,IAAI,CAACC,QAAL,EAAhD,CAAlB;AACA,QAAMC,MAAM,GAAGd,KAAK,CAACe,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,EAAiCS,IAAjC,CACZC,KAAD,IAAgB,CAACR,SAAS,CAACS,QAAV,CAAmBD,KAAK,CAACE,IAAN,CAAWP,QAAX,EAAnB,CAAD,IAA8CK,KAAK,CAACT,KAAN,CAAYY,EAD7D,CAAf;AAGA,SACE;AAAK,IAAA,SAAS,EAAEnB,GAAG,CAACD,MAAM,CAACqB,UAAR,EAAoBf,SAApB;AAAnB,KAAuDE,KAAvD,GACGK,MAAM,GACHd,KAAK,CAACe,QAAN,CAAeJ,GAAf,CAAmBH,QAAnB,EAA8BU,KAAD,IAC3BR,SAAS,CAACS,QAAV,CAAmBD,KAAK,CAACE,IAAN,CAAWP,QAAX,EAAnB,IACIb,KAAK,CAACuB,YAAN,CAAmBL,KAAnB,EAA0B;AAAE,wBAAoBJ,MAAM,CAACL,KAAP,CAAaY;AAAnC,GAA1B,CADJ,GAEIH,KAHN,CADG,GAMHV,QAPN,CADF;AAWD,CApBM;;AALLD,EAAAA,S;AAEAC,EAAAA,Q","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/InputGroup/input-group';\nimport { css } from '@patternfly/react-styles';\nimport { FormSelect } from '../FormSelect';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nexport interface InputGroupProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the input group. */\n  className?: string;\n  /** Content rendered inside the input group. */\n  children: React.ReactNode;\n}\n\nexport const InputGroup: React.FunctionComponent<InputGroupProps> = ({\n  className = '',\n  children,\n  ...props\n}: InputGroupProps) => {\n  const formCtrls = [FormSelect, TextArea, TextInput].map((comp) => comp.toString());\n  const idItem = React.Children.toArray(children).find(\n    (child: any) => !formCtrls.includes(child.type.toString()) && child.props.id\n  ) as React.ReactElement<{id: string}>;\n  return (\n    <div className={css(styles.inputGroup, className)} {...props}>\n      {idItem\n        ? React.Children.map(children, (child: any) =>\n            formCtrls.includes(child.type.toString())\n              ? React.cloneElement(child, { 'aria-describedby': idItem.props.id })\n              : child\n          )\n        : children}\n    </div>\n  );\n};\n"],"file":"InputGroup.js"}