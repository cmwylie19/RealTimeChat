{"version":3,"sources":["../../../../src/helpers/GenerateId/GenerateId.js"],"names":["currentId","propTypes","prefix","PropTypes","string","children","func","isRequired","GenerateId","props","id","React","Component"],"mappings":";;;;;;;AAiBA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,SAAS,GAAG,CAAhB;AAEA,IAAMC,SAAS,GAAG;AAChB;AACAC,EAAAA,MAAM,EAAEC,sBAAUC,MAFF;;AAGhB;AACAC,EAAAA,QAAQ,EAAEF,sBAAUG,IAAV,CAAeC;AAJT,CAAlB;;IAOMC,U;;;;;;;;;;;;;;;;;;mEAKI,MAAKC,KAAL,CAAWP,M,SAASF,SAAS,E;;;;;;;6BAE5B;AACP,aAAO,KAAKS,KAAL,CAAWJ,QAAX,CAAoB,KAAKK,EAAzB,CAAP;AACD;;;;EATsBC,kBAAMC,S;;gBAAzBJ,U,kBACkB;AACpBN,EAAAA,MAAM,EAAE;AADY,C;;gBADlBM,U,eAIeP,S;;eAQNO,U","sourcesContent":["/** This Component can be used to wrap a functional component in order to generate a random ID\n * Example of how to use this component\n *\n * const Component = ({id}) => (\n *  <GenerateId>{randomId => (\n *     <div id={id || randomId}>\n *       div with random ID\n *     </div>\n *   )}\n *  </GenerateId>\n *  );\n *\n * Component.propTypes = {\n *  id: PropTypes.string\n * }\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nlet currentId = 0;\n\nconst propTypes = {\n  /** String to prefix the random id with */\n  prefix: PropTypes.string,\n  /** Component to be rendered with the generated id */\n  children: PropTypes.func.isRequired\n};\n\nclass GenerateId extends React.Component {\n  static defaultProps = {\n    prefix: 'pf-random-id-'\n  };\n  static propTypes = propTypes;\n  id = `${this.props.prefix}${currentId++}`;\n\n  render() {\n    return this.props.children(this.id);\n  }\n}\n\nexport default GenerateId;\n"],"file":"GenerateId.js"}