{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggleCheckbox.tsx"],"names":["DropdownToggleCheckbox","checked","event","props","onChange","target","isChecked","undefined","className","isValid","isDisabled","ref","children","text","styles","dropdownToggleText","id","dropdownToggleCheck","calculateChecked","handleChange","React","Component"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBaA,sB;;;;;;;;;;;;;;;;;;mEASI,UAACC,OAAD,EAAmBC,KAAnB,EAAgE;AAC7E,YAAKC,KAAL,CAAWC,QAAX,CAAqBF,KAAK,CAACG,MAAP,CAAmCJ,OAAvD,EAAgEC,KAAhE;AACD,K;;uEAEkB,YAAM;AAAA,wBACQ,MAAKC,KADb;AAAA,UACfG,SADe,eACfA,SADe;AAAA,UACJL,OADI,eACJA,OADI;AAEvB,aAAOK,SAAS,KAAKC,SAAd,GAA0BD,SAA1B,GAAsCL,OAA7C;AACD,K;;;;;;;6BAEQ;AAAA,yBAC2F,KAAKE,KADhG;AAAA,UACCK,SADD,gBACCA,SADD;AAAA,UACYJ,QADZ,gBACYA,QADZ;AAAA,UACsBK,OADtB,gBACsBA,OADtB;AAAA,UAC+BC,UAD/B,gBAC+BA,UAD/B;AAAA,UAC2CJ,SAD3C,gBAC2CA,SAD3C;AAAA,UACsDK,GADtD,gBACsDA,GADtD;AAAA,UAC2DV,OAD3D,gBAC2DA,OAD3D;AAAA,UACoEW,QADpE,gBACoEA,QADpE;AAAA,UACiFT,KADjF;;AAEP,UAAMU,IAAI,GAAGD,QAAQ,IAAI;AACvB,QAAA,SAAS,EAAE,sBAAIE,qBAAOC,kBAAX,EAA+BP,SAA/B,CADY;AAEvB,uBAAY,MAFW;AAGvB,QAAA,EAAE,YAAKL,KAAK,CAACa,EAAX;AAHqB,SAKtBJ,QALsB,CAAzB;AAOA,aACE;AAAO,QAAA,SAAS,EAAE,sBAAIE,qBAAOG,mBAAX,EAAgCT,SAAhC,CAAlB;AAA8D,QAAA,OAAO,EAAEL,KAAK,CAACa;AAA7E,SACE,oBAAC,kBAAD,eACMb,KADN,EAEO,KAAKe,gBAAL,OAA4BX,SAA7B,IAA2C;AAAEH,QAAAA,QAAQ,EAAE,KAAKe;AAAjB,OAFjD;AAGE,QAAA,GAAG,EAAER,GAHP;AAIE,wBAAc,CAACF,OAJjB;AAKE,QAAA,UAAU,EAAEC,UALd;AAME,QAAA,SAAS,EAAE,KAAKQ,gBAAL;AANb,SADF,EASGL,IATH,CADF;AAaD;;;;EAxCyCO,KAAK,CAACC,S;;;;gBAArCrB,sB;AAnBXQ,EAAAA,S;AAEAC,EAAAA,O;AAEAC,EAAAA,U;AAEAJ,EAAAA,S;AAEAL,EAAAA,O;AAIAW,EAAAA,Q;AAEAI,EAAAA,E;AAEA,c;;;gBAGWhB,sB,kBAEW;AACpBQ,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,OAAO,EAAE,IAFW;AAGpBC,EAAAA,UAAU,EAAE,KAHQ;AAIpBN,EAAAA,QAAQ,EAAE;AAAA,WAAMG,SAAN;AAAA;AAJU,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { Checkbox } from '../Checkbox';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface DropdownToggleCheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'checked'> {\n  /** Additional classes added to the DropdownToggleCheckbox */\n  className?: string;\n  /** Flag to show if the checkbox selection is valid or invalid */\n  isValid?: boolean;\n  /** Flag to show if the checkbox is disabled */\n  isDisabled?: boolean;\n  /** Flag to show if the checkbox is checked */\n  isChecked?: boolean | null;\n  /** Alternate Flag to show if the checkbox is checked */\n  checked?: boolean | null;\n  /** A callback for when the checkbox selection changes */\n  onChange?(checked: boolean, event: React.FormEvent<HTMLInputElement>): void;\n  /** Element to be rendered inside the <span> */\n  children?: React.ReactNode;\n  /** Id of the checkbox */\n  id: string;\n  /** Aria-label of the checkbox */\n  'aria-label': string;\n}\n\nexport class DropdownToggleCheckbox extends React.Component<DropdownToggleCheckboxProps> {\n\n  static defaultProps = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    onChange: () => undefined as any\n  };\n\n  handleChange = (checked: boolean, event: React.FormEvent<HTMLInputElement>) => {\n    this.props.onChange((event.target as HTMLInputElement).checked, event);\n  }\n\n  calculateChecked = () => {\n    const { isChecked, checked } = this.props;\n    return isChecked !== undefined ? isChecked : checked;\n  }\n\n  render() {\n    const { className, onChange, isValid, isDisabled, isChecked, ref, checked, children, ...props } = this.props;\n    const text = children && <span\n      className={css(styles.dropdownToggleText, className)}\n      aria-hidden=\"true\"\n      id={`${props.id}-text`}\n    >\n      {children}\n    </span>;\n    return (\n      <label className={css(styles.dropdownToggleCheck, className)} htmlFor={props.id}>\n        <Checkbox\n          {...props}\n          {...(this.calculateChecked() !== undefined) && { onChange: this.handleChange }}\n          ref={ref as any}\n          aria-invalid={!isValid}\n          isDisabled={isDisabled}\n          isChecked={this.calculateChecked()}\n        />\n        {text}\n      </label>\n    );\n  }\n}\n"],"file":"DropdownToggleCheckbox.js"}