{"version":3,"sources":["../../../../src/components/ApplicationLauncher/ApplicationLauncher.tsx"],"names":["ApplicationLauncher","props","ariaLabel","isOpen","onToggle","toggleIcon","onSelect","isDisabled","className","isGrouped","dropdownItems","items","ref","menuClass","styles","appLauncherMenu","itemClass","appLauncherMenuItem","toggleClass","appLauncherToggle","baseClass","appLauncher","baseComponent","sectionClass","appLauncherGroup","sectionTitleClass","appLauncherGroupTitle","sectionComponent","disabledClass","modifiers","disabled","hoverClass","hover","separatorClass","appLauncherSeparator","length","React","Component","direction","position","DropdownDirection","down","DropdownPosition","left","_event","undefined","_value"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCaA,mB;;;;;;;;;;;;;6BAeF;AAAA,wBAcH,KAAKC,KAdF;AAAA,UAESC,SAFT,eAEL,YAFK;AAAA,UAGLC,MAHK,eAGLA,MAHK;AAAA,UAILC,QAJK,eAILA,QAJK;AAAA,UAKLC,UALK,eAKLA,UALK;AAAA,UAMLC,QANK,eAMLA,QANK;AAAA,UAOLC,UAPK,eAOLA,UAPK;AAAA,UAQLC,SARK,eAQLA,SARK;AAAA,UASLC,SATK,eASLA,SATK;AAAA,UAULC,aAVK,eAULA,aAVK;AAAA,UAWLC,KAXK,eAWLA,KAXK;AAAA,UAYLC,GAZK,eAYLA,GAZK;AAAA,UAaFX,KAbE;;AAeP,aACE,oBAAC,yBAAD,CAAiB,QAAjB;AAA0B,QAAA,KAAK,EAAE;AAC/BK,UAAAA,QAAQ,EAARA,QAD+B;AAE/BO,UAAAA,SAAS,EAAEC,wBAAOC,eAFa;AAG/BC,UAAAA,SAAS,EAAEF,wBAAOG,mBAHa;AAI/BC,UAAAA,WAAW,EAAEJ,wBAAOK,iBAJW;AAK/BC,UAAAA,SAAS,EAAEN,wBAAOO,WALa;AAM/BC,UAAAA,aAAa,EAAE,KANgB;AAO/BC,UAAAA,YAAY,EAAET,wBAAOU,gBAPU;AAQ/BC,UAAAA,iBAAiB,EAAEX,wBAAOY,qBARK;AAS/BC,UAAAA,gBAAgB,EAAE,SATa;AAU/BC,UAAAA,aAAa,EAAEd,wBAAOe,SAAP,CAAiBC,QAVD;AAW/BC,UAAAA,UAAU,EAAEjB,wBAAOe,SAAP,CAAiBG,KAXE;AAY/BC,UAAAA,cAAc,EAAEnB,wBAAOoB;AAZQ;AAAjC,SAcE,oBAAC,wCAAD,eACMjC,KADN;AAEE,QAAA,aAAa,EAAEU,KAAK,CAACwB,MAAN,GAAexB,KAAf,GAAuBD,aAFxC;AAGE,QAAA,MAAM,EAAEP,MAHV;AAIE,QAAA,SAAS,EAAEK,SAJb;AAKE,sBAAYN,SALd;AAME,QAAA,MAAM,EACJ,oBAAC,wBAAD;AACE,UAAA,aAAa,EAAE,IADjB;AAEE,UAAA,MAAM,EAAEC,MAFV;AAGE,UAAA,QAAQ,EAAEC,QAHZ;AAIE,UAAA,UAAU,EAAEG,UAJd;AAKE,wBAAYL;AALd,WAOGG,UAPH,CAPJ;AAiBE,QAAA,SAAS,EAAEI;AAjBb,SAdF,CADF;AAoCD;;;;EAlEsC2B,KAAK,CAACC,S;;;;gBAAlCrC,mB;AA9BTQ,EAAAA,S;AAEA8B,EAAAA,S;AAOA5B,EAAAA,a;AAEAC,EAAAA,K;AAEAJ,EAAAA,U;AAEAJ,EAAAA,M;AAEAoC,EAAAA,Q;AAEAjC,EAAAA,Q;AAEAF,EAAAA,Q;AAEA,c;AAEAK,EAAAA,S;AAEAJ,EAAAA,U;;;gBAGSL,mB,kBACW;AACpB,eAAa,EADO;AAEpB,gBAAc,KAFM;AAGpB,eAAawC,4BAAkBC,IAHX;AAIpB,mBAAiB,EAJG;AAKpB,WAAS,EALW;AAMpB,YAAU,KANU;AAOpB,cAAYC,2BAAiBC,IAPT;AAQpB,cAAY,kBAACC,MAAD;AAAA,WAAsBC,SAAtB;AAAA,GARQ;AASpB,cAAY,kBAACC,MAAD;AAAA,WAA0BD,SAA1B;AAAA,GATQ;AAUpB,gBAAc,sBAVM;AAWpB,eAAa,KAXO;AAYpB,gBAAc,oBAAC,kBAAD;AAZM,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/AppLauncher/app-launcher';\nimport { ThIcon } from '@patternfly/react-icons';\nimport { DropdownDirection, DropdownPosition, DropdownToggle, DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\n\nexport interface ApplicationLauncherProps extends React.HTMLProps<HTMLDivElement> {\n    /** Additional element css classes */\n    className?: string;\n    /** Display menu above or below dropdown toggle */\n    direction?: DropdownDirection;\n    /**\n     * @deprecated\n     * Use the items prop instead\n     *\n     * Array of DropdownItem nodes that will be rendered in the dropdown Menu list\n     */\n    dropdownItems?: React.ReactNode[];\n    /** Array of application launcher items */\n    items?: React.ReactNode[];\n    /** Render Application launcher toggle as disabled icon */\n    isDisabled?: boolean;\n    /** open bool */\n    isOpen?: boolean;\n    /** Indicates where menu will be alligned horizontally */\n    position?: DropdownPosition;\n    /** Function callback called when user selects item */\n    onSelect?: (event: any) => void;\n    /** Callback called when application launcher toggle is clicked */\n    onToggle?: (value: boolean) => void;\n    /** Adds accessible text to the button. Required for plain buttons */\n    'aria-label'?: string;\n    /** Flag to indicate if application launcher has groups */\n    isGrouped?: boolean;\n    /** Toggle Icon, optional to override the icon used for the toggle */\n    toggleIcon?: React.ReactNode;\n}\n\nexport class ApplicationLauncher extends React.Component<ApplicationLauncherProps> {\n  static defaultProps = {\n    \"className\": '',\n    \"isDisabled\": false,\n    \"direction\": DropdownDirection.down,\n    \"dropdownItems\": [] as React.ReactNode[],\n    \"items\": [] as React.ReactNode[],\n    \"isOpen\": false,\n    \"position\": DropdownPosition.left,\n    \"onSelect\": (_event: any): any => undefined,\n    \"onToggle\": (_value: boolean): any => undefined,\n    'aria-label': 'Application launcher',\n    \"isGrouped\": false,\n    \"toggleIcon\": <ThIcon />\n  };\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      isOpen,\n      onToggle,\n      toggleIcon,\n      onSelect,\n      isDisabled,\n      className,\n      isGrouped,\n      dropdownItems,\n      items,\n      ref,\n      ...props\n    } = this.props;\n    return (\n      <DropdownContext.Provider value={{\n        onSelect,\n        menuClass: styles.appLauncherMenu,\n        itemClass: styles.appLauncherMenuItem,\n        toggleClass: styles.appLauncherToggle,\n        baseClass: styles.appLauncher,\n        baseComponent: 'nav',\n        sectionClass: styles.appLauncherGroup,\n        sectionTitleClass: styles.appLauncherGroupTitle,\n        sectionComponent: 'section',\n        disabledClass: styles.modifiers.disabled,\n        hoverClass: styles.modifiers.hover,\n        separatorClass: styles.appLauncherSeparator\n      }}>\n        <DropdownWithContext\n          {...props}\n          dropdownItems={items.length ? items : dropdownItems}\n          isOpen={isOpen}\n          className={className}\n          aria-label={ariaLabel}\n          toggle={\n            <DropdownToggle\n              iconComponent={null}\n              isOpen={isOpen}\n              onToggle={onToggle}\n              isDisabled={isDisabled}\n              aria-label={ariaLabel}\n            >\n              {toggleIcon}\n            </DropdownToggle>\n          }\n          isGrouped={isGrouped}\n        />\n      </DropdownContext.Provider>\n    );\n  }\n}\n"],"file":"ApplicationLauncher.js"}