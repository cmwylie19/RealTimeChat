{"version":3,"sources":["../../../../src/components/InlineEdit/editableTableBody.js"],"names":["React","TableContext","TableBody","isRowExpanded","PropTypes","TableEditConfirmation","showIdWarnings","propTypes","editConfig","shape","editConfirmationType","oneOf","Object","values","onEditCellClicked","func","onEditConfirmed","onEditCanceled","isRequired","onRowClick","defaultProps","undefined","resolveCascadeEditability","rows","isRowExpandedIndexes","Set","map","row","idx","filter","parent","isEditing","has","isEditableTogetherWithParent","forEach","isChildEditing","isParentEditing","lastVisibleRow","pop","parentRow","isLastVisibleParent","onRow","event","rowProps","computedData","target","cell","closest","cellNumber","parseInt","getAttribute","hasCellNumber","Number","isNaN","idElement","elementId","contains","columnIndex","setTimeout","Body","BodyComponent","props","isTableEditing","some","mappedRows","any","array","editableTableBody","InlineEditBody","consumedProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TableContext, TableBody, isRowExpanded } from '@patternfly/react-table';\n\nimport PropTypes from 'prop-types';\nimport { TableEditConfirmation } from './constants';\nimport { showIdWarnings } from './utils/utils';\n\nconst propTypes = {\n  ...TableBody.propTypes,\n  editConfig: PropTypes.shape({\n    editConfirmationType: PropTypes.oneOf(Object.values(TableEditConfirmation)),\n    onEditCellClicked: PropTypes.func,\n    onEditConfirmed: PropTypes.func,\n    onEditCanceled: PropTypes.func\n  }).isRequired,\n  /** Function that is fired when user clicks on a row if not editing.  */\n  onRowClick: PropTypes.func\n};\n\nconst defaultProps = {\n  ...TableBody.defaultProps,\n  editConfig: null,\n  onRowClick: () => undefined\n};\n\nconst resolveCascadeEditability = rows => {\n  const isRowExpandedIndexes = new Set(\n    rows.map((row, idx) => (isRowExpanded(row, rows) ? idx : null)).filter(row => row !== null)\n  );\n\n  // flag parents and their children which are edited together\n  rows\n    .filter(\n      (row, idx) =>\n        row.parent !== undefined &&\n        row.isEditing &&\n        isRowExpandedIndexes.has(idx) &&\n        row.isEditableTogetherWithParent &&\n        rows[row.parent].isEditing\n    )\n    .forEach(row => {\n      rows[row.parent].isChildEditing = true;\n      row.isParentEditing = true;\n    });\n\n  const lastVisibleRow = rows.filter((row, idx) => !row.parent || isRowExpandedIndexes.has(idx)).pop();\n\n  // flag last parent row if there are only descendants under it\n  if (lastVisibleRow && lastVisibleRow.isParentEditing) {\n    let parentRow = lastVisibleRow;\n    while (parentRow.parent !== undefined && parentRow.isEditableTogetherWithParent) {\n      parentRow = rows[parentRow.parent];\n    }\n    parentRow.isLastVisibleParent = true;\n  }\n};\n\nconst onRow = (event, row, rowProps, computedData, { onRowClick, editConfig }) => {\n  const { target } = event;\n  const cell = target.closest('[data-key]');\n  const cellNumber = parseInt(cell && cell.getAttribute('data-key'), 10);\n  const hasCellNumber = !Number.isNaN(cellNumber);\n\n  let onEditCellClicked;\n\n  if (hasCellNumber && editConfig && typeof editConfig.onEditCellClicked === 'function') {\n    // resolve closest (e.g. for dropdowns) usable id of a clicked element inside a cell\n    const idElement = target.closest('[id]');\n    const elementId = idElement && cell.contains(idElement) ? idElement.getAttribute('id') || null : null;\n\n    if (!elementId) {\n      showIdWarnings(row, target);\n    }\n\n    onEditCellClicked = () => {\n      editConfig.onEditCellClicked(event, row, {\n        ...rowProps,\n        columnIndex: cellNumber,\n        elementId\n      });\n    };\n  }\n\n  // give priority to fire onChange/onBlur callbacks\n\n  setTimeout(() => {\n    if (!row.isEditing) {\n      onRowClick(event, row, rowProps, computedData);\n      if (onEditCellClicked) {\n        // edit cell after rerender\n        setTimeout(onEditCellClicked, 0);\n      }\n    } else if (onEditCellClicked) {\n      onEditCellClicked();\n    }\n  }, 0);\n};\n\nconst Body = ({ BodyComponent, rows, editConfig, onRowClick, ...props }) => {\n  const isTableEditing = rows.some(row => row.isEditing);\n  const mappedRows = rows.map(row => ({\n    ...row,\n    editConfig,\n    isTableEditing\n  }));\n\n  resolveCascadeEditability(mappedRows);\n\n  return (\n    <BodyComponent\n      {...props}\n      rows={mappedRows}\n      onRowClick={(event, row, rowProps, computedData) =>\n        onRow(event, row, rowProps, computedData, { onRowClick, editConfig })\n      }\n    />\n  );\n};\n\nBody.propTypes = {\n  BodyComponent: PropTypes.any.isRequired,\n  rows: PropTypes.array,\n  editConfig: PropTypes.any,\n  onRowClick: PropTypes.func\n};\n\nBody.defaultProps = {\n  rows: [],\n  editConfig: null,\n  onRowClick: () => undefined\n};\n\nconst editableTableBody = BodyComponent => {\n  const InlineEditBody = ({ editConfig, onRowClick, ...props }) => (\n    <TableContext.Consumer>\n      {({ rows, ...consumedProps }) => (\n        <Body\n          {...consumedProps}\n          rows={rows}\n          {...props}\n          editConfig={editConfig}\n          onRowClick={onRowClick}\n          BodyComponent={BodyComponent}\n        />\n      )}\n    </TableContext.Consumer>\n  );\n\n  InlineEditBody.propTypes = propTypes;\n  InlineEditBody.defaultProps = defaultProps;\n\n  return InlineEditBody;\n};\n\nexport default editableTableBody;\n"],"file":"editableTableBody.js"}