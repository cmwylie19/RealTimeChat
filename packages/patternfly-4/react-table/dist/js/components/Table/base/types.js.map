{"version":3,"sources":["../../../../../src/components/Table/base/types.tsx"],"names":["TableDefaults","renderers","table","header","wrapper","row","cell","body"],"mappings":";;;;;;;AAAA;;;;;;AASA;AAQA;AAWA;AASA;AACO,IAAMA,aAAa,GAAG;AAC3BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,OADE;AAETC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,OADH;AAENC,MAAAA,GAAG,EAAE,IAFC;AAGNC,MAAAA,IAAI,EAAE;AAHA,KAFC;AAOTC,IAAAA,IAAI,EAAE;AACJH,MAAAA,OAAO,EAAE,OADL;AAEJC,MAAAA,GAAG,EAAE,IAFD;AAGJC,MAAAA,IAAI,EAAE;AAHF;AAPG;AADgB,CAAtB,C,CAgBP","sourcesContent":["/**\n * types.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport * as React from 'react';\n\n// Cell Type\nexport interface CellType {\n  property?: number | string;\n  transforms?: transformsType;\n  formatters?: formattersType;\n  props?: object;\n}\n\n// Columns Types\nexport type ColumnsType = ColumnType[] | any[];\nexport interface ColumnType { property?: string; cell?: CellType; props?: object; header?: HeaderType; }\nexport interface HeaderType {\n  label?: string;\n  transforms?: transformsType;\n  formatters?: formattersType;\n  props?: object;\n  property?: string;\n}\n\n// Rows Types\nexport type RowsType = RowType[] | [][];\nexport type RowKeyType = Function | string;\nexport interface RowType {\n  header?: HeaderType;\n  cell?: CellType;\n  [key: string]: any;\n}\n\n// Table Defaults\nexport const TableDefaults = {\n  renderers: {\n    table: 'table',\n    header: {\n      wrapper: 'thead',\n      row: 'tr',\n      cell: 'th'\n    },\n    body: {\n      wrapper: 'tbody',\n      row: 'tr',\n      cell: 'td'\n    }\n  }\n};\n\n// Formatters Types\nexport type formatterValueType = object | string | React.ElementType;\nexport interface ExtraParamsType {rowData?: RowType; column?: ColumnType; columnIndex?: number; property?: string; rowIndex?: number; rowKey?: RowKeyType; }\nexport type formatterType = (value: string | object, extra: ExtraParamsType) => formatterValueType;\nexport type formattersType = formatterType[];\n\n// Transforms Types\nexport type transformType = (value: string | object, extra: ExtraParamsType) => object;\nexport type transformsType = transformType[];\n\n// Renderers Types\nexport type createElementType = string | React.ComponentClass<any, any> | React.FunctionComponent<any>;\nexport type rendererType = string | Function | React.ComponentClass<any, any> | React.FunctionComponent<any> | React.Component<any, {}, any>;\nexport interface RendererType {\n  wrapper?: rendererType;\n  row?: rendererType;\n  cell?: rendererType;\n}\nexport interface RenderersTypes {\n  columns: ColumnsType;\n  renderers?: {\n    table?: string,\n    header?: RendererType,\n    body?: RendererType\n  };\n  components?: {\n    table?: string,\n    header?: {\n      wrapper?: rendererType,\n      row?: rendererType,\n      cell?: rendererType,\n    },\n    body?: {\n      wrapper?: rendererType,\n      row?: rendererType,\n      cell?: rendererType\n    }\n  };\n}\n"],"file":"types.js"}