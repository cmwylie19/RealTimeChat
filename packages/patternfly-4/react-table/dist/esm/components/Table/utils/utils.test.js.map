{"version":3,"sources":["../../../../../src/components/Table/utils/utils.test.tsx"],"names":["isRowExpanded","buildExpandableRows","assertExpanded","rows","expandedRowIndexes","forEach","expandedRowIndex","expandedRow","expect","toBeTruthy","assertNotExpanded","notExpandedRowIndexes","toBeFalsy","describe","test","toBeUndefined","isOpen","cells","title","props","parent","compoundParent","toEqual","collapsedRow","collapsedRowParent4"],"mappings":"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","sourcesContent":["import { isRowExpanded } from './utils';\nimport { buildExpandableRows } from '../../../test-helpers/data-helpers';\nimport { IRow } from '../Table';\n\nconst assertExpanded = (rows: IRow[], expandedRowIndexes: number[]) => {\n  expandedRowIndexes.forEach((expandedRowIndex: number) => {\n    const expandedRow = rows[expandedRowIndex];\n    expect(isRowExpanded(expandedRow, rows)).toBeTruthy();\n  });\n};\n\nconst assertNotExpanded = (rows: IRow[], notExpandedRowIndexes: number[]) => {\n  notExpandedRowIndexes.forEach((expandedRowIndex: number ) => {\n    const expandedRow = rows[expandedRowIndex];\n    expect(isRowExpanded(expandedRow, rows)).toBeFalsy();\n  });\n};\n\ndescribe('Util functions', () => {\n  describe('isRowExpanded', () => {\n    test('basic', () => {\n      const rows = buildExpandableRows({ 6: 5 }, [5]);\n      assertExpanded(rows, [6]);\n      assertNotExpanded(rows, [0, 1, 5, 9]);\n    });\n    test('two open, one closed', () => {\n      const rows = buildExpandableRows({ 1: 0, 3: 2, 5: 4 }, [0, 2]);\n      assertExpanded(rows, [1, 3]);\n      assertNotExpanded(rows, [0, 2, 4, 5, 8]);\n    });\n    test('all closed', () => {\n      const rows = buildExpandableRows({ 1: 0, 3: 2, 5: 4 });\n      assertNotExpanded(rows, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    });\n    test('parent-child chain', () => {\n      const rows = buildExpandableRows(\n        {\n          1: 0,\n          2: 1,\n          3: 2,\n          4: 3,\n          5: 4,\n          6: 5,\n          7: 6\n        },\n        [0, 1, 2, 3, 4, 5, 6]\n      );\n      assertExpanded(rows, [1, 2, 3, 4, 5, 6, 7]);\n      assertNotExpanded(rows, [0, 8, 9]);\n    });\n    test('two parent-child chains', () => {\n      const rows = buildExpandableRows(\n        {\n          1: 0,\n          3: 1,\n          4: 2,\n          5: 3,\n          6: 4,\n          7: 6\n        },\n        [0, 1, 2, 3, 4, 5, 6]\n      );\n      assertExpanded(rows, [1, 3, 4, 5, 6, 7]);\n      assertNotExpanded(rows, [0, 2, 8, 9]);\n    });\n    test('not in order', () => {\n      const rows = buildExpandableRows(\n        {\n          0: 1,\n          1: 4\n        },\n        [4, 1]\n      );\n      assertExpanded(rows, [0, 1]);\n      assertNotExpanded(rows, [2, 3, 4, 5]);\n    });\n    test('child parent circle', () => {\n      const rows = buildExpandableRows({ 1: 0, 0: 1 }, [0, 1]);\n      assertNotExpanded(rows, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    });\n    test('undefined without a parent', () => {\n      const rows = buildExpandableRows();\n      expect(isRowExpanded(rows[1], rows)).toBeUndefined();\n    });\n    test('compound parent', () => {\n      const rows = [\n        {\n          isOpen: true,\n          cells: [\n            '1',\n            {\n              title: '2',\n              props: {\n                isOpen: true\n              }\n            },\n            {\n              title: '3',\n              props: {\n                isOpen: false\n              }\n            },\n            {\n              title: '4',\n              props: {\n                isOpen: false\n              }\n            },\n            '5',\n            '6'\n          ]\n        },\n        {\n          parent: 0,\n          compoundParent: 1,\n          cells: [\n            {\n              title: 'parent 0 compound child - 1'\n            }\n          ]\n        },\n        {\n          parent: 0,\n          compoundParent: 2,\n          cells: [\n            {\n              title: 'parent 0 compound child - 2'\n            }\n          ]\n        },\n        {\n          parent: 0,\n          compoundParent: 3,\n          cells: [\n            {\n              title: 'parent 0 compound child - 3'\n            }\n          ]\n        },\n        {\n          isOpen: false,\n          cells: [\n            '1',\n            {\n              title: '2',\n              props: {\n                isOpen: false\n              }\n            },\n            {\n              title: '3',\n              props: {\n                isOpen: false\n              }\n            },\n            {\n              title: '4',\n              props: {\n                isOpen: false\n              }\n            },\n            '5',\n            '6'\n          ]\n        },\n        {\n          parent: 4,\n          compoundParent: 1,\n          cells: [\n            {\n              title: 'parent 4 compound child - 1'\n            }\n          ]\n        },\n        {\n          parent: 4,\n          compoundParent: 2,\n          cells: [\n            {\n              title: 'parent 4 compound child - 2'\n            }\n          ]\n        },\n        {\n          parent: 4,\n          compoundParent: 3,\n          cells: [\n            {\n              title: 'parent 4 compound child - 3'\n            }\n          ]\n        }\n      ];\n\n      // test an expanded compound child to be expanded\n      const expandedRow = {\n        parent: 0,\n        compoundParent: 1,\n        cells: [\n          {\n            title: 'parent 0 compound child - 1'\n          }\n        ]\n      };\n      expect(isRowExpanded(expandedRow, rows)).toEqual(true);\n\n      // test a collapsed compound child to be false\n      const collapsedRow = {\n        parent: 0,\n        compoundParent: 2,\n        cells: [\n          {\n            title: 'parent 0 compound child - 2'\n          }\n        ]\n      };\n      expect(isRowExpanded(collapsedRow, rows)).toEqual(false);\n\n      // test a row with different parent that is collapsed\n      const collapsedRowParent4 = {\n        parent: 4,\n        compoundParent: 1,\n        cells: [\n          {\n            title: 'parent 4 compound child - 1'\n          }\n        ]\n      };\n      expect(isRowExpanded(collapsedRowParent4, rows)).toEqual(false);\n    });\n  });\n});\n"],"file":"utils.test.js"}