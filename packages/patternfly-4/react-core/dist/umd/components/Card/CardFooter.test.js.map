{"version":3,"sources":["../../../esm/components/Card/CardFooter.test.js"],"names":["test","view","React","createElement","CardFooter","expect","toMatchSnapshot","className","prop","testId","toBe","component","type","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGAA,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAChD,UAAMC,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBC,sBAApB,EAAgC,IAAhC,CAAR,CAAb;AACAC,IAAAA,MAAM,CAACJ,IAAD,CAAN,CAAaK,eAAb;AACD,GAHG,CAAJ;AAIAN,EAAAA,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,UAAMC,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBC,sBAApB,EAAgC;AACnDG,MAAAA,SAAS,EAAE;AADwC,KAAhC,CAAR,CAAb;AAGAF,IAAAA,MAAM,CAACJ,IAAI,CAACO,IAAL,CAAU,WAAV,CAAD,CAAN,CAA+BF,eAA/B;AACD,GALG,CAAJ;AAMAN,EAAAA,IAAI,CAAC,4CAAD,EAA+C,MAAM;AACvD,UAAMS,MAAM,GAAG,aAAf;AACA,UAAMR,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBC,sBAApB,EAAgC;AACnD,qBAAeK;AADoC,KAAhC,CAAR,CAAb;AAGAJ,IAAAA,MAAM,CAACJ,IAAI,CAACO,IAAL,CAAU,aAAV,CAAD,CAAN,CAAiCE,IAAjC,CAAsCD,MAAtC;AACD,GANG,CAAJ;AAOAT,EAAAA,IAAI,CAAC,6CAAD,EAAgD,MAAM;AACxD,UAAMW,SAAS,GAAG,KAAlB;AACA,UAAMV,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBC,sBAApB,EAAgC;AACnDO,MAAAA,SAAS,EAAEA;AADwC,KAAhC,CAAR,CAAb;AAGAN,IAAAA,MAAM,CAACJ,IAAI,CAACW,IAAL,EAAD,CAAN,CAAoBF,IAApB,CAAyBC,SAAzB;AACD,GANG,CAAJ;AAOAX,EAAAA,IAAI,CAAC,sDAAD,EAAyD,MAAM;AACjE,UAAMa,SAAS,GAAG,MAAMX,gBAAMC,aAAN,CAAoB,KAApB,EAA2B,IAA3B,EAAiC,UAAjC,CAAxB;;AAEA,UAAMF,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBC,sBAApB,EAAgC;AACnDO,MAAAA,SAAS,EAAEE;AADwC,KAAhC,CAAR,CAAb;AAGAR,IAAAA,MAAM,CAACJ,IAAI,CAACW,IAAL,EAAD,CAAN,CAAoBF,IAApB,CAAyBG,SAAzB;AACD,GAPG,CAAJ","sourcesContent":["import React from 'react';\nimport { CardFooter } from './CardFooter';\nimport { shallow } from 'enzyme';\ntest('renders with PatternFly Core styles', () => {\n  const view = shallow(React.createElement(CardFooter, null));\n  expect(view).toMatchSnapshot();\n});\ntest('className is added to the root element', () => {\n  const view = shallow(React.createElement(CardFooter, {\n    className: \"extra-class\"\n  }));\n  expect(view.prop('className')).toMatchSnapshot();\n});\ntest('extra props are spread to the root element', () => {\n  const testId = 'card-footer';\n  const view = shallow(React.createElement(CardFooter, {\n    \"data-testid\": testId\n  }));\n  expect(view.prop('data-testid')).toBe(testId);\n});\ntest('allows passing in a string as the component', () => {\n  const component = 'div';\n  const view = shallow(React.createElement(CardFooter, {\n    component: component\n  }));\n  expect(view.type()).toBe(component);\n});\ntest('allows passing in a React Component as the component', () => {\n  const Component = () => React.createElement(\"div\", null, \"im a div\");\n\n  const view = shallow(React.createElement(CardFooter, {\n    component: Component\n  }));\n  expect(view.type()).toBe(Component);\n});\n//# sourceMappingURL=CardFooter.test.js.map"],"file":"CardFooter.test.js"}