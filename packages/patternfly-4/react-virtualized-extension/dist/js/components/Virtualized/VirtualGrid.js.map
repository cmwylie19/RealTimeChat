{"version":3,"sources":["../../../../src/components/Virtualized/VirtualGrid.ts"],"names":["DEFAULT_SCROLLING_RESET_TIME_INTERVAL","SCROLL_POSITION_CHANGE_REASONS","OBSERVED","REQUESTED","renderNull","VirtualGrid","props","_disablePointerEventsTimeoutId","setState","isScrolling","needToResetStyleCache","onSectionRendered","_onVirtualGridRenderedMemoizer","callback","indices","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","_renderedColumnStartIndex","columnStopIndex","_renderedColumnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","_renderedRowStartIndex","rowStopIndex","_renderedRowStopIndex","ref","_scrollingContainer","event","target","handleScrollEvent","columnSizeAndPositionManager","ScalingCellSizeAndPositionManager","cellCount","columnCount","cellSizeGetter","params","_wrapSizeGetter","columnWidth","estimatedCellSize","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","state","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","prevScrollLeft","scrollLeft","prevScrollTop","scrollTop","scrollbarSize","scrollbarSizeMeasured","scrollDirectionHorizontal","SCROLL_DIRECTION_FORWARD","scrollDirectionVertical","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","alignment","scrollToAlignment","columnIndex","rowIndex","offsetProps","getTotalSize","scrollLeftParam","scrollTopParam","_debounceScrollEnded","autoHeight","autoWidth","height","width","totalRowsHeight","totalColumnsWidth","Math","min","max","SCROLL_DIRECTION_BACKWARD","newState","_invokeOnScrollMemoizer","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","getSizeAndPositionOfCell","resetCell","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_styleCache","_cellCache","forceUpdate","undefined","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","getScrollbarSize","_handleInvalidatedVirtualGridSize","prevState","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_invokeOnVirtualGridRenderedHelper","_maybeCallOnScrollbarPresenceChange","prevProps","columnOrRowCountJustIncreasedFromZero","sizeJustIncreasedFromZero","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToIndex","size","updateScrollIndexCallback","autoContainerWidth","className","containerProps","containerRole","containerStyle","id","noContentRenderer","role","style","tabIndex","scrollContainerComponent","innerScrollContainerComponent","_isScrolling","gridStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","length","scrollContainerProps","_setScrollingContainerRef","_onScroll","innerScrollContainer","innerScrollContainerProps","key","maxWidth","maxHeight","overflow","pointerEvents","React","createElement","cellRenderer","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","getVisibleCellRange","containerSize","offset","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","start","stop","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","_debounceScrollEndedCallback","recomputeVirtualGridSize","_onScrollMemoizer","onScroll","clientHeight","clientWidth","scrollHeight","scrollWidth","Object","hasOwnProperty","call","Boolean","onScrollbarPresenceChange","horizontal","vertical","_getScrollLeftForScrollToColumnStateUpdate","_getScrollTopForScrollToRowStateUpdate","nextProps","assign","configure","maybeStateA","maybeStateB","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","updateScrollOffsetForScrollToIndex","estimatedColumnSize","estimatedRowSize","value","finalColumn","targetIndex","scrollBarSize","getUpdatedOffsetForIndex","align","currentOffset","calculatedScrollLeft","finalRow","calculatedScrollTop","PureComponent","defaultCellRangeRenderer","defaultOverscanIndicesGetter"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;AAIO,IAAMA,qCAAqC,GAAG,GAA9C;AAEP;;;;;;AAIA,IAAMC,8BAA8B,GAAG;AACrCC,EAAAA,QAAQ,EAAE,UAD2B;AAErCC,EAAAA,SAAS,EAAE;AAF0B,CAAvC;;AAKA,IAAMC,UAA6B,GAAG,SAAhCA,UAAgC;AAAA,SAAM,IAAN;AAAA,CAAtC;;AAiNA;;;;IAIMC,W;;;;;AAgCJ;AAiCA,uBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,qFAAMA,KAAN;;AADwB,qFAhCO,yCAgCP;;AAAA,wEA/BN,wCAAuB,KAAvB,CA+BM;;AAAA,qFA7BO,IA6BP;;AAAA,kFA5BI,IA4BJ;;AAAA,+EA3BC,KA2BD;;AAAA,8EA1BA,KA0BA;;AAAA,+EAxBC,CAwBD;;AAAA,6EAvBD,CAuBC;;AAAA,gFAtBE,KAsBF;;AAAA,gFAbE,CAaF;;AAAA,+EAZC,CAYD;;AAAA,6EAXD,CAWC;;AAAA,4EAVF,CAUE;;AAAA,kEAHA,EAGA;;AAAA,iEAFF,EAEE;;AAAA,mFAs1BK,YAAM;AACnC,YAAKC,8BAAL,GAAsC,IAAtC,CADmC,CAEnC;;AACA,YAAKC,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE,KADD;AAEZC,QAAAA,qBAAqB,EAAE;AAFX,OAAd;AAID,KA71ByB;;AAAA,yFA03BW,YAAM;AAAA,UACjCC,iBADiC,GACX,MAAKL,KADM,CACjCK,iBADiC;;AAGzC,YAAKC,8BAAL,CAAoC;AAClCC,QAAAA,QAAQ,EAAEF,iBADwB;AAElCG,QAAAA,OAAO,EAAE;AACPC,UAAAA,wBAAwB,EAAE,MAAKC,iBADxB;AAEPC,UAAAA,uBAAuB,EAAE,MAAKC,gBAFvB;AAGPC,UAAAA,gBAAgB,EAAE,MAAKC,yBAHhB;AAIPC,UAAAA,eAAe,EAAE,MAAKC,wBAJf;AAKPC,UAAAA,qBAAqB,EAAE,MAAKC,cALrB;AAMPC,UAAAA,oBAAoB,EAAE,MAAKC,aANpB;AAOPC,UAAAA,aAAa,EAAE,MAAKC,sBAPb;AAQPC,UAAAA,YAAY,EAAE,MAAKC;AARZ;AAFyB,OAApC;AAaD,KA14ByB;;AAAA,gFA+7BE,UAACC,GAAD,EAAkB;AAC5C,YAAKC,mBAAL,GAA2BD,GAA3B;AACD,KAj8ByB;;AAAA,gEAunCd,UAACE,KAAD,EAAkB;AAC5B;AACA;AACA;AACA,UAAIA,KAAK,CAACC,MAAN,KAAiB,MAAKF,mBAA1B,EAA+C;AAC7C,cAAKG,iBAAL,CAAuBF,KAAK,CAACC,MAA7B;AACD;AACF,KA9nCyB;;AAExB,QAAME,4BAA4B,GAAG,IAAIC,6CAAJ,CAAsC;AACzEC,MAAAA,SAAS,EAAEhC,KAAK,CAACiC,WADwD;AAEzEC,MAAAA,cAAc,EAAE,wBAACC,MAAD;AAAA,eAAYpC,WAAW,CAACqC,eAAZ,CAA4BpC,KAAK,CAACqC,WAAlC,EAA+CF,MAA/C,CAAZ;AAAA,OAFyD;AAGzEG,MAAAA,iBAAiB,EAAEvC,WAAW,CAACwC,uBAAZ,CAAoCvC,KAApC;AAHsD,KAAtC,CAArC;AAKA,QAAMwC,yBAAyB,GAAG,IAAIT,6CAAJ,CAAsC;AACtEC,MAAAA,SAAS,EAAEhC,KAAK,CAACyC,QADqD;AAEtEP,MAAAA,cAAc,EAAE,wBAACC,MAAD;AAAA,eAAYpC,WAAW,CAACqC,eAAZ,CAA4BpC,KAAK,CAAC0C,SAAlC,EAA6CP,MAA7C,CAAZ;AAAA,OAFsD;AAGtEG,MAAAA,iBAAiB,EAAEvC,WAAW,CAAC4C,oBAAZ,CAAiC3C,KAAjC;AAHmD,KAAtC,CAAlC;AAMA,UAAK4C,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AACbf,QAAAA,4BAA4B,EAA5BA,4BADa;AAEbU,QAAAA,yBAAyB,EAAzBA,yBAFa;AAIbM,QAAAA,eAAe,EAAE9C,KAAK,CAACqC,WAJV;AAKbU,QAAAA,aAAa,EAAE/C,KAAK,CAAC0C,SALR;AAMbM,QAAAA,eAAe,EAAEhD,KAAK,CAACiC,WANV;AAObgB,QAAAA,YAAY,EAAEjD,KAAK,CAACyC,QAPP;AAQbS,QAAAA,eAAe,EAAElD,KAAK,CAACG,WAAN,KAAsB,IAR1B;AASbgD,QAAAA,kBAAkB,EAAEnD,KAAK,CAACoD,cATb;AAUbC,QAAAA,eAAe,EAAErD,KAAK,CAACsD,WAVV;AAWbC,QAAAA,cAAc,EAAEvD,KAAK,CAACwD,UAXT;AAYbC,QAAAA,aAAa,EAAEzD,KAAK,CAAC0D,SAZR;AAcbC,QAAAA,aAAa,EAAE,CAdF;AAebC,QAAAA,qBAAqB,EAAE;AAfV,OADJ;AAkBXzD,MAAAA,WAAW,EAAE,KAlBF;AAmBX0D,MAAAA,yBAAyB,EAAEC,sDAnBhB;AAoBXC,MAAAA,uBAAuB,EAAED,sDApBd;AAqBXN,MAAAA,UAAU,EAAExD,KAAK,CAACwD,UAAN,IAAoB,CArBrB;AAsBXE,MAAAA,SAAS,EAAE1D,KAAK,CAAC0D,SAAN,IAAmB,CAtBnB;AAuBXM,MAAAA,0BAA0B,EAAE,IAvBjB;AAyBX5D,MAAAA,qBAAqB,EAAE;AAzBZ,KAAb;;AA4BA,QAAIJ,KAAK,CAACsD,WAAN,GAAoB,CAAxB,EAA2B;AACzB,YAAKW,iBAAL,GAAyB,MAAKC,uBAAL,CAA6BlE,KAA7B,EAAoC,MAAK4C,KAAzC,CAAzB;AACD;;AACD,QAAI5C,KAAK,CAACoD,cAAN,GAAuB,CAA3B,EAA8B;AAC5B,YAAKe,kBAAL,GAA0B,MAAKC,wBAAL,CAA8BpE,KAA9B,EAAqC,MAAK4C,KAA1C,CAA1B;AACD;;AA9CuB;AA+CzB;AAED;;;;;;;uCAWQ;AAAA,qFAAJ,EAAI;AAAA,gCAPNyB,SAOM;AAAA,UAPNA,SAOM,+BAPM,KAAKrE,KAAL,CAAWsE,iBAOjB;AAAA,kCANNC,WAMM;AAAA,UANNA,WAMM,iCANQ,KAAKvE,KAAL,CAAWoD,cAMnB;AAAA,+BALNoB,QAKM;AAAA,UALNA,QAKM,8BALK,KAAKxE,KAAL,CAAWsD,WAKhB;;AACN,UAAMmB,WAAW,qBACZ,KAAKzE,KADO;AAEfsE,QAAAA,iBAAiB,EAAED,SAFJ;AAGfjB,QAAAA,cAAc,EAAEmB,WAHD;AAIfjB,QAAAA,WAAW,EAAEkB;AAJE,QAAjB;;AAOA,aAAO;AACLhB,QAAAA,UAAU,EAAE,KAAKY,wBAAL,CAA8BK,WAA9B,CADP;AAELf,QAAAA,SAAS,EAAE,KAAKQ,uBAAL,CAA6BO,WAA7B;AAFN,OAAP;AAID;AAED;;;;;;yCAGqB;AACnB,aAAO,KAAK7B,KAAL,CAAWC,aAAX,CAAyBL,yBAAzB,CAAmDkC,YAAnD,EAAP;AACD;AAED;;;;;;2CAGuB;AACrB,aAAO,KAAK9B,KAAL,CAAWC,aAAX,CAAyBf,4BAAzB,CAAsD4C,YAAtD,EAAP;AACD;AAED;;;;;;;6CAIsG;AAAA,mCAAlFlB,UAAkF;AAAA,UAAtEmB,eAAsE,iCAApD,CAAoD;AAAA,kCAAjDjB,SAAiD;AAAA,UAAtCkB,cAAsC,gCAArB,CAAqB;;AACpG;AACA;AACA,UAAIA,cAAc,GAAG,CAArB,EAAwB;AACtB;AACD,OALmG,CAOpG;;;AACA,WAAKC,oBAAL;;AARoG,wBAUnD,KAAK7E,KAV8C;AAAA,UAU5F8E,UAV4F,eAU5FA,UAV4F;AAAA,UAUhFC,SAVgF,eAUhFA,SAVgF;AAAA,UAUrEC,MAVqE,eAUrEA,MAVqE;AAAA,UAU7DC,KAV6D,eAU7DA,KAV6D;AAAA,UAW5FpC,aAX4F,GAW1E,KAAKD,KAXqE,CAW5FC,aAX4F,EAapG;AACA;AACA;AACA;;AAhBoG,UAiB5Fc,aAjB4F,GAiB1Ed,aAjB0E,CAiB5Fc,aAjB4F;AAkBpG,UAAMuB,eAAe,GAAGrC,aAAa,CAACL,yBAAd,CAAwCkC,YAAxC,EAAxB;AACA,UAAMS,iBAAiB,GAAGtC,aAAa,CAACf,4BAAd,CAA2C4C,YAA3C,EAA1B;AACA,UAAMlB,UAAU,GAAG4B,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYH,iBAAiB,GAAGF,KAApB,GAA4BtB,aAAxC,CAAT,EAAiEgB,eAAjE,CAAnB;AACA,UAAMjB,SAAS,GAAG0B,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYJ,eAAe,GAAGF,MAAlB,GAA2BrB,aAAvC,CAAT,EAAgEiB,cAAhE,CAAlB,CArBoG,CAuBpG;AACA;AACA;AACA;;AACA,UAAI,KAAKhC,KAAL,CAAWY,UAAX,KAA0BA,UAA1B,IAAwC,KAAKZ,KAAL,CAAWc,SAAX,KAAyBA,SAArE,EAAgF;AAC9E;AACA;AACA,YAAMG,yBAAyB,GAC7BL,UAAU,KAAK,KAAKZ,KAAL,CAAWY,UAA1B,GACIA,UAAU,GAAG,KAAKZ,KAAL,CAAWY,UAAxB,GACEM,sDADF,GAEEyB,uDAHN,GAII,KAAK3C,KAAL,CAAWiB,yBALjB;AAMA,YAAME,uBAAuB,GAC3BL,SAAS,KAAK,KAAKd,KAAL,CAAWc,SAAzB,GACIA,SAAS,GAAG,KAAKd,KAAL,CAAWc,SAAvB,GACEI,sDADF,GAEEyB,uDAHN,GAII,KAAK3C,KAAL,CAAWmB,uBALjB;AAOA,YAAMyB,QAAe,GAAG;AACtBrF,UAAAA,WAAW,EAAE,IADS;AAEtB0D,UAAAA,yBAAyB,EAAzBA,yBAFsB;AAGtBE,UAAAA,uBAAuB,EAAvBA,uBAHsB;AAItBC,UAAAA,0BAA0B,EAAErE,8BAA8B,CAACC;AAJrC,SAAxB;;AAOA,YAAI,CAACkF,UAAL,EAAiB;AACfU,UAAAA,QAAQ,CAAC9B,SAAT,GAAqBA,SAArB;AACD;;AAED,YAAI,CAACqB,SAAL,EAAgB;AACdS,UAAAA,QAAQ,CAAChC,UAAT,GAAsBA,UAAtB;AACD;;AAEDgC,QAAAA,QAAQ,CAACpF,qBAAT,GAAiC,KAAjC;AACA,aAAKF,QAAL,CAAcsF,QAAd;AACD;;AAED,WAAKC,uBAAL,CAA6B;AAC3BjC,QAAAA,UAAU,EAAVA,UAD2B;AAE3BE,QAAAA,SAAS,EAATA,SAF2B;AAG3ByB,QAAAA,iBAAiB,EAAjBA,iBAH2B;AAI3BD,QAAAA,eAAe,EAAfA;AAJ2B,OAA7B;AAMD;AAED;;;;;;AAMA;;;;yDACuE;AAAA,UAAvCX,WAAuC,SAAvCA,WAAuC;AAAA,UAA1BC,QAA0B,SAA1BA,QAA0B;AACrE,WAAKkB,8BAAL,GACE,OAAO,KAAKA,8BAAZ,KAA+C,QAA/C,GACIN,IAAI,CAACC,GAAL,CAAS,KAAKK,8BAAd,EAA8CnB,WAA9C,CADJ,GAEIA,WAHN;AAIA,WAAKoB,2BAAL,GACE,OAAO,KAAKA,2BAAZ,KAA4C,QAA5C,GACIP,IAAI,CAACC,GAAL,CAAS,KAAKM,2BAAd,EAA2CnB,QAA3C,CADJ,GAEIA,QAHN;AAID;AAED;;;;;;;;sCAKkB;AAAA,yBACkB,KAAKxE,KADvB;AAAA,UACRiC,WADQ,gBACRA,WADQ;AAAA,UACKQ,QADL,gBACKA,QADL;AAAA,UAERI,aAFQ,GAEU,KAAKD,KAFf,CAERC,aAFQ;AAGhBA,MAAAA,aAAa,CAACf,4BAAd,CAA2C8D,wBAA3C,CAAoE3D,WAAW,GAAG,CAAlF;AACAY,MAAAA,aAAa,CAACL,yBAAd,CAAwCoD,wBAAxC,CAAiEnD,QAAQ,GAAG,CAA5E;AACD;AAED;;;;;;;;+CAKiE;AAAA,sFAAJ,EAAI;AAAA,oCAAtC8B,WAAsC;AAAA,UAAtCA,WAAsC,kCAAxB,CAAwB;AAAA,iCAArBC,QAAqB;AAAA,UAArBA,QAAqB,+BAAV,CAAU;;AAAA,yBACvB,KAAKxE,KADkB;AAAA,UACvDoD,cADuD,gBACvDA,cADuD;AAAA,UACvCE,WADuC,gBACvCA,WADuC;AAAA,UAEvDT,aAFuD,GAErC,KAAKD,KAFgC,CAEvDC,aAFuD;AAI/DA,MAAAA,aAAa,CAACf,4BAAd,CAA2C+D,SAA3C,CAAqDtB,WAArD;AACA1B,MAAAA,aAAa,CAACL,yBAAd,CAAwCqD,SAAxC,CAAkDrB,QAAlD,EAL+D,CAO/D;AACA;AACA;;AACA,WAAKsB,wBAAL,GACE1C,cAAc,IAAI,CAAlB,KACC,KAAKR,KAAL,CAAWiB,yBAAX,KAAyCC,sDAAzC,GACGS,WAAW,IAAInB,cADlB,GAEGmB,WAAW,IAAInB,cAHnB,CADF;AAKA,WAAK2C,uBAAL,GACEzC,WAAW,IAAI,CAAf,KACC,KAAKV,KAAL,CAAWmB,uBAAX,KAAuCD,sDAAvC,GACGU,QAAQ,IAAIlB,WADf,GAEGkB,QAAQ,IAAIlB,WAHhB,CADF,CAf+D,CAqB/D;AACA;;AACA,WAAK0C,WAAL,GAAmB,EAAnB;AACA,WAAKC,UAAL,GAAkB,EAAlB;AAEA,WAAKC,WAAL;AACD;AAED;;;;;;wCAGsD;AAAA,UAAvC3B,WAAuC,SAAvCA,WAAuC;AAAA,UAA1BC,QAA0B,SAA1BA,QAA0B;AAAA,UAC5CvC,WAD4C,GAC5B,KAAKjC,KADuB,CAC5CiC,WAD4C;AAAA,UAG5CjC,KAH4C,GAGlC,IAHkC,CAG5CA,KAH4C,EAKpD;AACA;;AACA,UAAIiC,WAAW,GAAG,CAAd,IAAmBsC,WAAW,KAAK4B,SAAvC,EAAkD;AAChD,aAAKC,kCAAL,mBACKpG,KADL;AAEEoD,UAAAA,cAAc,EAAEmB;AAFlB;AAID;;AAED,UAAIC,QAAQ,KAAK2B,SAAjB,EAA4B;AAC1B,aAAKE,8BAAL,mBACKrG,KADL;AAEEsD,UAAAA,WAAW,EAAEkB;AAFf;AAID;AACF;;;wCAEmB;AAAA,yBAC8E,KAAKxE,KADnF;AAAA,UACVsG,gBADU,gBACVA,gBADU;AAAA,UACQtB,MADR,gBACQA,MADR;AAAA,UACgBxB,UADhB,gBACgBA,UADhB;AAAA,UAC4BJ,cAD5B,gBAC4BA,cAD5B;AAAA,UAC4CM,SAD5C,gBAC4CA,SAD5C;AAAA,UACuDJ,WADvD,gBACuDA,WADvD;AAAA,UACoE2B,KADpE,gBACoEA,KADpE;AAAA,UAGVpC,aAHU,GAGQ,KAAKD,KAHb,CAGVC,aAHU,EAKlB;;AACA,WAAKoB,iBAAL,GAAyB,CAAzB;AACA,WAAKE,kBAAL,GAA0B,CAA1B,CAPkB,CASlB;AACA;;AACA,WAAKoC,iCAAL,GAXkB,CAalB;AACA;;;AACA,UAAI,CAAC1D,aAAa,CAACe,qBAAnB,EAA0C;AACxC,aAAK1D,QAAL,CAAc,UAACsG,SAAD,EAAe;AAC3B,cAAMC,WAAW,qBAAQD,SAAR;AAAmBpG,YAAAA,qBAAqB,EAAE;AAA1C,YAAjB;;AACAqG,UAAAA,WAAW,CAAC5D,aAAZ,CAA0Bc,aAA1B,GAA0C2C,gBAAgB,EAA1D;AACAG,UAAAA,WAAW,CAAC5D,aAAZ,CAA0Be,qBAA1B,GAAkD,IAAlD;AACA,iBAAO6C,WAAP;AACD,SALD;AAMD;;AAED,UAAK,OAAOjD,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,IAAI,CAAjD,IAAwD,OAAOE,SAAP,KAAqB,QAArB,IAAiCA,SAAS,IAAI,CAA1G,EAA8G;AAC5G,YAAM+C,WAAW,GAAG1G,WAAW,CAAC2G,+BAAZ,CAA4C;AAC9DF,UAAAA,SAAS,EAAE,KAAK5D,KAD8C;AAE9DY,UAAAA,UAAU,EAAVA,UAF8D;AAG9DE,UAAAA,SAAS,EAATA;AAH8D,SAA5C,CAApB;;AAKA,YAAI+C,WAAJ,EAAiB;AACfA,UAAAA,WAAW,CAACrG,qBAAZ,GAAoC,KAApC;AACA,eAAKF,QAAL,CAAcuG,WAAd;AACD;AACF,OAlCiB,CAoClB;;;AACA,UAAI,KAAK/E,mBAAT,EAA8B;AAC5B;AACA;AACA,YAAI,KAAKA,mBAAL,CAAyB8B,UAAzB,KAAwC,KAAKZ,KAAL,CAAWY,UAAvD,EAAmE;AACjE,eAAK9B,mBAAL,CAAyB8B,UAAzB,GAAsC,KAAKZ,KAAL,CAAWY,UAAjD;AACD;;AACD,YAAI,KAAK9B,mBAAL,CAAyBgC,SAAzB,KAAuC,KAAKd,KAAL,CAAWc,SAAtD,EAAiE;AAC/D,eAAKhC,mBAAL,CAAyBgC,SAAzB,GAAqC,KAAKd,KAAL,CAAWc,SAAhD;AACD;AACF,OA9CiB,CAgDlB;AACA;;;AACA,UAAMiD,oBAAoB,GAAG3B,MAAM,GAAG,CAAT,IAAcC,KAAK,GAAG,CAAnD;;AACA,UAAI7B,cAAc,IAAI,CAAlB,IAAuBuD,oBAA3B,EAAiD;AAC/C,aAAKP,kCAAL;AACD;;AACD,UAAI9C,WAAW,IAAI,CAAf,IAAoBqD,oBAAxB,EAA8C;AAC5C,aAAKN,8BAAL;AACD,OAxDiB,CA0DlB;;;AACA,WAAKO,kCAAL,GA3DkB,CA6DlB;;;AACA,WAAKnB,uBAAL,CAA6B;AAC3BjC,QAAAA,UAAU,EAAEA,UAAU,IAAI,CADC;AAE3BE,QAAAA,SAAS,EAAEA,SAAS,IAAI,CAFG;AAG3ByB,QAAAA,iBAAiB,EAAEtC,aAAa,CAACf,4BAAd,CAA2C4C,YAA3C,EAHQ;AAI3BQ,QAAAA,eAAe,EAAErC,aAAa,CAACL,yBAAd,CAAwCkC,YAAxC;AAJU,OAA7B;;AAOA,WAAKmC,mCAAL;AACD;AAED;;;;;;;;uCAKmBC,S,EAAkBN,S,EAAkB;AAAA;;AAAA,yBAWjD,KAAKxG,KAX4C;AAAA,UAEnD8E,UAFmD,gBAEnDA,UAFmD;AAAA,UAGnDC,SAHmD,gBAGnDA,SAHmD;AAAA,UAInD9C,WAJmD,gBAInDA,WAJmD;AAAA,UAKnD+C,MALmD,gBAKnDA,MALmD;AAAA,UAMnDvC,QANmD,gBAMnDA,QANmD;AAAA,UAOnD6B,iBAPmD,gBAOnDA,iBAPmD;AAAA,UAQnDlB,cARmD,gBAQnDA,cARmD;AAAA,UASnDE,WATmD,gBASnDA,WATmD;AAAA,UAUnD2B,KAVmD,gBAUnDA,KAVmD;AAAA,wBAYwB,KAAKrC,KAZ7B;AAAA,UAY7CY,UAZ6C,eAY7CA,UAZ6C;AAAA,UAYjCQ,0BAZiC,eAYjCA,0BAZiC;AAAA,UAYLN,SAZK,eAYLA,SAZK;AAAA,UAYMb,aAZN,eAYMA,aAZN,EAarD;AACA;;AACA,WAAK0D,iCAAL,GAfqD,CAiBrD;AACA;AACA;;;AACA,UAAMQ,qCAAqC,GACxC9E,WAAW,GAAG,CAAd,IAAmB6E,SAAS,CAAC7E,WAAV,KAA0B,CAA9C,IAAqDQ,QAAQ,GAAG,CAAX,IAAgBqE,SAAS,CAACrE,QAAV,KAAuB,CAD9F,CApBqD,CAuBrD;AACA;AACA;AACA;AACA;;AACA,UAAIuB,0BAA0B,KAAKrE,8BAA8B,CAACE,SAAlE,EAA6E;AAC3E;AACA;AACA,YACE,CAACkF,SAAD,IACAvB,UAAU,IAAI,CADd,KAECA,UAAU,KAAK,KAAK9B,mBAAL,CAAyB8B,UAAxC,IAAsDuD,qCAFvD,CADF,EAIE;AACA,eAAKrF,mBAAL,CAAyB8B,UAAzB,GAAsCA,UAAtC;AACD;;AACD,YACE,CAACsB,UAAD,IACApB,SAAS,IAAI,CADb,KAECA,SAAS,KAAK,KAAKhC,mBAAL,CAAyBgC,SAAvC,IAAoDqD,qCAFrD,CADF,EAIE;AACA,eAAKrF,mBAAL,CAAyBgC,SAAzB,GAAqCA,SAArC;AACD;AACF,OA7CoD,CA+CrD;AACA;AACA;;;AACA,UAAMsD,yBAAyB,GAAG,CAACF,SAAS,CAAC7B,KAAV,KAAoB,CAApB,IAAyB6B,SAAS,CAAC9B,MAAV,KAAqB,CAA/C,KAAsDA,MAAM,GAAG,CAAT,IAAcC,KAAK,GAAG,CAA9G,CAlDqD,CAoDrD;AACA;;AACA,UAAI,KAAKa,wBAAT,EAAmC;AACjC,aAAKA,wBAAL,GAAgC,KAAhC;;AACA,aAAKM,kCAAL,CAAwC,KAAKpG,KAA7C;AACD,OAHD,MAGO;AACL,iDAAwB;AACtBiH,UAAAA,0BAA0B,EAAEpE,aAAa,CAACf,4BADpB;AAEtBoF,UAAAA,kBAAkB,EAAEJ,SAAS,CAAC7E,WAFR;AAGtBkF,UAAAA,gBAAgB,EAAEL,SAAS,CAACzE,WAHN;AAItB+E,UAAAA,yBAAyB,EAAEN,SAAS,CAACxC,iBAJf;AAKtB+C,UAAAA,qBAAqB,EAAEP,SAAS,CAAC1D,cALX;AAMtBkE,UAAAA,YAAY,EAAER,SAAS,CAAC7B,KANF;AAOtBsC,UAAAA,YAAY,EAAE/D,UAPQ;AAQtBc,UAAAA,iBAAiB,EAAjBA,iBARsB;AAStBkD,UAAAA,aAAa,EAAEpE,cATO;AAUtBqE,UAAAA,IAAI,EAAExC,KAVgB;AAWtB+B,UAAAA,yBAAyB,EAAzBA,yBAXsB;AAYtBU,UAAAA,yBAAyB,EAAE;AAAA,mBAAM,MAAI,CAACtB,kCAAL,CAAwC,MAAI,CAACpG,KAA7C,CAAN;AAAA;AAZL,SAAxB;AAcD;;AAED,UAAI,KAAK+F,uBAAT,EAAkC;AAChC,aAAKA,uBAAL,GAA+B,KAA/B;;AACA,aAAKM,8BAAL,CAAoC,KAAKrG,KAAzC;AACD,OAHD,MAGO;AACL,iDAAwB;AACtBiH,UAAAA,0BAA0B,EAAEpE,aAAa,CAACL,yBADpB;AAEtB0E,UAAAA,kBAAkB,EAAEJ,SAAS,CAACrE,QAFR;AAGtB0E,UAAAA,gBAAgB,EAAEL,SAAS,CAACpE,SAHN;AAItB0E,UAAAA,yBAAyB,EAAEN,SAAS,CAACxC,iBAJf;AAKtB+C,UAAAA,qBAAqB,EAAEP,SAAS,CAACxD,WALX;AAMtBgE,UAAAA,YAAY,EAAER,SAAS,CAAC9B,MANF;AAOtBuC,UAAAA,YAAY,EAAE7D,SAPQ;AAQtBY,UAAAA,iBAAiB,EAAjBA,iBARsB;AAStBkD,UAAAA,aAAa,EAAElE,WATO;AAUtBmE,UAAAA,IAAI,EAAEzC,MAVgB;AAWtBgC,UAAAA,yBAAyB,EAAzBA,yBAXsB;AAYtBU,UAAAA,yBAAyB,EAAE;AAAA,mBAAM,MAAI,CAACrB,8BAAL,CAAoC,MAAI,CAACrG,KAAzC,CAAN;AAAA;AAZL,SAAxB;AAcD,OA5FoD,CA8FrD;;;AACA,WAAK4G,kCAAL,GA/FqD,CAiGrD;;;AACA,UAAIpD,UAAU,KAAKgD,SAAS,CAAChD,UAAzB,IAAuCE,SAAS,KAAK8C,SAAS,CAAC9C,SAAnE,EAA8E;AAC5E,YAAMwB,eAAe,GAAGrC,aAAa,CAACL,yBAAd,CAAwCkC,YAAxC,EAAxB;AACA,YAAMS,iBAAiB,GAAGtC,aAAa,CAACf,4BAAd,CAA2C4C,YAA3C,EAA1B;;AAEA,aAAKe,uBAAL,CAA6B;AAC3BjC,UAAAA,UAAU,EAAVA,UAD2B;AAE3BE,UAAAA,SAAS,EAATA,SAF2B;AAG3ByB,UAAAA,iBAAiB,EAAjBA,iBAH2B;AAI3BD,UAAAA,eAAe,EAAfA;AAJ2B,SAA7B;AAMD;;AAED,WAAK2B,mCAAL;AACD;;;2CAEsB;AACrB,UAAI,KAAK5G,8BAAT,EAAyC;AACvC,6DAAuB,KAAKA,8BAA5B;AACD;AACF;AAED;;;;;;;;;6BAyHS;AAAA,yBAkBH,KAAKD,KAlBF;AAAA,UAEL2H,kBAFK,gBAELA,kBAFK;AAAA,UAGL7C,UAHK,gBAGLA,UAHK;AAAA,UAILC,SAJK,gBAILA,SAJK;AAAA,UAKL6C,SALK,gBAKLA,SALK;AAAA,UAMLC,cANK,gBAMLA,cANK;AAAA,UAOLC,aAPK,gBAOLA,aAPK;AAAA,UAQLC,cARK,gBAQLA,cARK;AAAA,UASL/C,MATK,gBASLA,MATK;AAAA,UAULgD,EAVK,gBAULA,EAVK;AAAA,UAWLC,iBAXK,gBAWLA,iBAXK;AAAA,UAYLC,IAZK,gBAYLA,IAZK;AAAA,UAaLC,KAbK,gBAaLA,KAbK;AAAA,UAcLC,QAdK,gBAcLA,QAdK;AAAA,UAeLnD,KAfK,gBAeLA,KAfK;AAAA,UAgBLoD,wBAhBK,gBAgBLA,wBAhBK;AAAA,UAiBLC,6BAjBK,gBAiBLA,6BAjBK;AAAA,yBAmB0C,KAAK1F,KAnB/C;AAAA,UAmBCC,aAnBD,gBAmBCA,aAnBD;AAAA,UAmBgBzC,qBAnBhB,gBAmBgBA,qBAnBhB;;AAqBP,UAAMD,WAAW,GAAG,KAAKoI,YAAL,EAApB;;AAEA,UAAMC,SAUL,GAAG;AACFC,QAAAA,SAAS,EAAE,YADT;AAEFC,QAAAA,SAAS,EAAE,KAFT;AAGF1D,QAAAA,MAAM,EAAEF,UAAU,GAAG,MAAH,GAAYE,MAH5B;AAIF2D,QAAAA,QAAQ,EAAE,UAJR;AAKF1D,QAAAA,KAAK,EAAEF,SAAS,GAAG,MAAH,GAAYE,KAL1B;AAMF2D,QAAAA,uBAAuB,EAAE,OANvB;AAOFC,QAAAA,UAAU,EAAE;AAPV,OAVJ;;AAoBA,UAAIzI,qBAAJ,EAA2B;AACzB,aAAK4F,WAAL,GAAmB,EAAnB;AACD,OA7CM,CA+CP;AACA;;;AACA,UAAI,CAAC,KAAKpD,KAAL,CAAWzC,WAAhB,EAA6B;AAC3B,aAAK2I,gBAAL;AACD,OAnDM,CAqDP;;;AACA,WAAKC,0BAAL,CAAgC,KAAK/I,KAArC,EAA4C,KAAK4C,KAAjD;;AAEA,UAAMuC,iBAAiB,GAAGtC,aAAa,CAACf,4BAAd,CAA2C4C,YAA3C,EAA1B;AACA,UAAMQ,eAAe,GAAGrC,aAAa,CAACL,yBAAd,CAAwCkC,YAAxC,EAAxB,CAzDO,CA2DP;AACA;AACA;;AACA,UAAMsE,qBAAqB,GAAG9D,eAAe,GAAGF,MAAlB,GAA2BnC,aAAa,CAACc,aAAzC,GAAyD,CAAvF;AACA,UAAMsF,uBAAuB,GAAG9D,iBAAiB,GAAGF,KAApB,GAA4BpC,aAAa,CAACc,aAA1C,GAA0D,CAA1F;;AAEA,UACEsF,uBAAuB,KAAK,KAAKC,wBAAjC,IACAF,qBAAqB,KAAK,KAAKG,sBAFjC,EAGE;AACA,aAAKD,wBAAL,GAAgCD,uBAAhC;AACA,aAAKE,sBAAL,GAA8BH,qBAA9B;AACA,aAAKI,yBAAL,GAAiC,IAAjC;AACD,OAxEM,CA0EP;AACA;AACA;AACA;AACA;;;AACAZ,MAAAA,SAAS,CAACa,SAAV,GAAsBlE,iBAAiB,GAAG6D,qBAApB,IAA6C/D,KAA7C,GAAqD,QAArD,GAAgE,MAAtF;AACAuD,MAAAA,SAAS,CAACc,SAAV,GAAsBpE,eAAe,GAAG+D,uBAAlB,IAA6CjE,MAA7C,GAAsD,QAAtD,GAAiE,MAAvF;AAEA,UAAMuE,iBAAiB,GAAG,KAAKC,kBAA/B;AAEA,UAAMC,qBAAqB,GAAGF,iBAAiB,CAACG,MAAlB,KAA6B,CAA7B,IAAkC1E,MAAM,GAAG,CAA3C,IAAgDC,KAAK,GAAG,CAAtF;;AAEA,UAAM0E,oBAAoB,qBACrB9B,cADqB;AAExB,eAAO,KAAK+B,yBAFY;AAGxB,sBAAc,KAAK5J,KAAL,CAAW,YAAX,CAHU;AAIxB,yBAAiB,KAAKA,KAAL,CAAW,eAAX,CAJO;AAKxB,qBAAa,sBAAK,+BAAL,EAAsC4H,SAAtC,CALW;AAMxBI,QAAAA,EAAE,EAAFA,EANwB;AAOxB,oBAAY,KAAK6B,SAPO;AAQxB3B,QAAAA,IAAI,EAAJA,IARwB;AASxB,mCACKM,SADL,MAEKL,KAFL,CATwB;AAaxBC,QAAAA,QAAQ,EAARA;AAbwB,QAA1B;;AAgBA,UAAI0B,oBAAoB,GAAG,IAA3B;;AACA,UAAIP,iBAAiB,CAACG,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,YAAMK,yBAAyB,GAAG;AAChCnC,UAAAA,SAAS,EAAE,qDADqB;AAEhCoC,UAAAA,GAAG,EAAE,qDAF2B;AAGhC9B,UAAAA,IAAI,EAAEJ,aAH0B;AAIhCK,UAAAA,KAAK;AACHlD,YAAAA,KAAK,EAAE0C,kBAAkB,GAAG,MAAH,GAAYxC,iBADlC;AAEHH,YAAAA,MAAM,EAAEE,eAFL;AAGH+E,YAAAA,QAAQ,EAAE9E,iBAHP;AAIH+E,YAAAA,SAAS,EAAEhF,eAJR;AAKHiF,YAAAA,QAAQ,EAAE,QALP;AAMHC,YAAAA,aAAa,EAAEjK,WAAW,GAAG,MAAH,GAAY,EANnC;AAOHwI,YAAAA,QAAQ,EAAE;AAPP,aAQAZ,cARA;AAJ2B,SAAlC;AAeA+B,QAAAA,oBAAoB,GAAGO,KAAK,CAACC,aAAN,CACrBhC,6BADqB,EAErByB,yBAFqB,EAGrBR,iBAHqB,CAAvB;AAKD;;AACD,aAAOc,KAAK,CAACC,aAAN,CAAoBjC,wBAApB,EAA8CsB,oBAA9C,EAAoE,CACzEG,oBADyE,EAEzEL,qBAAqB,IAAIxB,iBAAiB,EAF+B,CAApE,CAAP;AAID;AAED;;;;iDAEiF;AAAA,UAAtDjI,KAAsD,uEAAvC,KAAKA,KAAkC;AAAA,UAA3B4C,KAA2B,uEAAZ,KAAKA,KAAO;AAAA,UAE7E2H,YAF6E,GAa3EvK,KAb2E,CAE7EuK,YAF6E;AAAA,UAG7EC,iBAH6E,GAa3ExK,KAb2E,CAG7EwK,iBAH6E;AAAA,UAI7EvI,WAJ6E,GAa3EjC,KAb2E,CAI7EiC,WAJ6E;AAAA,UAK7EwI,wBAL6E,GAa3EzK,KAb2E,CAK7EyK,wBAL6E;AAAA,UAM7EzF,MAN6E,GAa3EhF,KAb2E,CAM7EgF,MAN6E;AAAA,UAO7E0F,mBAP6E,GAa3E1K,KAb2E,CAO7E0K,mBAP6E;AAAA,UAQ7EC,qBAR6E,GAa3E3K,KAb2E,CAQ7E2K,qBAR6E;AAAA,UAS7EC,gBAT6E,GAa3E5K,KAb2E,CAS7E4K,gBAT6E;AAAA,UAU7EnI,QAV6E,GAa3EzC,KAb2E,CAU7EyC,QAV6E;AAAA,UAW7EwC,KAX6E,GAa3EjF,KAb2E,CAW7EiF,KAX6E;AAAA,UAY7E4F,iBAZ6E,GAa3E7K,KAb2E,CAY7E6K,iBAZ6E;AAAA,UAevEhH,yBAfuE,GAeDjB,KAfC,CAevEiB,yBAfuE;AAAA,UAe5CE,uBAf4C,GAeDnB,KAfC,CAe5CmB,uBAf4C;AAAA,UAenBlB,aAfmB,GAeDD,KAfC,CAenBC,aAfmB;AAiB/E,UAAMa,SAAS,GAAG,KAAKO,iBAAL,GAAyB,CAAzB,GAA6B,KAAKA,iBAAlC,GAAsDrB,KAAK,CAACc,SAA9E;AACA,UAAMF,UAAU,GAAG,KAAKW,kBAAL,GAA0B,CAA1B,GAA8B,KAAKA,kBAAnC,GAAwDvB,KAAK,CAACY,UAAjF;;AAEA,UAAMrD,WAAW,GAAG,KAAKoI,YAAL,CAAkBvI,KAAlB,EAAyB4C,KAAzB,CAApB;;AAEA,WAAK4G,kBAAL,GAA0B,EAA1B,CAtB+E,CAwB/E;;AACA,UAAIxE,MAAM,GAAG,CAAT,IAAcC,KAAK,GAAG,CAA1B,EAA6B;AAC3B,YAAM6F,oBAAoB,GAAGjI,aAAa,CAACf,4BAAd,CAA2CiJ,mBAA3C,CAA+D;AAC1FC,UAAAA,aAAa,EAAE/F,KAD2E;AAE1FgG,UAAAA,MAAM,EAAEzH;AAFkF,SAA/D,CAA7B;AAIA,YAAM0H,iBAAiB,GAAGrI,aAAa,CAACL,yBAAd,CAAwCuI,mBAAxC,CAA4D;AACpFC,UAAAA,aAAa,EAAEhG,MADqE;AAEpFiG,UAAAA,MAAM,EAAEvH;AAF4E,SAA5D,CAA1B;AAKA,YAAMyH,0BAA0B,GAAGtI,aAAa,CAACf,4BAAd,CAA2CsJ,mBAA3C,CAA+D;AAChGJ,UAAAA,aAAa,EAAE/F,KADiF;AAEhGgG,UAAAA,MAAM,EAAEzH;AAFwF,SAA/D,CAAnC;AAIA,YAAM6H,wBAAwB,GAAGxI,aAAa,CAACL,yBAAd,CAAwC4I,mBAAxC,CAA4D;AAC3FJ,UAAAA,aAAa,EAAEhG,MAD4E;AAE3FiG,UAAAA,MAAM,EAAEvH;AAFmF,SAA5D,CAAjC,CAd2B,CAmB3B;;AACA,aAAK5C,yBAAL,GAAiCgK,oBAAoB,CAACQ,KAAtD;AACA,aAAKtK,wBAAL,GAAgC8J,oBAAoB,CAACS,IAArD;AACA,aAAKjK,sBAAL,GAA8B4J,iBAAiB,CAACI,KAAhD;AACA,aAAK9J,qBAAL,GAA6B0J,iBAAiB,CAACK,IAA/C;AAEA,YAAMC,qBAAqB,GAAGb,qBAAqB,CAAC;AAClDjC,UAAAA,SAAS,EAAE,YADuC;AAElD1G,UAAAA,SAAS,EAAEC,WAFuC;AAGlDwJ,UAAAA,kBAAkB,EAAEf,mBAH8B;AAIlDgB,UAAAA,eAAe,EAAE7H,yBAJiC;AAKlD8H,UAAAA,UAAU,EAAE,OAAOb,oBAAoB,CAACQ,KAA5B,KAAsC,QAAtC,GAAiDR,oBAAoB,CAACQ,KAAtE,GAA8E,CALxC;AAMlDM,UAAAA,SAAS,EAAE,OAAOd,oBAAoB,CAACS,IAA5B,KAAqC,QAArC,GAAgDT,oBAAoB,CAACS,IAArE,GAA4E,CAAC;AANtC,SAAD,CAAnD;AASA,YAAMM,kBAAkB,GAAGlB,qBAAqB,CAAC;AAC/CjC,UAAAA,SAAS,EAAE,UADoC;AAE/C1G,UAAAA,SAAS,EAAES,QAFoC;AAG/CgJ,UAAAA,kBAAkB,EAAEb,gBAH2B;AAI/Cc,UAAAA,eAAe,EAAE3H,uBAJ8B;AAK/C4H,UAAAA,UAAU,EAAE,OAAOT,iBAAiB,CAACI,KAAzB,KAAmC,QAAnC,GAA8CJ,iBAAiB,CAACI,KAAhE,GAAwE,CALrC;AAM/CM,UAAAA,SAAS,EAAE,OAAOV,iBAAiB,CAACK,IAAzB,KAAkC,QAAlC,GAA6CL,iBAAiB,CAACK,IAA/D,GAAsE,CAAC;AANnC,SAAD,CAAhD,CAlC2B,CA2C3B;;AACA,YAAI1K,gBAAgB,GAAG2K,qBAAqB,CAACM,kBAA7C;AACA,YAAI/K,eAAe,GAAGyK,qBAAqB,CAACO,iBAA5C;AACA,YAAI1K,aAAa,GAAGwK,kBAAkB,CAACC,kBAAvC;AACA,YAAIvK,YAAY,GAAGsK,kBAAkB,CAACE,iBAAtC,CA/C2B,CAiD3B;;AACA,YAAItB,wBAAJ,EAA8B;AAC5B;AACA;AACA;AACA;AACA,cAAI,CAACA,wBAAwB,CAACuB,cAAzB,EAAL,EAAgD;AAC9C,iBAAK,IAAIxH,QAAQ,GAAGnD,aAApB,EAAmCmD,QAAQ,IAAIjD,YAA/C,EAA6DiD,QAAQ,EAArE,EAAyE;AACvE,kBAAI,CAACiG,wBAAwB,CAACwB,GAAzB,CAA6BzH,QAA7B,EAAuC,CAAvC,CAAL,EAAgD;AAC9C3D,gBAAAA,gBAAgB,GAAG,CAAnB;AACAE,gBAAAA,eAAe,GAAGkB,WAAW,GAAG,CAAhC;AACA;AACD;AACF;AACF,WAb2B,CAe5B;AACA;AACA;AACA;;;AACA,cAAI,CAACwI,wBAAwB,CAACyB,aAAzB,EAAL,EAA+C;AAC7C,iBAAK,IAAI3H,WAAW,GAAG1D,gBAAvB,EAAyC0D,WAAW,IAAIxD,eAAxD,EAAyEwD,WAAW,EAApF,EAAwF;AACtF,kBAAI,CAACkG,wBAAwB,CAACwB,GAAzB,CAA6B,CAA7B,EAAgC1H,WAAhC,CAAL,EAAmD;AACjDlD,gBAAAA,aAAa,GAAG,CAAhB;AACAE,gBAAAA,YAAY,GAAGkB,QAAQ,GAAG,CAA1B;AACA;AACD;AACF;AACF;AACF;;AAED,aAAK+G,kBAAL,GAA0BgB,iBAAiB,CAAC;AAC1C2B,UAAAA,SAAS,EAAE,KAAKlG,UAD0B;AAE1CsE,UAAAA,YAAY,EAAZA,YAF0C;AAG1CzI,UAAAA,4BAA4B,EAAEe,aAAa,CAACf,4BAHF;AAI1CjB,UAAAA,gBAAgB,EAAhBA,gBAJ0C;AAK1CE,UAAAA,eAAe,EAAfA,eAL0C;AAM1C0J,UAAAA,wBAAwB,EAAxBA,wBAN0C;AAO1CU,UAAAA,0BAA0B,EAA1BA,0BAP0C;AAQ1ChL,UAAAA,WAAW,EAAXA,WAR0C;AAS1C0K,UAAAA,iBAAiB,EAAjBA,iBAT0C;AAU1CuB,UAAAA,MAAM,EAAE,IAVkC;AAW1C5J,UAAAA,yBAAyB,EAAEK,aAAa,CAACL,yBAXC;AAY1CnB,UAAAA,aAAa,EAAbA,aAZ0C;AAa1CE,UAAAA,YAAY,EAAZA,YAb0C;AAc1CiC,UAAAA,UAAU,EAAVA,UAd0C;AAe1CE,UAAAA,SAAS,EAATA,SAf0C;AAgB1C2I,UAAAA,UAAU,EAAE,KAAKrG,WAhByB;AAiB1CqF,UAAAA,wBAAwB,EAAxBA,wBAjB0C;AAkB1CP,UAAAA,oBAAoB,EAApBA,oBAlB0C;AAmB1CI,UAAAA,iBAAiB,EAAjBA;AAnB0C,SAAD,CAA3C,CAhF2B,CAsG3B;;AACA,aAAKxK,iBAAL,GAAyBG,gBAAzB;AACA,aAAKD,gBAAL,GAAwBG,eAAxB;AACA,aAAKG,cAAL,GAAsBG,aAAtB;AACA,aAAKD,aAAL,GAAqBG,YAArB;AACD;AACF;AAED;;;;;;;;2CAKuB;AAAA,UACb+K,0BADa,GACkB,KAAKtM,KADvB,CACbsM,0BADa;;AAGrB,UAAI,KAAKrM,8BAAT,EAAyC;AACvC,6DAAuB,KAAKA,8BAA5B;AACD;;AAED,WAAKA,8BAAL,GAAsC,sDACpC,KAAKsM,4BAD+B,EAEpCD,0BAFoC,CAAtC;AAID;;;;AAmBD;;;;wDAIoC;AAClC,UACE,OAAO,KAAK5G,8BAAZ,KAA+C,QAA/C,IACA,OAAO,KAAKC,2BAAZ,KAA4C,QAF9C,EAGE;AACA,YAAMpB,WAAW,GAAG,KAAKmB,8BAAzB;AACA,YAAMlB,QAAQ,GAAG,KAAKmB,2BAAtB;AAEA,aAAKD,8BAAL,GAAsC,IAAtC;AACA,aAAKC,2BAAL,GAAmC,IAAnC;AAEA,aAAK6G,wBAAL,CAA8B;AAAEjI,UAAAA,WAAW,EAAXA,WAAF;AAAeC,UAAAA,QAAQ,EAARA;AAAf,SAA9B;AACD;AACF;;;mDA8BE;AAAA;;AAAA,UATDhB,UASC,SATDA,UASC;AAAA,UARDE,SAQC,SARDA,SAQC;AAAA,UAPDyB,iBAOC,SAPDA,iBAOC;AAAA,UANDD,eAMC,SANDA,eAMC;;AACD,WAAKuH,iBAAL,CAAuB;AACrBlM,QAAAA,QAAQ,EAAE,yBAA+B;AAAA,cAA5BiD,UAA4B,SAA5BA,UAA4B;AAAA,cAAhBE,SAAgB,SAAhBA,SAAgB;AAAA,6BACH,MAAI,CAAC1D,KADF;AAAA,cAC/BgF,MAD+B,gBAC/BA,MAD+B;AAAA,cACvB0H,QADuB,gBACvBA,QADuB;AAAA,cACbzH,KADa,gBACbA,KADa;AAGvCyH,UAAAA,QAAQ,CAAC;AACPC,YAAAA,YAAY,EAAE3H,MADP;AAEP4H,YAAAA,WAAW,EAAE3H,KAFN;AAGP4H,YAAAA,YAAY,EAAE3H,eAHP;AAIP1B,YAAAA,UAAU,EAAVA,UAJO;AAKPE,YAAAA,SAAS,EAATA,SALO;AAMPoJ,YAAAA,WAAW,EAAE3H;AANN,WAAD,CAAR;AAQD,SAZoB;AAarB3E,QAAAA,OAAO,EAAE;AACPgD,UAAAA,UAAU,EAAVA,UADO;AAEPE,UAAAA,SAAS,EAATA;AAFO;AAbY,OAAvB;AAkBD;;;mCAE2E;AAAA,UAA/D1D,KAA+D,uEAAhD,KAAKA,KAA2C;AAAA,UAApC4C,KAAoC,uEAArB,KAAKA,KAAgB;AAC1E;AACA;AACA,aAAOmK,MAAM,CAACC,cAAP,CAAsBC,IAAtB,CAA2BjN,KAA3B,EAAkC,aAAlC,IAAmDkN,OAAO,CAAClN,KAAK,CAACG,WAAP,CAA1D,GAAgF+M,OAAO,CAACtK,KAAK,CAACzC,WAAP,CAA9F;AACD;;;0DAEqC;AACpC,UAAI,KAAKiJ,yBAAT,EAAoC;AAAA,YAC1B+D,yBAD0B,GACI,KAAKnN,KADT,CAC1BmN,yBAD0B;AAGlC,aAAK/D,yBAAL,GAAiC,KAAjC;AAEA+D,QAAAA,yBAAyB,CAAC;AACxBC,UAAAA,UAAU,EAAE,KAAKlE,wBAAL,GAAgC,CADpB;AAExBzB,UAAAA,IAAI,EAAE,KAAK7E,KAAL,CAAWC,aAAX,CAAyBc,aAFP;AAGxB0J,UAAAA,QAAQ,EAAE,KAAKlE,sBAAL,GAA8B;AAHhB,SAAD,CAAzB;AAKD;AACF;;;;AA4CD;;;;4CAI4D;AAAA,UAAzC3F,UAAyC,SAAzCA,UAAyC;AAAA,UAA7BE,SAA6B,SAA7BA,SAA6B;;AAC1D,UAAM+C,WAAW,GAAG1G,WAAW,CAAC2G,+BAAZ,CAA4C;AAC9DF,QAAAA,SAAS,EAAE,KAAK5D,KAD8C;AAE9DY,QAAAA,UAAU,EAAVA,UAF8D;AAG9DE,QAAAA,SAAS,EAATA;AAH8D,OAA5C,CAApB;;AAMA,UAAI+C,WAAJ,EAAiB;AACfA,QAAAA,WAAW,CAACrG,qBAAZ,GAAoC,KAApC;AACA,aAAKF,QAAL,CAAcuG,WAAd;AACD;AACF;;;+CA2B8E;AAAA,UAAtDzG,KAAsD,uEAAvC,KAAKA,KAAkC;AAAA,UAA3B4C,KAA2B,uEAAZ,KAAKA,KAAO;AAC7E,aAAO7C,WAAW,CAACqE,wBAAZ,CAAqCpE,KAArC,EAA4C4C,KAA5C,CAAP;AACD;;;yDAgBwF;AAAA,UAAtD5C,KAAsD,uEAAvC,KAAKA,KAAkC;AAAA,UAA3B4C,KAA2B,uEAAZ,KAAKA,KAAO;;AACvF,UAAM6D,WAAW,GAAG1G,WAAW,CAACuN,0CAAZ,CAAuDtN,KAAvD,EAA8D4C,KAA9D,CAApB;;AACA,UAAI6D,WAAJ,EAAiB;AACfA,QAAAA,WAAW,CAACrG,qBAAZ,GAAoC,KAApC;AACA,aAAKF,QAAL,CAAcuG,WAAd;AACD;AACF;;;8CAuB6E;AAAA,UAAtDzG,KAAsD,uEAAvC,KAAKA,KAAkC;AAAA,UAA3B4C,KAA2B,uEAAZ,KAAKA,KAAO;AAC5E,aAAO7C,WAAW,CAACmE,uBAAZ,CAAoClE,KAApC,EAA2C4C,KAA3C,CAAP;AACD;;;uCAEkB;AACjB,UAAMyJ,UAAU,GAAG,KAAKrG,WAAxB;AACA,UAAMmG,SAAS,GAAG,KAAKlG,UAAvB;AAFiB,UAGT4E,iBAHS,GAGa,KAAK7K,KAHlB,CAGT6K,iBAHS,EAKjB;AACA;AACA;AACA;AACA;AACA;;AACA,WAAK5E,UAAL,GAAkB,EAAlB;AACA,WAAKD,WAAL,GAAmB,EAAnB,CAZiB,CAcjB;;AACA,WAAK,IAAIxB,QAAQ,GAAG,KAAKtD,cAAzB,EAAyCsD,QAAQ,IAAI,KAAKpD,aAA1D,EAAyEoD,QAAQ,EAAjF,EAAqF;AACnF,aAAK,IAAID,WAAW,GAAG,KAAK7D,iBAA5B,EAA+C6D,WAAW,IAAI,KAAK3D,gBAAnE,EAAqF2D,WAAW,EAAhG,EAAoG;AAClG,cAAMyF,GAAG,aAAMxF,QAAN,cAAkBD,WAAlB,CAAT;AACA,eAAKyB,WAAL,CAAiBgE,GAAjB,IAAwBqC,UAAU,CAACrC,GAAD,CAAlC;;AAEA,cAAIa,iBAAJ,EAAuB;AACrB,iBAAK5E,UAAL,CAAgB+D,GAAhB,IAAuBmC,SAAS,CAACnC,GAAD,CAAhC;AACD;AACF;AACF;AACF;;;qDAgBoF;AAAA,UAAtDhK,KAAsD,uEAAvC,KAAKA,KAAkC;AAAA,UAA3B4C,KAA2B,uEAAZ,KAAKA,KAAO;;AACnF,UAAM6D,WAAW,GAAG1G,WAAW,CAACwN,sCAAZ,CAAmDvN,KAAnD,EAA0D4C,KAA1D,CAApB;;AACA,UAAI6D,WAAJ,EAAiB;AACfA,QAAAA,WAAW,CAACrG,qBAAZ,GAAoC,KAApC;AACA,aAAKF,QAAL,CAAcuG,WAAd;AACD;AACF;;;6CAhrB+B+G,S,EAAkBhH,S,EAAyB;AACzE,UAAMhB,QAAe,GAAG,EAAxB;AADyE,UAEjE3C,aAFiE,GAE/C2D,SAF+C,CAEjE3D,aAFiE;;AAIzE,UACG2K,SAAS,CAACvL,WAAV,KAA0B,CAA1B,IAA+BuE,SAAS,CAAChD,UAAV,KAAyB,CAAzD,IACCgK,SAAS,CAAC/K,QAAV,KAAuB,CAAvB,IAA4B+D,SAAS,CAAC9C,SAAV,KAAwB,CAFvD,EAGE;AACA8B,QAAAA,QAAQ,CAAChC,UAAT,GAAsB,CAAtB;AACAgC,QAAAA,QAAQ,CAAC9B,SAAT,GAAqB,CAArB,CAFA,CAIA;AACA;AACD,OATD,MASO,IACJ8J,SAAS,CAAChK,UAAV,KAAyBX,aAAa,CAACU,cAAvC,IAAyDiK,SAAS,CAACpK,cAAV,GAA2B,CAArF,IACCoK,SAAS,CAAC9J,SAAV,KAAwBb,aAAa,CAACY,aAAtC,IAAuD+J,SAAS,CAAClK,WAAV,GAAwB,CAF3E,EAGL;AACAyJ,QAAAA,MAAM,CAACU,MAAP,CACEjI,QADF,EAEEzF,WAAW,CAAC2G,+BAAZ,CAA4C;AAC1CF,UAAAA,SAAS,EAATA,SAD0C;AAE1ChD,UAAAA,UAAU,EAAEgK,SAAS,CAAChK,UAFoB;AAG1CE,UAAAA,SAAS,EAAE8J,SAAS,CAAC9J;AAHqB,SAA5C,CAFF;AAQD,OAzBwE,CA2BzE;;;AACA8B,MAAAA,QAAQ,CAACpF,qBAAT,GAAiC,KAAjC;;AACA,UACEoN,SAAS,CAACnL,WAAV,KAA0BQ,aAAa,CAACC,eAAxC,IACA0K,SAAS,CAAC9K,SAAV,KAAwBG,aAAa,CAACE,aAFxC,EAGE;AACA;AACAyC,QAAAA,QAAQ,CAACpF,qBAAT,GAAiC,IAAjC;AACD;;AAEDyC,MAAAA,aAAa,CAACf,4BAAd,CAA2C4L,SAA3C,CAAqD;AACnD1L,QAAAA,SAAS,EAAEwL,SAAS,CAACvL,WAD8B;AAEnDK,QAAAA,iBAAiB,EAAEvC,WAAW,CAACwC,uBAAZ,CAAoCiL,SAApC,CAFgC;AAGnDtL,QAAAA,cAAc,EAAEnC,WAAW,CAACqC,eAAZ,CAA4BoL,SAAS,CAACnL,WAAtC;AAHmC,OAArD;AAMAQ,MAAAA,aAAa,CAACL,yBAAd,CAAwCkL,SAAxC,CAAkD;AAChD1L,QAAAA,SAAS,EAAEwL,SAAS,CAAC/K,QAD2B;AAEhDH,QAAAA,iBAAiB,EAAEvC,WAAW,CAAC4C,oBAAZ,CAAiC6K,SAAjC,CAF6B;AAGhDtL,QAAAA,cAAc,EAAEnC,WAAW,CAACqC,eAAZ,CAA4BoL,SAAS,CAAC9K,SAAtC;AAHgC,OAAlD;;AAMA,UAAIG,aAAa,CAACG,eAAd,KAAkC,CAAlC,IAAuCH,aAAa,CAACI,YAAd,KAA+B,CAA1E,EAA6E;AAC3EJ,QAAAA,aAAa,CAACG,eAAd,GAAgC,CAAhC;AACAH,QAAAA,aAAa,CAACI,YAAd,GAA6B,CAA7B;AACD,OApDwE,CAsDzE;;;AACA,UAAIuK,SAAS,CAAC1I,UAAV,IAAwB0I,SAAS,CAACrN,WAAV,KAA0B,KAAlD,IAA2D0C,aAAa,CAACK,eAAd,KAAkC,IAAjG,EAAuG;AACrG6J,QAAAA,MAAM,CAACU,MAAP,CAAcjI,QAAd,EAAwB;AACtBrF,UAAAA,WAAW,EAAE;AADS,SAAxB;AAGD;;AAED,UAAIwN,WAAJ;AACA,UAAIC,WAAJ;AAEA,yEAAkD;AAChD5L,QAAAA,SAAS,EAAEa,aAAa,CAACG,eADuB;AAEhD6K,QAAAA,QAAQ,EAAE,OAAOhL,aAAa,CAACC,eAArB,KAAyC,QAAzC,GAAoDD,aAAa,CAACC,eAAlE,GAAoF,IAF9C;AAGhDgL,QAAAA,uBAAuB,EAAE;AAAA,iBAAMjL,aAAa,CAACf,4BAAd,CAA2C+D,SAA3C,CAAqD,CAArD,CAAN;AAAA,SAHuB;AAIhDkI,QAAAA,4BAA4B,EAAEP,SAJkB;AAKhDQ,QAAAA,cAAc,EAAER,SAAS,CAACvL,WALsB;AAMhDgM,QAAAA,YAAY,EAAE,OAAOT,SAAS,CAACnL,WAAjB,KAAiC,QAAjC,GAA4CmL,SAAS,CAACnL,WAAtD,GAAoE,IANlC;AAOhD6L,QAAAA,iBAAiB,EAAEV,SAAS,CAACpK,cAPmB;AAQhDoE,QAAAA,aAAa,EAAE3E,aAAa,CAACM,kBARmB;AAShDgL,QAAAA,kCAAkC,EAAE,8CAAM;AACxCR,UAAAA,WAAW,GAAG5N,WAAW,CAACuN,0CAAZ,CAAuDE,SAAvD,EAAkEhH,SAAlE,CAAd;AACD;AAX+C,OAAlD;AAaA,yEAAkD;AAChDxE,QAAAA,SAAS,EAAEa,aAAa,CAACI,YADuB;AAEhD4K,QAAAA,QAAQ,EAAE,OAAOhL,aAAa,CAACE,aAArB,KAAuC,QAAvC,GAAkDF,aAAa,CAACE,aAAhE,GAAgF,IAF1C;AAGhD+K,QAAAA,uBAAuB,EAAE;AAAA,iBAAMjL,aAAa,CAACL,yBAAd,CAAwCqD,SAAxC,CAAkD,CAAlD,CAAN;AAAA,SAHuB;AAIhDkI,QAAAA,4BAA4B,EAAEP,SAJkB;AAKhDQ,QAAAA,cAAc,EAAER,SAAS,CAAC/K,QALsB;AAMhDwL,QAAAA,YAAY,EAAE,OAAOT,SAAS,CAAC9K,SAAjB,KAA+B,QAA/B,GAA0C8K,SAAS,CAAC9K,SAApD,GAAgE,IAN9B;AAOhDwL,QAAAA,iBAAiB,EAAEV,SAAS,CAAClK,WAPmB;AAQhDkE,QAAAA,aAAa,EAAE3E,aAAa,CAACQ,eARmB;AAShD8K,QAAAA,kCAAkC,EAAE,8CAAM;AACxCP,UAAAA,WAAW,GAAG7N,WAAW,CAACwN,sCAAZ,CAAmDC,SAAnD,EAA8DhH,SAA9D,CAAd;AACD;AAX+C,OAAlD;AAcA3D,MAAAA,aAAa,CAACG,eAAd,GAAgCwK,SAAS,CAACvL,WAA1C;AACAY,MAAAA,aAAa,CAACC,eAAd,GAAgC0K,SAAS,CAACnL,WAA1C;AACAQ,MAAAA,aAAa,CAACK,eAAd,GAAgCsK,SAAS,CAACrN,WAAV,KAA0B,IAA1D;AACA0C,MAAAA,aAAa,CAACI,YAAd,GAA6BuK,SAAS,CAAC/K,QAAvC;AACAI,MAAAA,aAAa,CAACE,aAAd,GAA8ByK,SAAS,CAAC9K,SAAxC;AACAG,MAAAA,aAAa,CAACM,kBAAd,GAAmCqK,SAAS,CAACpK,cAA7C;AACAP,MAAAA,aAAa,CAACQ,eAAd,GAAgCmK,SAAS,CAAClK,WAA1C;AACAT,MAAAA,aAAa,CAACU,cAAd,GAA+BiK,SAAS,CAAChK,UAAzC;AACAX,MAAAA,aAAa,CAACY,aAAd,GAA8B+J,SAAS,CAAC9J,SAAxC,CAnGyE,CAqGzE;;AACAb,MAAAA,aAAa,CAACc,aAAd,GAA8B6J,SAAS,CAAClH,gBAAV,EAA9B;;AACA,UAAIzD,aAAa,CAACc,aAAd,KAAgCwC,SAApC,EAA+C;AAC7CtD,QAAAA,aAAa,CAACe,qBAAd,GAAsC,KAAtC;AACAf,QAAAA,aAAa,CAACc,aAAd,GAA8B,CAA9B;AACD,OAHD,MAGO;AACLd,QAAAA,aAAa,CAACe,qBAAd,GAAsC,IAAtC;AACD;;AAED4B,MAAAA,QAAQ,CAAC3C,aAAT,GAAyBA,aAAzB;AAEA,+BAAY2C,QAAZ,MAAyBmI,WAAzB,MAAyCC,WAAzC;AACD;;;4CAyS8B5N,K,EAAc;AAC3C,aAAO,OAAOA,KAAK,CAACqC,WAAb,KAA6B,QAA7B,GAAwCrC,KAAK,CAACqC,WAA9C,GAA4DrC,KAAK,CAACoO,mBAAzE;AACD;;;yCAE2BpO,K,EAAc;AACxC,aAAO,OAAOA,KAAK,CAAC0C,SAAb,KAA2B,QAA3B,GAAsC1C,KAAK,CAAC0C,SAA5C,GAAwD1C,KAAK,CAACqO,gBAArE;AACD;;;;AA8FD;;;;2DAYU;AAAA,UAPR7H,SAOQ,SAPRA,SAOQ;AAAA,UANRhD,UAMQ,SANRA,UAMQ;AAAA,UALRE,SAKQ,SALRA,SAKQ;AACR,UAAM8B,QAAa,GAAG;AACpBxB,QAAAA,0BAA0B,EAAErE,8BAA8B,CAACE;AADvC,OAAtB;;AAIA,UAAI,OAAO2D,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,IAAI,CAApD,EAAuD;AACrDgC,QAAAA,QAAQ,CAAC3B,yBAAT,GACEL,UAAU,GAAGgD,SAAS,CAAChD,UAAvB,GAAoCM,sDAApC,GAA+DyB,uDADjE;AAEAC,QAAAA,QAAQ,CAAChC,UAAT,GAAsBA,UAAtB;AACD;;AAED,UAAI,OAAOE,SAAP,KAAqB,QAArB,IAAiCA,SAAS,IAAI,CAAlD,EAAqD;AACnD8B,QAAAA,QAAQ,CAACzB,uBAAT,GACEL,SAAS,GAAG8C,SAAS,CAAC9C,SAAtB,GAAkCI,sDAAlC,GAA6DyB,uDAD/D;AAEAC,QAAAA,QAAQ,CAAC9B,SAAT,GAAqBA,SAArB;AACD;;AAED,UACG,OAAOF,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,IAAI,CAAhD,IAAqDA,UAAU,KAAKgD,SAAS,CAAChD,UAA/E,IACC,OAAOE,SAAP,KAAqB,QAArB,IAAiCA,SAAS,IAAI,CAA9C,IAAmDA,SAAS,KAAK8C,SAAS,CAAC9C,SAF9E,EAGE;AACA,eAAO8B,QAAP;AACD;;AACD,aAAO,IAAP;AACD;;;oCAmBsB8I,K,EAAiC;AACtD,aAAO,OAAOA,KAAP,KAAiB,UAAjB,GAA8BA,KAA9B,GAAsC;AAAA,eAAMA,KAAN;AAAA,OAA7C;AACD;;;6CAE+Bd,S,EAAkBhH,S,EAAkB;AAAA,UAC1DvE,WAD0D,GACQuL,SADR,CAC1DvL,WAD0D;AAAA,UAC7C+C,MAD6C,GACQwI,SADR,CAC7CxI,MAD6C;AAAA,UACrCV,iBADqC,GACQkJ,SADR,CACrClJ,iBADqC;AAAA,UAClBlB,cADkB,GACQoK,SADR,CAClBpK,cADkB;AAAA,UACF6B,KADE,GACQuI,SADR,CACFvI,KADE;AAAA,UAE1DzB,UAF0D,GAE5BgD,SAF4B,CAE1DhD,UAF0D;AAAA,UAE9CX,aAF8C,GAE5B2D,SAF4B,CAE9C3D,aAF8C;;AAIlE,UAAIZ,WAAW,GAAG,CAAlB,EAAqB;AACnB,YAAMsM,WAAW,GAAGtM,WAAW,GAAG,CAAlC;AACA,YAAMuM,WAAW,GAAGpL,cAAc,GAAG,CAAjB,GAAqBmL,WAArB,GAAmCnJ,IAAI,CAACC,GAAL,CAASkJ,WAAT,EAAsBnL,cAAtB,CAAvD;AACA,YAAM8B,eAAe,GAAGrC,aAAa,CAACL,yBAAd,CAAwCkC,YAAxC,EAAxB;AACA,YAAM+J,aAAa,GACjB5L,aAAa,CAACe,qBAAd,IAAuCsB,eAAe,GAAGF,MAAzD,GAAkEnC,aAAa,CAACc,aAAhF,GAAgG,CADlG;AAGA,eAAOd,aAAa,CAACf,4BAAd,CAA2C4M,wBAA3C,CAAoE;AACzEC,UAAAA,KAAK,EAAErK,iBADkE;AAEzE0G,UAAAA,aAAa,EAAE/F,KAAK,GAAGwJ,aAFkD;AAGzEG,UAAAA,aAAa,EAAEpL,UAH0D;AAIzEgL,UAAAA,WAAW,EAAXA;AAJyE,SAApE,CAAP;AAMD;;AACD,aAAO,CAAP;AACD;;;+DAMiDhB,S,EAAkBhH,S,EAAyB;AAAA,UACnFhD,UADmF,GACpEgD,SADoE,CACnFhD,UADmF;;AAE3F,UAAMqL,oBAAoB,GAAG9O,WAAW,CAACqE,wBAAZ,CAAqCoJ,SAArC,EAAgDhH,SAAhD,CAA7B;;AAEA,UAAI,OAAOqI,oBAAP,KAAgC,QAAhC,IAA4CA,oBAAoB,IAAI,CAApE,IAAyErL,UAAU,KAAKqL,oBAA5F,EAAkH;AAChH,eAAO9O,WAAW,CAAC2G,+BAAZ,CAA4C;AACjDF,UAAAA,SAAS,EAATA,SADiD;AAEjDhD,UAAAA,UAAU,EAAEqL,oBAFqC;AAGjDnL,UAAAA,SAAS,EAAE,CAAC;AAHqC,SAA5C,CAAP;AAKD;;AACD,aAAO,IAAP;AACD;;;4CAU8B8J,S,EAAkBhH,S,EAAkB;AAAA,UACzDxB,MADyD,GACGwI,SADH,CACzDxI,MADyD;AAAA,UACjDvC,QADiD,GACG+K,SADH,CACjD/K,QADiD;AAAA,UACvC6B,iBADuC,GACGkJ,SADH,CACvClJ,iBADuC;AAAA,UACpBhB,WADoB,GACGkK,SADH,CACpBlK,WADoB;AAAA,UACP2B,KADO,GACGuI,SADH,CACPvI,KADO;AAAA,UAEzDvB,SAFyD,GAE5B8C,SAF4B,CAEzD9C,SAFyD;AAAA,UAE9Cb,aAF8C,GAE5B2D,SAF4B,CAE9C3D,aAF8C;;AAIjE,UAAIJ,QAAQ,GAAG,CAAf,EAAkB;AAChB,YAAMqM,QAAQ,GAAGrM,QAAQ,GAAG,CAA5B;AACA,YAAM+L,WAAW,GAAGlL,WAAW,GAAG,CAAd,GAAkBwL,QAAlB,GAA6B1J,IAAI,CAACC,GAAL,CAASyJ,QAAT,EAAmBxL,WAAnB,CAAjD;AACA,YAAM6B,iBAAiB,GAAGtC,aAAa,CAACf,4BAAd,CAA2C4C,YAA3C,EAA1B;AACA,YAAM+J,aAAa,GACjB5L,aAAa,CAACe,qBAAd,IAAuCuB,iBAAiB,GAAGF,KAA3D,GAAmEpC,aAAa,CAACc,aAAjF,GAAiG,CADnG;AAGA,eAAOd,aAAa,CAACL,yBAAd,CAAwCkM,wBAAxC,CAAiE;AACtEC,UAAAA,KAAK,EAAErK,iBAD+D;AAEtE0G,UAAAA,aAAa,EAAEhG,MAAM,GAAGyJ,aAF8C;AAGtEG,UAAAA,aAAa,EAAElL,SAHuD;AAItE8K,UAAAA,WAAW,EAAXA;AAJsE,SAAjE,CAAP;AAMD;;AACD,aAAO,CAAP;AACD;;;2DAiC6ChB,S,EAAkBhH,S,EAAyB;AAAA,UAC/E9C,SAD+E,GACjE8C,SADiE,CAC/E9C,SAD+E;;AAEvF,UAAMqL,mBAAmB,GAAGhP,WAAW,CAACmE,uBAAZ,CAAoCsJ,SAApC,EAA+ChH,SAA/C,CAA5B;;AAEA,UAAI,OAAOuI,mBAAP,KAA+B,QAA/B,IAA2CA,mBAAmB,IAAI,CAAlE,IAAuErL,SAAS,KAAKqL,mBAAzF,EAA8G;AAC5G,eAAOhP,WAAW,CAAC2G,+BAAZ,CAA4C;AACjDF,UAAAA,SAAS,EAATA,SADiD;AAEjDhD,UAAAA,UAAU,EAAE,CAAC,CAFoC;AAGjDE,UAAAA,SAAS,EAAEqL;AAHsC,SAA5C,CAAP;AAKD;;AACD,aAAO,IAAP;AACD;;;;EA9qCuB1E,KAAK,CAAC2E,a;;gBAA1BjP,W;AA7MJ,c;AACA,iB;AAMA4H,EAAAA,kB;AAMA7C,EAAAA,U;AAMAC,EAAAA,S;AAGAwF,EAAAA,Y;AAGAC,EAAAA,iB;AAGA5C,EAAAA,S;AAGA3F,EAAAA,W;AAGAI,EAAAA,W;AAGAwF,EAAAA,c;AAGAC,EAAAA,a;AAGAC,EAAAA,c;AAMA0C,EAAAA,wB;AAMA2D,EAAAA,mB;AAMAC,EAAAA,gB;AAGA/H,EAAAA,gB;AAGAtB,EAAAA,M;AAGAgD,EAAAA,E;AAMA7H,EAAAA,W;AAMA0K,EAAAA,iB;AAGA5C,EAAAA,iB;AAMAyE,EAAAA,Q;AAOAS,EAAAA,yB;AAGA9M,EAAAA,iB;;;gBAwGIN,W,kBACkB;AACpB,gBAAc,MADM;AAEpB,mBAAiB,IAFG;AAGpB,wBAAsB,KAHF;AAIpB,gBAAc,KAJM;AAKpB,eAAa,KALO;AAMpB,uBAAqBkP,oCAND;AAOpB,mBAAiB,UAPG;AAQpB,oBAAkB,EARE;AASpB,yBAAuB,GATH;AAUpB,sBAAoB,EAVA;AAWpB,sBAAoBtL,yBAXA;AAYpB,uBAAqB7D,UAZD;AAapB,cAAY,oBAAM,CAAE,CAbA;AAcpB,+BAA6B,qCAAM,CAAE,CAdjB;AAepB,uBAAqB,6BAAM,CAAE,CAfT;AAgBpB,yBAAuB,CAhBH;AAiBpB,2BAAyBoP,wCAjBL;AAkBpB,sBAAoB,EAlBA;AAmBpB,UAAQ,MAnBY;AAoBpB,gCAA8BxP,qCApBV;AAqBpB,uBAAqB,MArBD;AAsBpB,oBAAkB,CAAC,CAtBC;AAuBpB,iBAAe,CAAC,CAvBI;AAwBpB,WAAS,EAxBW;AAyBpB,cAAY,CAzBQ;AA0BpB,uBAAqB,KA1BD;AA2BpB,8BAA4B,KA3BR;AA4BpB,mCAAiC;AA5Bb,C;;AAisCxB,qCAASK,WAAT;eACeA,W","sourcesContent":["/* eslint-disable */\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from './utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, {\n  SCROLL_DIRECTION_BACKWARD,\n  SCROLL_DIRECTION_FORWARD\n} from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/util/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from './utils/requestAnimationTimeout';\n\nimport {\n  CellRenderer,\n  CellRangeRenderer,\n  CellPosition,\n  CellSize,\n  CellSizeGetter,\n  NoContentRenderer,\n  Scroll,\n  ScrollbarPresenceChange,\n  RenderedSection,\n  OverscanIndicesGetter,\n  Alignment,\n  CellCache,\n  StyleCache\n} from './types';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\nexport const DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n\n/**\n * Controls whether the VirtualGrid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents VirtualGrid from interrupting mouse-wheel animations (see issue #2).\n */\nconst SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nconst renderNull: NoContentRenderer = () => null;\n\ninterface ScrollPosition {\n  scrollTop?: number;\n  scrollLeft?: number;\n}\n\ninterface Props {\n  'aria-label'?: string;\n  'aria-readonly'?: boolean;\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column VirtualGrids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  autoContainerWidth: boolean;\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoHeight: boolean;\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoWidth: boolean;\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  cellRenderer: CellRenderer;\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  cellRangeRenderer: CellRangeRenderer;\n\n  /** Optional custom CSS class name to attach to root VirtualGrid element.  */\n  className?: string;\n\n  /** Number of columns in grid.  */\n  columnCount: number;\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  columnWidth: CellSize;\n\n  /** Unfiltered props for the VirtualGrid container. */\n  containerProps?: any;\n\n  /** ARIA role for the cell-container.  */\n  containerRole: string;\n\n  /** Optional inline style applied to inner cell-container */\n  containerStyle: any;\n\n  /**\n   * If CellMeasurer is used to measure this VirtualGrid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables VirtualGrid and CellMeasurer to share measurement data.\n   */\n  deferredMeasurementCache?: any;\n\n  /**\n   * Used to estimate the total width of a VirtualGrid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  estimatedColumnSize: number;\n\n  /**\n   * Used to estimate the total height of a VirtualGrid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: number;\n\n  /** Exposed for testing purposes only.  */\n  getScrollbarSize: () => number;\n\n  /** Height of VirtualGrid; this property determines the number of visible (vs virtualized) rows.  */\n  height: number;\n\n  /** Optional custom id to attach to root VirtualGrid element.  */\n  id?: string;\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  isScrolling?: boolean;\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  isScrollingOptOut: boolean;\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  noContentRenderer: NoContentRenderer;\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  onScroll: (params: Scroll) => void;\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiVirtualGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  onScrollbarPresenceChange: (params: ScrollbarPresenceChange) => void;\n\n  /** Callback invoked with information about the section of the VirtualGrid that was just rendered.  */\n  onSectionRendered: (params: RenderedSection) => void;\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanColumnCount: number;\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  overscanIndicesGetter: OverscanIndicesGetter;\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanRowCount: number;\n\n  /** ARIA role for the grid element.  */\n  role: string;\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  rowHeight: CellSize;\n\n  /** Number of rows in grid.  */\n  rowCount: number;\n\n  /** Wait this amount of time after the last scroll event before resetting VirtualGrid `pointer-events`. */\n  scrollingResetTimeInterval: number;\n\n  /** Horizontal offset. */\n  scrollLeft?: number;\n\n  /**\n   * Controls scroll-to-cell behavior of the VirtualGrid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the VirtualGrid and \"end\" to align bottom/right.\n   */\n  scrollToAlignment: Alignment;\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToColumn: number;\n\n  /** Vertical offset. */\n  scrollTop?: number;\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToRow: number;\n\n  /** Optional inline style */\n  style: any;\n\n  /** Tab index for focus */\n  tabIndex?: number;\n\n  /** Width of VirtualGrid; this property determines the number of visible (vs virtualized) columns.  */\n  width: number;\n\n  /** Scroll Container element to render */\n  scrollContainerComponent: string | React.ComponentType<any>;\n\n  /** Inner Scroll Container element to render */\n  innerScrollContainerComponent: string | React.ComponentType<any>;\n}\n\ninterface InstanceProps {\n  prevColumnWidth: CellSize;\n  prevRowHeight: CellSize;\n\n  prevColumnCount: number;\n  prevRowCount: number;\n  prevIsScrolling: boolean;\n  prevScrollToColumn: number;\n  prevScrollToRow: number;\n  prevScrollLeft?: number;\n  prevScrollTop?: number;\n\n  columnSizeAndPositionManager: ScalingCellSizeAndPositionManager;\n  rowSizeAndPositionManager: ScalingCellSizeAndPositionManager;\n\n  scrollbarSize: number;\n  scrollbarSizeMeasured: boolean;\n}\n\ninterface State {\n  instanceProps?: InstanceProps;\n  isScrolling?: boolean;\n  scrollDirectionHorizontal?: -1 | 1;\n  scrollDirectionVertical?: -1 | 1;\n  scrollLeft?: number;\n  scrollTop?: number;\n  scrollPositionChangeReason?: 'observed' | 'requested';\n  needToResetStyleCache?: boolean;\n}\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nclass VirtualGrid extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    'aria-label': 'grid',\n    'aria-readonly': true,\n    \"autoContainerWidth\": false,\n    \"autoHeight\": false,\n    \"autoWidth\": false,\n    \"cellRangeRenderer\": defaultCellRangeRenderer,\n    \"containerRole\": 'rowgroup',\n    \"containerStyle\": {},\n    \"estimatedColumnSize\": 100,\n    \"estimatedRowSize\": 30,\n    \"getScrollbarSize\": scrollbarSize,\n    \"noContentRenderer\": renderNull,\n    \"onScroll\": () => {},\n    \"onScrollbarPresenceChange\": () => {},\n    \"onSectionRendered\": () => {},\n    \"overscanColumnCount\": 0,\n    \"overscanIndicesGetter\": defaultOverscanIndicesGetter,\n    \"overscanRowCount\": 10,\n    \"role\": 'grid',\n    \"scrollingResetTimeInterval\": DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n    \"scrollToAlignment\": 'auto',\n    \"scrollToColumn\": -1,\n    \"scrollToRow\": -1,\n    \"style\": {},\n    \"tabIndex\": 0,\n    \"isScrollingOptOut\": false,\n    \"scrollContainerComponent\": 'div',\n    \"innerScrollContainerComponent\": 'div'\n  };\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  _onVirtualGridRenderedMemoizer = createCallbackMemoizer();\n  _onScrollMemoizer = createCallbackMemoizer(false);\n\n  _deferredInvalidateColumnIndex = null;\n  _deferredInvalidateRowIndex = null;\n  _recomputeScrollLeftFlag = false;\n  _recomputeScrollTopFlag = false;\n\n  _horizontalScrollBarSize = 0;\n  _verticalScrollBarSize = 0;\n  _scrollbarPresenceChanged = false;\n  _scrollingContainer: Element;\n\n  _childrenToDisplay: React.ReactElement<any>[];\n\n  _columnStartIndex: number;\n  _columnStopIndex: number;\n  _rowStartIndex: number;\n  _rowStopIndex: number;\n  _renderedColumnStartIndex = 0;\n  _renderedColumnStopIndex = 0;\n  _renderedRowStartIndex = 0;\n  _renderedRowStopIndex = 0;\n\n  _initialScrollTop: number;\n  _initialScrollLeft: number;\n\n  _disablePointerEventsTimeoutId;\n\n  _styleCache: StyleCache = {};\n  _cellCache: CellCache = {};\n\n  constructor(props: Props) {\n    super(props);\n    const columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: (params) => VirtualGrid._wrapSizeGetter(props.columnWidth)(params),\n      estimatedCellSize: VirtualGrid._getEstimatedColumnSize(props)\n    });\n    const rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: (params) => VirtualGrid._wrapSizeGetter(props.rowHeight)(params),\n      estimatedCellSize: VirtualGrid._getEstimatedRowSize(props)\n    });\n\n    this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager,\n        rowSizeAndPositionManager,\n\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        prevScrollLeft: props.scrollLeft,\n        prevScrollTop: props.scrollTop,\n\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: props.scrollLeft || 0,\n      scrollTop: props.scrollTop || 0,\n      scrollPositionChangeReason: null,\n\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      this._initialScrollTop = this._getCalculatedScrollTop(props, this.state);\n    }\n    if (props.scrollToColumn > 0) {\n      this._initialScrollLeft = this._getCalculatedScrollLeft(props, this.state);\n    }\n  }\n\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n  getOffsetForCell({\n    alignment = this.props.scrollToAlignment,\n    columnIndex = this.props.scrollToColumn,\n    rowIndex = this.props.scrollToRow\n  }: {\n    alignment?: Alignment,\n    columnIndex?: number,\n    rowIndex?: number\n  } = {}) {\n    const offsetProps = {\n      ...this.props,\n      scrollToAlignment: alignment,\n      scrollToColumn: columnIndex,\n      scrollToRow: rowIndex\n    };\n\n    return {\n      scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n      scrollTop: this._getCalculatedScrollTop(offsetProps)\n    };\n  }\n\n  /**\n   * Gets estimated total rows' height.\n   */\n  getTotalRowsHeight() {\n    return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n  }\n\n  /**\n   * Gets estimated total columns' width.\n   */\n  getTotalColumnsWidth() {\n    return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n  }\n\n  /**\n   * This method handles a scroll event originating from an external scroll control.\n   * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n   */\n  handleScrollEvent({ scrollLeft: scrollLeftParam = 0, scrollTop: scrollTopParam = 0 }: ScrollPosition) {\n    // On iOS, we can arrive at negative offsets by swiping past the start.\n    // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n    if (scrollTopParam < 0) {\n      return;\n    }\n\n    // Prevent pointer events from interrupting a smooth scroll\n    this._debounceScrollEnded();\n\n    const { autoHeight, autoWidth, height, width } = this.props;\n    const { instanceProps } = this.state;\n\n    // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n    // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n    // This causes a series of rapid renders that is slow for long lists.\n    // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n    const { scrollbarSize } = instanceProps;\n    const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n    const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n    const scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n    const scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam);\n\n    // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n    // Don't force a re-render if this is the case.\n    // The mouse may move faster then the animation frame does.\n    // Use requestAnimationFrame to avoid over-updating.\n    if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n      // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n      // Don't change direction for an axis unless scroll offset has changed.\n      const scrollDirectionHorizontal =\n        scrollLeft !== this.state.scrollLeft\n          ? scrollLeft > this.state.scrollLeft\n            ? SCROLL_DIRECTION_FORWARD\n            : SCROLL_DIRECTION_BACKWARD\n          : this.state.scrollDirectionHorizontal;\n      const scrollDirectionVertical =\n        scrollTop !== this.state.scrollTop\n          ? scrollTop > this.state.scrollTop\n            ? SCROLL_DIRECTION_FORWARD\n            : SCROLL_DIRECTION_BACKWARD\n          : this.state.scrollDirectionVertical;\n\n      const newState: State = {\n        isScrolling: true,\n        scrollDirectionHorizontal,\n        scrollDirectionVertical,\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED as 'observed' | 'requested'\n      };\n\n      if (!autoHeight) {\n        newState.scrollTop = scrollTop;\n      }\n\n      if (!autoWidth) {\n        newState.scrollLeft = scrollLeft;\n      }\n\n      newState.needToResetStyleCache = false;\n      this.setState(newState);\n    }\n\n    this._invokeOnScrollMemoizer({\n      scrollLeft,\n      scrollTop,\n      totalColumnsWidth,\n      totalRowsHeight\n    });\n  }\n\n  /**\n   * Invalidate VirtualGrid size and recompute visible cells.\n   * This is a deferred wrapper for recomputeVirtualGridSize().\n   * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n   * This method is intended for advanced use-cases like CellMeasurer.\n   */\n  // @TODO (bvaughn) Add automated test coverage for this.\n  invalidateCellSizeAfterRender({ columnIndex, rowIndex }: CellPosition) {\n    this._deferredInvalidateColumnIndex =\n      typeof this._deferredInvalidateColumnIndex === 'number'\n        ? Math.min(this._deferredInvalidateColumnIndex, columnIndex)\n        : columnIndex;\n    this._deferredInvalidateRowIndex =\n      typeof this._deferredInvalidateRowIndex === 'number'\n        ? Math.min(this._deferredInvalidateRowIndex, rowIndex)\n        : rowIndex;\n  }\n\n  /**\n   * Pre-measure all columns and rows in a VirtualGrid.\n   * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n   * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n   */\n  measureAllCells() {\n    const { columnCount, rowCount } = this.props;\n    const { instanceProps } = this.state;\n    instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n    instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n  }\n\n  /**\n   * Forced recompute of row heights and column widths.\n   * This function should be called if dynamic column or row sizes have changed but nothing else has.\n   * Since VirtualGrid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n   */\n  recomputeVirtualGridSize({ columnIndex = 0, rowIndex = 0 } = {}) {\n    const { scrollToColumn, scrollToRow } = this.props;\n    const { instanceProps } = this.state;\n\n    instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n    instanceProps.rowSizeAndPositionManager.resetCell(rowIndex);\n\n    // Cell sizes may be determined by a function property.\n    // In this case the cDU handler can't know if they changed.\n    // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n    this._recomputeScrollLeftFlag =\n      scrollToColumn >= 0 &&\n      (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD\n        ? columnIndex <= scrollToColumn\n        : columnIndex >= scrollToColumn);\n    this._recomputeScrollTopFlag =\n      scrollToRow >= 0 &&\n      (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD\n        ? rowIndex <= scrollToRow\n        : rowIndex >= scrollToRow);\n\n    // Clear cell cache in case we are scrolling;\n    // Invalid row heights likely mean invalid cached content as well.\n    this._styleCache = {};\n    this._cellCache = {};\n\n    this.forceUpdate();\n  }\n\n  /**\n   * Ensure column and row are visible.\n   */\n  scrollToCell({ columnIndex, rowIndex }: CellPosition) {\n    const { columnCount } = this.props;\n\n    const { props } = this;\n\n    // Don't adjust scroll offset for single-column grids (eg List, Table).\n    // This can cause a funky scroll offset because of the vertical scrollbar width.\n    if (columnCount > 1 && columnIndex !== undefined) {\n      this._updateScrollLeftForScrollToColumn({\n        ...props,\n        scrollToColumn: columnIndex\n      });\n    }\n\n    if (rowIndex !== undefined) {\n      this._updateScrollTopForScrollToRow({\n        ...props,\n        scrollToRow: rowIndex\n      });\n    }\n  }\n\n  componentDidMount() {\n    const { getScrollbarSize, height, scrollLeft, scrollToColumn, scrollTop, scrollToRow, width } = this.props;\n\n    const { instanceProps } = this.state;\n\n    // Reset initial offsets to be ignored in browser\n    this._initialScrollTop = 0;\n    this._initialScrollLeft = 0;\n\n    // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n    // We must do this at the start of the method as we may calculate and update scroll position below.\n    this._handleInvalidatedVirtualGridSize();\n\n    // If this component was first rendered server-side, scrollbar size will be undefined.\n    // In that event we need to remeasure.\n    if (!instanceProps.scrollbarSizeMeasured) {\n      this.setState((prevState) => {\n        const stateUpdate = { ...prevState, needToResetStyleCache: false };\n        stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n        stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n        return stateUpdate;\n      });\n    }\n\n    if ((typeof scrollLeft === 'number' && scrollLeft >= 0) || (typeof scrollTop === 'number' && scrollTop >= 0)) {\n      const stateUpdate = VirtualGrid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft,\n        scrollTop\n      });\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n\n    // refs don't work in `react-test-renderer`\n    if (this._scrollingContainer) {\n      // setting the ref's scrollLeft and scrollTop.\n      // Somehow in MultiVirtualGrid the main grid doesn't trigger a update on mount.\n      if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n        this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n      }\n      if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n        this._scrollingContainer.scrollTop = this.state.scrollTop;\n      }\n    }\n\n    // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n    // Setting a state may cause us to later thing we've updated the offce when we haven't.\n    const sizeIsBiggerThanZero = height > 0 && width > 0;\n    if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n      this._updateScrollLeftForScrollToColumn();\n    }\n    if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n      this._updateScrollTopForScrollToRow();\n    }\n\n    // Update onRowsRendered callback\n    this._invokeOnVirtualGridRenderedHelper();\n\n    // Initialize onScroll callback\n    this._invokeOnScrollMemoizer({\n      scrollLeft: scrollLeft || 0,\n      scrollTop: scrollTop || 0,\n      totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n      totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n    });\n\n    this._maybeCallOnScrollbarPresenceChange();\n  }\n\n  /**\n   * @private\n   * This method updates scrollLeft/scrollTop in state for the following conditions:\n   * 1) New scroll-to-cell props have been set\n   */\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const {\n      autoHeight,\n      autoWidth,\n      columnCount,\n      height,\n      rowCount,\n      scrollToAlignment,\n      scrollToColumn,\n      scrollToRow,\n      width\n    } = this.props;\n    const { scrollLeft, scrollPositionChangeReason, scrollTop, instanceProps } = this.state;\n    // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n    // We must do this at the start of the method as we may calculate and update scroll position below.\n    this._handleInvalidatedVirtualGridSize();\n\n    // Handle edge case where column or row count has only just increased over 0.\n    // In this case we may have to restore a previously-specified scroll offset.\n    // For more info see bvaughn/react-virtualized/issues/218\n    const columnOrRowCountJustIncreasedFromZero =\n      (columnCount > 0 && prevProps.columnCount === 0) || (rowCount > 0 && prevProps.rowCount === 0);\n\n    // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n    // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n    // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n    // So we only set these when we require an adjustment of the scroll position.\n    // See issue #2 for more information.\n    if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n      // @TRICKY :autoHeight and :autoWidth properties instructs VirtualGrid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n      // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n      if (\n        !autoWidth &&\n        scrollLeft >= 0 &&\n        (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)\n      ) {\n        this._scrollingContainer.scrollLeft = scrollLeft;\n      }\n      if (\n        !autoHeight &&\n        scrollTop >= 0 &&\n        (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)\n      ) {\n        this._scrollingContainer.scrollTop = scrollTop;\n      }\n    }\n\n    // Special case where the previous size was 0:\n    // In this case we don't show any windowed cells at all.\n    // So we should always recalculate offset afterwards.\n    const sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && (height > 0 && width > 0);\n\n    // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n    // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n    if (this._recomputeScrollLeftFlag) {\n      this._recomputeScrollLeftFlag = false;\n      this._updateScrollLeftForScrollToColumn(this.props);\n    } else {\n      updateScrollIndexHelper({\n        cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n        previousCellsCount: prevProps.columnCount,\n        previousCellSize: prevProps.columnWidth,\n        previousScrollToAlignment: prevProps.scrollToAlignment,\n        previousScrollToIndex: prevProps.scrollToColumn,\n        previousSize: prevProps.width,\n        scrollOffset: scrollLeft,\n        scrollToAlignment,\n        scrollToIndex: scrollToColumn,\n        size: width,\n        sizeJustIncreasedFromZero,\n        updateScrollIndexCallback: () => this._updateScrollLeftForScrollToColumn(this.props)\n      });\n    }\n\n    if (this._recomputeScrollTopFlag) {\n      this._recomputeScrollTopFlag = false;\n      this._updateScrollTopForScrollToRow(this.props);\n    } else {\n      updateScrollIndexHelper({\n        cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n        previousCellsCount: prevProps.rowCount,\n        previousCellSize: prevProps.rowHeight,\n        previousScrollToAlignment: prevProps.scrollToAlignment,\n        previousScrollToIndex: prevProps.scrollToRow,\n        previousSize: prevProps.height,\n        scrollOffset: scrollTop,\n        scrollToAlignment,\n        scrollToIndex: scrollToRow,\n        size: height,\n        sizeJustIncreasedFromZero,\n        updateScrollIndexCallback: () => this._updateScrollTopForScrollToRow(this.props)\n      });\n    }\n\n    // Update onRowsRendered callback if start/stop indices have changed\n    this._invokeOnVirtualGridRenderedHelper();\n\n    // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n    if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n      const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft,\n        scrollTop,\n        totalColumnsWidth,\n        totalRowsHeight\n      });\n    }\n\n    this._maybeCallOnScrollbarPresenceChange();\n  }\n\n  componentWillUnmount() {\n    if (this._disablePointerEventsTimeoutId) {\n      cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n    }\n  }\n\n  /**\n   * This method updates scrollLeft/scrollTop in state for the following conditions:\n   * 1) Empty content (0 rows or columns)\n   * 2) New scroll props overriding the current state\n   * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n   */\n  static getDerivedStateFromProps(nextProps: Props, prevState: State): State {\n    const newState: State = {};\n    const { instanceProps } = prevState;\n\n    if (\n      (nextProps.columnCount === 0 && prevState.scrollLeft !== 0) ||\n      (nextProps.rowCount === 0 && prevState.scrollTop !== 0)\n    ) {\n      newState.scrollLeft = 0;\n      newState.scrollTop = 0;\n\n      // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n      // scrollTo{Column,Row} should override scroll{Left,Top}\n    } else if (\n      (nextProps.scrollLeft !== instanceProps.prevScrollLeft && nextProps.scrollToColumn < 0) ||\n      (nextProps.scrollTop !== instanceProps.prevScrollTop && nextProps.scrollToRow < 0)\n    ) {\n      Object.assign(\n        newState,\n        VirtualGrid._getScrollToPositionStateUpdate({\n          prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        })\n      );\n    }\n\n    // Initially we should not clearStyleCache\n    newState.needToResetStyleCache = false;\n    if (\n      nextProps.columnWidth !== instanceProps.prevColumnWidth ||\n      nextProps.rowHeight !== instanceProps.prevRowHeight\n    ) {\n      // Reset cache. set it to {} in render\n      newState.needToResetStyleCache = true;\n    }\n\n    instanceProps.columnSizeAndPositionManager.configure({\n      cellCount: nextProps.columnCount,\n      estimatedCellSize: VirtualGrid._getEstimatedColumnSize(nextProps),\n      cellSizeGetter: VirtualGrid._wrapSizeGetter(nextProps.columnWidth)\n    });\n\n    instanceProps.rowSizeAndPositionManager.configure({\n      cellCount: nextProps.rowCount,\n      estimatedCellSize: VirtualGrid._getEstimatedRowSize(nextProps),\n      cellSizeGetter: VirtualGrid._wrapSizeGetter(nextProps.rowHeight)\n    });\n\n    if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n      instanceProps.prevColumnCount = 0;\n      instanceProps.prevRowCount = 0;\n    }\n\n    // If scrolling is controlled outside this component, clear cache when scrolling stops\n    if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n      Object.assign(newState, {\n        isScrolling: false\n      });\n    }\n\n    let maybeStateA;\n    let maybeStateB;\n\n    calculateSizeAndPositionDataAndUpdateScrollOffset({\n      cellCount: instanceProps.prevColumnCount,\n      cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n      computeMetadataCallback: () => instanceProps.columnSizeAndPositionManager.resetCell(0),\n      computeMetadataCallbackProps: nextProps,\n      nextCellsCount: nextProps.columnCount,\n      nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n      nextScrollToIndex: nextProps.scrollToColumn,\n      scrollToIndex: instanceProps.prevScrollToColumn,\n      updateScrollOffsetForScrollToIndex: () => {\n        maybeStateA = VirtualGrid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n      }\n    });\n    calculateSizeAndPositionDataAndUpdateScrollOffset({\n      cellCount: instanceProps.prevRowCount,\n      cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n      computeMetadataCallback: () => instanceProps.rowSizeAndPositionManager.resetCell(0),\n      computeMetadataCallbackProps: nextProps,\n      nextCellsCount: nextProps.rowCount,\n      nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n      nextScrollToIndex: nextProps.scrollToRow,\n      scrollToIndex: instanceProps.prevScrollToRow,\n      updateScrollOffsetForScrollToIndex: () => {\n        maybeStateB = VirtualGrid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n      }\n    });\n\n    instanceProps.prevColumnCount = nextProps.columnCount;\n    instanceProps.prevColumnWidth = nextProps.columnWidth;\n    instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n    instanceProps.prevRowCount = nextProps.rowCount;\n    instanceProps.prevRowHeight = nextProps.rowHeight;\n    instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n    instanceProps.prevScrollToRow = nextProps.scrollToRow;\n    instanceProps.prevScrollLeft = nextProps.scrollLeft;\n    instanceProps.prevScrollTop = nextProps.scrollTop;\n\n    // getting scrollBarSize (moved from componentWillMount)\n    instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n    if (instanceProps.scrollbarSize === undefined) {\n      instanceProps.scrollbarSizeMeasured = false;\n      instanceProps.scrollbarSize = 0;\n    } else {\n      instanceProps.scrollbarSizeMeasured = true;\n    }\n\n    newState.instanceProps = instanceProps;\n\n    return { ...newState, ...maybeStateA, ...maybeStateB };\n  }\n\n  render() {\n    const {\n      autoContainerWidth,\n      autoHeight,\n      autoWidth,\n      className,\n      containerProps,\n      containerRole,\n      containerStyle,\n      height,\n      id,\n      noContentRenderer,\n      role,\n      style,\n      tabIndex,\n      width,\n      scrollContainerComponent,\n      innerScrollContainerComponent\n    } = this.props;\n    const { instanceProps, needToResetStyleCache } = this.state;\n\n    const isScrolling = this._isScrolling();\n\n    const gridStyle: {\n      boxSizing: string,\n      direction: string,\n      height: string | number,\n      position: string,\n      width: string | number,\n      WebkitOverflowScrolling: string,\n      willChange: string,\n      overflowX?: string,\n      overflowY?: string\n    } = {\n      boxSizing: 'border-box',\n      direction: 'ltr',\n      height: autoHeight ? 'auto' : height,\n      position: 'relative',\n      width: autoWidth ? 'auto' : width,\n      WebkitOverflowScrolling: 'touch',\n      willChange: 'transform'\n    };\n\n    if (needToResetStyleCache) {\n      this._styleCache = {};\n    }\n\n    // calculate _styleCache here\n    // if state.isScrolling (not from _isScrolling) then reset\n    if (!this.state.isScrolling) {\n      this._resetStyleCache();\n    }\n\n    // calculate children to render here\n    this._calculateChildrenToRender(this.props, this.state);\n\n    const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n    const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n\n    // Force browser to hide scrollbars when we know they aren't necessary.\n    // Otherwise once scrollbars appear they may not disappear again.\n    // For more info see issue #116\n    const verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n    const horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n    if (\n      horizontalScrollBarSize !== this._horizontalScrollBarSize ||\n      verticalScrollBarSize !== this._verticalScrollBarSize\n    ) {\n      this._horizontalScrollBarSize = horizontalScrollBarSize;\n      this._verticalScrollBarSize = verticalScrollBarSize;\n      this._scrollbarPresenceChanged = true;\n    }\n\n    // Also explicitly init styles to 'auto' if scrollbars are required.\n    // This works around an obscure edge case where external CSS styles have not yet been loaded,\n    // But an initial scroll index of offset is set as an external prop.\n    // Without this style, VirtualGrid would render the correct range of cells but would NOT update its internal offset.\n    // This was originally reported via clauderic/react-infinite-calendar/issues/23\n    gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n    gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n\n    const childrenToDisplay = this._childrenToDisplay;\n\n    const showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n\n    const scrollContainerProps = {\n      ...containerProps,\n      \"ref\": this._setScrollingContainerRef,\n      'aria-label': this.props['aria-label'],\n      'aria-readonly': this.props['aria-readonly'],\n      \"className\": clsx('ReactVirtualized__VirtualGrid', className),\n      id,\n      \"onScroll\": this._onScroll,\n      role,\n      \"style\": {\n        ...gridStyle,\n        ...style\n      },\n      tabIndex\n    };\n\n    let innerScrollContainer = null;\n    if (childrenToDisplay.length > 0) {\n      const innerScrollContainerProps = {\n        className: 'ReactVirtualized__VirtualGrid__innerScrollContainer',\n        key: 'ReactVirtualized__VirtualGrid__innerScrollContainer',\n        role: containerRole,\n        style: {\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative',\n          ...containerStyle\n        }\n      };\n      innerScrollContainer = React.createElement(\n        innerScrollContainerComponent,\n        innerScrollContainerProps,\n        childrenToDisplay\n      );\n    }\n    return React.createElement(scrollContainerComponent, scrollContainerProps, [\n      innerScrollContainer,\n      showNoContentRenderer && noContentRenderer()\n    ]);\n  }\n\n  /* ---------------------------- Helper methods ---------------------------- */\n\n  _calculateChildrenToRender(props: Props = this.props, state: State = this.state) {\n    const {\n      cellRenderer,\n      cellRangeRenderer,\n      columnCount,\n      deferredMeasurementCache,\n      height,\n      overscanColumnCount,\n      overscanIndicesGetter,\n      overscanRowCount,\n      rowCount,\n      width,\n      isScrollingOptOut\n    } = props;\n\n    const { scrollDirectionHorizontal, scrollDirectionVertical, instanceProps } = state;\n\n    const scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n    const scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n    const isScrolling = this._isScrolling(props, state);\n\n    this._childrenToDisplay = [];\n\n    // Render only enough columns and rows to cover the visible area of the grid.\n    if (height > 0 && width > 0) {\n      const visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n        containerSize: width,\n        offset: scrollLeft\n      });\n      const visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n        containerSize: height,\n        offset: scrollTop\n      });\n\n      const horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n        containerSize: width,\n        offset: scrollLeft\n      });\n      const verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n        containerSize: height,\n        offset: scrollTop\n      });\n\n      // Store for _invokeOnVirtualGridRenderedHelper()\n      this._renderedColumnStartIndex = visibleColumnIndices.start;\n      this._renderedColumnStopIndex = visibleColumnIndices.stop;\n      this._renderedRowStartIndex = visibleRowIndices.start;\n      this._renderedRowStopIndex = visibleRowIndices.stop;\n\n      const overscanColumnIndices = overscanIndicesGetter({\n        direction: 'horizontal',\n        cellCount: columnCount,\n        overscanCellsCount: overscanColumnCount,\n        scrollDirection: scrollDirectionHorizontal,\n        startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n        stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n      });\n\n      const overscanRowIndices = overscanIndicesGetter({\n        direction: 'vertical',\n        cellCount: rowCount,\n        overscanCellsCount: overscanRowCount,\n        scrollDirection: scrollDirectionVertical,\n        startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n        stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n      });\n\n      // Store for _invokeOnVirtualGridRenderedHelper()\n      let columnStartIndex = overscanColumnIndices.overscanStartIndex;\n      let columnStopIndex = overscanColumnIndices.overscanStopIndex;\n      let rowStartIndex = overscanRowIndices.overscanStartIndex;\n      let rowStopIndex = overscanRowIndices.overscanStopIndex;\n\n      // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n      if (deferredMeasurementCache) {\n        // If rows have a dynamic height, scan the rows we are about to render.\n        // If any have not yet been measured, then we need to render all columns initially,\n        // Because the height of the row is equal to the tallest cell within that row,\n        // (And so we can't know the height without measuring all column-cells first).\n        if (!deferredMeasurementCache.hasFixedHeight()) {\n          for (let rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n            if (!deferredMeasurementCache.has(rowIndex, 0)) {\n              columnStartIndex = 0;\n              columnStopIndex = columnCount - 1;\n              break;\n            }\n          }\n        }\n\n        // If columns have a dynamic width, scan the columns we are about to render.\n        // If any have not yet been measured, then we need to render all rows initially,\n        // Because the width of the column is equal to the widest cell within that column,\n        // (And so we can't know the width without measuring all row-cells first).\n        if (!deferredMeasurementCache.hasFixedWidth()) {\n          for (let columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n            if (!deferredMeasurementCache.has(0, columnIndex)) {\n              rowStartIndex = 0;\n              rowStopIndex = rowCount - 1;\n              break;\n            }\n          }\n        }\n      }\n\n      this._childrenToDisplay = cellRangeRenderer({\n        cellCache: this._cellCache,\n        cellRenderer,\n        columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n        columnStartIndex,\n        columnStopIndex,\n        deferredMeasurementCache,\n        horizontalOffsetAdjustment,\n        isScrolling,\n        isScrollingOptOut,\n        parent: this,\n        rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n        rowStartIndex,\n        rowStopIndex,\n        scrollLeft,\n        scrollTop,\n        styleCache: this._styleCache,\n        verticalOffsetAdjustment,\n        visibleColumnIndices,\n        visibleRowIndices\n      });\n\n      // update the indices\n      this._columnStartIndex = columnStartIndex;\n      this._columnStopIndex = columnStopIndex;\n      this._rowStartIndex = rowStartIndex;\n      this._rowStopIndex = rowStopIndex;\n    }\n  }\n\n  /**\n   * Sets an :isScrolling flag for a small window of time.\n   * This flag is used to disable pointer events on the scrollable portion of the VirtualGrid.\n   * This prevents jerky/stuttery mouse-wheel scrolling.\n   */\n  _debounceScrollEnded() {\n    const { scrollingResetTimeInterval } = this.props;\n\n    if (this._disablePointerEventsTimeoutId) {\n      cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n    }\n\n    this._disablePointerEventsTimeoutId = requestAnimationTimeout(\n      this._debounceScrollEndedCallback,\n      scrollingResetTimeInterval\n    );\n  }\n\n  _debounceScrollEndedCallback = () => {\n    this._disablePointerEventsTimeoutId = null;\n    // isScrolling is used to determine if we reset styleCache\n    this.setState({\n      isScrolling: false,\n      needToResetStyleCache: false\n    });\n  }\n\n  static _getEstimatedColumnSize(props: Props) {\n    return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n  }\n\n  static _getEstimatedRowSize(props: Props) {\n    return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n  }\n\n  /**\n   * Check for batched CellMeasurer size invalidations.\n   * This will occur the first time one or more previously unmeasured cells are rendered.\n   */\n  _handleInvalidatedVirtualGridSize() {\n    if (\n      typeof this._deferredInvalidateColumnIndex === 'number' &&\n      typeof this._deferredInvalidateRowIndex === 'number'\n    ) {\n      const columnIndex = this._deferredInvalidateColumnIndex;\n      const rowIndex = this._deferredInvalidateRowIndex;\n\n      this._deferredInvalidateColumnIndex = null;\n      this._deferredInvalidateRowIndex = null;\n\n      this.recomputeVirtualGridSize({ columnIndex, rowIndex });\n    }\n  }\n\n  _invokeOnVirtualGridRenderedHelper = () => {\n    const { onSectionRendered } = this.props;\n\n    this._onVirtualGridRenderedMemoizer({\n      callback: onSectionRendered,\n      indices: {\n        columnOverscanStartIndex: this._columnStartIndex,\n        columnOverscanStopIndex: this._columnStopIndex,\n        columnStartIndex: this._renderedColumnStartIndex,\n        columnStopIndex: this._renderedColumnStopIndex,\n        rowOverscanStartIndex: this._rowStartIndex,\n        rowOverscanStopIndex: this._rowStopIndex,\n        rowStartIndex: this._renderedRowStartIndex,\n        rowStopIndex: this._renderedRowStopIndex\n      }\n    });\n  }\n\n  _invokeOnScrollMemoizer({\n    scrollLeft,\n    scrollTop,\n    totalColumnsWidth,\n    totalRowsHeight\n  }: {\n    scrollLeft: number,\n    scrollTop: number,\n    totalColumnsWidth: number,\n    totalRowsHeight: number\n  }) {\n    this._onScrollMemoizer({\n      callback: ({ scrollLeft, scrollTop }) => {\n        const { height, onScroll, width } = this.props;\n\n        onScroll({\n          clientHeight: height,\n          clientWidth: width,\n          scrollHeight: totalRowsHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth: totalColumnsWidth\n        });\n      },\n      indices: {\n        scrollLeft,\n        scrollTop\n      }\n    });\n  }\n\n  _isScrolling(props: Props = this.props, state: State = this.state): boolean {\n    // If isScrolling is defined in props, use it to override the value in state\n    // This is a performance optimization for WindowScroller + VirtualGrid\n    return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n  }\n\n  _maybeCallOnScrollbarPresenceChange() {\n    if (this._scrollbarPresenceChanged) {\n      const { onScrollbarPresenceChange } = this.props;\n\n      this._scrollbarPresenceChanged = false;\n\n      onScrollbarPresenceChange({\n        horizontal: this._horizontalScrollBarSize > 0,\n        size: this.state.instanceProps.scrollbarSize,\n        vertical: this._verticalScrollBarSize > 0\n      });\n    }\n  }\n\n  _setScrollingContainerRef = (ref: Element) => {\n    this._scrollingContainer = ref;\n  }\n\n  /**\n   * Get the updated state after scrolling to\n   * scrollLeft and scrollTop\n   */\n  static _getScrollToPositionStateUpdate({\n    prevState,\n    scrollLeft,\n    scrollTop\n  }: {\n    prevState: State,\n    scrollLeft?: number,\n    scrollTop?: number\n  }): State {\n    const newState: any = {\n      scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n    };\n\n    if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n      newState.scrollDirectionHorizontal =\n        scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n      newState.scrollLeft = scrollLeft;\n    }\n\n    if (typeof scrollTop === 'number' && scrollTop >= 0) {\n      newState.scrollDirectionVertical =\n        scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n      newState.scrollTop = scrollTop;\n    }\n\n    if (\n      (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft) ||\n      (typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop)\n    ) {\n      return newState;\n    }\n    return null;\n  }\n\n  /**\n   * Scroll to the specified offset(s).\n   * Useful for animating position changes.\n   */\n  scrollToPosition({ scrollLeft, scrollTop }: ScrollPosition) {\n    const stateUpdate = VirtualGrid._getScrollToPositionStateUpdate({\n      prevState: this.state,\n      scrollLeft,\n      scrollTop\n    });\n\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  static _wrapSizeGetter(value: CellSize): CellSizeGetter {\n    return typeof value === 'function' ? value : () => value as any;\n  }\n\n  static _getCalculatedScrollLeft(nextProps: Props, prevState: State) {\n    const { columnCount, height, scrollToAlignment, scrollToColumn, width } = nextProps;\n    const { scrollLeft, instanceProps } = prevState;\n\n    if (columnCount > 0) {\n      const finalColumn = columnCount - 1;\n      const targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n      const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      const scrollBarSize =\n        instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n\n      return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: scrollToAlignment,\n        containerSize: width - scrollBarSize,\n        currentOffset: scrollLeft,\n        targetIndex\n      });\n    }\n    return 0;\n  }\n\n  _getCalculatedScrollLeft(props: Props = this.props, state: State = this.state) {\n    return VirtualGrid._getCalculatedScrollLeft(props, state);\n  }\n\n  static _getScrollLeftForScrollToColumnStateUpdate(nextProps: Props, prevState: State): State {\n    const { scrollLeft } = prevState;\n    const calculatedScrollLeft = VirtualGrid._getCalculatedScrollLeft(nextProps, prevState);\n\n    if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n      return VirtualGrid._getScrollToPositionStateUpdate({\n        prevState,\n        scrollLeft: calculatedScrollLeft,\n        scrollTop: -1\n      });\n    }\n    return null;\n  }\n\n  _updateScrollLeftForScrollToColumn(props: Props = this.props, state: State = this.state) {\n    const stateUpdate = VirtualGrid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  static _getCalculatedScrollTop(nextProps: Props, prevState: State) {\n    const { height, rowCount, scrollToAlignment, scrollToRow, width } = nextProps;\n    const { scrollTop, instanceProps } = prevState;\n\n    if (rowCount > 0) {\n      const finalRow = rowCount - 1;\n      const targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n      const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      const scrollBarSize =\n        instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: scrollToAlignment,\n        containerSize: height - scrollBarSize,\n        currentOffset: scrollTop,\n        targetIndex\n      });\n    }\n    return 0;\n  }\n\n  _getCalculatedScrollTop(props: Props = this.props, state: State = this.state) {\n    return VirtualGrid._getCalculatedScrollTop(props, state);\n  }\n\n  _resetStyleCache() {\n    const styleCache = this._styleCache;\n    const cellCache = this._cellCache;\n    const { isScrollingOptOut } = this.props;\n\n    // Reset cell and style caches once scrolling stops.\n    // This makes VirtualGrid simpler to use (since cells commonly change).\n    // And it keeps the caches from growing too large.\n    // Performance is most sensitive when a user is scrolling.\n    // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n    // This keeps the cellCache to a resonable size.\n    this._cellCache = {};\n    this._styleCache = {};\n\n    // Copy over the visible cell styles so avoid unnecessary re-render.\n    for (let rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n      for (let columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n        const key = `${rowIndex}-${columnIndex}`;\n        this._styleCache[key] = styleCache[key];\n\n        if (isScrollingOptOut) {\n          this._cellCache[key] = cellCache[key];\n        }\n      }\n    }\n  }\n\n  static _getScrollTopForScrollToRowStateUpdate(nextProps: Props, prevState: State): State {\n    const { scrollTop } = prevState;\n    const calculatedScrollTop = VirtualGrid._getCalculatedScrollTop(nextProps, prevState);\n\n    if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n      return VirtualGrid._getScrollToPositionStateUpdate({\n        prevState,\n        scrollLeft: -1,\n        scrollTop: calculatedScrollTop\n      });\n    }\n    return null;\n  }\n\n  _updateScrollTopForScrollToRow(props: Props = this.props, state: State = this.state) {\n    const stateUpdate = VirtualGrid._getScrollTopForScrollToRowStateUpdate(props, state);\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  _onScroll = (event: Event) => {\n    // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n    // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n    // See issue #404 for more information.\n    if (event.target === this._scrollingContainer) {\n      this.handleScrollEvent(event.target as any);\n    }\n  }\n}\n\npolyfill(VirtualGrid);\nexport default VirtualGrid;\n"],"file":"VirtualGrid.js"}