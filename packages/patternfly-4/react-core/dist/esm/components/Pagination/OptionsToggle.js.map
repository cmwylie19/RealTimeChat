{"version":3,"sources":["../../../../src/components/Pagination/OptionsToggle.tsx"],"names":["React","styles","css","fillTemplate","DropdownToggle","OptionsToggle","itemsTitle","optionsToggle","itemsPerPageTitle","firstIndex","lastIndex","itemCount","widgetId","showToggle","onToggle","_isOpen","undefined","isOpen","isDisabled","parentRef","toggleTemplate","ToggleTemplate","onEnter","optionsMenuToggle","modifiers","disabled","plain","text","optionsMenuToggleText","optionsMenuToggleButton"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,SAASC,YAAT,QAA6B,eAA7B;AAEA,SAASC,cAAT,QAA+B,aAA/B;AAiCA,OAAO,MAAMC,aAA0D,GAAG,CAAC;AACzEC,EAAAA,UAAU,GAAG,OAD4D;AAEzEC,EAAAA,aAAa,GAAG,QAFyD;AAGzEC,EAAAA,iBAAiB,GAAG,gBAHqD;AAIzEC,EAAAA,UAAU,GAAG,CAJ4D;AAKzEC,EAAAA,SAAS,GAAG,CAL6D;AAMzEC,EAAAA,SAAS,GAAG,CAN6D;AAOzEC,EAAAA,QAAQ,GAAG,EAP8D;AAQzEC,EAAAA,UAAU,GAAG,IAR4D;AASzEC,EAAAA,QAAQ,GAAIC,OAAD,IAAsBC,SATwC;AAUzEC,EAAAA,MAAM,GAAG,KAVgE;AAWzEC,EAAAA,UAAU,GAAG,KAX4D;AAYzEC,EAAAA,SAAS,GAAG,IAZ6D;AAazEC,EAAAA,cAAc,EAAEC,cAAc,GAAG,EAbwC;AAczEC,EAAAA,OAAO,GAAG;AAd+D,CAAD,KAe/C;AACzB,SACE;AAAK,IAAA,SAAS,EAAEpB,GAAG,CAACD,MAAM,CAACsB,iBAAR,EAA2BL,UAAU,IAAIjB,MAAM,CAACuB,SAAP,CAAiBC,QAA1D,EAAoExB,MAAM,CAACuB,SAAP,CAAiBE,KAArF,EAA4FzB,MAAM,CAACuB,SAAP,CAAiBG,IAA7G;AAAnB,KACGd,UAAU,IACT,oBAAC,KAAD,CAAO,QAAP,QACE;AAAM,IAAA,SAAS,EAAEX,GAAG,CAACD,MAAM,CAAC2B,qBAAR;AAApB,KACG,OAAOP,cAAP,KAA0B,QAA1B,GACClB,YAAY,CAACkB,cAAD,EAAiB;AAAEZ,IAAAA,UAAF;AAAcC,IAAAA,SAAd;AAAyBC,IAAAA,SAAzB;AAAoCL,IAAAA;AAApC,GAAjB,CADb,GAGC,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAEG,UAA5B;AAAwC,IAAA,SAAS,EAAEC,SAAnD;AAA8D,IAAA,SAAS,EAAEC,SAAzE;AAAoF,IAAA,UAAU,EAAEL;AAAhG,IAJJ,CADF,EAQE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAEgB,OADX;AAEE,kBAAYf,aAFd;AAGE,IAAA,QAAQ,EAAEO,QAHZ;AAIE,IAAA,UAAU,EAAEI,UAAU,IAAIP,SAAS,IAAI,CAJzC;AAKE,IAAA,MAAM,EAAEM,MALV;AAME,IAAA,EAAE,EAAG,GAAEL,QAAS,SANlB;AAOE,IAAA,SAAS,EAAEX,MAAM,CAAC4B,uBAPpB;AAQE,IAAA,SAAS,EAAEV;AARb,IARF,CAFJ,CADF;AAyBD,CAzCM;;AA7BLb,EAAAA,U;AAEAC,EAAAA,a;AAEAC,EAAAA,iB;AAEAC,EAAAA,U;AAEAC,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,Q;AAEAC,EAAAA,U;AAEAC,EAAAA,Q;AAEAG,EAAAA,M;AAEAC,EAAAA,U;AAEAC,EAAAA,S;AAEAC,EAAAA,c;AAEAE,EAAAA,O","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { DropdownToggle } from '../Dropdown';\n\nexport interface OptionsToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** The text to be displayed on the Options Toggle */\n  optionsToggle?: string;\n  /** The Title of the Pagination Options Menu */\n  itemsPerPageTitle?: string;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** Id added to the title of the Pagination Options Menu */\n  widgetId?: string;\n  /** showToggle */\n  showToggle?: boolean;\n  /** Event function that fires when user clicks the Options Menu toggle */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag indicating if the Options Menu dropdown is open or not */\n  isOpen?: boolean;\n  /** Flag indicating if the Options Menu is disabled */\n  isDisabled?: boolean;\n  /** */\n  parentRef?: HTMLElement;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n}\n\nexport const OptionsToggle: React.FunctionComponent<OptionsToggleProps> = ({\n  itemsTitle = 'items',\n  optionsToggle = 'Select',\n  itemsPerPageTitle = 'Items per page',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount = 0,\n  widgetId = '',\n  showToggle = true,\n  onToggle = (_isOpen: boolean) => undefined as any,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate = '',\n  onEnter = null\n}: OptionsToggleProps ) => {\n  return (\n    <div className={css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text)} >\n      {showToggle && (\n        <React.Fragment>\n          <span className={css(styles.optionsMenuToggleText)}>\n            {typeof ToggleTemplate === 'string' ? (\n              fillTemplate(ToggleTemplate, { firstIndex, lastIndex, itemCount, itemsTitle })\n            ) : (\n              <ToggleTemplate firstIndex={firstIndex} lastIndex={lastIndex} itemCount={itemCount} itemsTitle={itemsTitle}/>\n            )}\n          </span>\n          <DropdownToggle\n            onEnter={onEnter}\n            aria-label={optionsToggle}\n            onToggle={onToggle}\n            isDisabled={isDisabled || itemCount <= 0}\n            isOpen={isOpen}\n            id={`${widgetId}-toggle`}\n            className={styles.optionsMenuToggleButton}\n            parentRef={parentRef}\n          >\n          </DropdownToggle>\n        </React.Fragment>\n      )}\n    </div>);\n};\n"],"file":"OptionsToggle.js"}