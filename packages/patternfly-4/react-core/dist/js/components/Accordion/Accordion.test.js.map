{"version":3,"sources":["../../../../src/components/Accordion/Accordion.test.tsx"],"names":["describe","test","view","expect","render","toMatchSnapshot","button","find","getElement","props","toBe","className","toContain","container","AccordionToggle","getDOMNode","tagName","toLocaleUpperCase","AccordionContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { Accordion } from './Accordion';\nimport { AccordionToggle } from './AccordionToggle';\nimport { AccordionContent } from './AccordionContent';\nimport { AccordionItem } from './AccordionItem';\n\ndescribe('Accordion', () => {\n  test('Accordion default', () => {\n    const view = shallow(<Accordion aria-label=\"this is a simple accordion\" />);\n    expect(view.render()).toMatchSnapshot();\n  });\n\n  test('Accordion with non-default headingLevel', () => {\n    const view = shallow(\n      <Accordion asDefinitionList={false} headingLevel=\"h2\">\n        <AccordionItem>\n          <AccordionToggle id=\"item-1\">Item One</AccordionToggle>\n          <AccordionContent>Item One Content</AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    );\n    expect(view.render()).toMatchSnapshot();\n  });\n\n  test('It should pass optional aria props', () => {\n    const view = mount(\n      <Accordion asDefinitionList>\n        <AccordionToggle aria-label=\"Toggle details for\" aria-labelledby=\"ex-toggle2 ex-item2\" id=\"ex-toggle2\" />\n      </Accordion>\n    );\n    const button = view.find('button[id=\"ex-toggle2\"]').getElement();\n    expect(button.props['aria-label']).toBe('Toggle details for');\n    expect(button.props['aria-labelledby']).toBe('ex-toggle2 ex-item2');\n    expect(button.props['aria-expanded']).toBe(false);\n  });\n\n  test('Toggle expanded', () => {\n    const view = mount(\n      <Accordion asDefinitionList>\n        <AccordionToggle aria-label=\"Toggle details for\" id=\"ex-toggle2\" isExpanded />\n      </Accordion>\n    );\n    const button = view.find('button[id=\"ex-toggle2\"]').getElement();\n    expect(button.props['aria-expanded']).toBe(true);\n    expect(button.props.className).toContain('pf-m-expanded');\n  });\n\n  test('Custom containers', () => {\n    const container = 'a';\n    const view = mount(\n      <Accordion headingLevel=\"h2\">\n        <AccordionItem>\n          <AccordionToggle id=\"item-1\" component={container}>Item One</AccordionToggle>\n          <AccordionContent component={container}>Item One Content</AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    );\n    expect(view.find(AccordionToggle).getDOMNode().tagName).toBe(container.toLocaleUpperCase());\n    expect(view.find(AccordionContent).getDOMNode().tagName).toBe(container.toLocaleUpperCase());\n  });\n});\n"],"file":"Accordion.test.js"}