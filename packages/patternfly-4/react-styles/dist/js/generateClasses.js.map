{"version":3,"sources":["../../src/generateClasses.js"],"names":["camelcase","require","glob","dirname","basename","resolve","join","parse","readFileSync","outputFileSync","outDir","__dirname","pfStylesDir","cssFiles","sync","cwd","ignore","forEach","filePath","absFilePath","cssContent","cssOutputPath","getCSSOutputPath","newClass","cssToJSNew","replace","inlineCssFiles","cssString","cssClasses","getCSSClasses","distinctValues","Set","classDeclaration","modifiersDeclaration","className","key","formatClassName","cleanClass","trim","isModifier","push","classSection","length","match","Boolean","startsWith","pathToCSSFile","getFormattedCSSOutputPath","dir","name","formattedDir","nodeText","nodeIndex","lastIndexOf","substring"],"mappings":"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","sourcesContent":["/* eslint-disable global-require,import/no-dynamic-require */\nconst camelcase = require('camel-case');\n\nconst glob = require('glob');\nconst { dirname, basename, resolve, join, parse } = require('path');\nconst { readFileSync } = require('fs');\nconst { outputFileSync } = require('fs-extra');\n\nconst outDir = resolve(__dirname, '../css');\nconst pfStylesDir = dirname(require.resolve('@patternfly/patternfly/patternfly.css'));\n\nconst cssFiles = glob.sync('**/*.css', {\n  cwd: pfStylesDir,\n  ignore: ['assets/**', '*ie11*.css']\n});\n\n/* Copy @patternfly/patternfly styles */\ncssFiles.forEach(filePath => {\n  const absFilePath = resolve(pfStylesDir, filePath);\n  const cssContent = readFileSync(absFilePath, 'utf8');\n  const cssOutputPath = getCSSOutputPath(outDir, filePath);\n  const newClass = cssToJSNew(cssContent, `./${basename(cssOutputPath)}`);\n\n  outputFileSync(cssOutputPath, cssContent);\n  outputFileSync(cssOutputPath.replace('.css', '.ts'), newClass);\n});\n\n/* Copy inline styles in the src/css folder */\nconst inlineCssFiles = glob.sync('src/css/**/*.css');\n\ninlineCssFiles.forEach(filePath => {\n  const absFilePath = resolve(filePath);\n  const cssContent = readFileSync(absFilePath, 'utf8');\n  const cssOutputPath = getCSSOutputPath(outDir, filePath).replace('src/css/', '');\n  const newClass = cssToJSNew(cssContent, `./${basename(cssOutputPath)}`);\n\n  outputFileSync(cssOutputPath, cssContent);\n  outputFileSync(cssOutputPath.replace('.css', '.ts'), newClass);\n});\n\nfunction cssToJSNew(cssString, cssOutputPath = '') {\n  const cssClasses = getCSSClasses(cssString);\n  const distinctValues = [...new Set(cssClasses)];\n  const classDeclaration = [];\n  const modifiersDeclaration = [];\n\n  distinctValues.forEach(className => {\n    const key = formatClassName(className);\n    const cleanClass = className.replace('.', '').trim();\n    if (isModifier(className)) {\n      modifiersDeclaration.push(`'${key}': '${cleanClass}'`);\n    } else {\n      classDeclaration.push(`${key}: '${cleanClass}'`);\n    }\n  });\n  const classSection = classDeclaration.length > 0 ? `${classDeclaration.join(',\\n  ')},` : '';\n\n  return `import '${cssOutputPath}';\n\nexport default {\n  ${classSection}\n  modifiers: {\n    ${modifiersDeclaration.join(',\\n    ')}\n  }\n}`;\n}\n\nfunction getCSSClasses(cssString) {\n  return cssString.match(/(\\.)(?!\\d)([^\\s\\.,{\\[>+~#:)]*)(?![^{]*})/g); //eslint-disable-line\n}\n\nfunction formatClassName(className) {\n  return camelcase(className.replace(/pf-((c|l|m|u|is|has)-)?/g, ''));\n}\n\nfunction isModifier(className) {\n  return Boolean(className && className.startsWith) && className.startsWith('.pf-m-');\n}\n\nfunction getCSSOutputPath(absFilePath, pathToCSSFile) {\n  return join(absFilePath, getFormattedCSSOutputPath(pathToCSSFile));\n}\n\nfunction getFormattedCSSOutputPath(pathToCSSFile) {\n  const { dir, name } = parse(pathToCSSFile);\n  let formattedDir = dir;\n  const nodeText = 'node_modules';\n  const nodeIndex = formattedDir.lastIndexOf(nodeText);\n  if (nodeIndex !== -1) {\n    formattedDir = formattedDir.substring(nodeIndex + nodeText.length);\n  }\n  return join(formattedDir, `${name}.css`);\n}\n"],"file":"generateClasses.js"}