{"version":3,"sources":["../../../../src/components/Nav/Nav.tsx"],"names":["React","styles","css","NavContext","createContext","Nav","Component","showLeftScrollButton","showRightScrollButton","state","setState","onSelect","event","groupId","itemId","to","preventDefault","onClick","props","onToggle","toggleValue","isExpanded","render","ariaLabel","children","className","theme","childrenProps","expanded","updateScrollButtonState","nav","modifiers","dark","start","end","variant","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport { NavVariants } from './NavVariants';\n\nimport { Omit } from '../../helpers/typeUtils';\n\nexport type NavSelectClickHandler = (\n  e: React.FormEvent<HTMLInputElement>,\n  itemId: number | string,\n  groupId: number | string,\n  to: string\n) => void;\n\nexport interface NavProps extends Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, 'onSelect'> {\n  /** Anything that can be rendered inside of the nav */\n  children?: React.ReactNode;\n  /** Additional classes added to the container */\n  className?: string;\n  /** Callback for updating when item selection changes */\n  onSelect?: (selectedItem: {groupId: number | string; itemId: number | string; to: string, event: React.FormEvent<HTMLInputElement>}) => void;\n  /** Callback for when a list is expanded or collapsed */\n  onToggle?: (toggledItem: {groupId: number | string ; isExpanded: boolean; event: React.FormEvent<HTMLInputElement>}) => void;\n  /** Accessibility label */\n  'aria-label'?: string;\n  /** Indicates which theme color to use */\n  theme?: 'dark' | 'light'\n}\n\nexport const NavContext = React.createContext({});\n\nexport class Nav extends React.Component<NavProps> {\n  static defaultProps: NavProps = {\n    'aria-label': '',\n    \"children\": null,\n    \"className\": '',\n    \"onSelect\": () => undefined,\n    \"onToggle\": () => undefined,\n    \"theme\": 'light'\n  };\n\n  state = {\n    showLeftScrollButton: false,\n    showRightScrollButton: false\n  };\n\n  updateScrollButtonState = (state: { showLeftScrollButton: boolean, showRightScrollButton: boolean }) => {\n    const { showLeftScrollButton, showRightScrollButton } = state;\n    this.setState({\n      showLeftScrollButton,\n      showRightScrollButton\n    });\n  }\n\n  // Callback from NavItem\n  onSelect(\n    event: React.FormEvent<HTMLInputElement>,\n    groupId: number | string,\n    itemId: number | string,\n    to: string,\n    preventDefault: boolean,\n    onClick: NavSelectClickHandler\n  ) {\n    if (preventDefault) {\n      event.preventDefault();\n    }\n\n    this.props.onSelect({ groupId, itemId, event, to });\n\n    if (onClick) {\n      onClick(event, itemId, groupId, to);\n    }\n  }\n\n  // Callback from NavExpandable\n  onToggle(event: React.MouseEvent<HTMLInputElement>, groupId: number | string, toggleValue: boolean) {\n    this.props.onToggle({\n      event,\n      groupId,\n      isExpanded: toggleValue\n    });\n  }\n\n  render() {\n    const { 'aria-label': ariaLabel, children, className, onSelect, onToggle, theme, ...props } = this.props;\n    const { showLeftScrollButton, showRightScrollButton } = this.state;\n    const childrenProps: any = (children as any).props;\n\n    return (\n      <NavContext.Provider\n        value={{\n          onSelect: (\n            event: React.FormEvent<HTMLInputElement>,\n            groupId: number | string,\n            itemId: number | string,\n            to: string,\n            preventDefault: boolean,\n            onClick: (e: React.FormEvent<HTMLInputElement>, itemId: number | string, groupId: number | string, to: string) => void\n          ) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),\n          onToggle: (event: React.MouseEvent<HTMLInputElement>, groupId: number | string, expanded: boolean) => this.onToggle(event, groupId, expanded),\n          updateScrollButtonState: this.updateScrollButtonState\n        }}\n      >\n        <nav\n          className={css(styles.nav, theme === 'dark' && styles.modifiers.dark, showLeftScrollButton && styles.modifiers.start, showRightScrollButton && styles.modifiers.end, className)}\n          aria-label={\n            ariaLabel === ''\n              ? typeof childrenProps !== 'undefined' && childrenProps.variant === 'tertiary' ? 'Local' : 'Global'\n              : ariaLabel\n          }\n          {...props}\n        >\n          {children}\n        </nav>\n      </NavContext.Provider>\n    );\n  }\n}\n"],"file":"Nav.js"}