{"version":3,"sources":["../../../../src/components/Virtualized/VirtualTableBody.tsx"],"names":["React","accessibilityOverscanIndicesGetter","VirtualGrid","clsx","VirtualTableBody","PureComponent","parent","rowIndex","style","isScrolling","isVisible","key","rowRenderer","props","writable","Object","getOwnPropertyDescriptor","width","index","ref","clientHeight","scrollHeight","scrollTop","onScroll","rowOverscanStartIndex","rowOverscanStopIndex","rowStartIndex","rowStopIndex","onRowsRendered","overscanStartIndex","overscanStopIndex","startIndex","stopIndex","forceUpdateVirtualGrid","forceUpdate","getOffsetForRow","alignment","getOffsetForCell","columnIndex","invalidateCellSizeAfterRender","measureAllRows","measureAllCells","recomputeVirtualGridSize","recomputeRowHeights","scrollToPosition","scrollToRow","scrollToCell","render","className","noRowsRenderer","scrollToIndex","columns","columnCount","rows","tabIndex","classNames","VirtualGridAny","tableLayout","display","_cellRenderer","length","_onScroll","_onSectionRendered","_setRef","autoHeight","estimatedRowSize","height","overscanIndicesGetter","overscanRowCount","rowHeight","rowCount","scrollToAlignment"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport * as React from 'react';\nimport {\n  NoContentRenderer,\n  Alignment,\n  CellSize,\n  CellPosition,\n  OverscanIndicesGetter,\n  RenderedSection,\n  CellRendererParams,\n  Scroll as VirtualGridScroll,\n  Scroll\n} from './types';\n\nimport accessibilityOverscanIndicesGetter from './accessibilityOverscanIndicesGetter';\nimport VirtualGrid from './VirtualGrid';\nimport clsx from 'clsx';\n\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n\ninterface Props {\n  'aria-label'?: string;\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  autoHeight: boolean;\n\n  /** Optional CSS class name */\n  className?: string;\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: number;\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  height: number;\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  noRowsRenderer: NoContentRenderer;\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n\n  onRowsRendered: (params: any) => void;\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  onScroll: (params: Scroll) => void;\n\n  /** See VirtualGrid#overscanIndicesGetter */\n  overscanIndicesGetter: OverscanIndicesGetter;\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  overscanRowCount: number;\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  rowHeight: CellSize;\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  rowRenderer: any;\n\n  /** Number of rows in list. */\n  rowCount: number;\n\n  /** See VirtualGrid#scrollToAlignment */\n  scrollToAlignment: Alignment;\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToIndex: number;\n\n  /** Vertical offset. */\n  scrollTop?: number;\n\n  /** Optional inline style */\n  style: Object;\n\n  /** Tab index for focus */\n  tabIndex?: number;\n\n  /** Width of list */\n  width: number;\n\n  columns?: any[];\n\n  columnCount?: number;\n\n  rows: any[];\n}\n\nexport default class VirtualTableBody extends React.PureComponent<Props> {\n  static defaultProps = {\n    autoHeight: false,\n    estimatedRowSize: 30,\n    onScroll: () => {},\n    noRowsRenderer: () => null,\n    onRowsRendered: () => {},\n    overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n    overscanRowCount: 10,\n    scrollToAlignment: 'auto',\n    scrollToIndex: -1,\n    style: {}\n  };\n\n  VirtualGrid: any;\n\n  forceUpdateVirtualGrid() {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.forceUpdate();\n    }\n  }\n\n  /** See VirtualGrid#getOffsetForCell */\n  getOffsetForRow({ alignment, index }: { alignment: Alignment, index: number }) {\n    if (this.VirtualGrid) {\n      const { scrollTop } = this.VirtualGrid.getOffsetForCell({\n        alignment,\n        rowIndex: index,\n        columnIndex: 0\n      });\n\n      return scrollTop;\n    }\n    return 0;\n  }\n\n  /** CellMeasurer compatibility */\n  invalidateCellSizeAfterRender({ columnIndex, rowIndex }: CellPosition) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.invalidateCellSizeAfterRender({\n        rowIndex,\n        columnIndex\n      });\n    }\n  }\n\n  /** See VirtualGrid#measureAllCells */\n  measureAllRows() {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.measureAllCells();\n    }\n  }\n\n  /** CellMeasurer compatibility */\n  recomputeVirtualGridSize({ columnIndex = 0, rowIndex = 0 }: CellPosition = {}) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.recomputeVirtualGridSize({\n        rowIndex,\n        columnIndex\n      });\n    }\n  }\n\n  /** See VirtualGrid#recomputeVirtualGridSize */\n  recomputeRowHeights(index: number = 0) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.recomputeVirtualGridSize({\n        rowIndex: index,\n        columnIndex: 0\n      });\n    }\n  }\n\n  /** See VirtualGrid#scrollToPosition */\n  scrollToPosition(scrollTop: number = 0) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.scrollToPosition({ scrollTop });\n    }\n  }\n\n  /** See VirtualGrid#scrollToCell */\n  scrollToRow(index: number = 0) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.scrollToCell({\n        columnIndex: 0,\n        rowIndex: index\n      });\n    }\n  }\n\n  render() {\n    const { className, noRowsRenderer, scrollToIndex, width, columns, columnCount, rows, tabIndex, style } = this.props;\n\n    const classNames = clsx('ReactVirtualized__List', className);\n\n    const VirtualGridAny = VirtualGrid as any;\n    return (\n      // note: these aria props if rendered will break a11y for role=\"presentation\"\n      // this approach attempts to fix non standard table grids\n      // see: https://www.html5accessibility.com/tests/aria-table-fix.html\n      <VirtualGridAny\n        {...this.props}\n        style={{\n          tableLayout: 'fixed',\n          display: 'block',\n          ...style\n        }}\n        containerStyle={{\n          display: 'block'\n        }}\n        aria-label={null}\n        aria-readonly={null}\n        tabIndex={null}\n        role=\"presentation\"\n        autoContainerWidth\n        cellRenderer={this._cellRenderer}\n        className={classNames}\n        columnWidth={width}\n        columnCount={columns ? columns.length : columnCount}\n        noContentRenderer={noRowsRenderer}\n        onScroll={this._onScroll}\n        onSectionRendered={this._onSectionRendered}\n        ref={this._setRef}\n        scrollToRow={scrollToIndex}\n        columns={columns}\n        rows={rows}\n        scrollContainerComponent=\"table\"\n        innerScrollContainerComponent=\"tbody\"\n      />\n    );\n  }\n\n  _cellRenderer = ({ parent, rowIndex, style, isScrolling, isVisible, key }: CellRendererParams) => {\n    const { rowRenderer } = this.props;\n\n    // TRICKY The style object is sometimes cached by VirtualGrid.\n    // This prevents new style objects from bypassing shallowCompare().\n    // However as of React 16, style props are auto-frozen (at least in dev mode)\n    // Check to make sure we can still modify the style before proceeding.\n    // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n    const { writable } = Object.getOwnPropertyDescriptor(style, 'width');\n    if (writable) {\n      // By default, List cells should be 100% width.\n      // This prevents them from flowing under a scrollbar (if present).\n      style.width = '100%';\n    }\n\n    return rowRenderer({\n      index: rowIndex,\n      style,\n      isScrolling,\n      isVisible,\n      key,\n      parent\n    });\n  }\n\n  _setRef = (ref: any) => {\n    this.VirtualGrid = ref;\n  }\n\n  _onScroll = ({ clientHeight, scrollHeight, scrollTop }: VirtualGridScroll) => {\n    const { onScroll } = this.props;\n\n    onScroll({ clientHeight, scrollHeight, scrollTop });\n  }\n\n  _onSectionRendered = ({\n    rowOverscanStartIndex,\n    rowOverscanStopIndex,\n    rowStartIndex,\n    rowStopIndex\n  }: RenderedSection) => {\n    const { onRowsRendered } = this.props;\n\n    onRowsRendered({\n      overscanStartIndex: rowOverscanStartIndex,\n      overscanStopIndex: rowOverscanStopIndex,\n      startIndex: rowStartIndex,\n      stopIndex: rowStopIndex\n    });\n  }\n}\n"],"file":"VirtualTableBody.js"}