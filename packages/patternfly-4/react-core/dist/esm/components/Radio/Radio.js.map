{"version":3,"sources":["../../../../src/components/Radio/Radio.tsx"],"names":["React","styles","css","getModifier","Radio","Component","constructor","props","event","onChange","currentTarget","checked","label","console","error","render","ariaLabel","className","defaultChecked","isChecked","isDisabled","isValid","radio","radioInput","handleChange","radioLabel","id","name","Function","prototype"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,qDAAnB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,0BAAjC;AAyBA,OAAO,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAgD;AAQrDC,EAAAA,WAAW,CAACC,KAAD,EAAoB;AAC7B,UAAMA,KAAN;;AAD6B,0CAQfC,KAAD,IAA8C;AAC3D,WAAKD,KAAL,CAAWE,QAAX,CAAoBD,KAAK,CAACE,aAAN,CAAoBC,OAAxC,EAAiDH,KAAjD;AACD,KAV8B;;AAE7B,QAAI,CAACD,KAAK,CAACK,KAAP,IAAgB,CAACL,KAAK,CAAC,YAAD,CAA1B,EAA0C;AACxC;AACAM,MAAAA,OAAO,CAACC,KAAR,CAAc,QAAd,EAAwB,8CAAxB;AACD;AACF;;AAMDC,EAAAA,MAAM,GAAG;AACP,wBAWI,KAAKR,KAXT;AAAA,UAAM;AACJ,oBAAcS,SADV;AAEJL,MAAAA,OAFI;AAGJM,MAAAA,SAHI;AAIJC,MAAAA,cAJI;AAKJC,MAAAA,SALI;AAMJC,MAAAA,UANI;AAOJC,MAAAA,OAPI;AAQJT,MAAAA,KARI;AASJH,MAAAA;AATI,KAAN;AAAA,UAUKF,KAVL;;AAYA,WACE;AAAK,MAAA,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACqB,KAAR,EAAeL,SAAf;AAAnB,OACE,0CACMV,KADN;AAEE,MAAA,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACsB,UAAR,CAFhB;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,QAAQ,EAAE,KAAKC,YAJjB;AAKE,sBAAc,CAACH,OALjB;AAME,MAAA,QAAQ,EAAED,UANZ;AAOE,MAAA,cAAc,EAAET,OAAO,IAAIQ;AAP7B,OAQM,CAACA,SAAD,IAAc;AAAED,MAAAA;AAAF,KARpB,EASM,CAACN,KAAD,IAAU;AAAE,oBAAcI;AAAhB,KAThB,EADF,EAYGJ,KAAK,IACJ;AACE,MAAA,SAAS,EAAEV,GAAG,CAACD,MAAM,CAACwB,UAAR,EAAoBtB,WAAW,CAACF,MAAD,EAASmB,UAAU,IAAK,UAAxB,CAA/B,CADhB;AAEE,MAAA,OAAO,EAAEb,KAAK,CAACmB;AAFjB,OAIGd,KAJH,CAbJ,CADF;AAuBD;;AAxDoD;;gBAA1CR,K;AAnBXa,EAAAA,S;AAEAS,EAAAA,E;AAEAP,EAAAA,S;AAEAC,EAAAA,U;AAEAC,EAAAA,O;AAEAT,EAAAA,K;AAEAe,EAAAA,I;AAEAlB,EAAAA,Q;AAEA,c;;;gBAGWL,K,kBACW;AACpBa,EAAAA,SAAS,EAAE,EADS;AAEpBG,EAAAA,UAAU,EAAE,KAFQ;AAGpBC,EAAAA,OAAO,EAAE,IAHW;AAIpBZ,EAAAA,QAAQ,EAAEmB,QAAQ,CAACC;AAJC,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Radio/radio';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface RadioProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'disabled' | 'label' | 'onChange' | 'type'> {\n  /** Additional classes added to the radio. */\n  className?: string;\n  /** Id of the radio. */\n  id: string;\n  /** Flag to show if the radio is checked. */\n  isChecked?: boolean;\n  /** Flag to show if the radio is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the radio selection is valid or invalid. */\n  isValid?: boolean;\n  /** Label text of the radio. */\n  label?: React.ReactNode;\n  /** Name for group of radios */\n  name: string;\n  /** A callback for when the radio selection changes. */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Aria label for the radio. */\n  'aria-label'?: string;\n}\n\nexport class Radio extends React.Component<RadioProps> {\n  static defaultProps = {\n    className: '',\n    isDisabled: false,\n    isValid: true,\n    onChange: Function.prototype\n  };\n\n  constructor(props: RadioProps) {\n    super(props);\n    if (!props.label && !props['aria-label']) {\n      // tslint:disable-next-line:no-console\n      console.error('Radio:', 'Radio requires an aria-label to be specified');\n    }\n  }\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.onChange(event.currentTarget.checked, event);\n  }\n\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      checked,\n      className,\n      defaultChecked,\n      isChecked,\n      isDisabled,\n      isValid,\n      label,\n      onChange,\n      ...props\n    } = this.props;\n    return (\n      <div className={css(styles.radio, className)}>\n        <input\n          {...props}\n          className={css(styles.radioInput)}\n          type=\"radio\"\n          onChange={this.handleChange}\n          aria-invalid={!isValid}\n          disabled={isDisabled}\n          defaultChecked={checked || isChecked}\n          {...!isChecked && { defaultChecked }}\n          {...!label && { 'aria-label': ariaLabel }}\n        />\n        {label && (\n          <label\n            className={css(styles.radioLabel, getModifier(styles, isDisabled && ('disabled' as any)))}\n            htmlFor={props.id}\n          >\n            {label}\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n"],"file":"Radio.js"}