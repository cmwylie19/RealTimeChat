{"version":3,"sources":["../../../../src/components/Accordion/AccordionToggle.tsx"],"names":["React","css","styles","AngleRightIcon","AccordionContext","AccordionToggle","className","id","isExpanded","children","component","props","ToggleContainer","Container","accordionToggle","modifiers","expanded","accordionToggleText","accordionToggleIcon"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6DAAnB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AAeA,OAAO,MAAMC,eAA8D,GAAG;AAAA,MAAC;AAC7EC,IAAAA,SAAS,GAAG,EADiE;AAE7EC,IAAAA,EAF6E;AAG7EC,IAAAA,UAAU,GAAG,KAHgE;AAI7EC,IAAAA,QAAQ,GAAG,IAJkE;AAK7EC,IAAAA;AAL6E,GAAD;AAAA,MAMzEC,KANyE;;AAAA,SAQ5E,oBAAC,gBAAD,CAAkB,QAAlB,QACG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAyB;AACxB,UAAMC,SAAS,GAAGH,SAAS,IAAIE,eAA/B;AACA,WACE,oBAAC,SAAD,QACE;AACE,MAAA,EAAE,EAAEL,EADN;AAEE,MAAA,SAAS,EAAEN,GAAG,CAACC,MAAM,CAACY,eAAR,EAAyBN,UAAU,IAAIN,MAAM,CAACa,SAAP,CAAiBC,QAAxD,EAAkEV,SAAlE;AAFhB,OAGMK,KAHN;AAIE,uBAAeH;AAJjB,QAME;AAAM,MAAA,SAAS,EAAEP,GAAG,CAACC,MAAM,CAACe,mBAAR;AAApB,OAAmDR,QAAnD,CANF,EAOE,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAER,GAAG,CAACC,MAAM,CAACgB,mBAAR;AAA9B,MAPF,CADF,CADF;AAaD,GAhBH,CAR4E;AAAA,CAAvE;;AAXLT,EAAAA,Q;AAEAH,EAAAA,S;AAEAE,EAAAA,U;AAEAD,EAAAA,E;AAEAG,EAAAA,S","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AngleRightIcon } from '@patternfly/react-icons';\nimport { Omit } from '../../helpers/typeUtils';\nimport { AccordionContext } from './AccordionContext';\n\nexport interface AccordionToggleProps extends Omit<React.HTMLProps<HTMLButtonElement>, 'type'> {\n  /** Content rendered inside the Accordion toggle  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion Toggle  */\n  className?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isExpanded?: boolean;\n  /** Identify the Accordion toggle number  */\n  id: string;\n  /** Container to override the default for toggle */\n  component?: React.ElementType;\n}\n\nexport const AccordionToggle: React.FunctionComponent<AccordionToggleProps> = ({\n  className = '',\n  id,\n  isExpanded = false,\n  children = null,\n  component,\n  ...props\n}: AccordionToggleProps) => (\n  <AccordionContext.Consumer>\n    {({ ToggleContainer }) => {\n      const Container = component || ToggleContainer;\n      return (\n        <Container>\n          <button\n            id={id}\n            className={css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className)}\n            {...props}\n            aria-expanded={isExpanded}\n          >\n            <span className={css(styles.accordionToggleText)}>{children}</span>\n            <AngleRightIcon className={css(styles.accordionToggleIcon)} />\n          </button>\n        </Container>\n      );\n    }}\n  </AccordionContext.Consumer>\n);\n"],"file":"AccordionToggle.js"}