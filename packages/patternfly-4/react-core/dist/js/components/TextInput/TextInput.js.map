{"version":3,"sources":["../../../../src/components/TextInput/TextInput.tsx"],"names":["TextInputTypes","TextInput","props","event","onChange","currentTarget","value","id","console","error","className","type","isValid","isReadOnly","isRequired","isDisabled","styles","formControl","handleChange","React","Component","undefined"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIYA,c;;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c;;IAmCCC,S;;;;;AAYX,qBAAYC,KAAZ,EAAmC;AAAA;;AAAA;;AACjC,mFAAMA,KAAN;;AADiC,mEAQpB,UAACC,KAAD,EAA8C;AAC3D,UAAI,MAAKD,KAAL,CAAWE,QAAf,EAAyB;AACvB,cAAKF,KAAL,CAAWE,QAAX,CAAoBD,KAAK,CAACE,aAAN,CAAoBC,KAAxC,EAA+CH,KAA/C;AACD;AACF,KAZkC;;AAEjC,QAAI,CAACD,KAAK,CAACK,EAAP,IAAa,CAACL,KAAK,CAAC,YAAD,CAAnB,IAAqC,CAACA,KAAK,CAAC,iBAAD,CAA/C,EAAoE;AAClE;AACAM,MAAAA,OAAO,CAACC,KAAR,CAAc,aAAd,EAA6B,gEAA7B;AACD;;AALgC;AAMlC;;;;6BAQQ;AAAA,wBAC6F,KAAKP,KADlG;AAAA,UACCQ,SADD,eACCA,SADD;AAAA,UACYC,IADZ,eACYA,IADZ;AAAA,UACkBL,KADlB,eACkBA,KADlB;AAAA,UACyBF,QADzB,eACyBA,QADzB;AAAA,UACmCQ,OADnC,eACmCA,OADnC;AAAA,UAC4CC,UAD5C,eAC4CA,UAD5C;AAAA,UACwDC,UADxD,eACwDA,UADxD;AAAA,UACoEC,UADpE,eACoEA,UADpE;AAAA,UACmFb,KADnF;;AAEP,aACE,0CACMA,KADN;AAEE,QAAA,SAAS,EAAE,sBAAIc,wBAAOC,WAAX,EAAwBP,SAAxB,CAFb;AAGE,QAAA,QAAQ,EAAE,KAAKQ,YAHjB;AAIE,QAAA,IAAI,EAAEP,IAJR;AAKE,QAAA,KAAK,EAAEL,KALT;AAME,wBAAc,CAACM,OANjB;AAOE,QAAA,QAAQ,EAAEE,UAPZ;AAQE,QAAA,QAAQ,EAAEC,UARZ;AASE,QAAA,QAAQ,EAAEF;AATZ,SADF;AAaD;;;;EAzC4BM,KAAK,CAACC,S;;;;gBAAxBnB,S;AAnBXS,EAAAA,S;AAEAK,EAAAA,U;AAEAF,EAAAA,U;AAEAC,EAAAA,U;AAEAF,EAAAA,O;AAEAR,EAAAA,Q;AAEAO,EAAAA,I,+BAAO,M,EAAS,M,EAAS,gB,EAAmB,O,EAAU,O,EAAU,Q,EAAW,U,EAAa,Q,EAAW,K,EAAQ,M,EAAS,K;AAEpHL,EAAAA,K;AAEA,c;;;gBAGWL,S,kBACW;AACpB,gBAAc,IADM;AAEpB,eAAa,EAFO;AAGpB,gBAAc,KAHM;AAIpB,aAAW,IAJS;AAKpB,gBAAc,KALM;AAMpB,gBAAc,KANM;AAOpB,UAAQ,MAPY;AAQpB,cAAY;AAAA,WAAWoB,SAAX;AAAA;AARQ,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { Omit } from '../../helpers/typeUtils';\nimport { FormEvent } from 'react';\n\nexport enum TextInputTypes {\n  text = 'text',\n  date = 'date',\n  datetimeLocal = 'datetime-local',\n  email = 'email',\n  month = 'month',\n  number = 'number',\n  password = 'password',\n  search = 'search',\n  tel = 'tel',\n  time = 'time',\n  url = 'url'\n}\n\nexport interface TextInputProps extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'disabled'> {\n  /** Additional classes added to the TextInput. */\n  className?: string;\n  /** Flag to show if the input is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if the input is required. */\n  isRequired?: boolean;\n  /** Flag to show if the input is valid or invalid. */\n  isValid?: boolean;\n  /** A callback for when the input value changes. */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Type that the input accepts. */\n  type?: 'text' | 'date' | 'datetime-local' | 'email' | 'month' | 'number' | 'password' | 'search' | 'tel' | 'time' | 'url';\n  /** Value of the input. */\n  value?: string | number;\n  /** Aria-label. The input requires an associated id or aria-label. */\n  'aria-label'?: string;\n}\n\nexport class TextInput extends React.Component<TextInputProps> {\n  static defaultProps = {\n    'aria-label': null as string,\n    \"className\": '',\n    \"isRequired\": false,\n    \"isValid\": true,\n    \"isDisabled\": false,\n    \"isReadOnly\": false,\n    \"type\": 'text',\n    \"onChange\": (): any => undefined\n  };\n\n  constructor(props: TextInputProps) {\n    super(props);\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // tslint:disable-next-line:no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n  }\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    if (this.props.onChange) {\n      this.props.onChange(event.currentTarget.value, event);\n    }\n  }\n\n  render() {\n    const { className, type, value, onChange, isValid, isReadOnly, isRequired, isDisabled, ...props } = this.props;\n    return (\n      <input\n        {...props}\n        className={css(styles.formControl, className)}\n        onChange={this.handleChange}\n        type={type}\n        value={value}\n        aria-invalid={!isValid}\n        required={isRequired}\n        disabled={isDisabled}\n        readOnly={isReadOnly}\n      />\n    );\n  }\n}\n"],"file":"TextInput.js"}