{"version":3,"sources":["../../../../src/components/Nav/NavExpandable.tsx"],"names":["NavExpandable","props","id","expandedState","e","val","onExpand","setState","onToggle","target","getAttribute","groupId","state","isExpanded","prevProps","title","srText","children","className","isActive","context","styles","navItem","modifiers","expanded","current","handleToggle","navLink","preventDefault","navToggle","navSubnav","a11yStyles","screenReader","navSimpleList","React","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { css } from '@patternfly/react-styles';\nimport { AngleRightIcon } from '@patternfly/react-icons';\n\nimport { getUniqueId } from '../../helpers/util';\nimport { NavContext } from './Nav';\n\nexport interface NavExpandableProps extends React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement> {\n  /** Title shown for the expandable list */\n  title: string;\n  /** If defined, screen readers will read this text instead of the list title */\n  srText?: string;\n  /** Boolean to programatically expand or collapse section */\n  isExpanded?: boolean;\n  /** Anything that can be rendered inside of the expandable list */\n  children?: React.ReactNode;\n  /** Additional classes added to the container */\n  className?: string;\n  /** Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */\n  groupId?: string | number;\n  /** If true makes the expandable list title active */\n  isActive?: boolean;\n  /** Identifier to use for the section aria label */\n  id?: string;\n  /** allow consumer to optionally override this callback and manage expand state externally */\n  onExpand?: (e: React.MouseEvent<HTMLLIElement, MouseEvent>, val: boolean) => void;\n}\n\ninterface NavExpandableState {\n  expandedState: boolean;\n}\n\nexport class NavExpandable extends React.Component<NavExpandableProps, NavExpandableState> {\n  static defaultProps = {\n    srText: '',\n    isExpanded: false,\n    children: '',\n    className: '',\n    groupId: null as string,\n    isActive: false,\n    id: ''\n  };\n\n  id = this.props.id || getUniqueId();\n\n  state = {\n    expandedState: false\n  };\n\n  componentDidMount() {\n    this.setState({ expandedState: this.props.isExpanded });\n  }\n\n  componentDidUpdate(prevProps: NavExpandableProps) {\n    if (this.props.isExpanded !== prevProps.isExpanded) {\n      this.setState({ expandedState: this.props.isExpanded });\n    }\n  }\n\n  onExpand = (e: React.MouseEvent<HTMLLIElement, MouseEvent>, val: boolean) => {\n    if (this.props.onExpand) {\n      this.props.onExpand(e, val);\n    } else {\n      this.setState({ expandedState: val });\n    }\n  }\n\n  handleToggle = (\n    e: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    onToggle: (event: React.MouseEvent<HTMLLIElement, MouseEvent>, groupId: string | number, expandedState: boolean) => void\n  ) => {\n    // Item events can bubble up, ignore those\n    if ((e.target as any).getAttribute('data-component') !== 'pf-nav-expandable') {\n      return;\n    }\n\n    const { groupId } = this.props;\n    const { expandedState } = this.state;\n    onToggle(e, groupId, !expandedState);\n    this.onExpand(e, !expandedState);\n  }\n\n  render() {\n    const { id, title, srText, children, className, isActive, groupId, isExpanded, onExpand, ...props } = this.props;\n    const { expandedState } = this.state;\n\n    return (\n      <NavContext.Consumer>\n        {(context: any) => (\n          <li\n            className={css(\n              styles.navItem,\n              expandedState && styles.modifiers.expanded,\n              isActive && styles.modifiers.current,\n              className\n            )}\n            onClick={(e: React.MouseEvent<HTMLLIElement, MouseEvent>) => this.handleToggle(e, context.onToggle)}\n            {...props}\n          >\n            <a\n              data-component=\"pf-nav-expandable\"\n              className={css(styles.navLink)}\n              id={srText ? null : this.id}\n              href=\"#\"\n              onClick={(e) => e.preventDefault()}\n              onMouseDown={(e) => e.preventDefault()}\n              aria-expanded={expandedState}\n            >\n              {title}\n              <span className={css(styles.navToggle)}>\n                <AngleRightIcon aria-hidden=\"true\" />\n              </span>\n            </a>\n            <section className={css(styles.navSubnav)} aria-labelledby={this.id} hidden={expandedState ? null : true}>\n              {srText && (\n                <h2 className={css(a11yStyles.screenReader)} id={this.id}>\n                  {srText}\n                </h2>\n              )}\n              <ul className={css(styles.navSimpleList)}>{children}</ul>\n            </section>\n          </li>\n        )}\n      </NavContext.Consumer>\n    );\n  }\n}\n"],"file":"NavExpandable.js"}