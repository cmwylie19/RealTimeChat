{"version":3,"sources":["../../../../src/components/InputGroup/InputGroup.tsx"],"names":["InputGroup","className","children","props","formCtrls","FormSelect","TextArea","TextInput","map","comp","toString","idItem","React","Children","toArray","find","child","includes","type","id","styles","inputGroup","cloneElement"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AASO,IAAMA,UAAoD,GAAG,SAAvDA,UAAuD,OAI7C;AAAA,4BAHrBC,SAGqB;AAAA,MAHrBA,SAGqB,+BAHT,EAGS;AAAA,MAFrBC,QAEqB,QAFrBA,QAEqB;AAAA,MADlBC,KACkB;;AACrB,MAAMC,SAAS,GAAG,CAACC,sBAAD,EAAaC,kBAAb,EAAuBC,oBAAvB,EAAkCC,GAAlC,CAAsC,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,QAAL,EAAV;AAAA,GAAtC,CAAlB;AACA,MAAMC,MAAM,GAAGC,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBZ,QAAvB,EAAiCa,IAAjC,CACb,UAACC,KAAD;AAAA,WAAgB,CAACZ,SAAS,CAACa,QAAV,CAAmBD,KAAK,CAACE,IAAN,CAAWR,QAAX,EAAnB,CAAD,IAA8CM,KAAK,CAACb,KAAN,CAAYgB,EAA1E;AAAA,GADa,CAAf;AAGA,SACE;AAAK,IAAA,SAAS,EAAE,sBAAIC,uBAAOC,UAAX,EAAuBpB,SAAvB;AAAhB,KAAuDE,KAAvD,GACGQ,MAAM,GACHC,KAAK,CAACC,QAAN,CAAeL,GAAf,CAAmBN,QAAnB,EAA6B,UAACc,KAAD;AAAA,WAC3BZ,SAAS,CAACa,QAAV,CAAmBD,KAAK,CAACE,IAAN,CAAWR,QAAX,EAAnB,IACIE,KAAK,CAACU,YAAN,CAAmBN,KAAnB,EAA0B;AAAE,0BAAoBL,MAAM,CAACR,KAAP,CAAagB;AAAnC,KAA1B,CADJ,GAEIH,KAHuB;AAAA,GAA7B,CADG,GAMHd,QAPN,CADF;AAWD,CApBM;;;;AALLD,EAAAA,S;AAEAC,EAAAA,Q","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/InputGroup/input-group';\nimport { css } from '@patternfly/react-styles';\nimport { FormSelect } from '../FormSelect';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nexport interface InputGroupProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the input group. */\n  className?: string;\n  /** Content rendered inside the input group. */\n  children: React.ReactNode;\n}\n\nexport const InputGroup: React.FunctionComponent<InputGroupProps> = ({\n  className = '',\n  children,\n  ...props\n}: InputGroupProps) => {\n  const formCtrls = [FormSelect, TextArea, TextInput].map((comp) => comp.toString());\n  const idItem = React.Children.toArray(children).find(\n    (child: any) => !formCtrls.includes(child.type.toString()) && child.props.id\n  ) as React.ReactElement<{id: string}>;\n  return (\n    <div className={css(styles.inputGroup, className)} {...props}>\n      {idItem\n        ? React.Children.map(children, (child: any) =>\n            formCtrls.includes(child.type.toString())\n              ? React.cloneElement(child, { 'aria-describedby': idItem.props.id })\n              : child\n          )\n        : children}\n    </div>\n  );\n};\n"],"file":"InputGroup.js"}