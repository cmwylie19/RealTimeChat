{"version":3,"sources":["../../../../src/components/ChartDonutUtilization/ChartDonutUtilization.tsx"],"names":["React","hoistNonReactStatics","orderBy","VictoryPie","Data","ChartContainer","ChartDonut","ChartDonutUtilizationStyles","getDonutUtilizationTheme","ChartDonutUtilizationLabelPosition","ChartDonutUtilizationLegendOrientation","ChartDonutUtilizationLegendPosition","ChartDonutUtilizationSortOrder","ChartDonutUtilizationSubTitlePosition","ChartDonutUtilization","allowTooltip","ariaDesc","ariaTitle","containerComponent","data","invert","padding","showStatic","standalone","themeColor","themeVariant","thresholds","x","y","theme","height","pie","width","rest","getComputedData","datum","getData","computedData","_x","_y","push","Math","abs","formatData","sort","a","b","getDonutThresholds","result","sThresholds","numColors","colorScale","length","i","color","value","getThresholdTheme","newTheme","donutThresholds","mergeThemeProps","legend","chart","StandaloneContainer","children","cloneElement","desc","title","props","animate","capHeight","categories","constrainToVisibleArea","cornerRadius","dataComponent","endAngle","eventKey","events","externalEventMutations","groupComponent","innerRadius","labelComponent","labelPosition","legendComponent","legendData","name","symbol","fill","type"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { orderBy } from 'lodash';\nimport {\n  AnimatePropTypeInterface,\n  CategoryPropType,\n  ColorScalePropType,\n  DataGetterPropType,\n  EventPropTypeInterface,\n  PaddingProps,\n  StringOrNumberOrCallback,\n  VictoryPie,\n  VictoryStyleInterface\n} from 'victory';\nimport { Data } from 'victory-core';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartDonut, ChartDonutProps } from '../ChartDonut';\nimport { ChartThemeDefinition, ChartDonutUtilizationStyles } from '../ChartTheme';\nimport { getDonutUtilizationTheme } from '../ChartUtils';\n\nexport enum ChartDonutUtilizationLabelPosition {\n  centroid = 'centroid',\n  endAngle = 'endAngle',\n  startAngle = 'startAngle'\n}\n\nexport enum ChartDonutUtilizationLegendOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical'\n}\n\nexport enum ChartDonutUtilizationLegendPosition {\n  bottom = 'bottom',\n  right = 'right'\n}\n\nexport enum ChartDonutUtilizationSortOrder {\n  ascending = 'ascending',\n  descending = 'descending'\n}\n\nexport enum ChartDonutUtilizationSubTitlePosition {\n  bottom = 'bottom',\n  center = 'center',\n  right = 'right'\n}\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartDonutUtilizationProps extends ChartDonutProps {\n  /**\n   * Specifies the tooltip capability of the container component. A value of true allows the chart to add a\n   * ChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\n   * property is also provided.\n   */\n  allowTooltip?: boolean;\n  /**\n   * The animate prop specifies props for VictoryAnimation to use.\n   * The animate prop should also be used to specify enter and exit\n   * transition configurations with the `onExit` and `onEnter` namespaces respectively.\n   * @example\n   * {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\n   */\n  animate?: AnimatePropTypeInterface;\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\n   * This is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\n   * line height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\n   * unitless number, it is assumed to be ems.\n   */\n  capHeight?: StringOrNumberOrCallback;\n  /**\n   * The categories prop specifies how categorical data for a chart should be ordered.\n   * This prop should be given as an array of string values, or an object with\n   * these arrays of values specified for x and y. If this prop is not set,\n   * categorical data will be plotted in the order it was given in the data array\n   * @example [\"dogs\", \"cats\", \"mice\"]\n   */\n  categories?: CategoryPropType;\n  /**\n   * The colorScale prop is an optional prop that defines the color scale the pie\n   * will be created on. This prop should be given as an array of CSS colors, or as a string\n   * corresponding to one of the built in color scales. ChartDonutUtilization will automatically assign\n   * values from this color scale to the pie slices unless colors are explicitly provided in the\n   * data object\n   */\n  colorScale?: ColorScalePropType;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The containerComponent prop takes an entire component which will be used to\n   * create a container element for standalone charts.\n   * The new element created from the passed containerComponent wil be provided with\n   * these props from ChartDonutUtilization: height, width, children\n   * (the chart itself) and style. Props that are not provided by the\n   * child chart component include title and desc, both of which\n   * are intended to add accessibility to Victory components. The more descriptive these props\n   * are, the more accessible your data will be for people using screen readers.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a dataComponent is\n   * not provided, ChartDonutUtilization will use the default ChartContainer component.\n   * @example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />\n   */\n  containerComponent?: React.ReactElement<any>;\n  /**\n   * Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutUtilization\n   */\n  cornerRadius?: number;\n  /**\n   * The data prop specifies the data to be plotted,\n   * where data X-value is the slice label (string or number),\n   * and Y-value is the corresponding number value represented by the slice\n   * Data should be in the form of a single data point.\n   * The data point may be any format you wish (depending on the `x` and `y` accessor props),\n   * but by default, an object with x and y properties is expected.\n   *\n   * Note: The Y-value is expected to represent a percentage\n   *\n   * @example data={{ x: 'GBps capacity', y: 75 }}\n   */\n  data?: any;\n  /**\n   * The dataComponent prop takes an entire, HTML-complete data component which will be used to\n   * create slices for each datum in the pie chart. The new element created from the passed\n   * dataComponent will have the property datum set by the pie chart for the point it renders;\n   * properties style and pathFunction calculated by ChartDonutUtilization; an index property set\n   * corresponding to the location of the datum in the data provided to the pie; events bound to\n   * the ChartDonutUtilization; and the d3 compatible slice object.\n   * If a dataComponent is not provided, ChartDonutUtilization's Slice component will be used.\n   */\n  dataComponent?: React.ReactElement<any>;\n  /**\n   * The desc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers. The more info about the chart provided in\n   * the description, the more usable it will be for people using screen readers.\n   * This prop defaults to an empty string.\n   *\n   * Note: Overridden by containerComponent\n   *\n   * @example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\n   * not represented above 5% each.\"\n   */\n  desc?: string;\n  /**\n   * The overall end angle of the pie in degrees. This prop is used in conjunction with\n   * startAngle to create a pie that spans only a segment of a circle.\n   */\n  endAngle?: number;\n  /**\n   * Similar to data accessor props `x` and `y`, this prop may be used to functionally\n   * assign eventKeys to data\n   */\n  eventKey?: StringOrNumberOrCallback;\n  /**\n   * The event prop takes an array of event objects. Event objects are composed of\n   * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace\n   * for a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutUtilization\n   * events. The eventKey may optionally be used to select a single element by index rather than\n   * an entire set. The eventHandlers object should be given as an object whose keys are standard\n   * event names (i.e. onClick) and whose values are event callbacks. The return value\n   * of an event handler is used to modify elemnts. The return value should be given\n   * as an object or an array of objects with optional target and eventKey keys,\n   * and a mutation key whose value is a function. The target and eventKey keys\n   * will default to those corresponding to the element the event handler was attached to.\n   * The mutation function will be called with the calculated props for the individual selected\n   * element (i.e. a single bar), and the object returned from the mutation function\n   * will override the props of the selected element via object assignment.\n   * @example\n   * events={[\n   *   {\n   *     target: \"data\",\n   *     eventKey: 1,\n   *     eventHandlers: {\n   *       onClick: () => {\n   *         return [\n   *            {\n   *              eventKey: 2,\n   *              mutation: (props) => {\n   *                return {style: merge({}, props.style, {fill: \"orange\"})};\n   *              }\n   *            }, {\n   *              eventKey: 2,\n   *              target: \"labels\",\n   *              mutation: () => {\n   *                return {text: \"hey\"};\n   *              }\n   *            }\n   *          ];\n   *       }\n   *     }\n   *   }\n   * ]}\n   */\n  events?: EventPropTypeInterface<'data' | 'labels' | 'parent', StringOrNumberOrCallback | string[] | number[]>[];\n  /**\n   * ChartDonutUtilization uses the standard externalEventMutations prop.\n   */\n  externalEventMutations?: any[];\n  /**\n   * The groupComponent prop takes an entire component which will be used to\n   * create group elements for use within container elements. This prop defaults\n   * to a <g> tag on web, and a react-native-svg <G> tag on mobile\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  height?: number;\n  /**\n   * When creating a donut chart, this prop determines the number of pixels between\n   * the center of the chart and the inner edge.\n   */\n  innerRadius?: number;\n  /**\n   * Invert the threshold color scale used to represent warnings, errors, etc.\n   *\n   * Instead of showing a warning at 60% and an error at 90%; for example, this would allow users to show a warning\n   * below 60% and an error below 20%\n   */\n  invert?: boolean;\n  /**\n   * The labelComponent prop takes in an entire label component which will be used\n   * to create a label for the area. The new element created from the passed labelComponent\n   * will be supplied with the following properties: x, y, index, data, verticalAnchor,\n   * textAnchor, angle, style, text, and events. any of these props may be overridden\n   * by passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If labelComponent is omitted, a new ChartLabel\n   * will be created with props described above. This labelComponent prop should be used to\n   * provide a series label for ChartDonutUtilization. If individual labels are required for each\n   * data point, they should be created by composing ChartDonutUtilization with VictoryScatter\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\n   * When this prop is not given, the label will be positioned at the centroid of each slice.\n   */\n  labelPosition?: 'startAngle' | 'endAngle' | 'centroid';\n  /**\n   * The legend component to render with chart.\n   *\n   * Note: Use legendData so the legend width can be calculated and positioned properly.\n   * Default legend properties may be applied\n   */\n  legendComponent?: React.ReactElement<any>;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  legendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  legendOrientation?: 'horizontal' | 'vertical';\n  /**\n   * The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n   *\n   * Note: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\n   * cases, the legend may not be visible until enough padding is applied.\n   */\n  legendPosition?: 'bottom' | 'right';\n  /**\n   * The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\n   * If this prop is not set, the label radius will default to the radius of the pie + label padding.\n   */\n  labelRadius?: number;\n  /**\n   * The labels prop defines labels that will appear above each bar in your chart.\n   * This prop should be given as an array of values or as a function of data.\n   * If given as an array, the number of elements in the array should be equal to\n   * the length of the data array. Labels may also be added directly to the data object\n   * like data={[{x: 1, y: 1, label: \"first\"}]}.\n   * @example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title\n   */\n  labels?: string[] | ((data: any) => string);\n  /**\n   * The name prop is used to reference a component instance when defining shared events.\n   */\n  name?: string;\n  /**\n   * Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n   * **This prop should not be set manually.**\n   */\n  origin?: { x: number, y: number };\n  /**\n   * The padAngle prop determines the amount of separation between adjacent data slices\n   * in number of degrees\n   */\n  padAngle?: number;\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * Specifies the radius of the chart. If this property is not provided it is computed\n   * from width, height, and padding props\n   */\n  radius?: number;\n  /**\n   * The sharedEvents prop is used internally to coordinate events between components. It should not be set manually.\n   */\n  sharedEvents?: any;\n  /**\n   * This will show the static, unused portion of the donut chart. It should not be set manually.\n   */\n  showStatic?: boolean;\n  /**\n   * Use the sortKey prop to indicate how data should be sorted. This prop\n   * is given directly to the lodash sortBy function to be executed on the\n   * final dataset.\n   */\n  sortKey?: string | string[] | Function;\n  /**\n   * The sortOrder prop specifies whether sorted data should be returned in ascending or descending order.\n   */\n  sortOrder?: 'ascending' | 'descending';\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartDonutUtilization with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The overall start angle of the pie in degrees. This prop is used in conjunction with\n   * endAngle to create a pie that spans only a segment of a circle.\n   */\n  startAngle?: number;\n  /**\n   * The style prop specifies styles for your pie. ChartDonutUtilization relies on Radium,\n   * so valid Radium style objects should work for this prop. Height, width, and\n   * padding should be specified via the height, width, and padding props.\n   * @example {data: {stroke: \"black\"}, label: {fontSize: 10}}\n   */\n  style?: VictoryStyleInterface;\n  /**\n   * The subtitle for the donut chart label\n   */\n  subTitle?: string;\n  /**\n   * The label component to render the chart subTitle.\n   *\n   * Note: Default label properties may be applied\n   */\n  subTitleComponent?: React.ReactElement<any>;\n  /**\n   * The orientation of the donut chart in relation to the legend. Valid values are 'bottom', 'center', and 'right'\n   */\n  subTitlePosition?: 'bottom' | 'center' | 'right';\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartDonutUtilization as a solo component, implement the theme directly on\n   * ChartDonutUtilization. If you are wrapping ChartDonutUtilization in ChartChart, ChartGroup, or ChartThreshold\n   * please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The title for the donut chart label\n   */\n  title?: string;\n  /**\n   * The dynamic portion of the chart will change colors when data reaches the given threshold. Colors may be\n   * overridden, but defaults shall be provided.\n   *\n   * @example thresholds={[{ value: 60, color: '#F0AB00' }, { value: 90, color: '#C9190B' }]}\n   */\n  thresholds?: any[];\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  width?: number;\n  /**\n   * The x prop specifies how to access the X value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)\n   */\n  x?: DataGetterPropType;\n  /**\n   * The y prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  y?: DataGetterPropType;\n}\n\nexport const ChartDonutUtilization: React.FunctionComponent<ChartDonutUtilizationProps> = ({\n  allowTooltip = true,\n  ariaDesc,\n  ariaTitle,\n  containerComponent = <ChartContainer />,\n  data,\n  invert = false,\n  padding,\n  showStatic = true,\n  standalone = true,\n  themeColor,\n  themeVariant,\n  thresholds,\n  x,\n  y,\n\n  // destructure last\n  theme = getDonutUtilizationTheme(themeColor, themeVariant),\n  height = theme.pie.height,\n  width = theme.pie.width,\n  ...rest\n}: ChartDonutUtilizationProps) => {\n  // Returns computed data representing pie chart slices\n  const getComputedData = () => {\n    const datum = getData();\n    const computedData: [{ x?: any, y: any}] = [{ x: datum[0]._x, y: datum[0]._y || 0 }];\n    if (showStatic) {\n      computedData.push({ y: datum[0]._x ? Math.abs(100 - datum[0]._y) : 100 });\n    }\n    return computedData;\n  };\n\n  const getData = () => {\n    const datum = [{ ...data }];\n    return Data.formatData(datum, { x, y, ...rest }, ['x', 'y']).sort((a: any, b: any) => a._y - b._y);\n  };\n\n  // Returns thresholds with default color scale\n  const getDonutThresholds = () => {\n    const result = [];\n    if (thresholds) {\n      // Ensure thresholds are in sorted order\n      const sThresholds = orderBy(thresholds, 'value', invert ? 'desc' : 'asc');\n      const numColors = ChartDonutUtilizationStyles.thresholds.colorScale.length;\n      for (let i = 0; i < sThresholds.length; i++) {\n        result.push({\n          color: sThresholds[i].color\n            ? sThresholds[i].color : ChartDonutUtilizationStyles.thresholds.colorScale[i % numColors],\n          value: sThresholds[i].value\n        });\n      }\n    }\n    return result;\n  };\n\n  // Returns theme based on threshold and current value\n  const getThresholdTheme = () => {\n    const newTheme = { ...theme };\n\n    if (data) {\n      const datum = getData();\n      const donutThresholds = getDonutThresholds();\n      const mergeThemeProps = (i: number) => {\n        // Merge just the first color of dynamic (blue, green, etc.) with static (gray) for expected colorScale\n        newTheme.pie.colorScale[0] = donutThresholds[i].color;\n        newTheme.legend.colorScale[0] = donutThresholds[i].color;\n      };\n      for (let i = 0; i < donutThresholds.length; i++) {\n        if (invert) {\n          if (datum[0]._y <= donutThresholds[i].value) {\n            mergeThemeProps(i);\n          }\n        } else {\n          if (datum[0]._y >= donutThresholds[i].value) {\n            mergeThemeProps(i);\n          }\n        }\n      }\n    }\n    return newTheme;\n  };\n\n  // Dynamic donut chart\n  const chart = (\n    <ChartDonut\n      allowTooltip={allowTooltip}\n      data={getComputedData()}\n      height={height}\n      padding={padding}\n      standalone={false}\n      theme={getThresholdTheme()}\n      width={width}\n      {...rest}\n    />\n  );\n\n  // Clone so users can override container props\n  const StandaloneContainer = ({children}: any) => React.cloneElement(containerComponent, {\n    desc: ariaDesc,\n    height,\n    title: ariaTitle,\n    width,\n    theme,\n    ...containerComponent.props\n  }, children);\n\n  return standalone ? (\n    <StandaloneContainer>\n      {chart}\n    </StandaloneContainer>\n  ) : (\n    <React.Fragment>\n      {chart}\n    </React.Fragment>\n  );\n};\n\n// Note: VictoryPie.role must be hoisted\nhoistNonReactStatics(ChartDonutUtilization, VictoryPie);\n"],"file":"ChartDonutUtilization.js"}