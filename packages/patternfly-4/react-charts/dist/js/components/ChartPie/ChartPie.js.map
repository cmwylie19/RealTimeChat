{"version":3,"sources":["../../../../src/components/ChartPie/ChartPie.tsx"],"names":["ChartPieLabelPosition","ChartPieLegendPosition","ChartPieSortOrder","someId","ChartPie","allowTooltip","ariaDesc","ariaTitle","constrainToVisibleArea","containerComponent","labels","legendComponent","legendData","legendPosition","ChartCommonStyles","legend","position","padding","radius","standalone","themeColor","themeVariant","theme","labelComponent","undefined","legendOrientation","orientation","height","pie","width","rest","defaultPadding","bottom","left","right","top","chartRadius","Helpers","getRadius","chart","React","cloneElement","data","props","getWrappedLegend","StandaloneContainer","children","desc","title","animate","categories","colorScale","cornerRadius","dataComponent","endAngle","eventKey","events","externalEventMutations","groupComponent","innerRadius","labelPosition","labelRadius","name","symbol","fill","type","VictoryPie"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  AnimatePropTypeInterface,\n  CategoryPropType,\n  ColorScalePropType,\n  DataGetterPropType,\n  EventPropTypeInterface,\n  PaddingProps,\n  StringOrNumberOrCallback,\n  VictoryPie,\n  VictoryPieProps,\n  VictoryStyleInterface\n} from 'victory';\nimport { Helpers } from 'victory-core';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartLegend, ChartLegendOrientation, ChartLegendWrapper } from '../ChartLegend';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getPaddingForSide, getTheme } from '../ChartUtils';\n\nexport enum ChartPieLabelPosition {\n  centroid = 'centroid',\n  endAngle = 'endAngle',\n  startAngle = 'startAngle'\n}\n\nexport enum ChartPieLegendPosition {\n  bottom = 'bottom',\n  right = 'right'\n}\n\nexport enum ChartPieSortOrder {\n  ascending = 'ascending',\n  descending = 'descending'\n}\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartPieProps extends VictoryPieProps {\n  /**\n   * Specifies the tooltip capability of the container component. A value of true allows the chart to add a\n   * ChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\n   * property is also provided.\n   */\n  allowTooltip?: boolean;\n  /**\n   * The animate prop specifies props for VictoryAnimation to use.\n   * The animate prop should also be used to specify enter and exit\n   * transition configurations with the `onExit` and `onEnter` namespaces respectively.\n   * @example\n   * {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\n   */\n  animate?: AnimatePropTypeInterface;\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The categories prop specifies how categorical data for a chart should be ordered.\n   * This prop should be given as an array of string values, or an object with\n   * these arrays of values specified for x and y. If this prop is not set,\n   * categorical data will be plotted in the order it was given in the data array\n   * @example [\"dogs\", \"cats\", \"mice\"]\n   */\n  categories?: CategoryPropType;\n  /**\n   * The colorScale prop is an optional prop that defines the color scale the pie\n   * will be created on. This prop should be given as an array of CSS colors, or as a string\n   * corresponding to one of the built in color scales. ChartPie will automatically assign\n   * values from this color scale to the pie slices unless colors are explicitly provided in the\n   * data object\n   */\n  colorScale?: ColorScalePropType;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The containerComponent prop takes an entire component which will be used to\n   * create a container element for standalone charts.\n   * The new element created from the passed containerComponent wil be provided with\n   * these props from ChartPie: height, width, children\n   * (the chart itself) and style. Props that are not provided by the\n   * child chart component include title and desc, both of which\n   * are intended to add accessibility to Victory components. The more descriptive these props\n   * are, the more accessible your data will be for people using screen readers.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a dataComponent is\n   * not provided, ChartPie will use the default ChartContainer component.\n   * @example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />\n   */\n  containerComponent?: React.ReactElement<any>;\n  /**\n   * Set the cornerRadius for every dataComponent (Slice by default) within ChartPie\n   */\n  cornerRadius?: number;\n  /**\n   * The data prop specifies the data to be plotted,\n   * where data X-value is the slice label (string or number),\n   * and Y-value is the corresponding number value represented by the slice\n   * Data should be in the form of an array of data points.\n   * Each data point may be any format you wish (depending on the `x` and `y` accessor props),\n   * but by default, an object with x and y properties is expected.\n   * @example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n   * [[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]\n   */\n  data?: any[];\n  /**\n   * The dataComponent prop takes an entire, HTML-complete data component which will be used to\n   * create slices for each datum in the pie chart. The new element created from the passed\n   * dataComponent will have the property datum set by the pie chart for the point it renders;\n   * properties style and pathFunction calculated by ChartPie; an index property set\n   * corresponding to the location of the datum in the data provided to the pie; events bound to\n   * the ChartPie; and the d3 compatible slice object.\n   * If a dataComponent is not provided, ChartPie's Slice component will be used.\n   */\n  dataComponent?: React.ReactElement<any>;\n  /**\n   * The overall end angle of the pie in degrees. This prop is used in conjunction with\n   * startAngle to create a pie that spans only a segment of a circle.\n   */\n  endAngle?: number;\n  /**\n   * Similar to data accessor props `x` and `y`, this prop may be used to functionally\n   * assign eventKeys to data\n   */\n  eventKey?: StringOrNumberOrCallback;\n  /**\n   * The event prop takes an array of event objects. Event objects are composed of\n   * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace\n   * for a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\n   * events. The eventKey may optionally be used to select a single element by index rather than\n   * an entire set. The eventHandlers object should be given as an object whose keys are standard\n   * event names (i.e. onClick) and whose values are event callbacks. The return value\n   * of an event handler is used to modify elemnts. The return value should be given\n   * as an object or an array of objects with optional target and eventKey keys,\n   * and a mutation key whose value is a function. The target and eventKey keys\n   * will default to those corresponding to the element the event handler was attached to.\n   * The mutation function will be called with the calculated props for the individual selected\n   * element (i.e. a single bar), and the object returned from the mutation function\n   * will override the props of the selected element via object assignment.\n   * @example\n   * events={[\n   *   {\n   *     target: \"data\",\n   *     eventKey: 1,\n   *     eventHandlers: {\n   *       onClick: () => {\n   *         return [\n   *            {\n   *              eventKey: 2,\n   *              mutation: (props) => {\n   *                return {style: merge({}, props.style, {fill: \"orange\"})};\n   *              }\n   *            }, {\n   *              eventKey: 2,\n   *              target: \"labels\",\n   *              mutation: () => {\n   *                return {text: \"hey\"};\n   *              }\n   *            }\n   *          ];\n   *       }\n   *     }\n   *   }\n   * ]}\n   */\n  events?: EventPropTypeInterface<'data' | 'labels' | 'parent', StringOrNumberOrCallback | string[] | number[]>[];\n  /**\n   * ChartPie uses the standard externalEventMutations prop.\n   */\n  externalEventMutations?: any[];\n  /**\n   * The groupComponent prop takes an entire component which will be used to\n   * create group elements for use within container elements. This prop defaults\n   * to a <g> tag on web, and a react-native-svg <G> tag on mobile\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   *\n   * Note: When adding a legend, height (the overall SVG height) may need to be larger than pieHeight (the pie size)\n   * in order to accommodate the extra legend.\n   *\n   * By default, pieHeight is the min. of either height or width. This covers most use cases in order to accommodate\n   * legends within the same SVG. However, pieHeight (not height) may need to be set in order to adjust the pie height.\n   *\n   * Typically, the parent container is set to the same width in order to maintain the aspect ratio.\n   */\n  height?: number;\n  /**\n   * When creating a donut chart, this prop determines the number of pixels between\n   * the center of the chart and the inner edge. When this prop is set to zero\n   * a regular pie chart is rendered.\n   */\n  innerRadius?: number;\n  /**\n   * The labelComponent prop takes in an entire label component which will be used\n   * to create a label for the area. The new element created from the passed labelComponent\n   * will be supplied with the following properties: x, y, index, data, verticalAnchor,\n   * textAnchor, angle, style, text, and events. any of these props may be overridden\n   * by passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If labelComponent is omitted, a new ChartLabel\n   * will be created with props described above. This labelComponent prop should be used to\n   * provide a series label for ChartPie. If individual labels are required for each\n   * data point, they should be created by composing ChartPie with VictoryScatter\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\n   * When this prop is not given, the label will be positioned at the centroid of each slice.\n   */\n  labelPosition?: 'startAngle' | 'endAngle' | 'centroid';\n  /**\n   * The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\n   * If this prop is not set, the label radius will default to the radius of the pie + label padding.\n   */\n  labelRadius?: number;\n  /**\n   * The labels prop defines labels that will appear above each bar in your chart.\n   * This prop should be given as an array of values or as a function of data.\n   * If given as an array, the number of elements in the array should be equal to\n   * the length of the data array. Labels may also be added directly to the data object\n   * like data={[{x: 1, y: 1, label: \"first\"}]}.\n   * @example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title\n   */\n  labels?: string[] | ((data: any) => string);\n  /**\n   * The legend component to render with chart.\n   *\n   * Note: Use legendData so the legend width can be calculated and positioned properly.\n   * Default legend properties may be applied\n   */\n  legendComponent?: React.ReactElement<any>;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  legendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  legendOrientation?: 'horizontal' | 'vertical';\n  /**\n   * The legend position relation to the pie chart. Valid values are 'bottom' and 'right'\n   *\n   * Note: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\n   * cases, the legend may not be visible until enough padding is applied.\n   */\n  legendPosition?: 'bottom' | 'right';\n  /**\n   * The name prop is used to reference a component instance when defining shared events.\n   */\n  name?: string;\n  /**\n   * Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n   * **This prop should not be set manually.**\n   */\n  origin?: { x: number, y: number };\n  /**\n   * The padAngle prop determines the amount of separation between adjacent data slices\n   * in number of degrees\n   */\n  padAngle?: number;\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * Specifies the radius of the chart. If this property is not provided it is computed\n   * from width, height, and padding props\n   */\n  radius?: number;\n  /**\n   * The sharedEvents prop is used internally to coordinate events between components. It should not be set manually.\n   */\n  sharedEvents?: any;\n  /**\n   * Use the sortKey prop to indicate how data should be sorted. This prop\n   * is given directly to the lodash sortBy function to be executed on the final dataset.\n   */\n  sortKey?: string | string[] | Function;\n  /**\n   * The sortOrder prop specifies whether sorted data should be returned in ascending or descending order.\n   */\n  sortOrder?: 'ascending' | 'descending';\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartPie with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The overall start angle of the pie in degrees. This prop is used in conjunction with\n   * endAngle to create a pie that spans only a segment of a circle.\n   */\n  startAngle?: number;\n  /**\n   * The style prop specifies styles for your pie. ChartPie relies on Radium,\n   * so valid Radium style objects should work for this prop. Height, width, and\n   * padding should be specified via the height, width, and padding props.\n   * @example {data: {stroke: \"black\"}, label: {fontSize: 10}}\n   */\n  style?: VictoryStyleInterface;\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartPie as a solo component, implement the theme directly on\n   * ChartPie. If you are wrapping ChartPie in ChartChart or ChartGroup,\n   * please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  width?: number;\n  /**\n   * The x prop specifies how to access the X value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)\n   */\n  x?: DataGetterPropType;\n  /**\n   * The y prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  y?: DataGetterPropType;\n}\n\nlet someId = 0;\n\nexport const ChartPie: React.FunctionComponent<ChartPieProps> = ({\n  allowTooltip = true,\n  ariaDesc,\n  ariaTitle,\n  constrainToVisibleArea = false,\n  containerComponent = <ChartContainer />,\n  labels,\n  legendComponent = <ChartLegend />,\n  legendData,\n  legendPosition = ChartCommonStyles.legend.position as ChartPieLegendPosition,\n  padding,\n  radius,\n  standalone = true,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  labelComponent = allowTooltip ? <ChartTooltip constrainToVisibleArea={constrainToVisibleArea} theme={theme} /> : undefined,\n  legendOrientation = theme.legend.orientation as ChartLegendOrientation,\n  height = theme.pie.height,\n  width = theme.pie.width,\n  ...rest\n}: ChartPieProps) => {\n  const defaultPadding = {\n    bottom: getPaddingForSide('bottom',  padding, theme.pie.padding),\n    left: getPaddingForSide('left', padding, theme.pie.padding),\n    right: getPaddingForSide('right', padding, theme.pie.padding),\n    top: getPaddingForSide('top', padding, theme.pie.padding),\n  };\n  const chartRadius = radius ? radius : Helpers.getRadius({\n    height,\n    width,\n    padding: defaultPadding\n  });\n\n  const chart = (\n    <VictoryPie\n      height={height}\n      labels={labels}\n      labelComponent={labelComponent}\n      padding={padding}\n      radius={chartRadius}\n      standalone={false}\n      theme={theme}\n      width={width}\n      {...rest}\n    />\n  );\n\n  const legend = React.cloneElement(legendComponent, {\n    data: legendData,\n    orientation: legendOrientation,\n    theme,\n    ...legendComponent.props\n  });\n\n  // Returns a wrapped legend\n  const getWrappedLegend = () => {\n    if (!legend.props.data) {\n      return null;\n    }\n    return (\n      <ChartLegendWrapper\n        chartType=\"pie\"\n        height={height}\n        legendComponent={legend}\n        orientation={legendOrientation}\n        padding={defaultPadding}\n        position={legendPosition}\n        theme={theme}\n        width={width}\n      />\n    );\n  };\n\n  // Clone so users can override container props\n  const StandaloneContainer = ({children}: any) => React.cloneElement(containerComponent, {\n    desc: ariaDesc,\n    height,\n    title: ariaTitle,\n    width,\n    theme,\n    ...containerComponent.props\n  }, children);\n\n  return standalone ? (\n    <StandaloneContainer>\n      {chart}\n      {getWrappedLegend()}\n    </StandaloneContainer>\n  ) : (\n    <React.Fragment>\n      {chart}\n      {getWrappedLegend()}\n    </React.Fragment>\n  );\n};\n\n// Note: VictoryPie.role must be hoisted\nhoistNonReactStatics(ChartPie, VictoryPie);\n"],"file":"ChartPie.js"}