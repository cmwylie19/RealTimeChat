{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenuToggleWithText.tsx"],"names":["OptionsMenuToggleWithText","parentId","toggleText","toggleTextClassName","toggleButtonContents","toggleButtonContentsClassName","onToggle","isOpen","isPlain","isHovered","isActive","isFocused","isDisabled","ariaHasPopup","parentRef","onEnter","ariaLabel","props","styles","optionsMenuToggle","optionsMenuToggleText"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAqCO,IAAMA,yBAAkF,GAAG,SAArFA,yBAAqF,OAkB5D;AAAA,2BAjBpCC,QAiBoC;AAAA,MAjBpCA,QAiBoC,8BAjBzB,EAiByB;AAAA,MAhBpCC,UAgBoC,QAhBpCA,UAgBoC;AAAA,mCAfpCC,mBAeoC;AAAA,MAfpCA,mBAeoC,sCAfd,EAec;AAAA,MAdpCC,oBAcoC,QAdpCA,oBAcoC;AAAA,mCAbpCC,6BAaoC;AAAA,MAbpCA,6BAaoC,sCAbJ,EAaI;AAAA,2BAZpCC,QAYoC;AAAA,MAZpCA,QAYoC,8BAZzB;AAAA,WAAM,IAAN;AAAA,GAYyB;AAAA,yBAXpCC,MAWoC;AAAA,MAXpCA,MAWoC,4BAX3B,KAW2B;AAAA,0BAVpCC,OAUoC;AAAA,MAVpCA,OAUoC,6BAV1B,KAU0B;AAAA,4BATpCC,SASoC;AAAA,MATpCA,SASoC,+BATxB,KASwB;AAAA,2BARpCC,QAQoC;AAAA,MARpCA,QAQoC,8BARzB,KAQyB;AAAA,4BAPpCC,SAOoC;AAAA,MAPpCA,SAOoC,+BAPxB,KAOwB;AAAA,6BANpCC,UAMoC;AAAA,MANpCA,UAMoC,gCANvB,KAMuB;AAAA,MALpCC,YAKoC,QALpCA,YAKoC;AAAA,MAJpCC,SAIoC,QAJpCA,SAIoC;AAAA,MAHpCC,OAGoC,QAHpCA,OAGoC;AAAA,4BAFpC,YAEoC;AAAA,MAFtBC,SAEsB,+BAFV,cAEU;AAAA,MADjCC,KACiC;;AACpC,SAEA;AAAK,IAAA,SAAS,EAAE,sBAAIC,wBAAOC,iBAAX,EACd,8BAAYD,uBAAZ,EAAoB,MAApB,CADc,EAEdV,OAAO,IAAI,8BAAYU,uBAAZ,EAAoB,OAApB,CAFG,EAGdT,SAAS,IAAI,8BAAYS,uBAAZ,EAAoB,OAApB,CAHC,EAIdR,QAAQ,IAAI,8BAAYQ,uBAAZ,EAAoB,QAApB,CAJE,EAKdP,SAAS,IAAI,8BAAYO,uBAAZ,EAAoB,OAApB,CALC,EAMdN,UAAU,IAAI,8BAAYM,uBAAZ,EAAoB,UAApB,CANA;AAAhB,KAOMD,KAPN,GAQE;AAAM,IAAA,SAAS,EAAE,sBAAIC,wBAAOE,qBAAX,EAAkCjB,mBAAlC;AAAjB,KAA0ED,UAA1E,CARF,EASE,oBAAC,oCAAD;AAAmB,IAAA,SAAS,EAAEG,6BAA9B;AACI,IAAA,UAAU,EAAEO,UADhB;AAEI,kBAAYI,SAFhB;AAGI,IAAA,MAAM,EAAET,MAHZ;AAII,IAAA,aAAa,MAJjB;AAKI,IAAA,QAAQ,EAAED,QALd;AAMI,qBAAc,SANlB;AAOI,IAAA,SAAS,EAAEQ,SAPf;AAQI,IAAA,OAAO,EAAEC,OARb;AASI,IAAA,cAAc,EAAEX;AATpB,IATF,CAFA;AAuBC,CA1CI;;;;AAjCLH,EAAAA,Q;AAEAC,EAAAA,U;AAEAC,EAAAA,mB;AAEAC,EAAAA,oB;AAEAC,EAAAA,6B;AAEAC,EAAAA,Q;AAEAS,EAAAA,O;AAEAR,EAAAA,M;AAEAC,EAAAA,O;AAEAG,EAAAA,S;AAEAF,EAAAA,S;AAEAC,EAAAA,Q;AAEAE,EAAAA,U;AAEAE,EAAAA,S;AAEAD,EAAAA,Y,4FAAyB,Q,iCAAW,M,iCAAS,O,iCAAU,M,iCAAS,S,iCAAY,M,iCAAS,M;AAErF,c","sourcesContent":["import * as React from 'react';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { OptionsMenuToggle } from './OptionsMenuToggle';\n\nexport interface OptionsMenuToggleWithTextProps extends React.HTMLProps<HTMLDivElement> {\n  /** Id of the parent Options menu component */\n  parentId?: string;\n  /** Content to be rendered inside the Options menu toggle as text or another non-interactive element */\n  toggleText: React.ReactNode;\n  /** classes to be added to the Options menu toggle text */\n  toggleTextClassName?: string;\n  /** Content to be rendered inside the Options menu toggle button */\n  toggleButtonContents?: React.ReactNode;\n  /** Classes to be added to the Options menu toggle button */\n  toggleButtonContentsClassName?: string;\n  /** Callback for when this Options menu is toggled */\n  onToggle?: (event: boolean) => void;\n  /** Inner function to indicate open on Enter */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  /** Forces display of the focused state of the Options menu button */\n  isFocused?: boolean;\n  /** Forces display of the hover state of the Options menu button */\n  isHovered?: boolean;\n  /** Forces display of the active state of the Options menu button */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** Internal parent reference */\n  parentRef?: HTMLElement;\n  /** Indicates that the element has a popup context menu or sub-level menu */\n  ariaHasPopup?: boolean | 'dialog' | 'menu' | 'false' | 'true' | 'listbox' | 'tree' | 'grid';\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n}\n\nexport const OptionsMenuToggleWithText: React.FunctionComponent<OptionsMenuToggleWithTextProps> = ({\n  parentId = '',\n  toggleText,\n  toggleTextClassName = '',\n  toggleButtonContents,\n  toggleButtonContentsClassName = '',\n  onToggle = () => null as any,\n  isOpen = false,\n  isPlain = false,\n  isHovered = false,\n  isActive = false,\n  isFocused = false,\n  isDisabled = false,\n  ariaHasPopup,\n  parentRef,\n  onEnter,\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleWithTextProps) => {\n  return (\n\n  <div className={css(styles.optionsMenuToggle,\n    getModifier(styles, 'text'),\n    isPlain && getModifier(styles, 'plain'),\n    isHovered && getModifier(styles, 'hover'),\n    isActive && getModifier(styles, 'active'),\n    isFocused && getModifier(styles, 'focus'),\n    isDisabled && getModifier(styles, 'disabled'))}\n    {...props}>\n    <span className={css(styles.optionsMenuToggleText, toggleTextClassName)}>{toggleText}</span>\n    <OptionsMenuToggle className={toggleButtonContentsClassName}\n        isDisabled={isDisabled}\n        aria-label={ariaLabel}\n        isOpen={isOpen}\n        isSplitButton\n        onToggle={onToggle}\n        aria-haspopup=\"listbox\"\n        parentRef={parentRef}\n        onEnter={onEnter}\n        toggleTemplate={toggleButtonContents}\n      />\n  </div>\n);};\n"],"file":"OptionsMenuToggleWithText.js"}