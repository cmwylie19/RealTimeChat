{"version":3,"sources":["../../../../../src/components/ChartBullet/utils/chart-bullet-size.ts"],"names":["ChartBulletStyles","getBulletComparativeErrorMeasureTheme","getBulletComparativeMeasureTheme","getBulletComparativeWarningMeasureTheme","getBulletPrimaryDotMeasureTheme","getBulletPrimarySegmentedMeasureTheme","getBulletQualitativeRangeTheme","getComparativeMeasureErrorWidth","height","horizontal","themeColor","themeVariant","width","theme","scaleBarWidth","defaultSize","bar","value","comparativeMeasureErrorWidth","getComparativeMeasureWidth","comparativeMeasureWidth","getComparativeMeasureWarningWidth","comparativeMeasureWarningWidth","getPrimaryDotMeasureSize","scaleSize","group","primaryDotMeasureSize","getPrimarySegmentedMeasureWidth","scale","primarySegmentedMeasureWidth","getQualitativeRangeBarWidth","qualitativeRangeWidth","props","Math","max","rest","round"],"mappings":"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","sourcesContent":["import { ChartThemeDefinition } from '../../ChartTheme';\nimport { ChartBulletStyles }  from '../../ChartTheme';\nimport {\n  getBulletComparativeErrorMeasureTheme,\n  getBulletComparativeMeasureTheme,\n  getBulletComparativeWarningMeasureTheme,\n  getBulletPrimaryDotMeasureTheme,\n  getBulletPrimarySegmentedMeasureTheme,\n  getBulletQualitativeRangeTheme\n} from '../../ChartUtils';\n\ninterface ChartBulletScaleInterface {\n  defaultSize: number; // The default chart size from the theme\n  height: number; // The chart height -- not SVG height\n  horizontal?: boolean; // Flag indicating chart is shown horizontally\n  scale?: number; // The scale factor to reduce / increase the bar width\n  value: number; // The bar height or scatter size from the theme\n  width: number; // The chart width -- not SVG width\n}\n\ninterface ChartBulletSizeInterface {\n  height: number; // The chart height -- not SVG height\n  horizontal?: boolean; // Flag indicating chart is shown horizontally\n  theme?: ChartThemeDefinition;\n  themeColor?: string;\n  themeVariant?: string;\n  width: number;  // The chart width -- not SVG width\n}\n\nexport const getComparativeMeasureErrorWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletComparativeErrorMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.bar.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.comparativeMeasureErrorWidth,\n  width\n});\n\nexport const getComparativeMeasureWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletComparativeMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.bar.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.comparativeMeasureWidth,\n  width\n});\n\nexport const getComparativeMeasureWarningWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletComparativeWarningMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.bar.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.comparativeMeasureWarningWidth,\n  width\n});\n\nexport const getPrimaryDotMeasureSize = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletPrimaryDotMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleSize({\n  defaultSize: theme.group.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.primaryDotMeasureSize,\n  width\n});\n\nexport const getPrimarySegmentedMeasureWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletPrimarySegmentedMeasureTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.group.height,\n  height,\n  horizontal,\n  scale: .3,\n  value: ChartBulletStyles.primarySegmentedMeasureWidth,\n  width\n});\n\nexport const getQualitativeRangeBarWidth = ({\n  height,\n  horizontal,\n  themeColor,\n  themeVariant,\n  width,\n\n  // destructure last\n  theme = getBulletQualitativeRangeTheme(themeColor, themeVariant),\n}: ChartBulletSizeInterface) => scaleBarWidth({\n  defaultSize: theme.group.height,\n  height,\n  horizontal,\n  value: ChartBulletStyles.qualitativeRangeWidth,\n  width\n});\n\nconst scale = ({\n  defaultSize,\n  height,\n  horizontal = true,\n  scale = 1,\n  value,\n  width\n}: ChartBulletScaleInterface) => horizontal\n  ? height > defaultSize\n    ? value + (height - defaultSize) * scale\n    : value - (defaultSize - height) * scale\n  : width > defaultSize\n    ? value + (width - defaultSize) * scale\n    : value - (defaultSize - width) * scale;\n\n// Scale bar width per the given size properties\nexport const scaleBarWidth = (props: ChartBulletScaleInterface) => Math.max(scale(props), 0);\n\n// Scale size per the given size properties\nexport const scaleSize = ({\n  value,\n  ...rest\n}: ChartBulletScaleInterface) => Math.round(\n  scale({\n    scale: 1 / value,\n    value,\n    ...rest,\n  })\n);\n"],"file":"chart-bullet-size.js"}