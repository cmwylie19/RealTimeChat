{"version":3,"sources":["../../../../src/components/Switch/Switch.test.tsx"],"names":["React","mount","Switch","props","onChange","jest","fn","isChecked","test","view","expect","find","prop","toBe","toBeDefined","toMatchSnapshot","check","input","simulate","target","checked","mock","calls"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mount } from 'enzyme';\nimport { Switch } from './Switch';\n\nconst props = {\n  onChange: jest.fn(),\n  isChecked: false\n};\n\ntest('switch label for attribute equals input id attribute', () => {\n  const view = mount(<Switch id=\"foo\" />);\n  expect(view.find('input').prop('id')).toBe('foo');\n  expect(view.find('label').prop('htmlFor')).toBe('foo');\n});\n\ntest('switch label id is auto generated', () => {\n  const view = mount(<Switch aria-label=\"...\" />);\n  expect(view.find('input').prop('id')).toBeDefined();\n});\n\ntest('switch is checked', () => {\n  const view = mount(<Switch id=\"switch-is-checked\" label=\"On\" labelOff=\"Off\" isChecked />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('switch is not checked', () => {\n  const view = mount(<Switch id=\"switch-is-not-checked\" label=\"On\" labelOff=\"Off\" isChecked={false} />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('switch with only label is checked', () => {\n  const check = true;\n  const view = mount(<Switch id=\"switch-is-checked\" label={check ? \"On\" : \"Off\"} isChecked={check} />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('switch with only label is not checked', () => {\n  const check = false;\n  const view = mount(<Switch id=\"switch-is-not-checked\" label={check ? \"On\" : \"Off\"} isChecked={check} />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('no label switch is checked', () => {\n  const view = mount(<Switch id=\"no-label-switch-is-checked\" isChecked />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('no label switch is not checked', () => {\n  const view = mount(<Switch id=\"no-label-switch-is-not-checked\" isChecked={false} />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('switch is checked and disabled', () => {\n  const view = mount(<Switch id=\"switch-is-checked-and-disabled\" isChecked isDisabled />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('switch is not checked and disabled', () => {\n  const view = mount(<Switch id=\"switch-is-not-checked-and-disabled\" isChecked={false} isDisabled />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('switch passes value and event to onChange handler', () => {\n  const view = mount(<Switch id=\"onChange-switch\" {...props} />);\n  const input = view.find('input');\n  expect(input.prop('defaultChecked')).toBe(false);\n  input.simulate('change', { target: { checked: true } });\n  expect(props.onChange.mock.calls[0][0]).toBe(true);\n});\n"],"file":"Switch.test.js"}