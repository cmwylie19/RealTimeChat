{"version":3,"sources":["../../../../../src/components/Virtualized/utils/ScalingCellSizeAndPositionManager.ts"],"names":["CellSizeAndPositionManager","getMaxElementSize","ScalingCellSizeAndPositionManager","constructor","maxScrollSize","params","_cellSizeAndPositionManager","_maxScrollSize","areOffsetsAdjusted","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","getSizeAndPositionOfCell","index","getSizeAndPositionOfLastMeasuredCell","min","getUpdatedOffsetForIndex","align","currentOffset","targetIndex","_safeOffsetToOffset","_offsetToSafeOffset","getVisibleCellRange","resetCell"],"mappings":";;;;AAAA;AAIA,OAAOA,0BAAP,MAAuC,8BAAvC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAoBA;;;AAGA,eAAe,MAAMC,iCAAN,CAAwC;AAIrDC,EAAAA,WAAW,OAA6D;AAAA,QAA5D;AAAEC,MAAAA,aAAa,GAAGH,iBAAiB;AAAnC,KAA4D;AAAA,QAAlBI,MAAkB;;AACtE;AACA,SAAKC,2BAAL,GAAmC,IAAIN,0BAAJ,CAA+BK,MAA/B,CAAnC;AACA,SAAKE,cAAL,GAAsBH,aAAtB;AACD;;AAEDI,EAAAA,kBAAkB,GAAY;AAC5B,WAAO,KAAKF,2BAAL,CAAiCG,YAAjC,KAAkD,KAAKF,cAA9D;AACD;;AAEDG,EAAAA,SAAS,CAACL,MAAD,EAA2F;AAClG,SAAKC,2BAAL,CAAiCI,SAAjC,CAA2CL,MAA3C;AACD;;AAEDM,EAAAA,YAAY,GAAW;AACrB,WAAO,KAAKL,2BAAL,CAAiCK,YAAjC,EAAP;AACD;;AAEDC,EAAAA,oBAAoB,GAAW;AAC7B,WAAO,KAAKN,2BAAL,CAAiCM,oBAAjC,EAAP;AACD;;AAEDC,EAAAA,oBAAoB,GAAW;AAC7B,WAAO,KAAKP,2BAAL,CAAiCO,oBAAjC,EAAP;AACD;AAED;;;;;;AAIAC,EAAAA,mBAAmB,CAAC;AAClBC,IAAAA,aADkB;AAElBC,IAAAA,MAFkB,CAEX;;AAFW,GAAD,EAGgB;AACjC,UAAMC,SAAS,GAAG,KAAKX,2BAAL,CAAiCG,YAAjC,EAAlB;;AACA,UAAMS,aAAa,GAAG,KAAKT,YAAL,EAAtB;;AACA,UAAMU,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AACjDL,MAAAA,aADiD;AAEjDC,MAAAA,MAFiD;AAGjDC,MAAAA,SAAS,EAAEC;AAHsC,KAA1B,CAAzB;;AAMA,WAAOG,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAID,aAAa,GAAGD,SAApB,CAA3B,CAAP;AACD;;AAEDM,EAAAA,wBAAwB,CAACC,KAAD,EAAgB;AACtC,WAAO,KAAKlB,2BAAL,CAAiCiB,wBAAjC,CAA0DC,KAA1D,CAAP;AACD;;AAEDC,EAAAA,oCAAoC,GAAG;AACrC,WAAO,KAAKnB,2BAAL,CAAiCmB,oCAAjC,EAAP;AACD;AAED;;;AACAhB,EAAAA,YAAY,GAAW;AACrB,WAAOY,IAAI,CAACK,GAAL,CAAS,KAAKnB,cAAd,EAA8B,KAAKD,2BAAL,CAAiCG,YAAjC,EAA9B,CAAP;AACD;AAED;;;AACAkB,EAAAA,wBAAwB,CAAC;AACvBC,IAAAA,KAAK,GAAG,MADe;AAEvBb,IAAAA,aAFuB;AAGvBc,IAAAA,aAHuB;AAGR;AACfC,IAAAA;AAJuB,GAAD,EAUrB;AACDD,IAAAA,aAAa,GAAG,KAAKE,mBAAL,CAAyB;AACvChB,MAAAA,aADuC;AAEvCC,MAAAA,MAAM,EAAEa;AAF+B,KAAzB,CAAhB;;AAKA,UAAMb,MAAM,GAAG,KAAKV,2BAAL,CAAiCqB,wBAAjC,CAA0D;AACvEC,MAAAA,KADuE;AAEvEb,MAAAA,aAFuE;AAGvEc,MAAAA,aAHuE;AAIvEC,MAAAA;AAJuE,KAA1D,CAAf;;AAOA,WAAO,KAAKE,mBAAL,CAAyB;AAC9BjB,MAAAA,aAD8B;AAE9BC,MAAAA;AAF8B,KAAzB,CAAP;AAID;AAED;;;AACAiB,EAAAA,mBAAmB,CAAC;AAClBlB,IAAAA,aADkB;AAElBC,IAAAA,MAFkB,CAEX;;AAFW,GAAD,EAG0B;AAC3CA,IAAAA,MAAM,GAAG,KAAKe,mBAAL,CAAyB;AAChChB,MAAAA,aADgC;AAEhCC,MAAAA;AAFgC,KAAzB,CAAT;AAKA,WAAO,KAAKV,2BAAL,CAAiC2B,mBAAjC,CAAqD;AAC1DlB,MAAAA,aAD0D;AAE1DC,MAAAA;AAF0D,KAArD,CAAP;AAID;;AAEDkB,EAAAA,SAAS,CAACV,KAAD,EAAsB;AAC7B,SAAKlB,2BAAL,CAAiC4B,SAAjC,CAA2CV,KAA3C;AACD;;AAEDJ,EAAAA,oBAAoB,CAAC;AACnBL,IAAAA,aADmB;AAEnBC,IAAAA,MAFmB;AAEX;AACRC,IAAAA;AAHmB,GAAD,EAQjB;AACD,WAAOA,SAAS,IAAIF,aAAb,GAA6B,CAA7B,GAAiCC,MAAM,IAAIC,SAAS,GAAGF,aAAhB,CAA9C;AACD;;AAEDiB,EAAAA,mBAAmB,CAAC;AAClBjB,IAAAA,aADkB;AAElBC,IAAAA,MAFkB,CAEX;;AAFW,GAAD,EAGgB;AACjC,UAAMC,SAAS,GAAG,KAAKX,2BAAL,CAAiCG,YAAjC,EAAlB;;AACA,UAAMS,aAAa,GAAG,KAAKT,YAAL,EAAtB;;AAEA,QAAIQ,SAAS,KAAKC,aAAlB,EAAiC;AAC/B,aAAOF,MAAP;AACD;;AACD,UAAMG,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AACjDL,MAAAA,aADiD;AAEjDC,MAAAA,MAFiD;AAGjDC,MAAAA;AAHiD,KAA1B,CAAzB;;AAMA,WAAOI,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAID,aAAa,GAAGH,aAApB,CAA3B,CAAP;AACD;;AAEDgB,EAAAA,mBAAmB,CAAC;AAClBhB,IAAAA,aADkB;AAElBC,IAAAA,MAFkB,CAEX;;AAFW,GAAD,EAGgB;AACjC,UAAMC,SAAS,GAAG,KAAKX,2BAAL,CAAiCG,YAAjC,EAAlB;;AACA,UAAMS,aAAa,GAAG,KAAKT,YAAL,EAAtB;;AAEA,QAAIQ,SAAS,KAAKC,aAAlB,EAAiC;AAC/B,aAAOF,MAAP;AACD;;AACD,UAAMG,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AACjDL,MAAAA,aADiD;AAEjDC,MAAAA,MAFiD;AAGjDC,MAAAA,SAAS,EAAEC;AAHsC,KAA1B,CAAzB;;AAMA,WAAOG,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAIF,SAAS,GAAGF,aAAhB,CAA3B,CAAP;AACD;;AAhKoD","sourcesContent":["/* eslint-disable */\n\nimport { Alignment, CellSizeGetter, VisibleCellRange } from '../types';\n\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\ninterface ContainerSizeAndOffset {\n  containerSize: number,\n  offset: number\n}\n\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n\ninterface Params {\n  maxScrollSize?: number,\n  cellCount: number,\n  cellSizeGetter: CellSizeGetter,\n  estimatedCellSize: number\n}\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nexport default class ScalingCellSizeAndPositionManager {\n  _cellSizeAndPositionManager: CellSizeAndPositionManager;\n  _maxScrollSize: number;\n\n  constructor({ maxScrollSize = getMaxElementSize(), ...params }: Params) {\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  areOffsetsAdjusted(): boolean {\n    return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n  }\n\n  configure(params: { cellCount: number, estimatedCellSize: number, cellSizeGetter: CellSizeGetter }) {\n    this._cellSizeAndPositionManager.configure(params);\n  }\n\n  getCellCount(): number {\n    return this._cellSizeAndPositionManager.getCellCount();\n  }\n\n  getEstimatedCellSize(): number {\n    return this._cellSizeAndPositionManager.getEstimatedCellSize();\n  }\n\n  getLastMeasuredIndex(): number {\n    return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n  }\n\n  /**\n   * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n   * The offset passed to this function is scaled (safe) as well.\n   */\n  getOffsetAdjustment({\n    containerSize,\n    offset // safe\n  }: ContainerSizeAndOffset): number {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n    const safeTotalSize = this.getTotalSize();\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize: safeTotalSize\n    });\n\n    return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n  }\n\n  getSizeAndPositionOfCell(index: number) {\n    return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n  }\n\n  getSizeAndPositionOfLastMeasuredCell() {\n    return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n  }\n\n  /** See CellSizeAndPositionManager#getTotalSize */\n  getTotalSize(): number {\n    return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n  }\n\n  /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n  getUpdatedOffsetForIndex({\n    align = 'auto',\n    containerSize,\n    currentOffset, // safe\n    targetIndex\n  }: {\n    align: Alignment,\n    containerSize: number,\n    currentOffset: number,\n    targetIndex: number\n  }) {\n    currentOffset = this._safeOffsetToOffset({\n      containerSize,\n      offset: currentOffset\n    });\n\n    const offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n      align,\n      containerSize,\n      currentOffset,\n      targetIndex\n    });\n\n    return this._offsetToSafeOffset({\n      containerSize,\n      offset\n    });\n  }\n\n  /** See CellSizeAndPositionManager#getVisibleCellRange */\n  getVisibleCellRange({\n    containerSize,\n    offset // safe\n  }: ContainerSizeAndOffset): VisibleCellRange {\n    offset = this._safeOffsetToOffset({\n      containerSize,\n      offset\n    });\n\n    return this._cellSizeAndPositionManager.getVisibleCellRange({\n      containerSize,\n      offset\n    });\n  }\n\n  resetCell(index: number): void {\n    this._cellSizeAndPositionManager.resetCell(index);\n  }\n\n  _getOffsetPercentage({\n    containerSize,\n    offset, // safe\n    totalSize\n  }: {\n    containerSize: number,\n    offset: number,\n    totalSize: number\n  }) {\n    return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n  }\n\n  _offsetToSafeOffset({\n    containerSize,\n    offset // unsafe\n  }: ContainerSizeAndOffset): number {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n    const safeTotalSize = this.getTotalSize();\n\n    if (totalSize === safeTotalSize) {\n      return offset;\n    }\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize\n    });\n\n    return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n  }\n\n  _safeOffsetToOffset({\n    containerSize,\n    offset // safe\n  }: ContainerSizeAndOffset): number {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n    const safeTotalSize = this.getTotalSize();\n\n    if (totalSize === safeTotalSize) {\n      return offset;\n    }\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize: safeTotalSize\n    });\n\n    return Math.round(offsetPercentage * (totalSize - containerSize));\n  }\n}\n"],"file":"ScalingCellSizeAndPositionManager.js"}