{"version":3,"sources":["../../../../src/components/ChartAxis/ChartAxis.tsx"],"names":["React","hoistNonReactStatics","VictoryAxis","ChartContainer","getAxisTheme","getTheme","ChartAxis","containerComponent","showGrid","themeColor","themeVariant","theme","rest","container","cloneElement","props","animate","axisComponent","axisLabelComponent","axisValue","crossAxis","dependentAxis","domain","domainPadding","events","externalEventMutations","fixLabelOverlap","gridComponent","groupComponent","height","invertAxis","label","maxDomain","x","y","minDomain","name","offsetX","offsetY","orientation","padding","range"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SAQEC,WARF,QAUO,SAVP;AAWA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,eAAvC;AAEA;;;;AAqYA,OAAO,MAAMC,SAAkD,GAAG,UAS5C;AAAA,MAT6C;AACjEC,IAAAA,kBAAkB,GAAG,oBAAC,cAAD,OAD4C;AAEjEC,IAAAA,QAAQ,GAAG,KAFsD;AAGjEC,IAAAA,UAHiE;AAIjEC,IAAAA,YAJiE;AAMjE;AACAC,IAAAA,KAAK,GAAGN,QAAQ,CAACI,UAAD,EAAaC,YAAb;AAPiD,GAS7C;AAAA,MADjBE,IACiB;;AACpB;AACA,QAAMC,SAAS,GAAGb,KAAK,CAACc,YAAN,CAAmBP,kBAAnB;AAChBI,IAAAA;AADgB,KAEbJ,kBAAkB,CAACQ,KAFN,EAAlB;AAIA,SACE,oBAAC,WAAD;AACE,IAAA,kBAAkB,EAAEF,SADtB;AAEE,IAAA,KAAK,EAAEL,QAAQ,GAAGJ,YAAY,CAACK,UAAD,EAAaC,YAAb,CAAf,GAA4CC;AAF7D,KAGMC,IAHN,EADF;AAOD,CAtBM;;AA1XLI,EAAAA,O;AASAC,EAAAA,a;AAUAC,EAAAA,kB;AAKAC,EAAAA,S;AAeAZ,EAAAA,kB;AAIAa,EAAAA,S;AAMAC,EAAAA,a;AAOAC,EAAAA,M;AAOAC,EAAAA,a;AAwCAC,EAAAA,M;AAIAC,EAAAA,sB;AAMAC,EAAAA,e;AASAC,EAAAA,a;AAMAC,EAAAA,c;AASAC,EAAAA,M;AAIAC,EAAAA,U;AAWAC,EAAAA,K;AAeAC,EAAAA,S;AAAuBC,IAAAA,C;AAAYC,IAAAA,C;;AAenCC,EAAAA,S;AAAuBF,IAAAA,C;AAAYC,IAAAA,C;;AAInCE,EAAAA,I;AAMAC,EAAAA,O;AAMAC,EAAAA,O;AAIAC,EAAAA,W,aAAc,K,EAAQ,Q,EAAW,M,EAAS,O;AAO1CC,EAAAA,O;AAcAC,EAAAA,K;;AAmLFxC,oBAAoB,CAACK,SAAD,EAAYJ,WAAZ,CAApB","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  AnimatePropTypeInterface,\n  D3Scale,\n  DomainPaddingPropType,\n  DomainPropType,\n  EventPropTypeInterface,\n  PaddingProps,\n  ScalePropType,\n  VictoryAxis,\n  VictoryAxisProps,\n} from 'victory';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartThemeDefinition } from '../ChartTheme';\nimport { getAxisTheme, getTheme } from '../ChartUtils';\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartAxisProps extends VictoryAxisProps {\n  /**\n   * The animate prop specifies props for VictoryAnimation to use.\n   * The animate prop should also be used to specify enter and exit\n   * transition configurations with the `onExit` and `onEnter` namespaces respectively.\n   * @example\n   * {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\n   */\n  animate?: AnimatePropTypeInterface;\n  /**\n   * The axisComponent prop takes in an entire component which will be used\n   * to create the axis line. The new element created from the passed axisComponent\n   * will be supplied with the following properties: x1, y1, x2, y2, style and events.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If an axisComponent\n   * is not supplied, ChartAxis will render its default AxisLine component.\n   */\n  axisComponent?: React.ReactElement<any>;\n  /**\n   * The axisLabelComponent prop takes in an entire component which will be used\n   * to create the axis label. The new element created from the passed axisLabelComponent\n   * will be supplied with the following properties: x, y, verticalAnchor, textAnchor,\n   * angle, transform, style and events. Any of these props may be overridden by\n   * passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If an axisLabelComponent is not supplied, a new\n   * ChartLabel will be created with props described above\n   */\n  axisLabelComponent?: React.ReactElement<any>;\n  /**\n   * The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\n   * dependent axes should line up with values on the independent axis.\n   */\n  axisValue?: any;\n  /**\n   * The containerComponent prop takes an entire component which will be used to\n   * create a container element for standalone charts.\n   * The new element created from the passed containerComponent wil be provided with\n   * these props from ChartAxis: height, width, children\n   * (the chart itself) and style. Props that are not provided by the\n   * child chart component include title and desc, both of which\n   * are intended to add accessibility to Victory components. The more descriptive these props\n   * are, the more accessible your data will be for people using screen readers.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a dataComponent is\n   * not provided, ChartAxis will use the default ChartContainer component.\n   * @example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />\n   */\n  containerComponent?: React.ReactElement<any>;\n  /**\n   * This prop specifies whether a given axis is intended to cross another axis.\n   */\n  crossAxis?: boolean;\n  /**\n   * The dependentAxis prop specifies whether the axis corresponds to the\n   * dependent variable (usually y). This prop is useful when composing axis\n   * with other components to form a chart.\n   */\n  dependentAxis?: boolean;\n  /**\n   * The domain prop describes the range of values your axis will include. This prop should be\n   * given as a array of the minimum and maximum expected values for your axis.\n   * If this value is not given it will be calculated based on the scale or tickValues.\n   * @example [-1, 1]\n   */\n  domain?: DomainPropType;\n  /**\n   * The domainPadding prop specifies a number of pixels of padding to add to the\n   * beginning and end of a domain. This prop is useful for explicitly spacing ticks farther\n   * from the origin to prevent crowding. This prop should be given as an object with\n   * numbers specified for x and y.\n   */\n  domainPadding?: DomainPaddingPropType;\n  /**\n   * The event prop take an array of event objects. Event objects are composed of\n   * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace\n   * for a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\n   * all valid targets for ChartAxis events. The eventKey may optionally be used to select a\n   * single element by index rather than an entire set. The eventHandlers object\n   * should be given as an object whose keys are standard event names (i.e. onClick)\n   * and whose values are event callbacks. The return value of an event handler\n   * be used to modify other elemnts. The return value should be given as an object or\n   * an array of objects with optional target and eventKey keys, and a mutation\n   * key whose value is a function. The target and eventKey keys will default to those\n   * corresponding to the element the event handler was attached to. The mutation\n   * function will be called with the calculated props for the individual selected\n   * element (i.e. a single tick), and the object returned from the mutation function\n   * will override the props of the selected element via object assignment.\n   * @example\n   * events={[\n   *   {\n   *     target: \"grid\",\n   *     eventKey: 2,\n   *     eventHandlers: {\n   *       onClick: () => {\n   *         return [\n   *           {\n   *             mutation: (props) => {\n   *               return {style: merge({}, props.style, {stroke: \"orange\"})};\n   *             }\n   *           }, {\n   *             target: \"tickLabels\",\n   *             mutation: () => {\n   *               return {text: \"hey\"};\n   *             }\n   *           }\n   *         ];\n   *       }\n   *     }\n   *   }\n   * ]}\n   */\n  events?: EventPropTypeInterface<'axis' | 'axisLabel' | 'grid' | 'ticks' | 'tickLabels' | 'parent', number | string>[];\n  /**\n   * ChartAxis uses the standard externalEventMutations prop.\n   */\n  externalEventMutations?: any[];\n  /**\n   * When true, this prop reduces the number of tick labels to fit the length of the axis.\n   * Labels are removed at approximately even intervals from the original array of labels.\n   * This feature only works well for labels that are approximately evenly spaced.\n   */\n  fixLabelOverlap?: boolean;\n  /**\n   * The gridComponent prop takes in an entire component which will be used\n   * to create grid lines. The new element created from the passed gridComponent\n   * will be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a gridComponent\n   * is not supplied, ChartAxis will render its default GridLine component.\n   */\n  gridComponent?: React.ReactElement<any>;\n  /**\n   * The groupComponent prop takes an entire component which will be used to\n   * create group elements for use within container elements. This prop defaults\n   * to a <g> tag on web, and a react-native-svg <G> tag on mobile\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   */\n  height?: number;\n  /**\n   * If true, this value will flip the domain of a given axis.\n   */\n  invertAxis?: boolean;\n  /**\n   * The label prop defines the label that will appear along the axis. This\n   * prop should be given as a value or an entire, HTML-complete label\n   * component. If a label component is given, it will be cloned. The new\n   * element's properties x, y, textAnchor, verticalAnchor, and transform\n   * will have defaults provided by the axis; styles filled out with\n   * defaults provided by the axis, and overrides from the label component.\n   * If a value is given, a new ChartLabel will be created with props and\n   * styles from the axis.\n   */\n  label?: any;\n  /**\n   * The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\n   * domain of a chart is static, while the minimum value depends on data or other variable information. If the domain\n   * prop is set in addition to maximumDomain, domain will be used.\n   *\n   * note: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\n   * dependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\n   * the y axis.\n   *\n   * examples:\n   *\n   * maxDomain={0}\n   * maxDomain={{ y: 0 }}\n   */\n  maxDomain?: number | { x?: number, y?: number };\n  /**\n   * The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\n   * domain of a chart is static, while the maximum value depends on data or other variable information. If the domain\n   * prop is set in addition to minimumDomain, domain will be used.\n   *\n   * note: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\n   * dependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\n   * the y axis.\n   *\n   * examples:\n   *\n   * minDomain={0}\n   * minDomain={{ y: 0 }}\n   */\n  minDomain?: number | { x?: number, y?: number };\n  /**\n   * ChartAxis uses the standard name prop\n   */\n  name?: string;\n  /**\n   * This value describes how far from the \"edge\" of its permitted area each axis\n   * will be set back in the x-direction.  If this prop is not given,\n   * the offset is calculated based on font size, axis orientation, and label padding.\n   */\n  offsetX?: number;\n  /**\n   * This value describes how far from the \"edge\" of its permitted area each axis\n   * will be set back in the y-direction.  If this prop is not given,\n   * the offset is calculated based on font size, axis orientation, and label padding.\n   */\n  offsetY?: number;\n  /**\n   * The orientation prop specifies the position and orientation of your axis.\n   */\n  orientation?: 'top' | 'bottom' | 'left' | 'right';\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\n   * corresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\n   * corresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\n   * height, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\n   * chart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\n   * ChartGroup will have no effect. This prop is usually not set manually.\n   *\n   * examples:\n   *\n   * Cartesian: range={{ x: [50, 250], y: [50, 250] }}\n   * Polar: range={{ x: [0, 360], y: [0, 250] }}\n   */\n  range?: [number, number] | { x?: [number, number], y?: [number, number] };\n  /**\n   * The scale prop determines which scales your chart should use. This prop can be\n   * given as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\n   * as a d3 scale function, or as an object with scales specified for x and y\n   * @example d3Scale.time(), {x: \"linear\", y: \"log\"}\n   */\n  scale?: ScalePropType | D3Scale | {\n    x?: ScalePropType | D3Scale;\n    y?: ScalePropType | D3Scale;\n  };\n  /**\n   * The sharedEvents prop is used internally to coordinate events between components. It should not be set manually.\n   */\n  sharedEvents?: any;\n  /**\n   * Show axis grid and ticks\n   */\n  showGrid?: boolean;\n  /**\n   * By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\n   * values, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\n   * desired behavior in most cases. For users that need to apply padding without regard to quadrant, the\n   * singleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\n   * specified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\n   * without regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n   *\n   * note: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\n   * value refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\n   * will corresponds to the y axis.\n   *\n   * examples:\n   *\n   * singleQuadrantDomainPadding={false}\n   * singleQuadrantDomainPadding={{ x: false }}\n   */\n  singleQuadrantDomainPadding?: boolean | { x: boolean, y: boolean };\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartAxis with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The style prop defines the style of the component. The style prop should be given as an object\n   * with styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\n   * styles are supported, but width, height, and padding should be specified via props as they\n   * determine relative layout for components in Chart. Functional styles may be defined for\n   * grid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n   *\n   * note: When a component is rendered as a child of another Victory component, or within a custom\n   * <svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\n   * Many styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n   *\n   * note: custom angle and verticalAnchor properties may be included in labels styles.\n   */\n  style?: {\n    parent?: React.CSSProperties;\n    axis?: React.CSSProperties;\n    axisLabel?: React.CSSProperties;\n    grid?: {\n      [K in keyof React.CSSProperties]:\n      | string\n      | number\n      | ((tick?: any) => string | number)\n    };\n    ticks?: {\n      [K in keyof React.CSSProperties]:\n      | string\n      | number\n      | ((tick?: any) => string | number)\n    };\n    tickLabels?: {\n      [K in keyof React.CSSProperties]:\n      | string\n      | number\n      | ((tick?: any) => string | number)\n    };\n  };\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartAxis as a solo component, implement the theme directly on\n   * ChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\n   * please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The tickComponent prop takes in an entire component which will be used\n   * to create tick lines. The new element created from the passed tickComponent\n   * will be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a tickComponent\n   * is not supplied, ChartAxis will render its default Tick component.\n   */\n  tickComponent?: React.ReactElement<any>;\n  /**\n   * The tickCount prop specifies approximately how many ticks should be drawn on the axis if\n   * tickValues are not explicitly provided. This value is calculated by d3 scale and\n   * prioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\n   * If you need an exact number of ticks, please specify them via the tickValues prop.\n   * This prop must have a value greater than zero.\n   */\n  tickCount?: number;\n  /**\n   * The tickFormat prop specifies how tick values should be expressed visually.\n   * tickFormat can be given as a function to be applied to every tickValue, or as\n   * an array of display values for each tickValue.\n   * @example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]\n   */\n  tickFormat?: any[] | ((tick: any, index: number, ticks: any[]) => string | number);\n  /**\n   * The tickLabelComponent prop takes in an entire component which will be used\n   * to create the tick labels. The new element created from the passed tickLabelComponent\n   * will be supplied with the following properties: x, y, verticalAnchor, textAnchor,\n   * angle, tick, style and events. Any of these props may be overridden by\n   * passing in props to the supplied component, or modified or ignored within\n   * the custom component itself. If an tickLabelComponent is not supplied, a new\n   * ChartLabel will be created with props described above\n   */\n  tickLabelComponent?: React.ReactElement<any>;\n  /**\n   * The tickValues prop explicitly specifies which tick values to draw on the axis.\n   * @example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]\n   */\n  tickValues?: any[];\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into.\n   *\n   * Note: innerRadius may need to be set when using this property.\n   */\n  width?: number;\n}\n\nexport const ChartAxis: React.FunctionComponent<ChartAxisProps> = ({\n  containerComponent = <ChartContainer />,\n  showGrid = false,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  ...rest\n}: ChartAxisProps) => {\n  // Clone so users can override container props\n  const container = React.cloneElement(containerComponent, {\n    theme,\n    ...containerComponent.props\n  });\n  return (\n    <VictoryAxis\n      containerComponent={container}\n      theme={showGrid ? getAxisTheme(themeColor, themeVariant) : theme}\n      {...rest}\n    />\n  );\n};\n\nhoistNonReactStatics(ChartAxis, VictoryAxis);\n"],"file":"ChartAxis.js"}