{"version":3,"sources":["../../../../src/components/ChipGroup/ChipGroup.tsx"],"names":["ChipGroupContext","React","createContext","ChipGroup","props","setState","prevState","isOpen","state","defaultIsOpen","headingLevel","toggleCollapse","className","styles","chipGroup","withToolbar","children","Children","count","renderToolbarGroup","renderChipGroup","Component","expandedText","collapsedText","numChips","InnerChipGroup","onToggleCollapse","collapsedTextResult","remaining","mappedChildren","map","c","child","cloneElement","toArray","chip","component","i"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Chip } from './Chip';\nimport { fillTemplate } from '../../helpers';\n\nexport const ChipGroupContext = React.createContext('');\n\nexport interface ChipGroupProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the chip text */\n  children?: React.ReactNode;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag for having the chip group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */\n  collapsedText?: string;\n  /** Flag for grouping with a toolbar & category name */\n  withToolbar?: boolean;\n  /** Set heading level to the chip item label */\n  headingLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n  /** Set number of chips to show before overflow */\n  numChips?: number; \n}\n\ninterface ChipGroupState {\n  isOpen: boolean;\n}\n\nexport class ChipGroup extends React.Component<ChipGroupProps, ChipGroupState> {\n  constructor(props: ChipGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen\n    };\n  }\n\n  static defaultProps = {\n    className: '',\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    withToolbar: false, \n    defaultIsOpen: false,\n    numChips: 3\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  };\n\n  renderToolbarGroup() {\n    const { isOpen } = this.state;\n    const { headingLevel = 'h4' } = this.props;\n    return (\n      <ChipGroupContext.Provider value={headingLevel}>\n        <InnerChipGroup\n          {...this.props}\n          isOpen={isOpen}\n          onToggleCollapse={this.toggleCollapse}\n        />\n      </ChipGroupContext.Provider>\n    );\n  }\n\n  renderChipGroup() {\n    const { className } = this.props;\n    const { isOpen } = this.state;\n    return (\n      <ul className={css(styles.chipGroup, className)}>\n        <InnerChipGroup\n          {...this.props}\n          isOpen={isOpen}\n          onToggleCollapse={this.toggleCollapse}\n        />\n      </ul>\n    );\n  }\n\n  render() {\n    const { withToolbar, children } = this.props;\n    if (React.Children.count(children)) {\n      return withToolbar ? this.renderToolbarGroup() : this.renderChipGroup();\n    }\n    return null;\n  }\n}\n\ninterface InnerChipGroupProps extends ChipGroupProps {\n  isOpen: boolean;\n  onToggleCollapse: () => void;\n}\n\nconst InnerChipGroup = (props: InnerChipGroupProps) => {\n  const { children, expandedText, isOpen, onToggleCollapse, collapsedText, withToolbar, numChips } = props;\n  \n  const collapsedTextResult = fillTemplate(collapsedText as string, { remaining: React.Children.count(children) - numChips });\n  const mappedChildren = React.Children.map(children, (c) => {\n    const child = c as React.ReactElement<any>;\n    if (withToolbar) {\n      return React.cloneElement(child, {\n        children: React.Children.toArray(child.props.children).map((chip: any) => {\n          return React.cloneElement(chip, { component: 'li' });\n        })\n      });\n    }\n    return React.cloneElement(child, {\n      component: 'li'\n    });\n  });\n  return (\n    <React.Fragment>\n      {isOpen ? (\n        <React.Fragment>{mappedChildren}</React.Fragment>\n      ) : (\n        <React.Fragment>\n          {mappedChildren.map((child, i) => {\n            if (i < numChips) {\n              return child;\n            }\n          })}\n        </React.Fragment>\n      )}\n      {React.Children.count(children) > numChips && (\n        <Chip isOverflowChip onClick={onToggleCollapse} component={withToolbar ? 'div' : 'li'}>\n          {isOpen ? expandedText : collapsedTextResult}\n        </Chip>\n      )}\n    </React.Fragment>\n  );\n};\n"],"file":"ChipGroup.js"}