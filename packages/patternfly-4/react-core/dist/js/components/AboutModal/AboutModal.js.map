{"version":3,"sources":["../../../../src/components/AboutModal/AboutModal.tsx"],"names":["AboutModal","props","currentId","id","event","keyCode","KEY_CODES","ESCAPE_KEY","isOpen","onClose","hide","bodyChildren","document","body","children","Array","from","child","state","container","setAttribute","removeAttribute","undefined","brandImageSrc","brandImageAlt","console","error","createElement","setState","appendChild","addEventListener","handleEscKeyClick","classList","add","styles","backdropOpen","remove","toggleSiblingsFromScreenReaders","removeChild","removeEventListener","canUseDOM","ReactDOM","createPortal","ariaLabelledBy","ariaDescribedBy","React","Component","className","productName","trademark","backgroundImageSrc","noAboutModalBoxContentContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { canUseDOM } from 'exenv';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { AboutModalContainer } from './AboutModalContainer';\n\nexport interface AboutModalProps {\n  /** Content rendered inside the about modal  */\n  children: React.ReactNode;\n  /** Additional classes added to the about modal  */\n  className?: string;\n  /** Flag to show the about modal  */\n  isOpen?: boolean;\n  /** A callback for when the close button is clicked  */\n  onClose?: () => void;\n  /** Product name  */\n  productName?: string;\n  /** Trademark information  */\n  trademark?: string;\n  /** The URL of the image for the brand  */\n  brandImageSrc: string;\n  /** The alternate text of the brand image  */\n  brandImageAlt: string;\n  /** The URL of the image for the background  */\n  backgroundImageSrc?: string;\n  /** Prevents the about modal from rendering content inside a container; allows for more flexible layouts  */\n  noAboutModalBoxContentContainer?: boolean;\n}\n\ninterface ModalState {\n  container: HTMLElement;\n}\n\nexport class AboutModal extends React.Component<AboutModalProps, ModalState> {\n  private static currentId: number = 0;\n  private id = AboutModal.currentId++;\n  ariaLabelledBy = `pf-about-modal-title-${this.id}`;\n  ariaDescribedBy = `pf-about-modal-content-${this.id}`;\n\n  static defaultProps = {\n    className: '',\n    isOpen: false,\n    onClose: (): any => undefined,\n    productName: '',\n    trademark: '',\n    backgroundImageSrc: '',\n    noAboutModalBoxContentContainer: false\n  };\n\n  constructor(props: AboutModalProps) {\n    super(props);\n\n    this.state = {\n      container: undefined\n    };\n\n    if (props.brandImageSrc && !props.brandImageAlt) {\n      // tslint:disable-next-line:no-console\n      console.error('AboutModal:', 'brandImageAlt is required when a brandImageSrc is specified');\n    }\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {\n      this.props.onClose();\n    }\n  }\n\n  toggleSiblingsFromScreenReaders = (hide: boolean) => {\n    const bodyChildren = document.body.children;\n    for (const child of Array.from(bodyChildren)) {\n      if (child !== this.state.container) {\n        hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n      }\n    }\n  }\n\n  componentDidMount() {\n      const container = document.createElement('div');\n      this.setState({ container });\n      document.body.appendChild(container);\n      document.addEventListener('keydown', this.handleEscKeyClick, false);\n\n      if (this.props.isOpen) {\n        document.body.classList.add(css(styles.backdropOpen));\n      } else {\n        document.body.classList.remove(css(styles.backdropOpen));\n      }\n    }\n\n  componentDidUpdate() {\n    if (this.props.isOpen) {\n      document.body.classList.add(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(true);\n    } else {\n      document.body.classList.remove(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(false);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.container) {\n      document.body.removeChild(this.state.container);\n    }\n    document.removeEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  render() {\n\n    const { ...props } = this.props;\n    const { container } = this.state;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      <AboutModalContainer\n        ariaLabelledbyId={this.ariaLabelledBy}\n        ariaDescribedById={this.ariaDescribedBy}\n        {...props}\n      />,\n      container\n    );\n  }\n}\n"],"file":"AboutModal.js"}