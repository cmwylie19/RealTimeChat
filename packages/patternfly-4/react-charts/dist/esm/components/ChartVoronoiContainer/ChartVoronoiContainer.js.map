{"version":3,"sources":["../../../../src/components/ChartVoronoiContainer/ChartVoronoiContainer.tsx"],"names":["React","hoistNonReactStatics","VictoryVoronoiContainer","ChartTooltip","getClassName","getTheme","ChartVoronoiDimension","ChartVoronoiContainer","className","allowTooltip","constrainToVisibleArea","themeColor","themeVariant","theme","labelComponent","undefined","rest","chartClassName","chartLabelComponent","cloneElement","props","activateData","activateLabels","disable","labels","mouseFollowTooltips","onActivated","onDeactivated","radius","responsive","style","voronoiBlacklist","voronoiDimension","voronoiPadding","defaultProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SACEC,uBADF,QAGO,SAHP;AAKA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,eAAvC;AAEA,WAAYC,qBAAZ;AAKA;;;;WALYA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;GAAAA,qB,KAAAA,qB;;AA0IZ,OAAO,MAAMC,qBAA0E,GAAG,UAWxD;AAAA,MAXyD;AACzFC,IAAAA,SADyF;AAEzFC,IAAAA,YAAY,GAAG,IAF0E;AAGzFC,IAAAA,sBAAsB,GAAG,KAHgE;AAIzFC,IAAAA,UAJyF;AAKzFC,IAAAA,YALyF;AAOzF;AACAC,IAAAA,KAAK,GAAGR,QAAQ,CAACM,UAAD,EAAaC,YAAb,CARyE;AASzFE,IAAAA,cAAc,GAAGL,YAAY,GAAG,oBAAC,YAAD,OAAH,GAAsBM;AATsC,GAWzD;AAAA,MAD7BC,IAC6B;;AAChC,QAAMC,cAAc,GAAGb,YAAY,CAAC;AAACI,IAAAA;AAAD,GAAD,CAAnC;AACA,QAAMU,mBAAmB,GAAGlB,KAAK,CAACmB,YAAN,CAAmBL,cAAnB;AAC1BJ,IAAAA,sBAD0B;AAE1BG,IAAAA;AAF0B,KAGvBC,cAAc,CAACM,KAHQ,EAA5B,CAFgC,CAQhC;AACA;;AACA,SAAO,oBAAC,uBAAD;AAAyB,IAAA,SAAS,EAAEH,cAApC;AAAoD,IAAA,cAAc,EAAEC,mBAApE;AAAyF,IAAA,KAAK,EAAEL;AAAhG,KAA2GG,IAA3G,EAAP;AACD,CAtBM;;AA3HLK,EAAAA,Y;AAQAC,EAAAA,c;AAMAb,EAAAA,Y;AAIAD,EAAAA,S;AAMAE,EAAAA,sB;AAIAa,EAAAA,O;AASAC,EAAAA,M;AAKAV,EAAAA,c;AAKAW,EAAAA,mB;AAMAC,EAAAA,W;AAMAC,EAAAA,a;AAKAC,EAAAA,M;AAMAC,EAAAA,U;AASAC,EAAAA,K;AAKAjB,EAAAA,K;AAQAF,EAAAA,U;AAQAC,EAAAA,Y;AAOAmB,EAAAA,gB;AAOAC,EAAAA,gB,aAAmB,G,EAAM,G;AAMzBC,EAAAA,c;;AA0BF1B,qBAAqB,CAAC2B,YAAtB,GAAsChC,uBAAD,CAAiCgC,YAAtE,C,CAEA;;AACAjC,oBAAoB,CAACM,qBAAD,EAAwBL,uBAAxB,CAApB","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  VictoryVoronoiContainer,\n  VictoryVoronoiContainerProps\n} from 'victory';\nimport { ChartThemeDefinition } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getClassName, getTheme } from '../ChartUtils';\n\nexport enum ChartVoronoiDimension {\n  x = 'x',\n  y = 'y'\n}\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartVoronoiContainerProps extends VictoryVoronoiContainerProps {\n  /**\n   * When the activateData prop is set to true, the active prop will be set to true on all\n   * data components within a voronoi area. When this prop is set to false, the onActivated\n   * and onDeactivated callbacks will still fire, but no mutations to data components will\n   * occur via Victory’s event system.\n   */\n  activateData?: boolean;\n  /**\n   * When the activateLabels prop is set to true, the active prop will be set to true on all\n   * labels corresponding to points within a voronoi area. When this prop is set to false,\n   * the onActivated and onDeactivated callbacks will still fire, but no mutations to label\n   * components will occur via Victory’s event system. Labels defined directly on\n   * ChartVoronoiContainer via the labels prop will still appear when this prop is set to false.\n   */\n  activateLabels?: boolean;\n  /**\n   * Specifies the tooltip capability of the container component. A value of true allows the chart to add a\n   * ChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\n   * property is also provided.\n   */\n  allowTooltip?: boolean;\n  /**\n   * The className prop specifies a className that will be applied to the outer-most div rendered by the container\n   */\n  className?: string;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * When the disable prop is set to true, ChartVoronoiContainer events will not fire.\n   */\n  disable?: boolean;\n  /**\n   * When a labels prop is provided to ChartVoronoiContainer it will render a label component\n   * rather than activating labels on the child components it renders. This is useful for\n   * creating multi- point tooltips. This prop should be given as a function which will be called\n   * once for each active point. The labels function will be called with the arguments point,\n   * index, and points, where point refers to a single active point, index refers to the position\n   * of that point in the array of active points, and points is an array of all active points.\n   */\n  labels?: (point: any, index: number, points: any[]) => string;\n  /**\n   * The labelComponent prop specified the component that will be rendered when labels are defined\n   * on ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.\n   */\n  labelComponent?: React.ReactElement<any>;\n  /**\n   * When the mouseFollowTooltip prop is set on VictoryVoronoiContainer, The position of the center of the tooltip\n   * follows the position of the mouse.\n   */\n  mouseFollowTooltips?: boolean,\n  /**\n   * The onActivated prop accepts a function to be called whenever new data points are activated.\n   * The function is called with the parameters points (an array of active data objects) and props\n   * (the props used by ChartVoronoiContainer).\n   */\n  onActivated?: (points: any[], props: VictoryVoronoiContainerProps) => void;\n  /**\n   * The onDeactivated prop accepts a function to be called whenever points are deactivated. The\n   * function is called with the parameters points (an array of the newly-deactivated data objects)\n   * and props (the props used by ChartVoronoiContainer).\n   */\n  onDeactivated?: (points: any[], props: VictoryVoronoiContainerProps) => void;\n  /**\n   * When the radius prop is set, the voronoi areas associated with each data point will be no larger\n   * than the given radius. This prop should be given as a number.\n   */\n  radius?: number;\n  /**\n   * The responsive prop specifies whether the rendered container should be a responsive container\n   * with a viewBox attribute, or a static container with absolute width and height.\n   * @default true\n   */\n  responsive?: boolean;\n  /**\n   * The style prop specifies styles for your VictoryContainer. Any valid inline style properties\n   * will be applied. Height and width should be specified via the height\n   * and width props, as they are used to calculate the alignment of\n   * components within the container. Styles from the child component will\n   * also be passed, if any exist.\n   * @examples {border: 1px solid red}\n   */\n  style?: React.CSSProperties;\n  /**\n   * The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\n   * props defined in theme may be overwritten by props specified on the component instance.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\n   * shared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\n   * array will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\n   * active, and will not contribute date to shared tooltips or labels.\n   */\n  voronoiBlacklist?: string[];\n  /**\n   * When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\n   * account. For example, when dimension is set to “x”, all data points matching a particular x mouse\n   * position will be activated regardless of y value. When this prop is not given, voronoi selection\n   * is determined by both x any y values.\n   */\n  voronoiDimension?: 'x' | 'y';\n  /**\n   * When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\n   * reduced by the given padding on every side. By default, no padding is applied, and the entire range\n   * of a given chart may trigger voronoi events. This prop should be given as a number.\n   */\n  voronoiPadding?: number;\n}\n\nexport const ChartVoronoiContainer: React.FunctionComponent<ChartVoronoiContainerProps> = ({\n  className,\n  allowTooltip = true,\n  constrainToVisibleArea = false,\n  themeColor,\n  themeVariant,\n\n  // destructure last\n  theme = getTheme(themeColor, themeVariant),\n  labelComponent = allowTooltip ? <ChartTooltip /> : undefined,\n  ...rest\n}: ChartVoronoiContainerProps) => {\n  const chartClassName = getClassName({className});\n  const chartLabelComponent = React.cloneElement(labelComponent, {\n    constrainToVisibleArea,\n    theme,\n    ...labelComponent.props,\n  });\n\n  // Note: theme is required by voronoiContainerMixin, but @types/victory is missing a prop type\n  // @ts-ignore\n  return <VictoryVoronoiContainer className={chartClassName} labelComponent={chartLabelComponent} theme={theme} {...rest} />;\n};\nChartVoronoiContainer.defaultProps = (VictoryVoronoiContainer as any).defaultProps;\n\n// Note: VictoryVoronoiContainer.defaultEvents & VictoryContainer.role must be hoisted\nhoistNonReactStatics(ChartVoronoiContainer, VictoryVoronoiContainer);\n"],"file":"ChartVoronoiContainer.js"}