{"version":3,"sources":["../../../../src/components/ChartUtils/chart-legend.ts"],"names":["getLegendDimensions","legendData","legendOrientation","legendProps","theme","data","VictoryLegend","getDimensions","orientation","getLegendX","chartType","rest","getPieLegendX","getChartLegendX","getLegendY","getPieLegendY","getBulletLegendY","getChartLegendY","dy","height","legendPosition","padding","width","Helpers","getPadding","left","right","chartSize","ChartCommonStyles","legend","margin","legendDimensions","legendPadding","length","dx","top","bottom","Math","abs","textSizeWorkAround","getTextSizeWorkAround","round","originX","origin","radius","getRadius","x","label","y","style","labels","result","name","forEach","textSize","TextSize","approximateTextSize","adjustedTextSize","characterConstant","overpassFontCharacterConstant"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;AA6BA;AACO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,OAKG;AAAA,MAJpCC,UAIoC,QAJpCA,UAIoC;AAAA,MAHpCC,iBAGoC,QAHpCA,iBAGoC;AAAA,MAFpCC,WAEoC,QAFpCA,WAEoC;AAAA,MADpCC,KACoC,QADpCA,KACoC;;AACpC,MAAIH,UAAU,IAAIE,WAAW,CAACE,IAA9B,EAAoC;AAClC,WAAQC,sBAAD,CAAuBC,aAAvB;AACLF,MAAAA,IAAI,EAAEJ,UADD;AAELO,MAAAA,WAAW,EAAEN,iBAFR;AAGLE,MAAAA,KAAK,EAALA;AAHK,OAIFD,WAJE,EAAP;AAMD;;AACD,SAAO,EAAP;AACD,CAfM,C,CAiBP;;;;;AACO,IAAMM,UAAU,GAAG,SAAbA,UAAa;AAAA,MACxBC,SADwB,SACxBA,SADwB;AAAA,MAErBC,IAFqB;;AAAA,SAGGD,SAAS,KAAK,KAAf,GAAwBE,aAAa,CAACD,IAAD,CAArC,GAA8CE,eAAe,CAACF,IAAD,CAH/D;AAAA,CAAnB,C,CAKP;;;;;AACO,IAAMG,UAAU,GAAG,SAAbA,UAAa,QAGE;AAAA,MAF1BJ,SAE0B,SAF1BA,SAE0B;AAAA,MADvBC,IACuB;;AAC1B,UAAQD,SAAR;AACE,SAAK,KAAL;AACE,aAAOK,aAAa,CAACJ,IAAD,CAApB;;AACF,SAAK,QAAL;AACE,aAAOK,gBAAgB,CAACL,IAAD,CAAvB;;AACF;AACE,aAAOM,eAAe,CAACN,IAAD,CAAtB;AANJ;AAQD,CAZM,C,CAcP;;;;;AACO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,QAUJ;AAAA,uBAT1BE,EAS0B;AAAA,MAT1BA,EAS0B,yBATrB,CASqB;AAAA,MAR1BC,MAQ0B,SAR1BA,MAQ0B;AAAA,MAP1BC,cAO0B,SAP1BA,cAO0B;AAAA,MAN1BnB,UAM0B,SAN1BA,UAM0B;AAAA,MAL1BC,iBAK0B,SAL1BA,iBAK0B;AAAA,MAJ1BC,WAI0B,SAJ1BA,WAI0B;AAAA,MAH1BkB,OAG0B,SAH1BA,OAG0B;AAAA,MAF1BjB,KAE0B,SAF1BA,KAE0B;AAAA,MAD1BkB,KAC0B,SAD1BA,KAC0B;;AAAA,4BACFC,qBAAQC,UAAR,CAAmB;AAACH,IAAAA,OAAO,EAAPA;AAAD,GAAnB,CADE;AAAA,MAClBI,IADkB,uBAClBA,IADkB;AAAA,MACZC,KADY,uBACZA,KADY;;AAE1B,MAAMC,SAAS,GAAG;AAChBR,IAAAA,MAAM,EAAEA,MADQ;AACA;AAChBG,IAAAA,KAAK,EAAEA,KAAK,GAAGG,IAAR,GAAeC;AAFN,GAAlB;;AAKA,UAAQN,cAAR;AACE,SAAK,QAAL;AACA,SAAK,aAAL;AACE,aAAOO,SAAS,CAACR,MAAV,GAAmBS,8BAAkBC,MAAlB,CAAyBC,MAA5C,GAAqDZ,EAA5D;;AACF,SAAK,OAAL;AAAc;AACZ;AACA,YAAMa,gBAAgB,GAAG/B,mBAAmB,CAAC;AAC3CC,UAAAA,UAAU,EAAVA,UAD2C;AAE3CC,UAAAA,iBAAiB,EAAjBA,iBAF2C;AAG3CC,UAAAA,WAAW,EAAXA,WAH2C;AAI3CC,UAAAA,KAAK,EAALA;AAJ2C,SAAD,CAA5C;;AAMA,YAAM4B,aAAa,GAAG,SAAhBA,aAAgB,CAAC/B,UAAD;AAAA,iBAAwBA,UAAU,IAAIA,UAAU,CAACgC,MAAX,GAAoB,CAAlC,GAAsC,EAAtC,GAA2C,CAAnE;AAAA,SAAtB;;AACA,eAAO,CAACN,SAAS,CAACR,MAAV,GAAmBY,gBAAgB,CAACZ,MAArC,IAA+C,CAA/C,GAAmDa,aAAa,CAAC/B,UAAD,CAAvE;AACD;;AACD;AACE,aAAOiB,EAAP;AAhBJ;AAkBD,CAnCM,C,CAqCP;;;;;AACO,IAAML,eAAe,GAAG,SAAlBA,eAAkB,QAUH;AAAA,uBAT1BqB,EAS0B;AAAA,MAT1BA,EAS0B,yBATrB,CASqB;AAAA,MAR1Bf,MAQ0B,SAR1BA,MAQ0B;AAAA,MAP1BlB,UAO0B,SAP1BA,UAO0B;AAAA,MAN1BC,iBAM0B,SAN1BA,iBAM0B;AAAA,MAL1BkB,cAK0B,SAL1BA,cAK0B;AAAA,MAJ1BjB,WAI0B,SAJ1BA,WAI0B;AAAA,MAH1BkB,OAG0B,SAH1BA,OAG0B;AAAA,MAF1BjB,KAE0B,SAF1BA,KAE0B;AAAA,MAD1BkB,KAC0B,SAD1BA,KAC0B;;AAAA,6BACWC,qBAAQC,UAAR,CAAmB;AAACH,IAAAA,OAAO,EAAPA;AAAD,GAAnB,CADX;AAAA,MAClBc,GADkB,wBAClBA,GADkB;AAAA,MACbC,MADa,wBACbA,MADa;AAAA,MACLX,IADK,wBACLA,IADK;AAAA,MACCC,KADD,wBACCA,KADD;;AAE1B,MAAMC,SAAS,GAAG;AAChBR,IAAAA,MAAM,EAAEkB,IAAI,CAACC,GAAL,CAASnB,MAAM,IAAIiB,MAAM,GAAGD,GAAb,CAAf,CADQ;AAEhBb,IAAAA,KAAK,EAAEe,IAAI,CAACC,GAAL,CAAShB,KAAK,IAAIG,IAAI,GAAGC,KAAX,CAAd;AAFS,GAAlB;AAIA,MAAMK,gBAAgB,GAAG/B,mBAAmB,CAAC;AAC3CC,IAAAA,UAAU,EAAVA,UAD2C;AAE3CC,IAAAA,iBAAiB,EAAjBA,iBAF2C;AAG3CC,IAAAA,WAAW,EAAXA,WAH2C;AAI3CC,IAAAA,KAAK,EAALA;AAJ2C,GAAD,CAA5C;AAMA,MAAMmC,kBAAkB,GAAGC,qBAAqB,CAAC;AAC/CvC,IAAAA,UAAU,EAAVA,UAD+C;AAE/CC,IAAAA,iBAAiB,EAAjBA,iBAF+C;AAG/CE,IAAAA,KAAK,EAALA;AAH+C,GAAD,CAAhD;;AAMA,UAAQgB,cAAR;AACE,SAAK,QAAL;AACE,aAAOE,KAAK,GAAGS,gBAAgB,CAACT,KAAjB,GAAyBiB,kBAAjC,GACHF,IAAI,CAACI,KAAL,CAAW,CAACnB,KAAK,IAAIS,gBAAgB,CAACT,KAAjB,GAAyBiB,kBAA7B,CAAN,IAA0D,CAArE,IAA0EL,EADvE,GAC4EA,EADnF;;AAEF,SAAK,aAAL;AACE,aAAOT,IAAI,GAAGS,EAAd;;AACF,SAAK,OAAL;AACE,aAAOP,SAAS,CAACL,KAAV,GAAkBM,8BAAkBC,MAAlB,CAAyBC,MAA3C,GAAoDL,IAApD,GAA2DS,EAAlE;;AACF;AACE,aAAOA,EAAP;AATJ;AAWD,CAvCM,C,CAyCP;;;;;AACO,IAAMjB,eAAe,GAAG,SAAlBA,eAAkB,QAUH;AAAA,uBAT1BC,EAS0B;AAAA,MAT1BA,EAS0B,yBATrB,CASqB;AAAA,MAR1BC,MAQ0B,SAR1BA,MAQ0B;AAAA,MAP1BC,cAO0B,SAP1BA,cAO0B;AAAA,MAN1BnB,UAM0B,SAN1BA,UAM0B;AAAA,MAL1BC,iBAK0B,SAL1BA,iBAK0B;AAAA,MAJ1BC,WAI0B,SAJ1BA,WAI0B;AAAA,MAH1BkB,OAG0B,SAH1BA,OAG0B;AAAA,MAF1BjB,KAE0B,SAF1BA,KAE0B;AAAA,MAD1BkB,KAC0B,SAD1BA,KAC0B;;AAAA,6BACWC,qBAAQC,UAAR,CAAmB;AAACH,IAAAA,OAAO,EAAPA;AAAD,GAAnB,CADX;AAAA,MAClBc,GADkB,wBAClBA,GADkB;AAAA,MACbC,MADa,wBACbA,MADa;AAAA,MACLX,IADK,wBACLA,IADK;AAAA,MACCC,KADD,wBACCA,KADD;;AAE1B,MAAMC,SAAS,GAAG;AAChBR,IAAAA,MAAM,EAAEkB,IAAI,CAACC,GAAL,CAASnB,MAAM,IAAIiB,MAAM,GAAGD,GAAb,CAAf,CADQ;AAEhBb,IAAAA,KAAK,EAAEe,IAAI,CAACC,GAAL,CAAShB,KAAK,IAAIG,IAAI,GAAGC,KAAX,CAAd;AAFS,GAAlB;;AAKA,UAAQN,cAAR;AACE,SAAK,QAAL;AACA,SAAK,aAAL;AACE,aAAOO,SAAS,CAACR,MAAV,GAAmBS,8BAAkBC,MAAlB,CAAyBC,MAAzB,GAAkC,CAArD,GAAyDK,GAAzD,GAA+DjB,EAAtE;;AACF,SAAK,OAAL;AAAc;AACZ;AACA,YAAMa,gBAAgB,GAAG/B,mBAAmB,CAAC;AAC3CC,UAAAA,UAAU,EAAVA,UAD2C;AAE3CC,UAAAA,iBAAiB,EAAjBA,iBAF2C;AAG3CC,UAAAA,WAAW,EAAXA,WAH2C;AAI3CC,UAAAA,KAAK,EAALA;AAJ2C,SAAD,CAA5C;AAMA,YAAMsC,OAAO,GAAGf,SAAS,CAACR,MAAV,GAAmB,CAAnB,GAAuBgB,GAAvC;;AACA,YAAMH,aAAa,GAAG,SAAhBA,aAAgB,CAAC/B,UAAD;AAAA,iBAAwBA,UAAU,IAAIA,UAAU,CAACgC,MAAX,GAAoB,CAAlC,GAAsC,CAAtC,GAA0C,CAAlE;AAAA,SAAtB;;AACA,eAAQS,OAAO,GAAGX,gBAAgB,CAACZ,MAAjB,GAA0B,CAArC,GAA0Ca,aAAa,CAAC/B,UAAD,CAA9D;AACD;;AACD;AACE,aAAOiB,EAAP;AAjBJ;AAmBD,CApCM,C,CAsCP;;;;;AACO,IAAMN,aAAa,GAAG,SAAhBA,aAAgB,QAUD;AAAA,uBAT1BsB,EAS0B;AAAA,MAT1BA,EAS0B,yBATrB,CASqB;AAAA,MAR1Bf,MAQ0B,SAR1BA,MAQ0B;AAAA,MAP1BlB,UAO0B,SAP1BA,UAO0B;AAAA,MAN1BC,iBAM0B,SAN1BA,iBAM0B;AAAA,MAL1BkB,cAK0B,SAL1BA,cAK0B;AAAA,MAJ1BjB,WAI0B,SAJ1BA,WAI0B;AAAA,MAH1BkB,OAG0B,SAH1BA,OAG0B;AAAA,MAF1BjB,KAE0B,SAF1BA,KAE0B;AAAA,MAD1BkB,KAC0B,SAD1BA,KAC0B;AAC1B,MAAMqB,MAAM,GAAG,+BAAa;AAAExB,IAAAA,MAAM,EAANA,MAAF;AAAUE,IAAAA,OAAO,EAAPA,OAAV;AAAmBC,IAAAA,KAAK,EAALA;AAAnB,GAAb,CAAf;;AACA,MAAMsB,MAAM,GAAGrB,qBAAQsB,SAAR,CAAkB;AAAE1B,IAAAA,MAAM,EAANA,MAAF;AAAUG,IAAAA,KAAK,EAALA,KAAV;AAAiBD,IAAAA,OAAO,EAAPA;AAAjB,GAAlB,CAAf;;AACA,MAAMU,gBAAgB,GAAG/B,mBAAmB,CAAC;AAC3CC,IAAAA,UAAU,EAAVA,UAD2C;AAE3CC,IAAAA,iBAAiB,EAAjBA,iBAF2C;AAG3CC,IAAAA,WAAW,EAAXA,WAH2C;AAI3CC,IAAAA,KAAK,EAALA;AAJ2C,GAAD,CAA5C;AAMA,MAAMmC,kBAAkB,GAAGC,qBAAqB,CAAC;AAC/CvC,IAAAA,UAAU,EAAVA,UAD+C;AAE/CC,IAAAA,iBAAiB,EAAjBA,iBAF+C;AAG/CE,IAAAA,KAAK,EAALA;AAH+C,GAAD,CAAhD;;AAMA,UAAQgB,cAAR;AACE,SAAK,QAAL;AACE,aAAOE,KAAK,GAAGS,gBAAgB,CAACT,KAAjB,GAAyBiB,kBAAjC,GACHF,IAAI,CAACI,KAAL,CAAW,CAACnB,KAAK,IAAIS,gBAAgB,CAACT,KAAjB,GAAyBiB,kBAA7B,CAAN,IAA0D,CAArE,IAA0EL,EADvE,GAC4EA,EADnF;;AAEF,SAAK,OAAL;AACE,aAAOS,MAAM,CAACG,CAAP,GAAWlB,8BAAkBmB,KAAlB,CAAwBjB,MAAnC,GAA4CI,EAA5C,GAAiDU,MAAxD;;AACF;AACE,aAAOV,EAAP;AAPJ;AASD,CAlCM,C,CAoCP;;;;;AACO,IAAMnB,aAAa,GAAG,SAAhBA,aAAgB,QAUD;AAAA,uBAT1BG,EAS0B;AAAA,MAT1BA,EAS0B,yBATrB,CASqB;AAAA,MAR1BC,MAQ0B,SAR1BA,MAQ0B;AAAA,MAP1BC,cAO0B,SAP1BA,cAO0B;AAAA,MAN1BnB,UAM0B,SAN1BA,UAM0B;AAAA,MAL1BC,iBAK0B,SAL1BA,iBAK0B;AAAA,MAJ1BC,WAI0B,SAJ1BA,WAI0B;AAAA,MAH1BkB,OAG0B,SAH1BA,OAG0B;AAAA,MAF1BjB,KAE0B,SAF1BA,KAE0B;AAAA,MAD1BkB,KAC0B,SAD1BA,KAC0B;AAC1B,MAAMqB,MAAM,GAAG,+BAAa;AAAExB,IAAAA,MAAM,EAANA,MAAF;AAAUE,IAAAA,OAAO,EAAPA,OAAV;AAAmBC,IAAAA,KAAK,EAALA;AAAnB,GAAb,CAAf;;AACA,MAAMsB,MAAM,GAAGrB,qBAAQsB,SAAR,CAAkB;AAAE1B,IAAAA,MAAM,EAANA,MAAF;AAAUG,IAAAA,KAAK,EAALA,KAAV;AAAiBD,IAAAA,OAAO,EAAPA;AAAjB,GAAlB,CAAf;;AAEA,UAAQD,cAAR;AACE,SAAK,QAAL;AACE,aAAOuB,MAAM,CAACK,CAAP,GAAWpB,8BAAkBC,MAAlB,CAAyBC,MAApC,GAA6Cc,MAA7C,GAAsD1B,EAA7D;;AACF,SAAK,OAAL;AAAc;AACZ;AACA,YAAMa,gBAAgB,GAAG/B,mBAAmB,CAAC;AAC3CC,UAAAA,UAAU,EAAVA,UAD2C;AAE3CC,UAAAA,iBAAiB,EAAjBA,iBAF2C;AAG3CC,UAAAA,WAAW,EAAXA,WAH2C;AAI3CC,UAAAA,KAAK,EAALA;AAJ2C,SAAD,CAA5C;;AAMA,YAAM4B,aAAa,GAAG,SAAhBA,aAAgB,CAAC/B,UAAD;AAAA,iBAAwBA,UAAU,IAAIA,UAAU,CAACgC,MAAX,GAAoB,CAAlC,GAAsC,CAAtC,GAA0C,CAAlE;AAAA,SAAtB;;AACA,eAAQU,MAAM,CAACK,CAAP,GAAWjB,gBAAgB,CAACZ,MAAjB,GAA0B,CAAtC,GAA2Ca,aAAa,CAAC/B,UAAD,CAA/D;AACD;;AACD;AACE,aAAOiB,EAAP;AAfJ;AAiBD,CA/BM,C,CAiCP;AACA;AACA;;;;;AACA,IAAMsB,qBAAqB,GAAG,SAAxBA,qBAAwB,QAIM;AAAA,MAHlCvC,UAGkC,SAHlCA,UAGkC;AAAA,MAFlCC,iBAEkC,SAFlCA,iBAEkC;AAAA,MADlCE,KACkC,SADlCA,KACkC;AAClC,MAAM6C,KAAK,GAAG7C,KAAK,CAACyB,MAAN,CAAaoB,KAAb,CAAmBC,MAAjC;;AACA,MAAI,EAAEjD,UAAU,IAAIA,UAAU,CAACgC,MAA3B,CAAJ,EAAwC;AACtC,WAAO,CAAP;AACD,GAJiC,CAMlC;;;AACA,MAAIkB,MAAM,GAAGlD,UAAU,CAACA,UAAU,CAACgC,MAAX,GAAoB,CAArB,CAAV,CAAkCmB,IAA/C,CAPkC,CASlC;;AACA,MAAIlD,iBAAiB,KAAK,UAA1B,EAAsC;AACpCD,IAAAA,UAAU,CAACoD,OAAX,CAAmB,UAAChD,IAAD,EAAU;AAC3B,UAAIA,IAAI,CAAC+C,IAAL,IAAa/C,IAAI,CAAC+C,IAAL,CAAUnB,MAAV,GAAmBkB,MAAM,CAAClB,MAA3C,EAAmD;AACjDkB,QAAAA,MAAM,GAAG9C,IAAI,CAAC+C,IAAd;AACD;AACF,KAJD;AAKD;;AACD,MAAME,QAAQ,GAAGC,sBAASC,mBAAT,CAA6BL,MAA7B,EAAsCF,KAAtC,CAAjB;;AACA,MAAMQ,gBAAgB,GAAGF,sBAASC,mBAAT,CAA6BL,MAA7B,oBACpBF,KADoB;AAEvBS,IAAAA,iBAAiB,EAAEC;AAFI,KAAzB;;AAIA,SAAOtB,IAAI,CAACC,GAAL,CAASgB,QAAQ,CAAChC,KAAT,GAAiBmC,gBAAgB,CAACnC,KAA3C,CAAP;AACD,CA3BD","sourcesContent":["import { VictoryLegend } from 'victory';\nimport { Helpers, TextSize } from 'victory-core';\nimport { ChartLegendProps } from '../ChartLegend';\nimport { ChartCommonStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { overpassFontCharacterConstant } from './chart-label';\nimport {getPieOrigin} from \"./chart-origin\";\n\ninterface ChartLegendInterface {\n  chartType?: string; // The type of chart (e.g., pie) to lookup for props\n  dx?: number; // Horizontal shift from the x coordinate\n  dy?: number; // Vertical shift from the x coordinate\n  height?: number; // Overall height of SVG\n  legendData: any[]; // The legend data used to determine width\n  legendOrientation: 'horizontal' | 'vertical'; // Orientation of legend\n  legendPosition: 'bottom' | 'bottom-left' | 'right'; // Position of legend\n  legendProps: any; // The legend props used to determine width\n  padding?: any; // Chart padding\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n  width?: number; // Overall width of SVG\n}\n\ninterface ChartLegendDimensionsInterface {\n  legendData: any[]; // The legend data used to determine width\n  legendOrientation: 'horizontal' | 'vertical'; // Orientation of legend\n  legendProps: ChartLegendProps; // Legend properties\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n}\n\ninterface ChartLegendTextSizeInterface {\n  legendData: any[]; // The legend data used to determine width\n  legendOrientation?: 'horizontal' | 'vertical'; // Orientation of legend\n  theme: ChartThemeDefinition; // The theme that will be applied to the chart\n}\n\n// Returns legend dimensions\nexport const getLegendDimensions = ({\n  legendData,\n  legendOrientation,\n  legendProps,\n  theme\n}: ChartLegendDimensionsInterface) => {\n  if (legendData || legendProps.data) {\n    return (VictoryLegend as any).getDimensions({\n      data: legendData,\n      orientation: legendOrientation,\n      theme,\n      ...legendProps // override above\n    });\n  }\n  return {};\n};\n\n// Returns x coordinate for legend\nexport const getLegendX = ({\n  chartType,\n  ...rest\n}: ChartLegendInterface) => (chartType === 'pie') ? getPieLegendX(rest) : getChartLegendX(rest);\n\n// Returns y coordinate for legend\nexport const getLegendY = ({\n  chartType,\n  ...rest\n}: ChartLegendInterface) => {\n  switch (chartType) {\n    case 'pie':\n      return getPieLegendY(rest);\n    case 'bullet':\n      return getBulletLegendY(rest);\n    default:\n      return getChartLegendY(rest);\n  }\n}\n\n// Returns y coordinate for bullet legends\nexport const getBulletLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const { left, right } = Helpers.getPadding({padding});\n  const chartSize = {\n    height: height, // Fixed size\n    width: width - left - right\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin + dy;\n    case 'right': {\n      // Legend height with padding\n      const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n      });\n      const legendPadding = (legendData: any[]) => (legendData && legendData.length > 0 ? 17 : 0);\n      return (chartSize.height - legendDimensions.height) / 2 + legendPadding(legendData);\n    }\n    default:\n      return dy;\n  }\n};\n\n// Returns x coordinate for chart legends\nexport const getChartLegendX = ({\n  dx = 0,\n  height,\n  legendData,\n  legendOrientation,\n  legendPosition,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const { top, bottom, left, right } = Helpers.getPadding({padding});\n  const chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n  const legendDimensions = getLegendDimensions({\n    legendData,\n    legendOrientation,\n    legendProps,\n    theme\n  });\n  const textSizeWorkAround = getTextSizeWorkAround({\n    legendData,\n    legendOrientation,\n    theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width - textSizeWorkAround\n        ? Math.round((width - (legendDimensions.width - textSizeWorkAround)) / 2) + dx : dx;\n    case 'bottom-left':\n      return left + dx;\n    case 'right':\n      return chartSize.width + ChartCommonStyles.legend.margin + left + dx;\n    default:\n      return dx;\n  }\n};\n\n// Returns y coordinate for chart legends\nexport const getChartLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const { top, bottom, left, right } = Helpers.getPadding({padding});\n  const chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin * 2 + top + dy;\n    case 'right': {\n      // Legend height with padding\n      const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n      });\n      const originX = chartSize.height / 2 + top;\n      const legendPadding = (legendData: any[]) => (legendData && legendData.length > 0 ? 2 : 0);\n      return (originX - legendDimensions.height / 2) + legendPadding(legendData);\n    }\n    default:\n      return dy;\n  }\n};\n\n// Returns x coordinate for pie legends\nexport const getPieLegendX = ({\n  dx = 0,\n  height,\n  legendData,\n  legendOrientation,\n  legendPosition,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n  const legendDimensions = getLegendDimensions({\n    legendData,\n    legendOrientation,\n    legendProps,\n    theme\n  });\n  const textSizeWorkAround = getTextSizeWorkAround({\n    legendData,\n    legendOrientation,\n    theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width - textSizeWorkAround\n        ? Math.round((width - (legendDimensions.width - textSizeWorkAround)) / 2) + dx : dx;\n    case 'right':\n      return origin.x + ChartCommonStyles.label.margin + dx + radius;\n    default:\n      return dx;\n  }\n};\n\n// Returns y coordinate for pie legends\nexport const getPieLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}: ChartLegendInterface) => {\n  const origin = getPieOrigin({ height, padding, width });\n  const radius = Helpers.getRadius({ height, width, padding });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return origin.y + ChartCommonStyles.legend.margin + radius + dy;\n    case 'right': {\n      // Legend height with padding\n      const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n      });\n      const legendPadding = (legendData: any[]) => (legendData && legendData.length > 0 ? 2 : 0);\n      return (origin.y - legendDimensions.height / 2) + legendPadding(legendData);\n    }\n    default:\n      return dy;\n  }\n};\n\n// Returns an approximation of over-sized text width due to growing character count\n//\n// See https://github.com/FormidableLabs/victory/issues/864\nconst getTextSizeWorkAround = ({\n  legendData,\n  legendOrientation,\n  theme\n}: ChartLegendTextSizeInterface) => {\n  const style = theme.legend.style.labels;\n  if (!(legendData && legendData.length)) {\n    return 0;\n  }\n\n  // For horizontal legends, account for the growing char count of the last legend item\n  let result = legendData[legendData.length - 1].name;\n\n  // For vertical legends, account for the growing char count of the longest legend item\n  if (legendOrientation === 'vertical') {\n    legendData.forEach((data) => {\n      if (data.name && data.name.length > result.length) {\n        result = data.name;\n      }\n    });\n  }\n  const textSize = TextSize.approximateTextSize(result,  style);\n  const adjustedTextSize = TextSize.approximateTextSize(result,  {\n    ...style,\n    characterConstant: overpassFontCharacterConstant\n  });\n  return Math.abs(textSize.width - adjustedTextSize.width);\n};\n"],"file":"chart-legend.js"}