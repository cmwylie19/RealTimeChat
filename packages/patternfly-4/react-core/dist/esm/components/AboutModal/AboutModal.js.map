{"version":3,"sources":["../../../../src/components/AboutModal/AboutModal.tsx"],"names":["React","ReactDOM","css","styles","canUseDOM","KEY_CODES","AboutModalContainer","AboutModal","Component","constructor","props","currentId","id","event","keyCode","ESCAPE_KEY","isOpen","onClose","hide","bodyChildren","document","body","children","child","Array","from","state","container","setAttribute","removeAttribute","undefined","brandImageSrc","brandImageAlt","console","error","componentDidMount","createElement","setState","appendChild","addEventListener","handleEscKeyClick","classList","add","backdropOpen","remove","componentDidUpdate","toggleSiblingsFromScreenReaders","componentWillUnmount","removeChild","removeEventListener","render","createPortal","ariaLabelledBy","ariaDescribedBy","className","productName","trademark","backgroundImageSrc","noAboutModalBoxContentContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { canUseDOM } from 'exenv';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { AboutModalContainer } from './AboutModalContainer';\n\nexport interface AboutModalProps {\n  /** Content rendered inside the about modal  */\n  children: React.ReactNode;\n  /** Additional classes added to the about modal  */\n  className?: string;\n  /** Flag to show the about modal  */\n  isOpen?: boolean;\n  /** A callback for when the close button is clicked  */\n  onClose?: () => void;\n  /** Product name  */\n  productName?: string;\n  /** Trademark information  */\n  trademark?: string;\n  /** The URL of the image for the brand  */\n  brandImageSrc: string;\n  /** The alternate text of the brand image  */\n  brandImageAlt: string;\n  /** The URL of the image for the background  */\n  backgroundImageSrc?: string;\n  /** Prevents the about modal from rendering content inside a container; allows for more flexible layouts  */\n  noAboutModalBoxContentContainer?: boolean;\n}\n\ninterface ModalState {\n  container: HTMLElement;\n}\n\nexport class AboutModal extends React.Component<AboutModalProps, ModalState> {\n  private static currentId: number = 0;\n  private id = AboutModal.currentId++;\n  ariaLabelledBy = `pf-about-modal-title-${this.id}`;\n  ariaDescribedBy = `pf-about-modal-content-${this.id}`;\n\n  static defaultProps = {\n    className: '',\n    isOpen: false,\n    onClose: (): any => undefined,\n    productName: '',\n    trademark: '',\n    backgroundImageSrc: '',\n    noAboutModalBoxContentContainer: false\n  };\n\n  constructor(props: AboutModalProps) {\n    super(props);\n\n    this.state = {\n      container: undefined\n    };\n\n    if (props.brandImageSrc && !props.brandImageAlt) {\n      // tslint:disable-next-line:no-console\n      console.error('AboutModal:', 'brandImageAlt is required when a brandImageSrc is specified');\n    }\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {\n      this.props.onClose();\n    }\n  }\n\n  toggleSiblingsFromScreenReaders = (hide: boolean) => {\n    const bodyChildren = document.body.children;\n    for (const child of Array.from(bodyChildren)) {\n      if (child !== this.state.container) {\n        hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n      }\n    }\n  }\n\n  componentDidMount() {\n      const container = document.createElement('div');\n      this.setState({ container });\n      document.body.appendChild(container);\n      document.addEventListener('keydown', this.handleEscKeyClick, false);\n\n      if (this.props.isOpen) {\n        document.body.classList.add(css(styles.backdropOpen));\n      } else {\n        document.body.classList.remove(css(styles.backdropOpen));\n      }\n    }\n\n  componentDidUpdate() {\n    if (this.props.isOpen) {\n      document.body.classList.add(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(true);\n    } else {\n      document.body.classList.remove(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(false);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.container) {\n      document.body.removeChild(this.state.container);\n    }\n    document.removeEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  render() {\n\n    const { ...props } = this.props;\n    const { container } = this.state;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      <AboutModalContainer\n        ariaLabelledbyId={this.ariaLabelledBy}\n        ariaDescribedById={this.ariaDescribedBy}\n        {...props}\n      />,\n      container\n    );\n  }\n}\n"],"file":"AboutModal.js"}