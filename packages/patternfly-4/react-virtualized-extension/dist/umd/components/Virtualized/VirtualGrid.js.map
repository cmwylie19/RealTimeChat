{"version":3,"sources":["../../../esm/components/Virtualized/VirtualGrid.js"],"names":["React","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","DEFAULT_SCROLLING_RESET_TIME_INTERVAL","SCROLL_POSITION_CHANGE_REASONS","OBSERVED","REQUESTED","renderNull","VirtualGrid","PureComponent","constructor","props","_disablePointerEventsTimeoutId","setState","isScrolling","needToResetStyleCache","onSectionRendered","_onVirtualGridRenderedMemoizer","callback","indices","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","_renderedColumnStartIndex","columnStopIndex","_renderedColumnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","_renderedRowStartIndex","rowStopIndex","_renderedRowStopIndex","ref","_scrollingContainer","event","handleScrollEvent","columnSizeAndPositionManager","ScalingCellSizeAndPositionManager","cellCount","columnCount","cellSizeGetter","params","_wrapSizeGetter","columnWidth","estimatedCellSize","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","state","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","prevScrollLeft","scrollLeft","prevScrollTop","scrollTop","scrollbarSize","scrollbarSizeMeasured","scrollDirectionHorizontal","SCROLL_DIRECTION_FORWARD","scrollDirectionVertical","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","getOffsetForCell","alignment","scrollToAlignment","columnIndex","rowIndex","offsetProps","getTotalRowsHeight","getTotalSize","getTotalColumnsWidth","scrollLeftParam","scrollTopParam","_debounceScrollEnded","autoHeight","autoWidth","height","width","totalRowsHeight","totalColumnsWidth","Math","min","max","SCROLL_DIRECTION_BACKWARD","newState","_invokeOnScrollMemoizer","invalidateCellSizeAfterRender","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","measureAllCells","getSizeAndPositionOfCell","recomputeVirtualGridSize","resetCell","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_styleCache","_cellCache","forceUpdate","scrollToCell","undefined","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","componentDidMount","getScrollbarSize","_handleInvalidatedVirtualGridSize","prevState","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_invokeOnVirtualGridRenderedHelper","_maybeCallOnScrollbarPresenceChange","componentDidUpdate","prevProps","columnOrRowCountJustIncreasedFromZero","sizeJustIncreasedFromZero","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToIndex","size","updateScrollIndexCallback","componentWillUnmount","getDerivedStateFromProps","nextProps","assign","configure","maybeStateA","maybeStateB","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","updateScrollOffsetForScrollToIndex","_getScrollLeftForScrollToColumnStateUpdate","_getScrollTopForScrollToRowStateUpdate","render","autoContainerWidth","className","containerProps","containerRole","containerStyle","id","noContentRenderer","role","style","tabIndex","scrollContainerComponent","innerScrollContainerComponent","_isScrolling","gridStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","scrollContainerProps","_setScrollingContainerRef","_onScroll","innerScrollContainer","innerScrollContainerProps","maxWidth","maxHeight","overflow","pointerEvents","createElement","cellRenderer","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","getVisibleCellRange","containerSize","offset","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","start","stop","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","_debounceScrollEndedCallback","estimatedColumnSize","estimatedRowSize","_onScrollMemoizer","onScroll","clientHeight","clientWidth","scrollHeight","scrollWidth","hasOwnProperty","call","Boolean","onScrollbarPresenceChange","horizontal","vertical","scrollToPosition","finalColumn","targetIndex","scrollBarSize","getUpdatedOffsetForIndex","align","currentOffset","calculatedScrollLeft","finalRow","calculatedScrollTop","_pt","string","bool","isRequired","any","number","func","defaultCellRangeRenderer","defaultOverscanIndicesGetter"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable */\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from './utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/util/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from './utils/requestAnimationTimeout';\n\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\nexport const DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the VirtualGrid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents VirtualGrid from interrupting mouse-wheel animations (see issue #2).\n */\n\nconst SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nconst renderNull = () => null;\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nclass VirtualGrid extends React.PureComponent {\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_onVirtualGridRenderedMemoizer\", createCallbackMemoizer());\n\n    _defineProperty(this, \"_onScrollMemoizer\", createCallbackMemoizer(false));\n\n    _defineProperty(this, \"_deferredInvalidateColumnIndex\", null);\n\n    _defineProperty(this, \"_deferredInvalidateRowIndex\", null);\n\n    _defineProperty(this, \"_recomputeScrollLeftFlag\", false);\n\n    _defineProperty(this, \"_recomputeScrollTopFlag\", false);\n\n    _defineProperty(this, \"_horizontalScrollBarSize\", 0);\n\n    _defineProperty(this, \"_verticalScrollBarSize\", 0);\n\n    _defineProperty(this, \"_scrollbarPresenceChanged\", false);\n\n    _defineProperty(this, \"_renderedColumnStartIndex\", 0);\n\n    _defineProperty(this, \"_renderedColumnStopIndex\", 0);\n\n    _defineProperty(this, \"_renderedRowStartIndex\", 0);\n\n    _defineProperty(this, \"_renderedRowStopIndex\", 0);\n\n    _defineProperty(this, \"_styleCache\", {});\n\n    _defineProperty(this, \"_cellCache\", {});\n\n    _defineProperty(this, \"_debounceScrollEndedCallback\", () => {\n      this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n\n    _defineProperty(this, \"_invokeOnVirtualGridRenderedHelper\", () => {\n      const {\n        onSectionRendered\n      } = this.props;\n\n      this._onVirtualGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: this._columnStartIndex,\n          columnOverscanStopIndex: this._columnStopIndex,\n          columnStartIndex: this._renderedColumnStartIndex,\n          columnStopIndex: this._renderedColumnStopIndex,\n          rowOverscanStartIndex: this._rowStartIndex,\n          rowOverscanStopIndex: this._rowStopIndex,\n          rowStartIndex: this._renderedRowStartIndex,\n          rowStopIndex: this._renderedRowStopIndex\n        }\n      });\n    });\n\n    _defineProperty(this, \"_setScrollingContainerRef\", ref => {\n      this._scrollingContainer = ref;\n    });\n\n    _defineProperty(this, \"_onScroll\", event => {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === this._scrollingContainer) {\n        this.handleScrollEvent(event.target);\n      }\n    });\n\n    const columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: params => VirtualGrid._wrapSizeGetter(props.columnWidth)(params),\n      estimatedCellSize: VirtualGrid._getEstimatedColumnSize(props)\n    });\n    const rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: params => VirtualGrid._wrapSizeGetter(props.rowHeight)(params),\n      estimatedCellSize: VirtualGrid._getEstimatedRowSize(props)\n    });\n    this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager,\n        rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        prevScrollLeft: props.scrollLeft,\n        prevScrollTop: props.scrollTop,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: props.scrollLeft || 0,\n      scrollTop: props.scrollTop || 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      this._initialScrollTop = this._getCalculatedScrollTop(props, this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      this._initialScrollLeft = this._getCalculatedScrollLeft(props, this.state);\n    }\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  getOffsetForCell({\n    alignment = this.props.scrollToAlignment,\n    columnIndex = this.props.scrollToColumn,\n    rowIndex = this.props.scrollToRow\n  } = {}) {\n    const offsetProps = _objectSpread({}, this.props, {\n      scrollToAlignment: alignment,\n      scrollToColumn: columnIndex,\n      scrollToRow: rowIndex\n    });\n\n    return {\n      scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n      scrollTop: this._getCalculatedScrollTop(offsetProps)\n    };\n  }\n  /**\n   * Gets estimated total rows' height.\n   */\n\n\n  getTotalRowsHeight() {\n    return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n  }\n  /**\n   * Gets estimated total columns' width.\n   */\n\n\n  getTotalColumnsWidth() {\n    return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n  }\n  /**\n   * This method handles a scroll event originating from an external scroll control.\n   * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n   */\n\n\n  handleScrollEvent({\n    scrollLeft: scrollLeftParam = 0,\n    scrollTop: scrollTopParam = 0\n  }) {\n    // On iOS, we can arrive at negative offsets by swiping past the start.\n    // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n    if (scrollTopParam < 0) {\n      return;\n    } // Prevent pointer events from interrupting a smooth scroll\n\n\n    this._debounceScrollEnded();\n\n    const {\n      autoHeight,\n      autoWidth,\n      height,\n      width\n    } = this.props;\n    const {\n      instanceProps\n    } = this.state; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n    // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n    // This causes a series of rapid renders that is slow for long lists.\n    // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n    const {\n      scrollbarSize\n    } = instanceProps;\n    const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n    const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n    const scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n    const scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n    // Don't force a re-render if this is the case.\n    // The mouse may move faster then the animation frame does.\n    // Use requestAnimationFrame to avoid over-updating.\n\n    if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n      // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n      // Don't change direction for an axis unless scroll offset has changed.\n      const scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n      const scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n      const newState = {\n        isScrolling: true,\n        scrollDirectionHorizontal,\n        scrollDirectionVertical,\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n      };\n\n      if (!autoHeight) {\n        newState.scrollTop = scrollTop;\n      }\n\n      if (!autoWidth) {\n        newState.scrollLeft = scrollLeft;\n      }\n\n      newState.needToResetStyleCache = false;\n      this.setState(newState);\n    }\n\n    this._invokeOnScrollMemoizer({\n      scrollLeft,\n      scrollTop,\n      totalColumnsWidth,\n      totalRowsHeight\n    });\n  }\n  /**\n   * Invalidate VirtualGrid size and recompute visible cells.\n   * This is a deferred wrapper for recomputeVirtualGridSize().\n   * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n   * This method is intended for advanced use-cases like CellMeasurer.\n   */\n  // @TODO (bvaughn) Add automated test coverage for this.\n\n\n  invalidateCellSizeAfterRender({\n    columnIndex,\n    rowIndex\n  }) {\n    this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n    this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n  }\n  /**\n   * Pre-measure all columns and rows in a VirtualGrid.\n   * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n   * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n   */\n\n\n  measureAllCells() {\n    const {\n      columnCount,\n      rowCount\n    } = this.props;\n    const {\n      instanceProps\n    } = this.state;\n    instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n    instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n  }\n  /**\n   * Forced recompute of row heights and column widths.\n   * This function should be called if dynamic column or row sizes have changed but nothing else has.\n   * Since VirtualGrid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n   */\n\n\n  recomputeVirtualGridSize({\n    columnIndex = 0,\n    rowIndex = 0\n  } = {}) {\n    const {\n      scrollToColumn,\n      scrollToRow\n    } = this.props;\n    const {\n      instanceProps\n    } = this.state;\n    instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n    instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n    // In this case the cDU handler can't know if they changed.\n    // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n    this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n    this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n    // Invalid row heights likely mean invalid cached content as well.\n\n    this._styleCache = {};\n    this._cellCache = {};\n    this.forceUpdate();\n  }\n  /**\n   * Ensure column and row are visible.\n   */\n\n\n  scrollToCell({\n    columnIndex,\n    rowIndex\n  }) {\n    const {\n      columnCount\n    } = this.props;\n    const {\n      props\n    } = this; // Don't adjust scroll offset for single-column grids (eg List, Table).\n    // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n    if (columnCount > 1 && columnIndex !== undefined) {\n      this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n        scrollToColumn: columnIndex\n      }));\n    }\n\n    if (rowIndex !== undefined) {\n      this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n        scrollToRow: rowIndex\n      }));\n    }\n  }\n\n  componentDidMount() {\n    const {\n      getScrollbarSize,\n      height,\n      scrollLeft,\n      scrollToColumn,\n      scrollTop,\n      scrollToRow,\n      width\n    } = this.props;\n    const {\n      instanceProps\n    } = this.state; // Reset initial offsets to be ignored in browser\n\n    this._initialScrollTop = 0;\n    this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n    // We must do this at the start of the method as we may calculate and update scroll position below.\n\n    this._handleInvalidatedVirtualGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n    // In that event we need to remeasure.\n\n\n    if (!instanceProps.scrollbarSizeMeasured) {\n      this.setState(prevState => {\n        const stateUpdate = _objectSpread({}, prevState, {\n          needToResetStyleCache: false\n        });\n\n        stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n        stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n        return stateUpdate;\n      });\n    }\n\n    if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n      const stateUpdate = VirtualGrid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft,\n        scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    } // refs don't work in `react-test-renderer`\n\n\n    if (this._scrollingContainer) {\n      // setting the ref's scrollLeft and scrollTop.\n      // Somehow in MultiVirtualGrid the main grid doesn't trigger a update on mount.\n      if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n        this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n      }\n\n      if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n        this._scrollingContainer.scrollTop = this.state.scrollTop;\n      }\n    } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n    // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n    const sizeIsBiggerThanZero = height > 0 && width > 0;\n\n    if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n      this._updateScrollLeftForScrollToColumn();\n    }\n\n    if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n      this._updateScrollTopForScrollToRow();\n    } // Update onRowsRendered callback\n\n\n    this._invokeOnVirtualGridRenderedHelper(); // Initialize onScroll callback\n\n\n    this._invokeOnScrollMemoizer({\n      scrollLeft: scrollLeft || 0,\n      scrollTop: scrollTop || 0,\n      totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n      totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n    });\n\n    this._maybeCallOnScrollbarPresenceChange();\n  }\n  /**\n   * @private\n   * This method updates scrollLeft/scrollTop in state for the following conditions:\n   * 1) New scroll-to-cell props have been set\n   */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      autoHeight,\n      autoWidth,\n      columnCount,\n      height,\n      rowCount,\n      scrollToAlignment,\n      scrollToColumn,\n      scrollToRow,\n      width\n    } = this.props;\n    const {\n      scrollLeft,\n      scrollPositionChangeReason,\n      scrollTop,\n      instanceProps\n    } = this.state; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n    // We must do this at the start of the method as we may calculate and update scroll position below.\n\n    this._handleInvalidatedVirtualGridSize(); // Handle edge case where column or row count has only just increased over 0.\n    // In this case we may have to restore a previously-specified scroll offset.\n    // For more info see bvaughn/react-virtualized/issues/218\n\n\n    const columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n    // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n    // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n    // So we only set these when we require an adjustment of the scroll position.\n    // See issue #2 for more information.\n\n    if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n      // @TRICKY :autoHeight and :autoWidth properties instructs VirtualGrid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n      // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n      if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n        this._scrollingContainer.scrollLeft = scrollLeft;\n      }\n\n      if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n        this._scrollingContainer.scrollTop = scrollTop;\n      }\n    } // Special case where the previous size was 0:\n    // In this case we don't show any windowed cells at all.\n    // So we should always recalculate offset afterwards.\n\n\n    const sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n    // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n    if (this._recomputeScrollLeftFlag) {\n      this._recomputeScrollLeftFlag = false;\n\n      this._updateScrollLeftForScrollToColumn(this.props);\n    } else {\n      updateScrollIndexHelper({\n        cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n        previousCellsCount: prevProps.columnCount,\n        previousCellSize: prevProps.columnWidth,\n        previousScrollToAlignment: prevProps.scrollToAlignment,\n        previousScrollToIndex: prevProps.scrollToColumn,\n        previousSize: prevProps.width,\n        scrollOffset: scrollLeft,\n        scrollToAlignment,\n        scrollToIndex: scrollToColumn,\n        size: width,\n        sizeJustIncreasedFromZero,\n        updateScrollIndexCallback: () => this._updateScrollLeftForScrollToColumn(this.props)\n      });\n    }\n\n    if (this._recomputeScrollTopFlag) {\n      this._recomputeScrollTopFlag = false;\n\n      this._updateScrollTopForScrollToRow(this.props);\n    } else {\n      updateScrollIndexHelper({\n        cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n        previousCellsCount: prevProps.rowCount,\n        previousCellSize: prevProps.rowHeight,\n        previousScrollToAlignment: prevProps.scrollToAlignment,\n        previousScrollToIndex: prevProps.scrollToRow,\n        previousSize: prevProps.height,\n        scrollOffset: scrollTop,\n        scrollToAlignment,\n        scrollToIndex: scrollToRow,\n        size: height,\n        sizeJustIncreasedFromZero,\n        updateScrollIndexCallback: () => this._updateScrollTopForScrollToRow(this.props)\n      });\n    } // Update onRowsRendered callback if start/stop indices have changed\n\n\n    this._invokeOnVirtualGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n    if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n      const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft,\n        scrollTop,\n        totalColumnsWidth,\n        totalRowsHeight\n      });\n    }\n\n    this._maybeCallOnScrollbarPresenceChange();\n  }\n\n  componentWillUnmount() {\n    if (this._disablePointerEventsTimeoutId) {\n      cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n    }\n  }\n  /**\n   * This method updates scrollLeft/scrollTop in state for the following conditions:\n   * 1) Empty content (0 rows or columns)\n   * 2) New scroll props overriding the current state\n   * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n   */\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const newState = {};\n    const {\n      instanceProps\n    } = prevState;\n\n    if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n      newState.scrollLeft = 0;\n      newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n      // scrollTo{Column,Row} should override scroll{Left,Top}\n    } else if (nextProps.scrollLeft !== instanceProps.prevScrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== instanceProps.prevScrollTop && nextProps.scrollToRow < 0) {\n      Object.assign(newState, VirtualGrid._getScrollToPositionStateUpdate({\n        prevState,\n        scrollLeft: nextProps.scrollLeft,\n        scrollTop: nextProps.scrollTop\n      }));\n    } // Initially we should not clearStyleCache\n\n\n    newState.needToResetStyleCache = false;\n\n    if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n      // Reset cache. set it to {} in render\n      newState.needToResetStyleCache = true;\n    }\n\n    instanceProps.columnSizeAndPositionManager.configure({\n      cellCount: nextProps.columnCount,\n      estimatedCellSize: VirtualGrid._getEstimatedColumnSize(nextProps),\n      cellSizeGetter: VirtualGrid._wrapSizeGetter(nextProps.columnWidth)\n    });\n    instanceProps.rowSizeAndPositionManager.configure({\n      cellCount: nextProps.rowCount,\n      estimatedCellSize: VirtualGrid._getEstimatedRowSize(nextProps),\n      cellSizeGetter: VirtualGrid._wrapSizeGetter(nextProps.rowHeight)\n    });\n\n    if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n      instanceProps.prevColumnCount = 0;\n      instanceProps.prevRowCount = 0;\n    } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n    if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n      Object.assign(newState, {\n        isScrolling: false\n      });\n    }\n\n    let maybeStateA;\n    let maybeStateB;\n    calculateSizeAndPositionDataAndUpdateScrollOffset({\n      cellCount: instanceProps.prevColumnCount,\n      cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n      computeMetadataCallback: () => instanceProps.columnSizeAndPositionManager.resetCell(0),\n      computeMetadataCallbackProps: nextProps,\n      nextCellsCount: nextProps.columnCount,\n      nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n      nextScrollToIndex: nextProps.scrollToColumn,\n      scrollToIndex: instanceProps.prevScrollToColumn,\n      updateScrollOffsetForScrollToIndex: () => {\n        maybeStateA = VirtualGrid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n      }\n    });\n    calculateSizeAndPositionDataAndUpdateScrollOffset({\n      cellCount: instanceProps.prevRowCount,\n      cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n      computeMetadataCallback: () => instanceProps.rowSizeAndPositionManager.resetCell(0),\n      computeMetadataCallbackProps: nextProps,\n      nextCellsCount: nextProps.rowCount,\n      nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n      nextScrollToIndex: nextProps.scrollToRow,\n      scrollToIndex: instanceProps.prevScrollToRow,\n      updateScrollOffsetForScrollToIndex: () => {\n        maybeStateB = VirtualGrid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n      }\n    });\n    instanceProps.prevColumnCount = nextProps.columnCount;\n    instanceProps.prevColumnWidth = nextProps.columnWidth;\n    instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n    instanceProps.prevRowCount = nextProps.rowCount;\n    instanceProps.prevRowHeight = nextProps.rowHeight;\n    instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n    instanceProps.prevScrollToRow = nextProps.scrollToRow;\n    instanceProps.prevScrollLeft = nextProps.scrollLeft;\n    instanceProps.prevScrollTop = nextProps.scrollTop; // getting scrollBarSize (moved from componentWillMount)\n\n    instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n    if (instanceProps.scrollbarSize === undefined) {\n      instanceProps.scrollbarSizeMeasured = false;\n      instanceProps.scrollbarSize = 0;\n    } else {\n      instanceProps.scrollbarSizeMeasured = true;\n    }\n\n    newState.instanceProps = instanceProps;\n    return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n  }\n\n  render() {\n    const {\n      autoContainerWidth,\n      autoHeight,\n      autoWidth,\n      className,\n      containerProps,\n      containerRole,\n      containerStyle,\n      height,\n      id,\n      noContentRenderer,\n      role,\n      style,\n      tabIndex,\n      width,\n      scrollContainerComponent,\n      innerScrollContainerComponent\n    } = this.props;\n    const {\n      instanceProps,\n      needToResetStyleCache\n    } = this.state;\n\n    const isScrolling = this._isScrolling();\n\n    const gridStyle = {\n      boxSizing: 'border-box',\n      direction: 'ltr',\n      height: autoHeight ? 'auto' : height,\n      position: 'relative',\n      width: autoWidth ? 'auto' : width,\n      WebkitOverflowScrolling: 'touch',\n      willChange: 'transform'\n    };\n\n    if (needToResetStyleCache) {\n      this._styleCache = {};\n    } // calculate _styleCache here\n    // if state.isScrolling (not from _isScrolling) then reset\n\n\n    if (!this.state.isScrolling) {\n      this._resetStyleCache();\n    } // calculate children to render here\n\n\n    this._calculateChildrenToRender(this.props, this.state);\n\n    const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n    const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n    // Otherwise once scrollbars appear they may not disappear again.\n    // For more info see issue #116\n\n    const verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n    const horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n    if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n      this._horizontalScrollBarSize = horizontalScrollBarSize;\n      this._verticalScrollBarSize = verticalScrollBarSize;\n      this._scrollbarPresenceChanged = true;\n    } // Also explicitly init styles to 'auto' if scrollbars are required.\n    // This works around an obscure edge case where external CSS styles have not yet been loaded,\n    // But an initial scroll index of offset is set as an external prop.\n    // Without this style, VirtualGrid would render the correct range of cells but would NOT update its internal offset.\n    // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n    gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n    gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n    const childrenToDisplay = this._childrenToDisplay;\n    const showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n\n    const scrollContainerProps = _objectSpread({}, containerProps, {\n      \"ref\": this._setScrollingContainerRef,\n      'aria-label': this.props['aria-label'],\n      'aria-readonly': this.props['aria-readonly'],\n      \"className\": clsx('ReactVirtualized__VirtualGrid', className),\n      id,\n      \"onScroll\": this._onScroll,\n      role,\n      \"style\": _objectSpread({}, gridStyle, {}, style),\n      tabIndex\n    });\n\n    let innerScrollContainer = null;\n\n    if (childrenToDisplay.length > 0) {\n      const innerScrollContainerProps = {\n        className: 'ReactVirtualized__VirtualGrid__innerScrollContainer',\n        key: 'ReactVirtualized__VirtualGrid__innerScrollContainer',\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      };\n      innerScrollContainer = React.createElement(innerScrollContainerComponent, innerScrollContainerProps, childrenToDisplay);\n    }\n\n    return React.createElement(scrollContainerComponent, scrollContainerProps, [innerScrollContainer, showNoContentRenderer && noContentRenderer()]);\n  }\n  /* ---------------------------- Helper methods ---------------------------- */\n\n\n  _calculateChildrenToRender(props = this.props, state = this.state) {\n    const {\n      cellRenderer,\n      cellRangeRenderer,\n      columnCount,\n      deferredMeasurementCache,\n      height,\n      overscanColumnCount,\n      overscanIndicesGetter,\n      overscanRowCount,\n      rowCount,\n      width,\n      isScrollingOptOut\n    } = props;\n    const {\n      scrollDirectionHorizontal,\n      scrollDirectionVertical,\n      instanceProps\n    } = state;\n    const scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n    const scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n    const isScrolling = this._isScrolling(props, state);\n\n    this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n    if (height > 0 && width > 0) {\n      const visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n        containerSize: width,\n        offset: scrollLeft\n      });\n      const visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n        containerSize: height,\n        offset: scrollTop\n      });\n      const horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n        containerSize: width,\n        offset: scrollLeft\n      });\n      const verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n        containerSize: height,\n        offset: scrollTop\n      }); // Store for _invokeOnVirtualGridRenderedHelper()\n\n      this._renderedColumnStartIndex = visibleColumnIndices.start;\n      this._renderedColumnStopIndex = visibleColumnIndices.stop;\n      this._renderedRowStartIndex = visibleRowIndices.start;\n      this._renderedRowStopIndex = visibleRowIndices.stop;\n      const overscanColumnIndices = overscanIndicesGetter({\n        direction: 'horizontal',\n        cellCount: columnCount,\n        overscanCellsCount: overscanColumnCount,\n        scrollDirection: scrollDirectionHorizontal,\n        startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n        stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n      });\n      const overscanRowIndices = overscanIndicesGetter({\n        direction: 'vertical',\n        cellCount: rowCount,\n        overscanCellsCount: overscanRowCount,\n        scrollDirection: scrollDirectionVertical,\n        startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n        stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n      }); // Store for _invokeOnVirtualGridRenderedHelper()\n\n      let columnStartIndex = overscanColumnIndices.overscanStartIndex;\n      let columnStopIndex = overscanColumnIndices.overscanStopIndex;\n      let rowStartIndex = overscanRowIndices.overscanStartIndex;\n      let rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n      if (deferredMeasurementCache) {\n        // If rows have a dynamic height, scan the rows we are about to render.\n        // If any have not yet been measured, then we need to render all columns initially,\n        // Because the height of the row is equal to the tallest cell within that row,\n        // (And so we can't know the height without measuring all column-cells first).\n        if (!deferredMeasurementCache.hasFixedHeight()) {\n          for (let rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n            if (!deferredMeasurementCache.has(rowIndex, 0)) {\n              columnStartIndex = 0;\n              columnStopIndex = columnCount - 1;\n              break;\n            }\n          }\n        } // If columns have a dynamic width, scan the columns we are about to render.\n        // If any have not yet been measured, then we need to render all rows initially,\n        // Because the width of the column is equal to the widest cell within that column,\n        // (And so we can't know the width without measuring all row-cells first).\n\n\n        if (!deferredMeasurementCache.hasFixedWidth()) {\n          for (let columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n            if (!deferredMeasurementCache.has(0, columnIndex)) {\n              rowStartIndex = 0;\n              rowStopIndex = rowCount - 1;\n              break;\n            }\n          }\n        }\n      }\n\n      this._childrenToDisplay = cellRangeRenderer({\n        cellCache: this._cellCache,\n        cellRenderer,\n        columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n        columnStartIndex,\n        columnStopIndex,\n        deferredMeasurementCache,\n        horizontalOffsetAdjustment,\n        isScrolling,\n        isScrollingOptOut,\n        parent: this,\n        rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n        rowStartIndex,\n        rowStopIndex,\n        scrollLeft,\n        scrollTop,\n        styleCache: this._styleCache,\n        verticalOffsetAdjustment,\n        visibleColumnIndices,\n        visibleRowIndices\n      }); // update the indices\n\n      this._columnStartIndex = columnStartIndex;\n      this._columnStopIndex = columnStopIndex;\n      this._rowStartIndex = rowStartIndex;\n      this._rowStopIndex = rowStopIndex;\n    }\n  }\n  /**\n   * Sets an :isScrolling flag for a small window of time.\n   * This flag is used to disable pointer events on the scrollable portion of the VirtualGrid.\n   * This prevents jerky/stuttery mouse-wheel scrolling.\n   */\n\n\n  _debounceScrollEnded() {\n    const {\n      scrollingResetTimeInterval\n    } = this.props;\n\n    if (this._disablePointerEventsTimeoutId) {\n      cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n    }\n\n    this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n  }\n\n  static _getEstimatedColumnSize(props) {\n    return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n  }\n\n  static _getEstimatedRowSize(props) {\n    return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n  }\n  /**\n   * Check for batched CellMeasurer size invalidations.\n   * This will occur the first time one or more previously unmeasured cells are rendered.\n   */\n\n\n  _handleInvalidatedVirtualGridSize() {\n    if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n      const columnIndex = this._deferredInvalidateColumnIndex;\n      const rowIndex = this._deferredInvalidateRowIndex;\n      this._deferredInvalidateColumnIndex = null;\n      this._deferredInvalidateRowIndex = null;\n      this.recomputeVirtualGridSize({\n        columnIndex,\n        rowIndex\n      });\n    }\n  }\n\n  _invokeOnScrollMemoizer({\n    scrollLeft,\n    scrollTop,\n    totalColumnsWidth,\n    totalRowsHeight\n  }) {\n    this._onScrollMemoizer({\n      callback: ({\n        scrollLeft,\n        scrollTop\n      }) => {\n        const {\n          height,\n          onScroll,\n          width\n        } = this.props;\n        onScroll({\n          clientHeight: height,\n          clientWidth: width,\n          scrollHeight: totalRowsHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth: totalColumnsWidth\n        });\n      },\n      indices: {\n        scrollLeft,\n        scrollTop\n      }\n    });\n  }\n\n  _isScrolling(props = this.props, state = this.state) {\n    // If isScrolling is defined in props, use it to override the value in state\n    // This is a performance optimization for WindowScroller + VirtualGrid\n    return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n  }\n\n  _maybeCallOnScrollbarPresenceChange() {\n    if (this._scrollbarPresenceChanged) {\n      const {\n        onScrollbarPresenceChange\n      } = this.props;\n      this._scrollbarPresenceChanged = false;\n      onScrollbarPresenceChange({\n        horizontal: this._horizontalScrollBarSize > 0,\n        size: this.state.instanceProps.scrollbarSize,\n        vertical: this._verticalScrollBarSize > 0\n      });\n    }\n  }\n\n  /**\n   * Get the updated state after scrolling to\n   * scrollLeft and scrollTop\n   */\n  static _getScrollToPositionStateUpdate({\n    prevState,\n    scrollLeft,\n    scrollTop\n  }) {\n    const newState = {\n      scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n    };\n\n    if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n      newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n      newState.scrollLeft = scrollLeft;\n    }\n\n    if (typeof scrollTop === 'number' && scrollTop >= 0) {\n      newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n      newState.scrollTop = scrollTop;\n    }\n\n    if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n      return newState;\n    }\n\n    return null;\n  }\n  /**\n   * Scroll to the specified offset(s).\n   * Useful for animating position changes.\n   */\n\n\n  scrollToPosition({\n    scrollLeft,\n    scrollTop\n  }) {\n    const stateUpdate = VirtualGrid._getScrollToPositionStateUpdate({\n      prevState: this.state,\n      scrollLeft,\n      scrollTop\n    });\n\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  static _wrapSizeGetter(value) {\n    return typeof value === 'function' ? value : () => value;\n  }\n\n  static _getCalculatedScrollLeft(nextProps, prevState) {\n    const {\n      columnCount,\n      height,\n      scrollToAlignment,\n      scrollToColumn,\n      width\n    } = nextProps;\n    const {\n      scrollLeft,\n      instanceProps\n    } = prevState;\n\n    if (columnCount > 0) {\n      const finalColumn = columnCount - 1;\n      const targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n      const totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      const scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: scrollToAlignment,\n        containerSize: width - scrollBarSize,\n        currentOffset: scrollLeft,\n        targetIndex\n      });\n    }\n\n    return 0;\n  }\n\n  _getCalculatedScrollLeft(props = this.props, state = this.state) {\n    return VirtualGrid._getCalculatedScrollLeft(props, state);\n  }\n\n  static _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n    const {\n      scrollLeft\n    } = prevState;\n\n    const calculatedScrollLeft = VirtualGrid._getCalculatedScrollLeft(nextProps, prevState);\n\n    if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n      return VirtualGrid._getScrollToPositionStateUpdate({\n        prevState,\n        scrollLeft: calculatedScrollLeft,\n        scrollTop: -1\n      });\n    }\n\n    return null;\n  }\n\n  _updateScrollLeftForScrollToColumn(props = this.props, state = this.state) {\n    const stateUpdate = VirtualGrid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n  static _getCalculatedScrollTop(nextProps, prevState) {\n    const {\n      height,\n      rowCount,\n      scrollToAlignment,\n      scrollToRow,\n      width\n    } = nextProps;\n    const {\n      scrollTop,\n      instanceProps\n    } = prevState;\n\n    if (rowCount > 0) {\n      const finalRow = rowCount - 1;\n      const targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n      const totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      const scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n      return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: scrollToAlignment,\n        containerSize: height - scrollBarSize,\n        currentOffset: scrollTop,\n        targetIndex\n      });\n    }\n\n    return 0;\n  }\n\n  _getCalculatedScrollTop(props = this.props, state = this.state) {\n    return VirtualGrid._getCalculatedScrollTop(props, state);\n  }\n\n  _resetStyleCache() {\n    const styleCache = this._styleCache;\n    const cellCache = this._cellCache;\n    const {\n      isScrollingOptOut\n    } = this.props; // Reset cell and style caches once scrolling stops.\n    // This makes VirtualGrid simpler to use (since cells commonly change).\n    // And it keeps the caches from growing too large.\n    // Performance is most sensitive when a user is scrolling.\n    // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n    // This keeps the cellCache to a resonable size.\n\n    this._cellCache = {};\n    this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n    for (let rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n      for (let columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n        const key = `${rowIndex}-${columnIndex}`;\n        this._styleCache[key] = styleCache[key];\n\n        if (isScrollingOptOut) {\n          this._cellCache[key] = cellCache[key];\n        }\n      }\n    }\n  }\n\n  static _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n    const {\n      scrollTop\n    } = prevState;\n\n    const calculatedScrollTop = VirtualGrid._getCalculatedScrollTop(nextProps, prevState);\n\n    if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n      return VirtualGrid._getScrollToPositionStateUpdate({\n        prevState,\n        scrollLeft: -1,\n        scrollTop: calculatedScrollTop\n      });\n    }\n\n    return null;\n  }\n\n  _updateScrollTopForScrollToRow(props = this.props, state = this.state) {\n    const stateUpdate = VirtualGrid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n    if (stateUpdate) {\n      stateUpdate.needToResetStyleCache = false;\n      this.setState(stateUpdate);\n    }\n  }\n\n}\n\n_defineProperty(VirtualGrid, \"propTypes\", {\n  'aria-label': _pt.string,\n  'aria-readonly': _pt.bool,\n  autoContainerWidth: _pt.bool.isRequired,\n  autoHeight: _pt.bool.isRequired,\n  autoWidth: _pt.bool.isRequired,\n  cellRenderer: _pt.any.isRequired,\n  cellRangeRenderer: _pt.any.isRequired,\n  className: _pt.string,\n  columnCount: _pt.number.isRequired,\n  columnWidth: _pt.any.isRequired,\n  containerProps: _pt.any,\n  containerRole: _pt.string.isRequired,\n  containerStyle: _pt.any.isRequired,\n  deferredMeasurementCache: _pt.any,\n  estimatedColumnSize: _pt.number.isRequired,\n  estimatedRowSize: _pt.number.isRequired,\n  getScrollbarSize: _pt.func.isRequired,\n  height: _pt.number.isRequired,\n  id: _pt.string,\n  isScrolling: _pt.bool,\n  isScrollingOptOut: _pt.bool.isRequired,\n  noContentRenderer: _pt.any.isRequired,\n  onScroll: _pt.func.isRequired,\n  onScrollbarPresenceChange: _pt.func.isRequired,\n  onSectionRendered: _pt.func.isRequired\n});\n\n_defineProperty(VirtualGrid, \"defaultProps\", {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  \"autoContainerWidth\": false,\n  \"autoHeight\": false,\n  \"autoWidth\": false,\n  \"cellRangeRenderer\": defaultCellRangeRenderer,\n  \"containerRole\": 'rowgroup',\n  \"containerStyle\": {},\n  \"estimatedColumnSize\": 100,\n  \"estimatedRowSize\": 30,\n  \"getScrollbarSize\": scrollbarSize,\n  \"noContentRenderer\": renderNull,\n  \"onScroll\": () => {},\n  \"onScrollbarPresenceChange\": () => {},\n  \"onSectionRendered\": () => {},\n  \"overscanColumnCount\": 0,\n  \"overscanIndicesGetter\": defaultOverscanIndicesGetter,\n  \"overscanRowCount\": 10,\n  \"role\": 'grid',\n  \"scrollingResetTimeInterval\": DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  \"scrollToAlignment\": 'auto',\n  \"scrollToColumn\": -1,\n  \"scrollToRow\": -1,\n  \"style\": {},\n  \"tabIndex\": 0,\n  \"isScrollingOptOut\": false,\n  \"scrollContainerComponent\": 'div',\n  \"innerScrollContainerComponent\": 'div'\n});\n\npolyfill(VirtualGrid);\nexport default VirtualGrid;\n//# sourceMappingURL=VirtualGrid.js.map"],"file":"VirtualGrid.js"}