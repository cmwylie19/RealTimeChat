{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggleCheckbox.test.tsx"],"names":["React","shallow","mount","DropdownToggleCheckbox","props","onChange","jest","fn","isChecked","test","view","expect","toMatchSnapshot","newValue","event","target","checked","find","simulate","mock","calls","toBe","toMatchObject"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,QAA/B;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAEC,IAAI,CAACC,EAAL,EADE;AAEZC,EAAAA,SAAS,EAAE;AAFC,CAAd;AAKAC,IAAI,CAAC,YAAD,EAAe,MAAM;AACvB,QAAMC,IAAI,GAAGT,OAAO,CAAC,oBAAC,sBAAD;AAAwB,IAAA,SAAS,MAAjC;AAAkC,IAAA,EAAE,EAAC,OAArC;AAA6C,kBAAW;AAAxD,IAAD,CAApB;AACAU,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,cAAD,EAAiB,MAAM;AACzB,QAAMC,IAAI,GAAGT,OAAO,CAAC,oBAAC,sBAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,kBAAW;AAA9C,IAAD,CAApB;AACAU,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,WAAD,EAAc,MAAM;AACtB,QAAMC,IAAI,GAAGT,OAAO,CAAC,oBAAC,sBAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,IAAA,UAAU,MAA7C;AAA8C,kBAAW;AAAzD,iBAAD,CAApB;AACAU,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,YAAD,EAAe,MAAM;AACvB,QAAMC,IAAI,GAAGT,OAAO,CAAC,oBAAC,sBAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,IAAA,UAAU,MAA7C;AAA8C,kBAAW;AAAzD,IAAD,CAApB;AACAU,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,WAAD,EAAc,MAAM;AACtB,QAAMC,IAAI,GAAGT,OAAO,CAAC,oBAAC,sBAAD;AAAwB,IAAA,EAAE,EAAC,OAA3B;AAAmC,IAAA,SAAS,EAAE,IAA9C;AAAoD,kBAAW;AAA/D,IAAD,CAApB;AACAU,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,eAAD,EAAkB,MAAM;AAC1B,QAAMC,IAAI,GAAGT,OAAO,CAClB,oBAAC,sBAAD;AAAwB,IAAA,KAAK,EAAC,OAA9B;AAAsC,IAAA,SAAS,EAAC,WAAhD;AAA4D,IAAA,EAAE,EAAC,OAA/D;AAAuE,IAAA,SAAS,MAAhF;AAAiF,kBAAW;AAA5F,IADkB,CAApB;AAGAU,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CALG,CAAJ;AAOAH,IAAI,CAAC,wBAAD,EAA2B,MAAM;AACnC,QAAMC,IAAI,GAAGT,OAAO,CAClB,oBAAC,sBAAD;AAAwB,IAAA,KAAK,EAAC,OAA9B;AAAsC,uBAAgB,SAAtD;AAAgE,IAAA,EAAE,EAAC,OAAnE;AAA2E,IAAA,SAAS,MAApF;AAAqF,kBAAW;AAAhG,IADkB,CAApB;AAGAU,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CALG,CAAJ;AAOAH,IAAI,CAAC,qDAAD,EAAwD,MAAM;AAChE,QAAMI,QAAQ,GAAG,IAAjB;AACA,QAAMC,KAAK,GAAG;AACZC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,OAAO,EAAEH;AAAX;AADI,GAAd;AAGA,QAAMH,IAAI,GAAGR,KAAK,CAAC,oBAAC,sBAAD;AAAwB,IAAA,EAAE,EAAC;AAA3B,KAAuCE,KAAvC;AAA8C,kBAAW;AAAzD,KAAD,CAAlB;AACAM,EAAAA,IAAI,CAACO,IAAL,CAAU,OAAV,EAAmBC,QAAnB,CAA4B,QAA5B,EAAsCJ,KAAtC;AACAH,EAAAA,MAAM,CAACP,KAAK,CAACC,QAAN,CAAec,IAAf,CAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAAN,CAAwCC,IAAxC,CAA6CR,QAA7C;AACAF,EAAAA,MAAM,CAACP,KAAK,CAACC,QAAN,CAAec,IAAf,CAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAAN,CAAwCE,aAAxC,CAAsDR,KAAtD;AACD,CATG,CAAJ","sourcesContent":["import * as React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { DropdownToggleCheckbox } from './DropdownToggleCheckbox';\n\nconst props = {\n  onChange: jest.fn(),\n  isChecked: false\n};\n\ntest('controlled', () => {\n  const view = shallow(<DropdownToggleCheckbox isChecked id=\"check\" aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('uncontrolled', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('with text', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" isDisabled aria-label=\"check\">Some text</DropdownToggleCheckbox>);\n  expect(view).toMatchSnapshot();\n});\n\ntest('isDisabled', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" isDisabled aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('3rd state', () => {\n  const view = shallow(<DropdownToggleCheckbox id=\"check\" isChecked={null} aria-label=\"check\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('passing class', () => {\n  const view = shallow(\n    <DropdownToggleCheckbox label=\"label\" className=\"class-123\" id=\"check\" isChecked aria-label=\"check\" />\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('passing HTML attribute', () => {\n  const view = shallow(\n    <DropdownToggleCheckbox label=\"label\" aria-labelledby=\"labelId\" id=\"check\" isChecked aria-label=\"check\" />\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('checkbox passes value and event to onChange handler', () => {\n  const newValue = true;\n  const event = {\n    target: { checked: newValue }\n  };\n  const view = mount(<DropdownToggleCheckbox id=\"check\" {...props} aria-label=\"check\" />);\n  view.find('input').simulate('change', event);\n  expect(props.onChange.mock.calls[0][0]).toBe(newValue);\n  expect(props.onChange.mock.calls[0][1]).toMatchObject(event);\n});\n"],"file":"DropdownToggleCheckbox.test.js"}