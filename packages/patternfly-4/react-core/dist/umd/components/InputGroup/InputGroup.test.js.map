{"version":3,"sources":["../../../esm/components/InputGroup/InputGroup.test.js"],"names":["test","view","React","createElement","InputGroupText","className","id","expect","find","toHaveLength","spanProps","props","toEqual","stringContaining","toBe","text","InputGroup","TextInput","value","divProps","Button","variant"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAMAA,EAAAA,IAAI,CAAC,gBAAD,EAAmB,MAAM;AAC3B,UAAMC,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBC,8BAApB,EAAoC;AACvDC,MAAAA,SAAS,EAAE,eAD4C;AAEvDC,MAAAA,EAAE,EAAE;AAFmD,KAApC,EAGlB,GAHkB,CAAR,CAAb;AAIAC,IAAAA,MAAM,CAACN,IAAI,CAACO,IAAL,CAAU,MAAV,CAAD,CAAN,CAA0BC,YAA1B,CAAuC,CAAvC;AACA,UAAMC,SAAS,GAAGT,IAAI,CAACO,IAAL,CAAU,MAAV,EAAkBG,KAAlB,EAAlB;AACAJ,IAAAA,MAAM,CAACG,SAAS,CAACL,SAAX,CAAN,CAA4BO,OAA5B,CAAoCL,MAAM,CAACM,gBAAP,CAAwB,eAAxB,CAApC;AACAN,IAAAA,MAAM,CAACG,SAAS,CAACJ,EAAX,CAAN,CAAqBQ,IAArB,CAA0B,eAA1B;AACAP,IAAAA,MAAM,CAACN,IAAI,CAACc,IAAL,EAAD,CAAN,CAAoBD,IAApB,CAAyB,GAAzB;AACD,GAVG,CAAJ;AAWAd,EAAAA,IAAI,CAAC,YAAD,EAAe,MAAM;AACvB,UAAMC,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBa,sBAApB,EAAgC;AACnDX,MAAAA,SAAS,EAAE,iBADwC;AAEnDC,MAAAA,EAAE,EAAE;AAF+C,KAAhC,EAGlBJ,gBAAMC,aAAN,CAAoBc,oBAApB,EAA+B;AAChCC,MAAAA,KAAK,EAAE,cADyB;AAEhC,oBAAc;AAFkB,KAA/B,CAHkB,CAAR,CAAb;AAOAX,IAAAA,MAAM,CAACN,IAAI,CAACO,IAAL,CAAU,KAAV,CAAD,CAAN,CAAyBC,YAAzB,CAAsC,CAAtC;AACA,UAAMU,QAAQ,GAAGlB,IAAI,CAACO,IAAL,CAAU,KAAV,EAAiBG,KAAjB,EAAjB;AACAJ,IAAAA,MAAM,CAACY,QAAQ,CAACd,SAAV,CAAN,CAA2BO,OAA3B,CAAmCL,MAAM,CAACM,gBAAP,CAAwB,iBAAxB,CAAnC;AACAN,IAAAA,MAAM,CAACY,QAAQ,CAACb,EAAV,CAAN,CAAoBQ,IAApB,CAAyB,QAAzB;AACD,GAZG,CAAJ;AAaAd,EAAAA,IAAI,CAAC,6EAAD,EAAgF,MAAM;AACxF;AACA;AACA,UAAMC,IAAI,GAAG,qBAAQC,gBAAMC,aAAN,CAAoBa,sBAApB,EAAgC,IAAhC,EAAsCd,gBAAMC,aAAN,CAAoBc,oBAApB,EAA+B;AACxFC,MAAAA,KAAK,EAAE,WADiF;AAExF,oBAAc;AAF0E,KAA/B,CAAtC,EAGjBhB,gBAAMC,aAAN,CAAoBiB,cAApB,EAA4B;AAC9BC,MAAAA,OAAO,EAAE,SADqB;AAE9Bf,MAAAA,EAAE,EAAE;AAF0B,KAA5B,EAGD,OAHC,CAHiB,CAAR,CAAb;AAOAC,IAAAA,MAAM,CAACN,IAAI,CAACO,IAAL,CAAUS,oBAAV,EAAqBN,KAArB,GAA6B,kBAA7B,CAAD,CAAN,CAAyDG,IAAzD,CAA8D,WAA9D;AACD,GAXG,CAAJ","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { InputGroup } from './InputGroup';\nimport { InputGroupText } from './InputGroupText';\nimport { Button } from '../Button';\nimport { TextInput } from '../TextInput';\ntest('InputGroupText', () => {\n  const view = shallow(React.createElement(InputGroupText, {\n    className: \"inpt-grp-text\",\n    id: \"email-npt-grp\"\n  }, \"@\"));\n  expect(view.find('span')).toHaveLength(1);\n  const spanProps = view.find('span').props();\n  expect(spanProps.className).toEqual(expect.stringContaining('inpt-grp-text'));\n  expect(spanProps.id).toBe('email-npt-grp');\n  expect(view.text()).toBe('@');\n});\ntest('InputGroup', () => {\n  const view = shallow(React.createElement(InputGroup, {\n    className: \"text-verify-cls\",\n    id: \"text-1\"\n  }, React.createElement(TextInput, {\n    value: \"this is text\",\n    \"aria-label\": \"data text\"\n  })));\n  expect(view.find('div')).toHaveLength(1);\n  const divProps = view.find('div').props();\n  expect(divProps.className).toEqual(expect.stringContaining('text-verify-cls'));\n  expect(divProps.id).toBe('text-1');\n});\ntest('add aria-describedby to form-control if one of the non form-controls has id', () => {\n  // In this test, TextInput is a form-control component and Button is not.\n  // If Button has an id props, this should be used in aria-describedby.\n  const view = shallow(React.createElement(InputGroup, null, React.createElement(TextInput, {\n    value: \"some data\",\n    \"aria-label\": \"some text\"\n  }), React.createElement(Button, {\n    variant: \"primary\",\n    id: \"button-id\"\n  }, \"hello\")));\n  expect(view.find(TextInput).props()['aria-describedby']).toBe('button-id');\n});\n//# sourceMappingURL=InputGroup.test.js.map"],"file":"InputGroup.test.js"}