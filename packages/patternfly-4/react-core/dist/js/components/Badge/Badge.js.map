{"version":3,"sources":["../../../../src/components/Badge/Badge.tsx"],"names":["Badge","isRead","className","children","props","styles","badge","modifiers","read","unread"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAWO,IAAMA,KAA0C,GAAG,SAA7CA,KAA6C;AAAA,yBACxDC,MADwD;AAAA,MACxDA,MADwD,4BAC/C,KAD+C;AAAA,4BAExDC,SAFwD;AAAA,MAExDA,SAFwD,+BAE5C,EAF4C;AAAA,2BAGxDC,QAHwD;AAAA,MAGxDA,QAHwD,8BAG7C,EAH6C;AAAA,MAIrDC,KAJqD;;AAAA,SAKxD,yCAAUA,KAAV;AAAiB,IAAA,SAAS,EAAE,sBAAIC,kBAAOC,KAAX,EAAmBL,MAAM,GAAGI,kBAAOE,SAAP,CAAiBC,IAApB,GAA2BH,kBAAOE,SAAP,CAAiBE,MAArE,EAAqFP,SAArF;AAA5B,MACGC,QADH,CALwD;AAAA,CAAnD;;;;AAPLF,EAAAA,M;AAEAE,EAAAA,Q;AAEAD,EAAAA,S","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Badge/badge';\n\nexport interface BadgeProps extends React.HTMLProps<HTMLSpanElement> {\n  /**  Adds styling to the badge to indicate it has been read */\n  isRead?: boolean;\n  /** content rendered inside the Badge */\n  children?: React.ReactNode;\n  /** additional classes added to the Badge */\n  className?: string;\n}\n\nexport const Badge: React.FunctionComponent<BadgeProps> = ({\n  isRead = false,\n  className = '',\n  children = '',\n  ...props }: BadgeProps) => (\n  <span {...props} className={css(styles.badge, (isRead ? styles.modifiers.read : styles.modifiers.unread) as any, className)}>\n    {children}\n  </span>\n);\n"],"file":"Badge.js"}