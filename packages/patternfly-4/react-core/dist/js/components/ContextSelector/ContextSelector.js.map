{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelector.tsx"],"names":["FocusTrap","require","currentId","newId","ContextSelector","React","createRef","event","charCode","KEY_CODES","ENTER","props","onSearchButtonClick","toggleId","screenReaderLabelId","searchButtonId","children","className","isOpen","onToggle","onSelect","screenReaderLabel","toggleText","searchButtonAriaLabel","searchInputValue","onSearchInputChange","searchInputPlaceholder","styles","contextSelector","modifiers","expanded","parentRef","current","contextSelectorMenu","clickOutsideDeactivates","contextSelectorMenuInput","onEnterPressed","ButtonVariant","control","Component","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\n\n// Can't use ES6 imports :(\n// The types for it are also wrong, we should probably ditch this dependency.\n// tslint:disable-next-line\nconst FocusTrap: any = require('focus-trap-react');\n\n// seed for the aria-labelledby ID\nlet currentId = 0;\nconst newId = currentId++;\n\nexport interface ContextSelectorProps {\n  /** content rendered inside the Context Selector */\n  children?: React.ReactNode;\n  /** Classes applied to root element of Context Selector */\n  className?: string;\n  /** Flag to indicate if Context Selector is opened */\n  isOpen?: boolean;\n  /** Function callback called when user clicks toggle button */\n  onToggle?: (value: boolean) => void;\n  /** Function callback called when user selects item */\n  onSelect?: (event: any, value: React.ReactNode) => void;\n  /** Labels the Context Selector for Screen Readers */\n  screenReaderLabel?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** aria-label for the Context Selector Search Button */\n  searchButtonAriaLabel?: string;\n  /** Value in the Search field */\n  searchInputValue?: string;\n  /** Function callback called when user changes the Search Input */\n  onSearchInputChange?(value: string): void;\n  /** Search Input placeholder */\n  searchInputPlaceholder?: string;\n  /** Function callback for when Search Button is clicked */\n  onSearchButtonClick?(event?: React.SyntheticEvent<HTMLButtonElement>): void;\n}\n\nexport class ContextSelector extends React.Component<ContextSelectorProps> {\n\n  static defaultProps = {\n    children: null as React.ReactNode,\n    className: '',\n    isOpen: false,\n    onToggle: () => undefined as any,\n    onSelect: () => undefined as any,\n    screenReaderLabel: '',\n    toggleText: '',\n    searchButtonAriaLabel: 'Search menu items',\n    searchInputValue: '',\n    onSearchInputChange: () => undefined as any,\n    searchInputPlaceholder: 'Search',\n    onSearchButtonClick: () => undefined as any\n  };\n\n  parentRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  onEnterPressed = (event: any) => {\n    if (event.charCode === KEY_CODES.ENTER) {\n      this.props.onSearchButtonClick();\n    }\n  }\n\n  render() {\n    const toggleId = `pf-context-selector-toggle-id-${newId}`;\n    const screenReaderLabelId = `pf-context-selector-label-id-${newId}`;\n    const searchButtonId = `pf-context-selector-search-button-id-${newId}`;\n    const {\n      children,\n      className,\n      isOpen,\n      onToggle,\n      onSelect,\n      screenReaderLabel,\n      toggleText,\n      searchButtonAriaLabel,\n      searchInputValue,\n      onSearchInputChange,\n      searchInputPlaceholder,\n      onSearchButtonClick,\n      ...props\n    } = this.props;\n    return (\n      <div\n        className={css(styles.contextSelector, isOpen && styles.modifiers.expanded, className)}\n        ref={this.parentRef}\n        {...props}\n      >\n        {screenReaderLabel && (\n          <span id={screenReaderLabelId} hidden>\n            {screenReaderLabel}\n          </span>\n        )}\n        <ContextSelectorToggle\n          onToggle={onToggle}\n          isOpen={isOpen}\n          toggleText={toggleText}\n          id={toggleId}\n          parentRef={this.parentRef.current}\n          aria-labelledby={`${screenReaderLabelId} ${toggleId}`}\n        />\n        {isOpen && (\n          <div className={css(styles.contextSelectorMenu)}>\n            {isOpen && (\n              <FocusTrap focusTrapOptions={{ clickOutsideDeactivates: true }}>\n                <div className={css(styles.contextSelectorMenuInput)}>\n                  <InputGroup>\n                    <TextInput\n                      value={searchInputValue}\n                      type=\"search\"\n                      placeholder={searchInputPlaceholder}\n                      onChange={onSearchInputChange}\n                      onKeyPress={this.onEnterPressed}\n                      aria-labelledby={searchButtonId}\n                    />\n                    <Button\n                      variant={ButtonVariant.control}\n                      aria-label={searchButtonAriaLabel}\n                      id={searchButtonId}\n                      onClick={onSearchButtonClick}\n                    >\n                      <SearchIcon aria-hidden=\"true\" />\n                    </Button>\n                  </InputGroup>\n                </div>\n                <ContextSelectorContext.Provider value={{ onSelect }}>\n                  <ContextSelectorMenuList isOpen={isOpen}>{children}</ContextSelectorMenuList>\n                </ContextSelectorContext.Provider>\n              </FocusTrap>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"file":"ContextSelector.js"}