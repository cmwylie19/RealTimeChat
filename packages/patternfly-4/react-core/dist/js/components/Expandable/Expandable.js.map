{"version":3,"sources":["../../../../src/components/Expandable/Expandable.tsx"],"names":["Expandable","props","state","isExpanded","onToggleProp","onToggle","isFocused","isHovered","isActive","className","toggleText","children","propOrStateIsExpanded","undefined","setState","styles","expandable","modifiers","expanded","expandableToggle","focus","hover","active","expandableToggleIcon","expandableContent","React","Component"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBaA,U;;;;;AACX,sBAAYC,KAAZ,EAAoC;AAAA;;AAAA;;AAClC,oFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAEF,KAAK,CAACE;AADP,KAAb;AAHkC;AAMnC;;;;6BAWQ;AAAA;;AAAA,wBAWH,KAAKF,KAXF;AAAA,UAEKG,YAFL,eAELC,QAFK;AAAA,UAGLC,SAHK,eAGLA,SAHK;AAAA,UAILC,SAJK,eAILA,SAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMLC,SANK,eAMLA,SANK;AAAA,UAOLC,UAPK,eAOLA,UAPK;AAAA,UAQLC,QARK,eAQLA,QARK;AAAA,UASLR,UATK,eASLA,UATK;AAAA,UAUFF,KAVE;;AAYP,UAAII,QAAQ,GAAGD,YAAf;AACA,UAAIQ,qBAAqB,GAAGT,UAA5B,CAbO,CAeP;;AACA,UAAIA,UAAU,KAAKU,SAAnB,EAA8B;AAC5BD,QAAAA,qBAAqB,GAAG,KAAKV,KAAL,CAAWC,UAAnC;;AACAE,QAAAA,QAAQ,GAAG,oBAAM;AACfD,UAAAA,YAAY;;AACZ,UAAA,MAAI,CAACU,QAAL,CAAc;AAAEX,YAAAA,UAAU,EAAE,CAAC,MAAI,CAACD,KAAL,CAAWC;AAA1B,WAAd;AACD,SAHD;AAID;;AAED,aACE,wCAASF,KAAT;AAAgB,QAAA,SAAS,EAAE,sBAAIc,uBAAOC,UAAX,EAAuBJ,qBAAqB,IAAIG,uBAAOE,SAAP,CAAiBC,QAAjE,EAA2ET,SAA3E;AAA3B,UACE;AACE,QAAA,SAAS,EAAE,sBACTM,uBAAOI,gBADE,EAETb,SAAS,IAAIS,uBAAOE,SAAP,CAAiBG,KAFrB,EAGTb,SAAS,IAAIQ,uBAAOE,SAAP,CAAiBI,KAHrB,EAITb,QAAQ,IAAIO,uBAAOE,SAAP,CAAiBK,MAJpB,CADb;AAOE,QAAA,IAAI,EAAC,QAPP;AAQE,yBAAeV,qBARjB;AASE,QAAA,OAAO,EAAEP;AATX,SAWE,oBAAC,0BAAD;AAAgB,QAAA,SAAS,EAAE,sBAAIU,uBAAOQ,oBAAX,CAA3B;AAA6D;AAA7D,QAXF,EAYE,kCAAOb,UAAP,CAZF,CADF,EAeE;AAAK,QAAA,SAAS,EAAE,sBAAIK,uBAAOS,iBAAX,CAAhB;AAA+C,QAAA,MAAM,EAAE,CAACZ;AAAxD,SACGD,QADH,CAfF,CADF;AAqBD;;;;EA/D6Bc,KAAK,CAACC,S;;;;gBAAzB1B,U;AArBXW,EAAAA,Q;AAEAF,EAAAA,S;AAEAN,EAAAA,U;AAEAO,EAAAA,U;AAEAL,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,Q;;;gBAOWR,U,kBASW;AACpBS,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,UAAU,EAAE,EAFQ;AAGpBL,EAAAA,QAAQ,EAAE;AAAA,WAAWQ,SAAX;AAAA,GAHU;AAIpBP,EAAAA,SAAS,EAAE,KAJS;AAKpBE,EAAAA,QAAQ,EAAE,KALU;AAMpBD,EAAAA,SAAS,EAAE;AANS,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Expandable/expandable';\nimport { css } from '@patternfly/react-styles';\nimport { AngleRightIcon } from '@patternfly/react-icons';\n\nexport interface ExpandableProps {\n  /** Content rendered inside the Expandable Component */\n  children: React.ReactNode;\n  /** Additional classes added to the Expandable Component */\n  className?: string;\n  /** Flag to indicate if the content is expanded */\n  isExpanded?: boolean;\n  /** Text that appears in the  toggle */\n  toggleText?: string;\n  /** Callback function to toggle the expandable content */\n  onToggle?: () => void;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n}\n\ninterface ExpandableState {\n  isExpanded: boolean;\n}\n\nexport class Expandable extends React.Component<ExpandableProps, ExpandableState> {\n  constructor(props: ExpandableProps) {\n    super(props);\n\n    this.state = {\n      isExpanded: props.isExpanded\n    };\n  }\n\n  static defaultProps = {\n    className: '',\n    toggleText: '',\n    onToggle: (): any => undefined,\n    isFocused: false,\n    isActive: false,\n    isHovered: false\n  };\n\n  render() {\n    const {\n      onToggle: onToggleProp,\n      isFocused,\n      isHovered,\n      isActive,\n      className,\n      toggleText,\n      children,\n      isExpanded,\n      ...props\n    } = this.props;\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded;\n\n    // uncontrolled\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n      onToggle = () => {\n        onToggleProp();\n        this.setState({ isExpanded: !this.state.isExpanded });\n      };\n    }\n\n    return (\n      <div {...props} className={css(styles.expandable, propOrStateIsExpanded && styles.modifiers.expanded, className)}>\n        <button\n          className={css(\n            styles.expandableToggle,\n            isFocused && styles.modifiers.focus,\n            isHovered && styles.modifiers.hover,\n            isActive && styles.modifiers.active\n          )}\n          type=\"button\"\n          aria-expanded={propOrStateIsExpanded}\n          onClick={onToggle}\n        >\n          <AngleRightIcon className={css(styles.expandableToggleIcon)} aria-hidden />\n          <span>{toggleText}</span>\n        </button>\n        <div className={css(styles.expandableContent)} hidden={!propOrStateIsExpanded}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n"],"file":"Expandable.js"}