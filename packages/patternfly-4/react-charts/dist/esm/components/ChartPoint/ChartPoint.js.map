{"version":3,"sources":["../../../../src/components/ChartPoint/ChartPoint.tsx"],"names":["React","Helpers","Path","PathHelpers","ChartPoint","active","className","clipPath","datum","events","pathComponent","role","shapeRendering","transform","rest","getPath","props","x","y","size","evaluateProp","pathFunctions","circle","square","diamond","triangleDown","triangleUp","plus","minus","star","dash","threshold","symbol","symbolFunction","cloneElement","d","style","evaluateStyle","data","id","index","origin","polar","scale"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Helpers, Path } from 'victory-core';\nimport { PathHelpers } from './path-helpers';\n\nexport interface ChartPointProps {\n  /**\n   * A flag signifying whether the component is active\n   */\n  active?: boolean;\n  /**\n   * The class name that will be applied to the rendered element\n   */\n  className?: string;\n  /**\n   * TRhe clip path\n   */\n  clipPath?: string;\n  /**\n   * The entire dataset\n   */\n  data?: any[];\n  /**\n   * The data point corresponding to this point\n   */\n  datum?: any;\n  /**\n   * Events to attach to the rendered element\n   */\n  events?: any;\n  /**\n   * A function to return symbol paths\n   */\n  getPath?: Function;\n  /**\n   * An id to apply to the rendered component\n   */\n  id?: number | string;\n  /**\n   * The index of this point within the dataset\n   */\n  index?: number | string;\n  /**\n   * The svg coordinates of the center point of a polar chart\n   */\n  origin?: { x?: number, y?: number };\n  /**\n   * The rendered path element\n   */\n  pathComponent?: React.ReactElement<any>;\n  /**\n   * A flag specifying whether the component is part of a polar chart\n   */\n  polar?: boolean;\n  /**\n   * The aria role to assign to the element\n   */\n  role?: string;\n  /**\n   * The x and y scale of the parent chart with domain and range applied\n   */\n  scale?: any;\n  /**\n   * The shape rendering attribute to apply to the rendered path\n   */\n  shapeRendering?: string;\n  /**\n   * The size of the point\n   */\n  size?: number | Function;\n  /**\n   * The styles to apply to the rendered element\n   */\n  style?: any;\n  /**\n   * The 'circle', 'diamond', 'plus', 'minus', 'square', 'star', 'triangleDown', 'triangleUp', or 'dash' which symbol\n   * the point should render\n   */\n  symbol?: 'circle' | 'diamond' | 'plus' | 'minus' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | 'dash' |\n    'threshold' | Function;\n  /**\n   * A transform that will be supplied to elements this component renders\n   */\n  transform?: string;\n  /**\n   * The x coordinate of the center of the point\n   */\n  x?: number;\n  /**\n   * The y coordinate of the center of the point\n   */\n  y?: number;\n}\n\nexport const ChartPoint: React.FunctionComponent<ChartPointProps> = ({\n  active,\n  className,\n  clipPath,\n  datum,\n  events,\n  pathComponent = <Path />,\n  role,\n  shapeRendering,\n  transform,\n  ...rest\n}: ChartPointProps) => {\n  const getPath = (props: ChartPointProps) => {\n    const { datum, active, x, y } = props;\n    const size = Helpers.evaluateProp(props.size, datum, active);\n    if (props.getPath) {\n      return props.getPath(x, y, size);\n    }\n    const pathFunctions: any = {\n      circle: PathHelpers.circle,\n      square: PathHelpers.square,\n      diamond: PathHelpers.diamond,\n      triangleDown: PathHelpers.triangleDown,\n      triangleUp: PathHelpers.triangleUp,\n      plus: PathHelpers.plus,\n      minus: PathHelpers.minus,\n      star: PathHelpers.star,\n      dash: PathHelpers.dash,\n      threshold: PathHelpers.threshold\n    };\n    const symbol = Helpers.evaluateProp(props.symbol, datum, active);\n    const symbolFunction = typeof pathFunctions[symbol] === 'function' ? pathFunctions[symbol] : pathFunctions.circle;\n    return symbolFunction(x, y, size);\n  };\n\n  return React.cloneElement(pathComponent, {\n    className,\n    clipPath,\n    d: getPath({datum, active, ...rest}),\n    events,\n    role,\n    shapeRendering,\n    style: Helpers.evaluateStyle(rest.style, datum, active),\n    transform\n  });\n};\n"],"file":"ChartPoint.js"}