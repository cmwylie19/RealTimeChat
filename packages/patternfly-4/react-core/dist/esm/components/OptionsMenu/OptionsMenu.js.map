{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenu.tsx"],"names":["React","styles","DropdownContext","DropdownWithContext","OptionsMenuPosition","OptionsMenuDirection","OptionsMenu","className","menuItems","toggle","isText","isGrouped","id","ref","props","onSelect","undefined","toggleIconClass","optionsMenuToggleIcon","toggleTextClass","optionsMenuToggleText","menuClass","optionsMenuMenu","itemClass","optionsMenuMenuItem","toggleClass","optionsMenuToggleButton","optionsMenuToggle","baseClass","optionsMenu","disabledClass","modifiers","disabled","menuComponent","baseComponent","isPlain","isOpen","ariaLabelMenu","position","direction"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AAEA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,mBAAT,QAAoC,iCAApC;AAEA,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAKZ,WAAYC,oBAAZ;;WAAYA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;GAAAA,oB,KAAAA,oB;;AA8BZ,OAAO,MAAMC,WAAsD,GAAG;AAAA,MAAC;AACrEC,IAAAA,SAAS,GAAG,EADyD;AAErEC,IAAAA,SAFqE;AAGrEC,IAAAA,MAHqE;AAIrEC,IAAAA,MAAM,GAAG,KAJ4D;AAKrEC,IAAAA,SAAS,GAAG,KALyD;AAMrEC,IAAAA,EANqE;AAOrEC,IAAAA;AAPqE,GAAD;AAAA,MAQjEC,KARiE;;AAAA,SAUlE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAC/BF,MAAAA,EAD+B;AAE/BG,MAAAA,QAAQ,EAAE,MAAMC,SAFe;AAG/BC,MAAAA,eAAe,EAAEhB,MAAM,CAACiB,qBAHO;AAI/BC,MAAAA,eAAe,EAAElB,MAAM,CAACmB,qBAJO;AAK/BC,MAAAA,SAAS,EAAEpB,MAAM,CAACqB,eALa;AAM/BC,MAAAA,SAAS,EAAEtB,MAAM,CAACuB,mBANa;AAO/BC,MAAAA,WAAW,EAAEf,MAAM,GAAGT,MAAM,CAACyB,uBAAV,GAAoCzB,MAAM,CAAC0B,iBAP/B;AAQ/BC,MAAAA,SAAS,EAAE3B,MAAM,CAAC4B,WARa;AAS/BC,MAAAA,aAAa,EAAE7B,MAAM,CAAC8B,SAAP,CAAiBC,QATD;AAU/BC,MAAAA,aAAa,EAAE,IAVgB;AAW/BC,MAAAA,aAAa,EAAE;AAXgB;AAAjC,KAaE,oBAAC,mBAAD,eACMpB,KADN;AAEE,IAAA,EAAE,EAAEF,EAFN;AAGE,IAAA,aAAa,EAAEJ,SAHjB;AAIE,IAAA,SAAS,EAAED,SAJb;AAKE,IAAA,SAAS,EAAEI,SALb;AAME,IAAA,MAAM,EAAEF;AANV,KAbF,CAVkE;AAAA,CAA/D;;AAvBLF,EAAAA,S;AAEAK,EAAAA,E;AAEAJ,EAAAA,S;AAEAC,EAAAA,M;AAEA0B,EAAAA,O;AAEAC,EAAAA,M;AAEA1B,EAAAA,M;AAEAC,EAAAA,S;AAEA0B,EAAAA,a;AAEAC,EAAAA,Q,aAAW,O,EAAU,M;AAErBC,EAAAA,S,aAAY,I,EAAO,M","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\n\nexport enum OptionsMenuPosition {\n  right = 'right',\n  left = 'left'\n}\n\nexport enum OptionsMenuDirection {\n  up = 'up',\n  down = 'down'\n}\n\nexport interface OptionsMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the Options menu */\n  className?: string;\n  /** Id of the root element of the Options menu */\n  id: string;\n  /** Array of OptionsMenuItem and/or OptionMenuItemGroup nodes that will be rendered in the Options menu list */\n  menuItems: React.ReactNode[];\n  /** Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the Options menu */\n  toggle: React.ReactElement;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n  /** Flag to indicate if menu is groupped */\n  isGrouped?: boolean;\n  /** Provides an accessible name for the Options menu */\n  ariaLabelMenu?: string;\n  /** Indicates where menu will be aligned horizontally */\n  position?: 'right' | 'left';\n  /** Menu will open up or open down from the Options menu toggle */\n  direction?: 'up' | 'down';\n}\n\nexport const OptionsMenu: React.FunctionComponent<OptionsMenuProps> = ({\n  className = '',\n  menuItems,\n  toggle,\n  isText = false,\n  isGrouped = false,\n  id,\n  ref,\n  ...props\n}: OptionsMenuProps) => (\n    <DropdownContext.Provider value={{\n      id,\n      onSelect: () => undefined,\n      toggleIconClass: styles.optionsMenuToggleIcon,\n      toggleTextClass: styles.optionsMenuToggleText,\n      menuClass: styles.optionsMenuMenu,\n      itemClass: styles.optionsMenuMenuItem,\n      toggleClass: isText ? styles.optionsMenuToggleButton : styles.optionsMenuToggle,\n      baseClass: styles.optionsMenu,\n      disabledClass: styles.modifiers.disabled,\n      menuComponent: 'ul',\n      baseComponent: 'div'\n    }}>\n      <DropdownWithContext\n        {...props}\n        id={id}\n        dropdownItems={menuItems}\n        className={className}\n        isGrouped={isGrouped}\n        toggle={toggle}\n      />\n    </DropdownContext.Provider>\n);\n"],"file":"OptionsMenu.js"}