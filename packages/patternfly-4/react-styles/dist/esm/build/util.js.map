{"version":3,"sources":["../../../src/build/util.js"],"names":["path","readFileSync","css","outputFileSync","ensureDir","relative","getCSSClasses","isModifier","formatClassName","packageName","styleSheetToken","cssToJS","cssString","cssOutputPath","useModules","cssRequire","cssImport","cssToJSNew","cssClasses","distinctValues","Set","classDeclaration","modifiersDeclaration","forEach","className","key","cleanClass","replace","trim","push","classSection","length","join","getFullCSS","pathToCSSFile","rawCss","getCSS","minifyCSS","stringify","parse","compress","writeCSSFile","destinationPath","contents","dirname","then","replacementString","writeCSSJSFile","rootPath","originalPath","getRelativeImportPath","from","to","parsedTo","newImportPath","normalize","dir","base","startsWith","getCSSOutputPath","outDir","resolve","getFormattedCSSOutputPath","name","formattedDir","nodeText","nodeIndex","lastIndexOf","substring"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { readFileSync } from 'fs';\nimport css from 'css';\nimport { outputFileSync, ensureDir } from 'fs-extra';\nimport relative from 'relative';\nimport { getCSSClasses, isModifier, formatClassName } from '../utils';\n\nexport const packageName = '@patternfly/react-styles';\nexport const styleSheetToken = 'StyleSheet';\n\nexport function cssToJS(cssString, cssOutputPath = '', useModules = false) {\n  let cssRequire = '';\n  let cssImport = '';\n  if (cssOutputPath) {\n    cssRequire = `require('${cssOutputPath}');`;\n    cssImport = `import '${cssOutputPath}';`;\n  }\n  if (useModules) {\n    return `import { ${styleSheetToken} } from '${packageName}';\n${cssImport}\n\nexport default ${styleSheetToken}.parse(\\`${cssString}\\`);\n`;\n  }\n\n  return `const { ${styleSheetToken} } = require('${packageName}');\n${cssRequire}\n\nmodule.exports = ${styleSheetToken}.parse(\\`${cssString}\\`);\n`;\n}\n\nexport function cssToJSNew(cssString, cssOutputPath = '', useModules = false) {\n  let cssRequire = '';\n  let cssImport = '';\n  if (cssOutputPath) {\n    cssRequire = `require('${cssOutputPath}');`;\n    cssImport = `import '${cssOutputPath}';`;\n  }\n\n  const cssClasses = getCSSClasses(cssString);\n  const distinctValues = [...new Set(cssClasses)];\n  const classDeclaration = [];\n  const modifiersDeclaration = [];\n\n  distinctValues.forEach(className => {\n    const key = formatClassName(className);\n    const cleanClass = className.replace('.', '').trim();\n    if (isModifier(className)) {\n      modifiersDeclaration.push(`'${key}': '${cleanClass}'`);\n    } else {\n      classDeclaration.push(`${key}: '${cleanClass}'`);\n    }\n  });\n  const classSection = classDeclaration.length > 0 ? `${classDeclaration.join(',\\n  ')},` : '';\n\n  if (useModules) {\n    return `${cssImport}\n\nexport default {\n  ${classSection}\n  modifiers: {\n    ${modifiersDeclaration.join(',\\n    ')}\n  }\n}\n`;\n  }\n\n  return `${cssRequire}\n\nmodule.exports = {\n  ${classSection}\n  modifiers: {\n    ${modifiersDeclaration.join(',\\n    ')}\n  }\n}\n\n`;\n}\n\nexport function getFullCSS(pathToCSSFile) {\n  const rawCss = readFileSync(pathToCSSFile, 'utf8').replace('@charset \"UTF-8\";', '');\n  return rawCss;\n}\n\nexport function getCSS(pathToCSSFile) {\n  const rawCss = readFileSync(pathToCSSFile, 'utf8').replace('@charset \"UTF-8\";', '');\n  return minifyCSS(rawCss);\n}\n\nexport function minifyCSS(cssString) {\n  return css.stringify(css.parse(cssString.replace('@charset \"UTF-8\";', '')), {\n    compress: true\n  });\n}\n\nexport function writeCSSFile(destinationPath, contents) {\n  ensureDir(path.dirname(destinationPath)).then(() => {\n    const replacementString = contents.replace(/..\\/..\\/assets/g, '../../../../../styles/assets');\n    outputFileSync(destinationPath, replacementString);\n  });\n}\n\nexport function writeCSSJSFile(rootPath, originalPath, destinationPath, contents) {\n  outputFileSync(destinationPath, contents);\n}\n\nexport function getRelativeImportPath(from, to) {\n  const parsedTo = path.parse(to);\n  const newImportPath = path.normalize(path.join(relative(from, parsedTo.dir), parsedTo.base));\n  return newImportPath.startsWith('.') ? newImportPath : `./${newImportPath}`;\n}\n\nexport function getCSSOutputPath(outDir, rootPath, pathToCSSFile) {\n  return path.join(path.resolve(rootPath, outDir), getFormattedCSSOutputPath(pathToCSSFile));\n}\n\nfunction getFormattedCSSOutputPath(pathToCSSFile) {\n  const { dir, name } = path.parse(pathToCSSFile);\n  let formattedDir = dir;\n  const nodeText = 'node_modules';\n  const nodeIndex = formattedDir.lastIndexOf(nodeText);\n  if (nodeIndex !== -1) {\n    formattedDir = formattedDir.substring(nodeIndex + nodeText.length);\n  }\n  return path.join(formattedDir, `${name}.css`);\n}\n"],"file":"util.js"}