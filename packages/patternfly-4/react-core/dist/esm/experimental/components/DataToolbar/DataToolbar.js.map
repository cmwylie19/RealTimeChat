{"version":3,"sources":["../../../../../src/experimental/components/DataToolbar/DataToolbar.tsx"],"names":["React","styles","css","DataToolbarExpandableContent","DataToolbarContext","DataToolbar","Component","constructor","props","createRef","setState","prevState","componentManagedIsExpanded","state","isConsumerManagedToggleGroup","isExpanded","toggleIsExpanded","componentDidMount","window","addEventListener","closeExpandableContent","componentWillUnmount","removeEventListener","render","className","children","id","expandableContentId","dataToolbar","expandableContentRef"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,4BAAT,QAA6C,gCAA7C;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AAsBA,OAAO,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA8E;AAOnFC,EAAAA,WAAW,CAACC,KAAD,EAA0B;AACnC,UAAMA,KAAN;;AADmC,kDANNR,KAAK,CAACS,SAAN,EAMM;;AAAA,8CASlB,MAAM;AACvB,WAAKC,QAAL,CAAeC,SAAD,KAAgB;AAC5BC,QAAAA,0BAA0B,EAAE,CAACD,SAAS,CAACC;AADX,OAAhB,CAAd;AAGD,KAboC;;AAAA,oDAeZ,MAAM;AAC7B,WAAKF,QAAL,CAAc,OAAO;AACnBE,QAAAA,0BAA0B,EAAE;AADT,OAAP,CAAd;AAGD,KAnBoC;;AAGnC,SAAKC,KAAL,GAAa;AACXC,MAAAA,4BAA4B,EAAEN,KAAK,CAACO,UAAN,IAAoB,CAAC,CAACP,KAAK,CAACQ,gBAD/C;AAEXJ,MAAAA,0BAA0B,EAAE;AAFjB,KAAb;AAID;;AAcDK,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEH,MAAAA;AAAF,QAAmC,KAAKD,KAA9C;;AAEA,QAAK,CAACC,4BAAN,EAAqC;AACnCI,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,sBAAvC;AACD;AACF;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AAAEP,MAAAA;AAAF,QAAmC,KAAKD,KAA9C;;AACA,QAAIC,4BAAJ,EAAkC;AAChCI,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqC,KAAKF,sBAA1C;AACD;AACF;;AAEDG,EAAAA,MAAM,GAAG;AAEP,wBAA2E,KAAKf,KAAhF;AAAA,UAAM;AAAEgB,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBV,MAAAA,UAAvB;AAAmCC,MAAAA,gBAAnC;AAAqDU,MAAAA;AAArD,KAAN;AAAA,UAAkElB,KAAlE;;AACA,UAAM;AAAEM,MAAAA,4BAAF;AAAgCF,MAAAA;AAAhC,QAA+D,KAAKC,KAA1E;AAEA,UAAMc,mBAAmB,GAAI,GAAED,EAAG,qBAAlC;AAEA,WACE;AAAK,MAAA,SAAS,EAAExB,GAAG,CAACD,MAAM,CAAC2B,WAAR,EAAqBJ,SAArB,CAAnB;AAAoD,MAAA,EAAE,EAAEE;AAAxD,OAAgElB,KAAhE,GACE,oBAAC,kBAAD,CAAoB,QAApB;AACE,MAAA,KAAK,EACH;AACEO,QAAAA,UAAU,EAAED,4BAA4B,GAAGC,UAAH,GAAgBH,0BAD1D;AAEEI,QAAAA,gBAAgB,EAAEF,4BAA4B,GAAGE,gBAAH,GAAsB,KAAKA,gBAF3E;AAGEa,QAAAA,oBAAoB,EAAE,KAAKA,oBAH7B;AAIEF,QAAAA;AAJF;AAFJ,OAUGF,QAVH,CADF,EAaE,oBAAC,4BAAD;AACE,MAAA,EAAE,EAAEE,mBADN;AAEE,MAAA,UAAU,EAAEb,4BAA4B,GAAGC,UAAH,GAAgBH,0BAF1D;AAGE,MAAA,oBAAoB,EAAE,KAAKiB;AAH7B,MAbF,CADF;AAqBD;;AAvEkF;;gBAAxExB,W;AAlBXmB,EAAAA,S;AAEAC,EAAAA,Q;AAEAV,EAAAA,U;AAEAC,EAAAA,gB;AAEAU,EAAAA,E;;;gBAUWrB,W,kBAGW;AACpBU,EAAAA,UAAU,EAAE;AADQ,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DataToolbar/data-toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { DataToolbarExpandableContent } from './DataToolbarExpandableContent';\nimport { DataToolbarContext } from './DataToolbarUtils';\n\nexport interface DataToolbarProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the Data toolbar */\n  className?: string;\n  /** Content to be rendered as rows in the Data toolbar */\n  children?: React.ReactNode;\n  /** Flag indicating if a Data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** A callback for setting the isExpanded flag */\n  toggleIsExpanded?: () => void;\n  /** Id of the Data toolbar */\n  id: string;\n}\n\nexport interface DataToolbarState {\n  /** Flag indicating the if the expandable content's expanded state is consumer managed or not */\n  isConsumerManagedToggleGroup: boolean;\n  /** Flag indicating if the component managed state has expanded content or not */\n  componentManagedIsExpanded: boolean;\n}\n\nexport class DataToolbar extends React.Component<DataToolbarProps, DataToolbarState> {\n  private expandableContentRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps = {\n    isExpanded: false\n  };\n\n  constructor(props: DataToolbarProps) {\n    super(props);\n\n    this.state = {\n      isConsumerManagedToggleGroup: props.isExpanded || !!props.toggleIsExpanded,\n      componentManagedIsExpanded: false\n    };\n  }\n\n  toggleIsExpanded = () => {\n    this.setState((prevState) => ({\n      componentManagedIsExpanded: !prevState.componentManagedIsExpanded\n    }));\n  }\n\n  closeExpandableContent = () => {\n    this.setState(() => ({\n      componentManagedIsExpanded: false\n    }));\n  }\n\n  componentDidMount() {\n    const { isConsumerManagedToggleGroup } = this.state;\n\n    if ( !isConsumerManagedToggleGroup ) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    const { isConsumerManagedToggleGroup } = this.state;\n    if (isConsumerManagedToggleGroup) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  render() {\n\n    const { className, children, isExpanded, toggleIsExpanded, id, ...props} = this.props;\n    const { isConsumerManagedToggleGroup, componentManagedIsExpanded } = this.state;\n\n    const expandableContentId = `${id}-expandable-content`;\n\n    return (\n      <div className={css(styles.dataToolbar, className)} id={id} {...props}>\n        <DataToolbarContext.Provider\n          value={\n            {\n              isExpanded: isConsumerManagedToggleGroup ? isExpanded : componentManagedIsExpanded,\n              toggleIsExpanded: isConsumerManagedToggleGroup ? toggleIsExpanded : this.toggleIsExpanded,\n              expandableContentRef: this.expandableContentRef,\n              expandableContentId\n            }\n          }\n        >\n          {children}\n        </DataToolbarContext.Provider>\n        <DataToolbarExpandableContent\n          id={expandableContentId}\n          isExpanded={isConsumerManagedToggleGroup ? isExpanded : componentManagedIsExpanded}\n          expandableContentRef={this.expandableContentRef}\n        />\n      </div>\n    );\n  }\n\n}\n"],"file":"DataToolbar.js"}