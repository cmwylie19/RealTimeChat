{"version":3,"sources":["../../../../../src/experimental/components/DataToolbar/DataToolbarToggleGroup.tsx"],"names":["DataToolbarToggleGroup","viewportSize","window","innerWidth","lgBreakpointValue","parseInt","globalBreakpointLg","value","props","toggleIcon","breakpoint","variant","breakpointMods","spacers","className","children","isExpanded","toggleIsExpanded","expandableContentRef","expandableContentId","styles","dataToolbarGroup","dataToolbarToggle","isContentPopup","ReactDOM","createPortal","current","React","Component"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASaA,sB;;;;;;;;;;;;;;;;;;qEAOM,YAAM;AACrB,UAAMC,YAAY,GAAGC,MAAM,CAACC,UAA5B;AACA,UAAMC,iBAAiB,GAAGC,QAAQ,CAACC,kCAAmBC,KAApB,CAAlC;AACA,aAAON,YAAY,GAAGG,iBAAtB;AACD,K;;;;;;;6BAEQ;AAAA;;AAAA,wBAC6F,KAAKI,KADlG;AAAA,UACCC,UADD,eACCA,UADD;AAAA,UACaC,UADb,eACaA,UADb;AAAA,UACyBC,OADzB,eACyBA,OADzB;AAAA,UACkCC,cADlC,eACkCA,cADlC;AAAA,UACkDC,OADlD,eACkDA,OADlD;AAAA,UAC2DC,SAD3D,eAC2DA,SAD3D;AAAA,UACsEC,QADtE,eACsEA,QADtE;AAAA,UACmFP,KADnF;;AAGP,aACE,oBAAC,oCAAD,CAAoB,QAApB,QACG,gBAAgF;AAAA,YAA7EQ,UAA6E,QAA7EA,UAA6E;AAAA,YAAjEC,gBAAiE,QAAjEA,gBAAiE;AAAA,YAA/CC,oBAA+C,QAA/CA,oBAA+C;AAAA,YAAzBC,mBAAyB,QAAzBA,mBAAyB;AAC/E,eACE;AACE,UAAA,SAAS,EAAE,sBACTC,wBAAOC,gBADE,EAETV,OAAO,IAAI,8BAAYS,uBAAZ,EAAoBT,OAApB,CAFF,EAGT,gCAAqBC,cAArB,EAAqCQ,uBAArC,CAHS,EAIT,qCAAcP,OAAd,EAAuB,kBAAvB,CAJS,EAKT,8BAAYO,uBAAZ,EAAoB,cAApB,CALS,EAMT,8BAAYA,uBAAZ,sBAAiCV,UAAjC,EANS,EAOTI,SAPS;AADb,WASMN,KATN,GAWE;AAAK,UAAA,SAAS,EAAE,sBAAIY,wBAAOE,iBAAX;AAAhB,WACE,oBAAC,cAAD;AACE,UAAA,OAAO,EAAC,OADV;AAEE,UAAA,OAAO,EAAEL;AAFX,WAGMD,UAAU,IAAI;AAAE,2BAAiB;AAAnB,SAHpB;AAIE,2BAAeA,UAAU,IAAI,MAAI,CAACO,cAAL,EAJ/B;AAKE,2BAAeJ;AALjB,YAOGV,UAPH,CADF,CAXF,EAsBGO,UAAU,GAAGQ,QAAQ,CAACC,YAAT,CAAsBV,QAAtB,EAAgCG,oBAAoB,CAACQ,OAArD,CAAH,GAAmEX,QAtBhF,CADF;AA0BD,OA5BH,CADF;AAgCD;;;;EAhDyCY,KAAK,CAACC,S;;;;gBAArC5B,sB;AALXS,EAAAA,U;AAEAC,EAAAA,U,+BAAY,I,EAAO,I,EAAO,I,EAAO,K;;;gBAGtBV,sB,kBAEW;AACpBY,EAAAA,cAAc,EAAE,EADI;AAEpBC,EAAAA,OAAO,EAAE;AAFW,C","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/DataToolbar/data-toolbar';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { DataToolbarGroupProps } from './DataToolbarGroup';\nimport { DataToolbarContext } from './DataToolbarUtils';\nimport { Button } from '../../../components/Button';\nimport { global_breakpoint_lg as globalBreakpointLg } from '@patternfly/react-tokens';\n\nimport {\n  DataToolbarBreakpointMod,\n  DataToolbarSpacer,\n  formatSpacers\n} from './DataToolbarUtils';\nimport { formatBreakpointMods } from '../../../helpers/util';\n\nexport interface DataToolbarToggleGroupProps extends DataToolbarGroupProps {\n  /** An Icon to be rendered when the toggle group has collapsed down */\n  toggleIcon: React.ReactNode;\n  /** The breakpoint at which the toggle group is collapsed down */\n  breakpoint: 'md' | 'lg' | 'xl' | '2xl';\n}\n\nexport class DataToolbarToggleGroup extends React.Component<DataToolbarToggleGroupProps> {\n\n  static defaultProps = {\n    breakpointMods: [] as DataToolbarBreakpointMod[],\n    spacers: [] as DataToolbarSpacer[],\n  };\n\n  isContentPopup = () => {\n    const viewportSize = window.innerWidth;\n    const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n    return viewportSize < lgBreakpointValue;\n  }\n\n  render() {\n    const { toggleIcon, breakpoint, variant, breakpointMods, spacers, className, children, ...props } = this.props;\n\n    return (\n      <DataToolbarContext.Consumer>\n        {({ isExpanded, toggleIsExpanded, expandableContentRef, expandableContentId}) => {\n          return (\n            <div\n              className={css(\n                styles.dataToolbarGroup,\n                variant && getModifier(styles, variant),\n                formatBreakpointMods(breakpointMods, styles),\n                formatSpacers(spacers, 'pf-m-space-items'),\n                getModifier(styles, 'toggle-group'),\n                getModifier(styles, `reveal-on-${breakpoint}`),\n                className)}\n              {...props}\n            >\n              <div className={css(styles.dataToolbarToggle)}>\n                <Button\n                  variant=\"plain\"\n                  onClick={toggleIsExpanded}\n                  {...isExpanded && { 'aria-expanded': true }}\n                  aria-haspopup={isExpanded && this.isContentPopup()}\n                  aria-controls={expandableContentId}\n                >\n                  {toggleIcon}\n                </Button>\n              </div>\n              {isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current) : children}\n            </div>\n          );\n        }}\n      </DataToolbarContext.Consumer>\n    );\n  }\n}\n"],"file":"DataToolbarToggleGroup.js"}