{"version":3,"sources":["../../../../src/components/ChipGroup/Chip.tsx"],"names":["React","css","ChipButton","Tooltip","TimesCircleIcon","styles","GenerateId","Chip","Component","constructor","props","createRef","children","className","onClick","component","chip","modifiers","overflow","chipText","randomId","closeBtnAriaLabel","tooltipPosition","isReadOnly","state","isTooltipVisible","readOnly","span","componentDidMount","setState","Boolean","current","offsetWidth","scrollWidth","render","isOverflowChip","renderOverflowChip","renderChip","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { ChipButton } from './ChipButton';\nimport { OneOf } from '../../helpers/typeUtils';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { TimesCircleIcon } from '@patternfly/react-icons';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport GenerateId from '../../helpers/GenerateId/GenerateId';\n\nexport interface ChipProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the chip text */\n  children?: React.ReactNode;\n  /** Aria Label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag indicating if the chip has overflow */\n  isOverflowChip?: boolean;\n  /** Flag if chip is read only */\n  isReadOnly?: boolean;\n  /** Function that is called when clicking on the chip button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Internal flag for which component will be used for chip */\n  component?: React.ReactNode;\n  /** Position of the tooltip which is displayed if text is longer */\n  tooltipPosition?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n}\n\ninterface ChipState {\n  isTooltipVisible: boolean;\n}\n\nexport class Chip extends React.Component<ChipProps, ChipState> {\n  constructor(props: ChipProps) {\n    super(props);\n    this.state = {\n      isTooltipVisible: false\n    };\n  }\n  span = React.createRef<HTMLSpanElement>();\n\n  static defaultProps = {\n    closeBtnAriaLabel: 'close',\n    className: '',\n    isOverflowChip: false,\n    isReadOnly: false,\n    tooltipPosition: 'top',\n    onClick: () => undefined as any,\n    component: 'div'\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.span.current &&\n        this.span.current.offsetWidth < this.span.current.scrollWidth)\n    });\n  }\n\n  renderOverflowChip = () => {\n    const { children, className, onClick } = this.props;\n    const Component = this.props.component as any;\n    return (\n      <Component className={css(styles.chip, styles.modifiers.overflow, className)}>\n        <ChipButton onClick={onClick}>\n          <span className={css(styles.chipText)}>{children}</span>\n        </ChipButton>\n      </Component>\n    );\n  }\n\n  renderChip = (randomId: string) => {\n    const {\n      children,\n      closeBtnAriaLabel,\n      tooltipPosition,\n      className,\n      onClick,\n      isReadOnly\n    } = this.props;\n    const Component = this.props.component as any;\n    if (this.state.isTooltipVisible) {\n      return (\n        <Tooltip position={tooltipPosition} content={children}>\n          <Component className={css(styles.chip, isReadOnly && styles.modifiers.readOnly, className)}>\n            <span ref={this.span} className={css(styles.chipText)} id={randomId}>\n              {children}\n            </span>\n            {!isReadOnly && (\n              <ChipButton\n                onClick={onClick}\n                ariaLabel={closeBtnAriaLabel}\n                id={`remove_${randomId}`}\n                aria-labelledby={`remove_${randomId} ${randomId}`}\n              >\n                <TimesCircleIcon aria-hidden=\"true\" />\n              </ChipButton>\n            )}\n          </Component>\n        </Tooltip>\n      );\n    }\n    return (\n      <Component className={css(styles.chip, isReadOnly && styles.modifiers.readOnly, className)}>\n        <span ref={this.span} className={css(styles.chipText)} id={randomId}>\n          {children}\n        </span>\n        {!isReadOnly && (\n          <ChipButton\n            onClick={onClick}\n            ariaLabel={closeBtnAriaLabel}\n            id={`remove_${randomId}`}\n            aria-labelledby={`remove_${randomId} ${randomId}`}\n          >\n            <TimesCircleIcon aria-hidden=\"true\" />\n          </ChipButton>\n        )}\n      </Component>\n    );\n  }\n\n  render() {\n    const { isOverflowChip } = this.props;\n    return (\n      <GenerateId>{(randomId) => (isOverflowChip ? this.renderOverflowChip() : this.renderChip(randomId))}</GenerateId>\n    );\n  }\n}\n"],"file":"Chip.js"}