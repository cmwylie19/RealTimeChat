{"version":3,"sources":["../../../../src/components/Dropdown/DropdownItem.tsx"],"names":["DropdownItem","children","className","component","isDisabled","isHovered","href","tooltip","tooltipProps","onClick","ref","props","context"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAqBO,IAAMA,YAAwD,GAAG,SAA3DA,YAA2D;AAAA,2BACtEC,QADsE;AAAA,MACtEA,QADsE,8BAC3D,IAD2D;AAAA,4BAEtEC,SAFsE;AAAA,MAEtEA,SAFsE,+BAE1D,EAF0D;AAAA,4BAGtEC,SAHsE;AAAA,MAGtEA,SAHsE,+BAG1D,GAH0D;AAAA,6BAItEC,UAJsE;AAAA,MAItEA,UAJsE,gCAIzD,KAJyD;AAAA,4BAKtEC,SALsE;AAAA,MAKtEA,SALsE,+BAK1D,KAL0D;AAAA,uBAMtEC,IANsE;AAAA,MAMtEA,IANsE,0BAM/D,EAN+D;AAAA,0BAOtEC,OAPsE;AAAA,MAOtEA,OAPsE,6BAO5D,IAP4D;AAAA,+BAQtEC,YARsE;AAAA,MAQtEA,YARsE,kCAQvD,EARuD;AAAA,MAStEC,OATsE,QAStEA,OATsE;AAAA,MAUtEC,GAVsE,QAUtEA,GAVsE;AAAA,MAWnEC,KAXmE;;AAAA,SAatE,oBAAC,uCAAD,CAAsB,QAAtB,QACG,UAACC,OAAD;AAAA,WACC,oBAAC,0CAAD;AACE,MAAA,OAAO,EAAEA,OADX;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,QAAQ,EAAE,CAAC,CAHb;AAIE,MAAA,QAAQ,EAAEX,QAJZ;AAKE,MAAA,SAAS,EAAEC,SALb;AAME,MAAA,SAAS,EAAEC,SANb;AAOE,MAAA,UAAU,EAAEC,UAPd;AAQE,MAAA,SAAS,EAAEC,SARb;AASE,MAAA,IAAI,EAAEC,IATR;AAUE,MAAA,OAAO,EAAEC,OAVX;AAWE,MAAA,YAAY,EAAEC,YAXhB;AAYE,MAAA,OAAO,EAAEC;AAZX,OAaME,KAbN,EADD;AAAA,GADH,CAbsE;AAAA,CAAjE;;;;AAjBLV,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,U;AAEAC,EAAAA,S;AAEAC,EAAAA,I;AAEAC,EAAAA,O;AAEAC,EAAAA,Y","sourcesContent":["import * as React from 'react';\nimport { InternalDropdownItemProps, InternalDropdownItem } from './InternalDropdownItem';\nimport { DropdownArrowContext } from './dropdownConstants';\n\nexport interface DropdownItemProps extends InternalDropdownItemProps {\n  /** Anything which can be rendered as dropdown item */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown item */\n  className?: string;\n  /** Indicates which component will be used as dropdown item */\n  component?: React.ReactNode;\n  /** Render dropdown item as disabled option */\n  isDisabled?: boolean;\n  /** Forces display of the hover state of the element */\n  isHovered?: boolean;\n  /** Default hyperlink location */\n  href?: string;\n  /** Tooltip to display when hovered over the item */\n  tooltip?: React.ReactNode;\n  /** Additional tooltip props forwarded to the Tooltip component */\n  tooltipProps?: any;\n}\n\nexport const DropdownItem: React.FunctionComponent<DropdownItemProps> = ({\n  children = null,\n  className = '',\n  component = 'a',\n  isDisabled = false,\n  isHovered = false,\n  href = '',\n  tooltip = null,\n  tooltipProps = {},\n  onClick,\n  ref, // Types of Ref are different for React.FC vs React.Component\n  ...props\n}: DropdownItemProps) => (\n  <DropdownArrowContext.Consumer>\n    {(context) =>\n      <InternalDropdownItem\n        context={context}\n        role=\"menuitem\"\n        tabIndex={-1}\n        children={children}\n        className={className}\n        component={component}\n        isDisabled={isDisabled}\n        isHovered={isHovered}\n        href={href}\n        tooltip={tooltip}\n        tooltipProps={tooltipProps}\n        onClick={onClick}\n        {...props} />}\n  </DropdownArrowContext.Consumer>\n);\n"],"file":"DropdownItem.js"}