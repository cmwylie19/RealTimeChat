{"version":3,"sources":["../../../../src/components/DataList/DataListToggle.tsx"],"names":["React","css","AngleRightIcon","styles","Button","ButtonVariant","DataListToggle","className","isExpanded","ariaControls","ariaLabel","ariaLabelledBy","rowid","id","props","dataListItemControl","dataListToggle","plain"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,WAAtC;AAmBA,OAAO,MAAMC,cAA4D,GAAG;AAAA,MAAC;AAC3EC,IAAAA,SAAS,GAAG,EAD+D;AAE3EC,IAAAA,UAAU,GAAG,KAF8D;AAG3E,qBAAiBC,YAAY,GAAG,EAH2C;AAI3E,kBAAcC,SAAS,GAAG,SAJiD;AAK3E,uBAAmBC,cAAc,GAAG,EALuC;AAM3EC,IAAAA,KAAK,GAAG,EANmE;AAO3EC,IAAAA;AAP2E,GAAD;AAAA,MAQvEC,KARuE;;AAAA,SAU1E;AAAK,IAAA,SAAS,EAAEb,GAAG,CAACE,MAAM,CAACY,mBAAR,EAA6BR,SAA7B;AAAnB,KAAgEO,KAAhE,GACE;AAAK,IAAA,SAAS,EAAEb,GAAG,CAACE,MAAM,CAACa,cAAR;AAAnB,KACE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAEH,EADN;AAEE,IAAA,OAAO,EAAER,aAAa,CAACY,KAFzB;AAGE,qBAAeR,YAAY,KAAK,EAAjB,IAAuBA,YAHxC;AAIE,kBAAYC,SAJd;AAKE,uBAAiBA,SAAS,KAAK,SAAd,GAA0B,IAA1B,GAAkC,GAAEE,KAAM,IAAGC,EAAG,EALnE;AAME,qBAAeL;AANjB,KAQE,oBAAC,cAAD,OARF,CADF,CADF,CAV0E;AAAA,CAArE;;AAfLD,EAAAA,S;AAEAC,EAAAA,U;AAEAK,EAAAA,E;AAEAD,EAAAA,K;AAEA,mB;AAEA,c;AAEA,iB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { AngleRightIcon } from '@patternfly/react-icons';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\n\nexport interface DataListToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Identify the DataList toggle number */\n  id: string;\n  /** Id for the row */\n  rowid?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-labelledby'?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-label'?: string;\n  /** Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */\n  'aria-controls'?: string;\n}\n\nexport const DataListToggle: React.FunctionComponent<DataListToggleProps> = ({\n  className = '',\n  isExpanded = false,\n  'aria-controls': ariaControls = '',\n  'aria-label': ariaLabel = 'Details',\n  'aria-labelledby': ariaLabelledBy = '',\n  rowid = '',\n  id,\n  ...props\n}: DataListToggleProps) => (\n  <div className={css(styles.dataListItemControl, className)} {...props}>\n    <div className={css(styles.dataListToggle)}>\n      <Button\n        id={id}\n        variant={ButtonVariant.plain}\n        aria-controls={ariaControls !== '' && ariaControls}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel !== 'Details' ? null : `${rowid} ${id}`}\n        aria-expanded={isExpanded}\n      >\n        <AngleRightIcon />\n      </Button>\n    </div>\n  </div>\n);\n"],"file":"DataListToggle.js"}