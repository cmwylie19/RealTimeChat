{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelector.tsx"],"names":["React","styles","css","SearchIcon","ContextSelectorToggle","ContextSelectorMenuList","ContextSelectorContext","Button","ButtonVariant","TextInput","InputGroup","KEY_CODES","FocusTrap","require","currentId","newId","ContextSelector","Component","createRef","event","charCode","ENTER","props","onSearchButtonClick","render","toggleId","screenReaderLabelId","searchButtonId","children","className","isOpen","onToggle","onSelect","screenReaderLabel","toggleText","searchButtonAriaLabel","searchInputValue","onSearchInputChange","searchInputPlaceholder","contextSelector","modifiers","expanded","parentRef","current","contextSelectorMenu","clickOutsideDeactivates","contextSelectorMenuInput","onEnterPressed","control","undefined"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,0EAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,WAAtC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,yBAA1B,C,CAEA;AACA;AACA;;AACA,MAAMC,SAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B,C,CAEA;;;AACA,IAAIC,SAAS,GAAG,CAAhB;AACA,MAAMC,KAAK,GAAGD,SAAS,EAAvB;AA6BA,OAAO,MAAME,eAAN,SAA8BhB,KAAK,CAACiB,SAApC,CAAoE;AAAA;AAAA;;AAAA,uCAiB5BjB,KAAK,CAACkB,SAAN,EAjB4B;;AAAA,4CAmBvDC,KAAD,IAAgB;AAC/B,UAAIA,KAAK,CAACC,QAAN,KAAmBT,SAAS,CAACU,KAAjC,EAAwC;AACtC,aAAKC,KAAL,CAAWC,mBAAX;AACD;AACF,KAvBwE;AAAA;;AAyBzEC,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAI,iCAAgCV,KAAM,EAAxD;AACA,UAAMW,mBAAmB,GAAI,gCAA+BX,KAAM,EAAlE;AACA,UAAMY,cAAc,GAAI,wCAAuCZ,KAAM,EAArE;;AACA,wBAcI,KAAKO,KAdT;AAAA,UAAM;AACJM,MAAAA,QADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,QALI;AAMJC,MAAAA,iBANI;AAOJC,MAAAA,UAPI;AAQJC,MAAAA,qBARI;AASJC,MAAAA,gBATI;AAUJC,MAAAA,mBAVI;AAWJC,MAAAA,sBAXI;AAYJf,MAAAA;AAZI,KAAN;AAAA,UAaKD,KAbL;;AAeA,WACE;AACE,MAAA,SAAS,EAAEpB,GAAG,CAACD,MAAM,CAACsC,eAAR,EAAyBT,MAAM,IAAI7B,MAAM,CAACuC,SAAP,CAAiBC,QAApD,EAA8DZ,SAA9D,CADhB;AAEE,MAAA,GAAG,EAAE,KAAKa;AAFZ,OAGMpB,KAHN,GAKGW,iBAAiB,IAChB;AAAM,MAAA,EAAE,EAAEP,mBAAV;AAA+B,MAAA,MAAM;AAArC,OACGO,iBADH,CANJ,EAUE,oBAAC,qBAAD;AACE,MAAA,QAAQ,EAAEF,QADZ;AAEE,MAAA,MAAM,EAAED,MAFV;AAGE,MAAA,UAAU,EAAEI,UAHd;AAIE,MAAA,EAAE,EAAET,QAJN;AAKE,MAAA,SAAS,EAAE,KAAKiB,SAAL,CAAeC,OAL5B;AAME,yBAAkB,GAAEjB,mBAAoB,IAAGD,QAAS;AANtD,MAVF,EAkBGK,MAAM,IACL;AAAK,MAAA,SAAS,EAAE5B,GAAG,CAACD,MAAM,CAAC2C,mBAAR;AAAnB,OACGd,MAAM,IACL,oBAAC,SAAD;AAAW,MAAA,gBAAgB,EAAE;AAAEe,QAAAA,uBAAuB,EAAE;AAA3B;AAA7B,OACE;AAAK,MAAA,SAAS,EAAE3C,GAAG,CAACD,MAAM,CAAC6C,wBAAR;AAAnB,OACE,oBAAC,UAAD,QACE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAEV,gBADT;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,WAAW,EAAEE,sBAHf;AAIE,MAAA,QAAQ,EAAED,mBAJZ;AAKE,MAAA,UAAU,EAAE,KAAKU,cALnB;AAME,yBAAiBpB;AANnB,MADF,EASE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAEnB,aAAa,CAACwC,OADzB;AAEE,oBAAYb,qBAFd;AAGE,MAAA,EAAE,EAAER,cAHN;AAIE,MAAA,OAAO,EAAEJ;AAJX,OAME,oBAAC,UAAD;AAAY,qBAAY;AAAxB,MANF,CATF,CADF,CADF,EAqBE,oBAAC,sBAAD,CAAwB,QAAxB;AAAiC,MAAA,KAAK,EAAE;AAAES,QAAAA;AAAF;AAAxC,OACE,oBAAC,uBAAD;AAAyB,MAAA,MAAM,EAAEF;AAAjC,OAA0CF,QAA1C,CADF,CArBF,CAFJ,CAnBJ,CADF;AAoDD;;AAhGwE;;gBAA9DZ,e;AAzBXY,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,M;AAEAC,EAAAA,Q;AAEAC,EAAAA,Q;AAEAC,EAAAA,iB;AAEAC,EAAAA,U;AAEAC,EAAAA,qB;AAEAC,EAAAA,gB;AAIAE,EAAAA,sB;;;gBAKWtB,e,kBAEW;AACpBY,EAAAA,QAAQ,EAAE,IADU;AAEpBC,EAAAA,SAAS,EAAE,EAFS;AAGpBC,EAAAA,MAAM,EAAE,KAHY;AAIpBC,EAAAA,QAAQ,EAAE,MAAMkB,SAJI;AAKpBjB,EAAAA,QAAQ,EAAE,MAAMiB,SALI;AAMpBhB,EAAAA,iBAAiB,EAAE,EANC;AAOpBC,EAAAA,UAAU,EAAE,EAPQ;AAQpBC,EAAAA,qBAAqB,EAAE,mBARH;AASpBC,EAAAA,gBAAgB,EAAE,EATE;AAUpBC,EAAAA,mBAAmB,EAAE,MAAMY,SAVP;AAWpBX,EAAAA,sBAAsB,EAAE,QAXJ;AAYpBf,EAAAA,mBAAmB,EAAE,MAAM0B;AAZP,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\n\n// Can't use ES6 imports :(\n// The types for it are also wrong, we should probably ditch this dependency.\n// tslint:disable-next-line\nconst FocusTrap: any = require('focus-trap-react');\n\n// seed for the aria-labelledby ID\nlet currentId = 0;\nconst newId = currentId++;\n\nexport interface ContextSelectorProps {\n  /** content rendered inside the Context Selector */\n  children?: React.ReactNode;\n  /** Classes applied to root element of Context Selector */\n  className?: string;\n  /** Flag to indicate if Context Selector is opened */\n  isOpen?: boolean;\n  /** Function callback called when user clicks toggle button */\n  onToggle?: (value: boolean) => void;\n  /** Function callback called when user selects item */\n  onSelect?: (event: any, value: React.ReactNode) => void;\n  /** Labels the Context Selector for Screen Readers */\n  screenReaderLabel?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** aria-label for the Context Selector Search Button */\n  searchButtonAriaLabel?: string;\n  /** Value in the Search field */\n  searchInputValue?: string;\n  /** Function callback called when user changes the Search Input */\n  onSearchInputChange?(value: string): void;\n  /** Search Input placeholder */\n  searchInputPlaceholder?: string;\n  /** Function callback for when Search Button is clicked */\n  onSearchButtonClick?(event?: React.SyntheticEvent<HTMLButtonElement>): void;\n}\n\nexport class ContextSelector extends React.Component<ContextSelectorProps> {\n\n  static defaultProps = {\n    children: null as React.ReactNode,\n    className: '',\n    isOpen: false,\n    onToggle: () => undefined as any,\n    onSelect: () => undefined as any,\n    screenReaderLabel: '',\n    toggleText: '',\n    searchButtonAriaLabel: 'Search menu items',\n    searchInputValue: '',\n    onSearchInputChange: () => undefined as any,\n    searchInputPlaceholder: 'Search',\n    onSearchButtonClick: () => undefined as any\n  };\n\n  parentRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  onEnterPressed = (event: any) => {\n    if (event.charCode === KEY_CODES.ENTER) {\n      this.props.onSearchButtonClick();\n    }\n  }\n\n  render() {\n    const toggleId = `pf-context-selector-toggle-id-${newId}`;\n    const screenReaderLabelId = `pf-context-selector-label-id-${newId}`;\n    const searchButtonId = `pf-context-selector-search-button-id-${newId}`;\n    const {\n      children,\n      className,\n      isOpen,\n      onToggle,\n      onSelect,\n      screenReaderLabel,\n      toggleText,\n      searchButtonAriaLabel,\n      searchInputValue,\n      onSearchInputChange,\n      searchInputPlaceholder,\n      onSearchButtonClick,\n      ...props\n    } = this.props;\n    return (\n      <div\n        className={css(styles.contextSelector, isOpen && styles.modifiers.expanded, className)}\n        ref={this.parentRef}\n        {...props}\n      >\n        {screenReaderLabel && (\n          <span id={screenReaderLabelId} hidden>\n            {screenReaderLabel}\n          </span>\n        )}\n        <ContextSelectorToggle\n          onToggle={onToggle}\n          isOpen={isOpen}\n          toggleText={toggleText}\n          id={toggleId}\n          parentRef={this.parentRef.current}\n          aria-labelledby={`${screenReaderLabelId} ${toggleId}`}\n        />\n        {isOpen && (\n          <div className={css(styles.contextSelectorMenu)}>\n            {isOpen && (\n              <FocusTrap focusTrapOptions={{ clickOutsideDeactivates: true }}>\n                <div className={css(styles.contextSelectorMenuInput)}>\n                  <InputGroup>\n                    <TextInput\n                      value={searchInputValue}\n                      type=\"search\"\n                      placeholder={searchInputPlaceholder}\n                      onChange={onSearchInputChange}\n                      onKeyPress={this.onEnterPressed}\n                      aria-labelledby={searchButtonId}\n                    />\n                    <Button\n                      variant={ButtonVariant.control}\n                      aria-label={searchButtonAriaLabel}\n                      id={searchButtonId}\n                      onClick={onSearchButtonClick}\n                    >\n                      <SearchIcon aria-hidden=\"true\" />\n                    </Button>\n                  </InputGroup>\n                </div>\n                <ContextSelectorContext.Provider value={{ onSelect }}>\n                  <ContextSelectorMenuList isOpen={isOpen}>{children}</ContextSelectorMenuList>\n                </ContextSelectorContext.Provider>\n              </FocusTrap>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"file":"ContextSelector.js"}