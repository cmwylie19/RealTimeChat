{"version":3,"sources":["../../../../src/components/Tooltip/Tooltip.tsx"],"names":["React","PopoverBase","styles","css","getModifier","TooltipContent","KEY_CODES","c_tooltip_MaxWidth","tooltipMaxWidth","TooltipPosition","Tooltip","Component","tip","popperChildren","tooltip","classList","add","event","keyCode","ESCAPE_KEY","state","isVisible","hide","componentDidMount","document","addEventListener","handleEscKeyClick","componentWillUnmount","removeEventListener","extendChildren","cloneElement","props","children","isAppLauncher","render","position","trigger","enableFlip","className","content","bodyContent","entryDelay","exitDelay","appendTo","zIndex","maxWidth","distance","aria","boundary","flipBehavior","tippyProps","rest","modifiers","top","storeTippyInstance","preventOverflow","enabled","body","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PopoverBase from '../../helpers/PopoverBase/PopoverBase';\nimport { Instance as TippyInstance, Props as TippyProps } from 'tippy.js';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy.css';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy-overrides.css';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { c_tooltip_MaxWidth as tooltipMaxWidth } from '@patternfly/react-tokens';\nimport { ReactElement } from 'react';\n\nexport enum TooltipPosition {\n  auto = 'auto',\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right'\n}\n\nexport interface TooltipProps {\n  /** The element to append the tooltip to, defaults to body */\n  appendTo?: Element | ((ref: Element) => Element);\n  /** Aria-labelledby or aria-describedby for tooltip */\n  aria?: 'describedby' | 'labelledby';\n  /** If enableFlip is true, the tooltip responds to this boundary */\n  boundary?: 'scrollParent' | 'window' | 'viewport' | HTMLElement;\n  /** The reference element to which the tooltip is relatively placed to */\n  children: ReactElement<any>;\n  /** Tooltip additional class */\n  className?: string;\n  /** Tooltip content */\n  content: React.ReactNode;\n  /** Distance of the tooltip to its target, defaults to 15 */\n  distance?: number;\n  /** If true, tries to keep the tooltip in view by flipping it if necessary */\n  enableFlip?: boolean;\n  /** Delay in ms before the tooltip appears */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip disappears */\n  exitDelay?: number;\n  /**\n   * The desired position to flip the tooltip to if the initial position is not possible.\n   * By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\n   * You can also pass an array of positions that determines the flip order. It should contain the initial position\n   * followed by alternative positions if that position is unavailable.\n   * Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n   * ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\n   * space to the right, so it finally shows the tooltip on the left.\n   */\n  flipBehavior?: 'flip' | ('top' | 'bottom' | 'left' | 'right')[];\n  /** If true, displays as an application launcher */\n  isAppLauncher?: boolean;\n  /** Maximum width of the tooltip (default 12.5rem) */\n  maxWidth?: string;\n  /**\n   * Tooltip position. Note: With 'enableFlip' set to true,\n   * it will change the position if there is not enough space for the starting position.\n   * The behavior of where it flips to can be controlled through the flipBehavior prop.\n   */\n  position?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n  /** Tooltip trigger: click, mouseenter, focus, manual  */\n  trigger?: string;\n  /** value for visibility when trigger is 'manual' */\n  isVisible?: boolean;\n  /** z-index of the tooltip */\n  zIndex?: number;\n  /** additional Props to pass through to tippy.js */\n  tippyProps?: TippyProps;\n}\n\nexport class Tooltip extends React.Component<TooltipProps> {\n  private tip: TippyInstance;\n  static defaultProps = {\n    position: 'top',\n    trigger: 'mouseenter focus',\n    isVisible: false,\n    enableFlip: true,\n    className: '',\n    entryDelay: 500,\n    exitDelay: 500,\n    appendTo: () => document.body,\n    zIndex: 9999,\n    maxWidth: tooltipMaxWidth && tooltipMaxWidth.value,\n    isAppLauncher: false,\n    distance: 15,\n    aria: 'describedby',\n    boundary: 'window',\n    // For every initial starting position, there are 3 escape positions\n    flipBehavior: ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n    tippyProps: {}\n  };\n\n  storeTippyInstance = (tip: TippyInstance) => {\n    tip.popperChildren.tooltip.classList.add(styles.tooltip);\n    this.tip = tip;\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.tip.state.isVisible) {\n      this.tip.hide();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  extendChildren() {\n    return React.cloneElement(this.props.children, {\n      isAppLauncher: this.props.isAppLauncher\n    });\n  }\n\n  render() {\n    const {\n      position,\n      trigger,\n      isVisible,\n      enableFlip,\n      children,\n      className,\n      content: bodyContent,\n      entryDelay,\n      exitDelay,\n      appendTo,\n      zIndex,\n      maxWidth,\n      isAppLauncher,\n      distance,\n      aria,\n      boundary,\n      flipBehavior,\n      tippyProps,\n      ...rest\n    } = this.props;\n    const content = (\n      <div\n        className={css(!enableFlip && getModifier(styles, position, styles.modifiers.top), className)}\n        role=\"tooltip\"\n        {...rest}\n      >\n        <TooltipContent>{bodyContent}</TooltipContent>\n      </div>\n    );\n    return (\n      <PopoverBase\n        {...tippyProps}\n        arrow\n        aria={aria}\n        onCreate={this.storeTippyInstance}\n        maxWidth={maxWidth}\n        zIndex={zIndex}\n        appendTo={appendTo}\n        content={content}\n        lazy\n        animateFill={false}\n        theme=\"pf-tooltip\"\n        performance\n        placement={position}\n        trigger={trigger}\n        delay={[entryDelay, exitDelay]}\n        distance={distance}\n        flip={enableFlip}\n        flipBehavior={flipBehavior}\n        boundary={boundary}\n        isVisible={isVisible}\n        popperOptions={{\n          modifiers: {\n            preventOverflow: {\n              enabled: enableFlip\n            },\n            hide: {\n              enabled: enableFlip\n            }\n          }\n        }}\n      >\n        {isAppLauncher ? this.extendChildren() : children}\n      </PopoverBase>\n    );\n  }\n}\n"],"file":"Tooltip.js"}