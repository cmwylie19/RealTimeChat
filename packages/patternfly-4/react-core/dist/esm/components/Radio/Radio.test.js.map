{"version":3,"sources":["../../../../src/components/Radio/Radio.test.tsx"],"names":["React","shallow","Radio","props","onChange","jest","fn","describe","test","view","expect","toMatchSnapshot","functionLabel","newValue","event","currentTarget","checked","find","simulate","toBeCalledWith"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { shallow } from 'enzyme';\nimport { Radio } from './Radio';\n\nconst props = {\n  onChange: jest.fn()\n};\n\ndescribe('Radio check component', () => {\n  test('controlled', () => {\n    const view = shallow(<Radio isChecked id=\"check\" aria-label=\"check\" name=\"check\" />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('uncontrolled', () => {\n    const view = shallow(<Radio id=\"check\" aria-label=\"check\" name=\"check\" />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('isDisabled', () => {\n    const view = shallow(<Radio id=\"check\" isDisabled aria-label=\"check\" name=\"check\" />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('label is string', () => {\n    const view = shallow(\n      <Radio label=\"Label\" id=\"check\" isChecked aria-label=\"check\" name=\"check\" />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('label is function', () => {\n    const functionLabel = () => <h1>Header</h1>;\n    const view = shallow(<Radio label={functionLabel()} id=\"check\" isChecked aria-label=\"check\" name=\"check\" />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('label is node', () => {\n    const view = shallow(<Radio label={<h1>Header</h1>} id=\"check\" isChecked aria-label=\"check\" name=\"check\" />);\n    expect(view).toMatchSnapshot();\n  });\n\n  test('passing class', () => {\n    const view = shallow(\n      <Radio label=\"label\" className=\"class-123\" id=\"check\" isChecked aria-label=\"check\" name=\"check\" />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('passing HTML attribute', () => {\n    const view = shallow(\n      <Radio label=\"label\" aria-labelledby=\"labelId\" id=\"check\" isChecked aria-label=\"check\" name=\"check\" />\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('Radio passes value and event to onChange handler', () => {\n    const newValue = true;\n    const event = {\n      currentTarget: { checked: newValue }\n    };\n    const view = shallow(<Radio id=\"check\" {...props} aria-label=\"check\" name=\"check\" />);\n    view.find('input').simulate('change', event);\n    expect(props.onChange).toBeCalledWith(newValue, event);\n  });\n});\n"],"file":"Radio.test.js"}