{"version":3,"sources":["../../../../esm/components/Virtualized/utils/ScalingCellSizeAndPositionManager.js"],"names":["_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","ScalingCellSizeAndPositionManager","constructor","_ref","maxScrollSize","params","_cellSizeAndPositionManager","CellSizeAndPositionManager","_maxScrollSize","areOffsetsAdjusted","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","getSizeAndPositionOfCell","index","getSizeAndPositionOfLastMeasuredCell","min","getUpdatedOffsetForIndex","align","currentOffset","targetIndex","_safeOffsetToOffset","_offsetToSafeOffset","getVisibleCellRange","resetCell"],"mappings":"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","sourcesContent":["function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable */\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nexport default class ScalingCellSizeAndPositionManager {\n  constructor(_ref) {\n    let {\n      maxScrollSize = getMaxElementSize()\n    } = _ref,\n        params = _objectWithoutProperties(_ref, [\"maxScrollSize\"]);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  areOffsetsAdjusted() {\n    return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n  }\n\n  configure(params) {\n    this._cellSizeAndPositionManager.configure(params);\n  }\n\n  getCellCount() {\n    return this._cellSizeAndPositionManager.getCellCount();\n  }\n\n  getEstimatedCellSize() {\n    return this._cellSizeAndPositionManager.getEstimatedCellSize();\n  }\n\n  getLastMeasuredIndex() {\n    return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n  }\n  /**\n   * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n   * The offset passed to this function is scaled (safe) as well.\n   */\n\n\n  getOffsetAdjustment({\n    containerSize,\n    offset // safe\n\n  }) {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n    const safeTotalSize = this.getTotalSize();\n\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize: safeTotalSize\n    });\n\n    return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n  }\n\n  getSizeAndPositionOfCell(index) {\n    return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n  }\n\n  getSizeAndPositionOfLastMeasuredCell() {\n    return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n  }\n  /** See CellSizeAndPositionManager#getTotalSize */\n\n\n  getTotalSize() {\n    return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n  }\n  /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n\n  getUpdatedOffsetForIndex({\n    align = 'auto',\n    containerSize,\n    currentOffset,\n    // safe\n    targetIndex\n  }) {\n    currentOffset = this._safeOffsetToOffset({\n      containerSize,\n      offset: currentOffset\n    });\n\n    const offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n      align,\n      containerSize,\n      currentOffset,\n      targetIndex\n    });\n\n    return this._offsetToSafeOffset({\n      containerSize,\n      offset\n    });\n  }\n  /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n\n  getVisibleCellRange({\n    containerSize,\n    offset // safe\n\n  }) {\n    offset = this._safeOffsetToOffset({\n      containerSize,\n      offset\n    });\n    return this._cellSizeAndPositionManager.getVisibleCellRange({\n      containerSize,\n      offset\n    });\n  }\n\n  resetCell(index) {\n    this._cellSizeAndPositionManager.resetCell(index);\n  }\n\n  _getOffsetPercentage({\n    containerSize,\n    offset,\n    // safe\n    totalSize\n  }) {\n    return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n  }\n\n  _offsetToSafeOffset({\n    containerSize,\n    offset // unsafe\n\n  }) {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n    const safeTotalSize = this.getTotalSize();\n\n    if (totalSize === safeTotalSize) {\n      return offset;\n    }\n\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize\n    });\n\n    return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n  }\n\n  _safeOffsetToOffset({\n    containerSize,\n    offset // safe\n\n  }) {\n    const totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n    const safeTotalSize = this.getTotalSize();\n\n    if (totalSize === safeTotalSize) {\n      return offset;\n    }\n\n    const offsetPercentage = this._getOffsetPercentage({\n      containerSize,\n      offset,\n      totalSize: safeTotalSize\n    });\n\n    return Math.round(offsetPercentage * (totalSize - containerSize));\n  }\n\n}\n//# sourceMappingURL=ScalingCellSizeAndPositionManager.js.map"],"file":"ScalingCellSizeAndPositionManager.js"}