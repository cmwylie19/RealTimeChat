{"version":3,"sources":["../../../../src/components/ChartBullet/ChartBullet.tsx"],"names":["React","hoistNonReactStatics","VictoryChart","getComparativeMeasureErrorWidth","getComparativeMeasureWidth","getComparativeMeasureWarningWidth","getPrimaryDotMeasureSize","getPrimarySegmentedMeasureWidth","getQualitativeRangeBarWidth","getBulletDomain","getBulletThemeWithLegendColorScale","ChartAxis","ChartBulletComparativeErrorMeasure","ChartBulletComparativeMeasure","ChartBulletComparativeWarningMeasure","ChartBulletGroupTitle","ChartBulletPrimaryDotMeasure","ChartBulletPrimarySegmentedMeasure","ChartBulletQualitativeRange","ChartBulletTitle","ChartContainer","ChartLegend","ChartLegendPosition","ChartLegendWrapper","ChartBulletStyles","ChartTooltip","getPaddingForSide","ChartBullet","ariaDesc","ariaTitle","axisComponent","comparativeErrorMeasureComponent","comparativeErrorMeasureData","comparativeErrorMeasureDataY","comparativeErrorMeasureLegendData","comparativeWarningMeasureComponent","comparativeWarningMeasureData","comparativeWarningMeasureDataY","comparativeWarningMeasureLegendData","comparativeZeroMeasureComponent","constrainToVisibleArea","groupTitleComponent","groupSubTitle","groupTitle","horizontal","invert","labels","legendComponent","legendItemsPerRow","legendPosition","maxDomain","minDomain","padding","primaryDotMeasureComponent","primaryDotMeasureData","primaryDotMeasureDataY","primaryDotMeasureLegendData","primarySegmentedMeasureComponent","primarySegmentedMeasureData","primarySegmentedMeasureDataY","primarySegmentedMeasureLegendData","qualitativeRangeComponent","qualitativeRangeData","qualitativeRangeDataY","qualitativeRangeDataY0","qualitativeRangeLegendData","standalone","subTitle","themeColor","themeVariant","title","titleComponent","titlePosition","theme","domain","legendOrientation","legend","orientation","height","chart","width","bulletSize","rest","chartSize","defaultPadding","bottom","left","right","top","bulletGroupTitle","cloneElement","props","bulletTitle","comparativeErrorMeasure","barWidth","data","labelComponent","y","comparativeWarningMeasure","comparativeZeroMeasure","itemsPerRow","position","primaryDotMeasure","size","primarySegmentedMeasure","qualitativeRange","y0","getTickValues","minVal","maxVal","tickValues","range","Math","abs","tickInterval","axisTickCount","i","push","ceil","getWrappedLegend","dx","dy","bottomLeft","getComparativeZeroMeasure","_domain","low","Array","isArray","high","length","axis","dependentAxis","x","offsetX","offsetY","tickCount","bulletChart","name","symbol","fill","type"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  DataGetterPropType,\n  DomainPropType,\n  PaddingProps,\n  VictoryChart,\n} from 'victory';\nimport {\n  getComparativeMeasureErrorWidth,\n  getComparativeMeasureWidth,\n  getComparativeMeasureWarningWidth,\n  getPrimaryDotMeasureSize,\n  getPrimarySegmentedMeasureWidth,\n  getQualitativeRangeBarWidth\n} from './utils/chart-bullet-size';\nimport { getBulletDomain } from './utils/chart-bullet-domain';\nimport { getBulletThemeWithLegendColorScale } from './utils/chart-bullet-theme';\nimport { ChartAxis } from '../ChartAxis';\nimport { ChartBulletComparativeErrorMeasure } from './ChartBulletComparativeErrorMeasure';\nimport { ChartBulletComparativeMeasure } from './ChartBulletComparativeMeasure';\nimport { ChartBulletComparativeWarningMeasure } from './ChartBulletComparativeWarningMeasure';\nimport { ChartBulletGroupTitle } from './ChartBulletGroupTitle';\nimport { ChartBulletPrimaryDotMeasure } from './ChartBulletPrimaryDotMeasure';\nimport { ChartBulletPrimarySegmentedMeasure } from './ChartBulletPrimarySegmentedMeasure';\nimport { ChartBulletQualitativeRange } from './ChartBulletQualitativeRange';\nimport { ChartBulletTitle } from './ChartBulletTitle';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartLegend, ChartLegendOrientation, ChartLegendPosition, ChartLegendWrapper } from '../ChartLegend';\nimport { ChartBulletStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getPaddingForSide } from '../ChartUtils';\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartBulletProps {\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The axis component to render with the chart\n   */\n  axisComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the size of the bullet chart. For a horizontal chart, this adjusts bar height; although, it\n   * technically scales the underlying barWidth property.\n   *\n   * Note: Values should be >= 125, the default is 140\n   */\n  bulletSize?: number;\n  /**\n   * The comparative error measure component to render with the chart\n   */\n  comparativeErrorMeasureComponent?: React.ReactElement<any>;\n  /**\n   * The data prop specifies the data to be plotted. Data should be in the form of an array\n   * of data points, or an array of arrays of data points for multiple datasets.\n   * Each data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\n   * but by default, an object with y properties is expected.\n   *\n   * @example comparativeErrorMeasureData={[{ y: 50 }]}\n   */\n  comparativeErrorMeasureData?: any[];\n  /**\n   * The comparativeErrorMeasureDataY prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  comparativeErrorMeasureDataY?: DataGetterPropType;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  comparativeErrorMeasureLegendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The comparative warning measure component to render with the chart\n   */\n  comparativeWarningMeasureComponent?: React.ReactElement<any>;\n  /**\n   * The data prop specifies the data to be plotted. Data should be in the form of an array\n   * of data points, or an array of arrays of data points for multiple datasets.\n   * Each data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\n   * but by default, an object with y properties is expected.\n   *\n   * @example comparativeWarningMeasureData={[{ y: 50 }]}\n   */\n  comparativeWarningMeasureData?: any[];\n  /**\n   * The comparativeWarningMeasureDataY prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  comparativeWarningMeasureDataY?: DataGetterPropType;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  comparativeWarningMeasureLegendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The comparative zero measure component to render with the chart\n   */\n  comparativeZeroMeasureComponent?: React.ReactElement<any>;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The domain prop describes the range of values your chart will include. This prop can be\n   * given as a array of the minimum and maximum expected values for your chart,\n   * or as an object that specifies separate arrays for x and y.\n   * If this prop is not provided, a domain will be calculated from data, or other\n   * available information.\n   * @example: {x: [0, 2], y: [0, 100]}\n   *\n   * Note: The x domain is expected to be `x: [0, 2]` in order to position all measures properly\n   */\n  domain?: DomainPropType;\n  /**\n   * The group title component to render for grouped bullets\n   */\n  groupTitleComponent?: React.ReactElement<any>;\n  /**\n   * The subtitle to render for grouped bullets\n   */\n  groupSubTitle?: string;\n  /**\n   * The title to render for grouped bullets\n   */\n  groupTitle?: string;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  height?: number;\n  /**\n   * The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\n   * independent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis.\n   */\n  horizontal?: boolean;\n  /**\n   * Invert the color scales used to represent primary measures and qualitative ranges.\n   */\n  invert?: boolean;\n  /**\n   * When a labels prop is provided to ChartVoronoiContainer it will render a label component\n   * rather than activating labels on the child components it renders. This is useful for\n   * creating multi- point tooltips. This prop should be given as a function which will be called\n   * once for each active point. The labels function will be called with the arguments point,\n   * index, and points, where point refers to a single active point, index refers to the position\n   * of that point in the array of active points, and points is an array of all active points.\n   */\n  labels?: (point: any, index: number, points: any[]) => string;\n  /**\n   * The legend component to render with chart.\n   */\n  legendComponent?: React.ReactElement<any>;\n  /**\n   * The legendItemsPerRow prop determines how many items to render in each row\n   * of a horizontal legend, or in each column of a vertical legend. This\n   * prop should be given as an integer. When this prop is not given,\n   * legend items will be rendered in a single row or column.\n   */\n  legendItemsPerRow?: number;\n  /**\n   * The orientation prop takes a string that defines whether legend data\n   * are displayed in a row or column. When orientation is \"horizontal\",\n   * legend items will be displayed in a single row. When orientation is\n   * \"vertical\", legend items will be displayed in a single column. Line\n   * and text-wrapping is not currently supported, so \"vertical\"\n   * orientation is both the default setting and recommended for\n   * displaying many series of data.\n   */\n  legendOrientation?: 'horizontal' | 'vertical';\n  /**\n   * The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n   *\n   * Note: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\n   * cases, the legend may not be visible until enough padding is applied.\n   */\n  legendPosition?: 'bottom' | 'bottom-left' | 'right';\n  /**\n   * The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\n   * domain of a chart is static, while the minimum value depends on data or other variable information. If the domain\n   * prop is set in addition to maximumDomain, domain will be used.\n   *\n   * note: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\n   * dependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\n   * the y axis.\n   *\n   * examples:\n   *\n   * maxDomain={0}\n   * maxDomain={{ y: 0 }}\n   *\n   * Note: The x domain is expected to be `x: 2` in order to position all measures properly\n   */\n  maxDomain?: number | { x?: number, y?: number };\n  /**\n   * The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\n   * domain of a chart is static, while the maximum value depends on data or other variable information. If the domain\n   * prop is set in addition to minimumDomain, domain will be used.\n   *\n   * note: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\n   * dependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\n   * the y axis.\n   *\n   * examples:\n   *\n   * minDomain={0}\n   * minDomain={{ y: 0 }}\n   *\n   * Note: The x domain is expected to be `x: 0` in order to position all measures properly\n   */\n  minDomain?: number | { x?: number, y?: number };\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   *\n   * Note: The underlying bullet chart is a different size than height and width. For a horizontal chart, left and right\n   * padding may need to be applied at (approx) 2 to 1 scale.\n   */\n  padding?: PaddingProps;\n  /**\n   * The primary dot measure component to render with the chart\n   */\n  primaryDotMeasureComponent?: React.ReactElement<any>;\n  /**\n   * The data prop specifies the data to be plotted. Data should be in the form of an array\n   * of data points, or an array of arrays of data points for multiple datasets.\n   * Each data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\n   * but by default, an object with y properties is expected.\n   *\n   * @example primaryDotMeasureData={[{ y: 50 }]}\n   */\n  primaryDotMeasureData?: any[];\n  /**\n   * The primaryDotMeasureDataY prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  primaryDotMeasureDataY?: DataGetterPropType;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  primaryDotMeasureLegendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The primary segmented measure component to render with the chart\n   */\n  primarySegmentedMeasureComponent?: React.ReactElement<any>;\n  /**\n   * The data prop specifies the data to be plotted. Data should be in the form of an array\n   * of data points, or an array of arrays of data points for multiple datasets.\n   * Each data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\n   * but by default, an object with y properties is expected.\n   *\n   * @example primarySegmentedMeasureData={[{ y: 50 }]}\n   */\n  primarySegmentedMeasureData?: any[];\n  /**\n   * The primarySegmentedMeasureDataY prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  primarySegmentedMeasureDataY?: DataGetterPropType;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  primarySegmentedMeasureLegendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The qualitative range component to render with the chart\n   */\n  qualitativeRangeComponent?: React.ReactElement<any>;\n  /**\n   * The data prop specifies the data to be plotted. Data should be in the form of an array\n   * of data points, or an array of arrays of data points for multiple datasets.\n   * Each data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\n   * but by default, an object with y properties is expected.\n   *\n   * @example qualitativeRangeData={[{ y: 50 }]}\n   */\n  qualitativeRangeData?: any[];\n  /**\n   * The qualitativeRangeDataY prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  qualitativeRangeDataY?: DataGetterPropType;\n  /**\n   * Use qualitativeRangeDataY0 data accessor prop to determine how the component defines the baseline y0 data.\n   * This prop is useful for defining custom baselines for components like ChartBar.\n   * This prop may be given in a variety of formats.\n   * @example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]\n   */\n  qualitativeRangeDataY0?: DataGetterPropType;\n  /**\n   * Specify data via the data prop. ChartLegend expects data as an\n   * array of objects with name (required), symbol, and labels properties.\n   * The data prop must be given as an array.\n   *\n   * @example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\n   */\n  qualitativeRangeLegendData?: {\n    name?: string;\n    symbol?: {\n      fill?: string;\n      type?: string;\n    };\n  }[];\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose Chart with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The subtitle for the chart\n   */\n  subTitle?: string;\n  /**\n   * The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\n   * props defined in theme may be overwritten by props specified on the component instance.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The title for the chart\n   */\n  title?: string;\n  /**\n   * The label component to render the chart title.\n   */\n  titleComponent?: React.ReactElement<any>;\n  /**\n   * The title position relation to the chart. Valid values are 'left', and 'top-left'\n   *\n   * Note: These properties are only valid for horizontal layouts\n   */\n  titlePosition?: 'left' | 'top-left';\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a\n   * number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  width?: number;\n}\n\nexport const ChartBullet: React.FunctionComponent<ChartBulletProps> = ({\n  ariaDesc,\n  ariaTitle,\n  axisComponent = <ChartAxis />,\n  comparativeErrorMeasureComponent = <ChartBulletComparativeErrorMeasure />,\n  comparativeErrorMeasureData,\n  comparativeErrorMeasureDataY,\n  comparativeErrorMeasureLegendData,\n  comparativeWarningMeasureComponent = <ChartBulletComparativeWarningMeasure />,\n  comparativeWarningMeasureData,\n  comparativeWarningMeasureDataY,\n  comparativeWarningMeasureLegendData,\n  comparativeZeroMeasureComponent = <ChartBulletComparativeMeasure />,\n  constrainToVisibleArea = false,\n  groupTitleComponent = <ChartBulletGroupTitle />,\n  groupSubTitle,\n  groupTitle,\n  horizontal = true,\n  invert = false,\n  labels,\n  legendComponent = <ChartLegend />,\n  legendItemsPerRow,\n  legendPosition = 'bottom' as ChartLegendPosition,\n  maxDomain,\n  minDomain,\n  padding,\n  primaryDotMeasureComponent = <ChartBulletPrimaryDotMeasure />,\n  primaryDotMeasureData,\n  primaryDotMeasureDataY,\n  primaryDotMeasureLegendData,\n  primarySegmentedMeasureComponent = <ChartBulletPrimarySegmentedMeasure />,\n  primarySegmentedMeasureData,\n  primarySegmentedMeasureDataY,\n  primarySegmentedMeasureLegendData,\n  qualitativeRangeComponent = <ChartBulletQualitativeRange />,\n  qualitativeRangeData,\n  qualitativeRangeDataY,\n  qualitativeRangeDataY0,\n  qualitativeRangeLegendData,\n  standalone = true,\n  subTitle,\n  themeColor,\n  themeVariant,\n  title,\n  titleComponent = <ChartBulletTitle />,\n  titlePosition,\n\n  // destructure last\n  theme = getBulletThemeWithLegendColorScale({\n    comparativeErrorMeasureData,\n    comparativeErrorMeasureLegendData,\n    comparativeWarningMeasureData,\n    comparativeWarningMeasureLegendData,\n    invert,\n    primaryDotMeasureData,\n    primaryDotMeasureLegendData,\n    primarySegmentedMeasureData,\n    primarySegmentedMeasureLegendData,\n    qualitativeRangeData,\n    qualitativeRangeLegendData,\n    themeColor,\n    themeVariant\n  }),\n  domain = getBulletDomain({\n    comparativeErrorMeasureComponent,\n    comparativeErrorMeasureData,\n    comparativeWarningMeasureComponent,\n    comparativeWarningMeasureData,\n    maxDomain,\n    minDomain,\n    primaryDotMeasureComponent,\n    primaryDotMeasureData,\n    primarySegmentedMeasureComponent,\n    primarySegmentedMeasureData,\n    qualitativeRangeComponent,\n    qualitativeRangeData\n  }),\n  legendOrientation = theme.legend.orientation as ChartLegendOrientation,\n  height = horizontal ? theme.chart.height : theme.chart.width,\n  width = horizontal ? theme.chart.width : theme.chart.height,\n  bulletSize = theme.chart.height,\n  ...rest\n}: ChartBulletProps) => {\n  // Note that we're using a fixed bullet height width to align components.\n  const chartSize = {\n    height: horizontal ? bulletSize : height,\n    width: horizontal ? width : bulletSize\n  };\n\n  const defaultPadding = {\n    bottom: getPaddingForSide('bottom',  padding, theme.chart.padding),\n    left: getPaddingForSide('left', padding, theme.chart.padding),\n    right: getPaddingForSide('right', padding, theme.chart.padding),\n    top: getPaddingForSide('top', padding, theme.chart.padding),\n  };\n\n  // Bullet group title\n  const bulletGroupTitle = React.cloneElement(groupTitleComponent, {\n    height,\n    standalone: false,\n    subTitle: groupSubTitle,\n    title: groupTitle,\n    width,\n    ...groupTitleComponent.props\n  });\n\n  // Bullet title\n  const bulletTitle = React.cloneElement(titleComponent, {\n    height,\n    horizontal,\n    legendPosition,\n    padding,\n    standalone: false,\n    subTitle,\n    theme,\n    title,\n    titlePosition,\n    width,\n    ...titleComponent.props\n  });\n\n  // Comparative error measure\n  const comparativeErrorMeasure = React.cloneElement(comparativeErrorMeasureComponent, {\n    barWidth: getComparativeMeasureErrorWidth({height: chartSize.height, horizontal, width: chartSize.width}),\n    constrainToVisibleArea,\n    data: comparativeErrorMeasureData,\n    domain,\n    height: chartSize.height,\n    horizontal,\n    labelComponent: <ChartTooltip height={height} width={width}/>,\n    labels,\n    padding,\n    standalone: false,\n    width: chartSize.width,\n    y: comparativeErrorMeasureDataY,\n    ...comparativeErrorMeasureComponent.props\n  });\n\n  // Comparative warning measure\n  const comparativeWarningMeasure = React.cloneElement(comparativeWarningMeasureComponent, {\n    barWidth: getComparativeMeasureWarningWidth({height: chartSize.height, horizontal, width: chartSize.width}),\n    constrainToVisibleArea,\n    data: comparativeWarningMeasureData,\n    domain,\n    height: chartSize.height,\n    horizontal,\n    labelComponent: <ChartTooltip height={height} width={width}/>,\n    labels,\n    padding,\n    standalone: false,\n    width: chartSize.width,\n    y: comparativeWarningMeasureDataY,\n    ...comparativeWarningMeasureComponent.props\n  });\n\n  // Comparative zero measure\n  const comparativeZeroMeasure = React.cloneElement(comparativeZeroMeasureComponent, {\n    barWidth: getComparativeMeasureWidth({height: chartSize.height, horizontal, width: chartSize.width}),\n    data: [{y: 0}],\n    domain,\n    height: chartSize.height,\n    horizontal,\n    padding,\n    standalone: false,\n    width: chartSize.width,\n    ...comparativeZeroMeasureComponent.props\n  })\n\n  // Legend\n  const legend = React.cloneElement(legendComponent, {\n    data: [\n      ...(primaryDotMeasureLegendData ? primaryDotMeasureLegendData : []),\n      ...(primarySegmentedMeasureLegendData ? primarySegmentedMeasureLegendData : []),\n      ...(comparativeWarningMeasureLegendData ? comparativeWarningMeasureLegendData : []),\n      ...(comparativeErrorMeasureLegendData ? comparativeErrorMeasureLegendData : []),\n      ...(qualitativeRangeLegendData ? qualitativeRangeLegendData : [])\n    ],\n    itemsPerRow: legendItemsPerRow,\n    orientation: legendOrientation,\n    position: legendPosition,\n    theme,\n    ...legendComponent.props\n  });\n\n  // Primary dot measure\n  const primaryDotMeasure = React.cloneElement(primaryDotMeasureComponent, {\n    constrainToVisibleArea,\n    data: primaryDotMeasureData,\n    domain,\n    height: chartSize.height,\n    horizontal,\n    invert,\n    labelComponent: <ChartTooltip height={height} width={width}/>,\n    labels,\n    padding,\n    size: getPrimaryDotMeasureSize({height: chartSize.height, horizontal, width: chartSize.width}),\n    standalone: false,\n    themeColor,\n    themeVariant,\n    width: chartSize.width,\n    y: primaryDotMeasureDataY,\n    ...primaryDotMeasureComponent.props\n  });\n\n  // Primary segmented measure\n  const primarySegmentedMeasure = React.cloneElement(primarySegmentedMeasureComponent, {\n    constrainToVisibleArea,\n    barWidth: getPrimarySegmentedMeasureWidth({height: chartSize.height, horizontal, width: chartSize.width}),\n    data: primarySegmentedMeasureData,\n    domain,\n    height: chartSize.height,\n    horizontal,\n    invert,\n    labelComponent: <ChartTooltip height={height} width={width}/>,\n    labels,\n    padding,\n    standalone: false,\n    themeColor,\n    themeVariant,\n    width: chartSize.width,\n    y: primarySegmentedMeasureDataY,\n    ...primarySegmentedMeasureComponent.props\n  });\n\n  // Qualitative range\n  const qualitativeRange = React.cloneElement(qualitativeRangeComponent, {\n    constrainToVisibleArea,\n    barWidth: getQualitativeRangeBarWidth({height: chartSize.height, horizontal, width: chartSize.width}),\n    data: qualitativeRangeData,\n    domain,\n    height: chartSize.height,\n    horizontal,\n    invert,\n    labelComponent: <ChartTooltip height={height} width={width}/>,\n    labels,\n    padding,\n    standalone: false,\n    width: chartSize.width,\n    y: qualitativeRangeDataY,\n    y0: qualitativeRangeDataY0,\n    ...qualitativeRangeComponent.props\n  });\n\n  // Returns tick values -- Victory doesn't include min/max domain\n  const getTickValues = (minVal: number, maxVal: number) => {\n    const tickValues = [minVal, maxVal];\n    let range = 0;\n    if (minVal < 0 && maxVal < 0) {\n      range = Math.abs(minVal - maxVal);\n    } else if (minVal < 0) {\n      range = Math.abs(minVal) + maxVal;\n    } else {\n      range = maxVal - minVal;\n    }\n    const tickInterval = range / (ChartBulletStyles.axisTickCount - 1);\n    for (let i = minVal; i < maxVal;) {\n      i += tickInterval;\n      tickValues.push(Math.ceil(i));\n    }\n    return tickValues;\n  };\n\n  // Returns a wrapped legend\n  const getWrappedLegend = () => {\n    if (!legend.props.data) {\n      return null;\n    }\n    let dx = 0;\n    let dy = 0;\n\n    // Adjust for padding\n    if (legendPosition === ChartLegendPosition.bottom) {\n      dy = horizontal\n        ? defaultPadding.top * .5 + (defaultPadding.bottom * .5 - (defaultPadding.bottom)) - 25\n        : title ? -defaultPadding.bottom + 60 : -defaultPadding.bottom;\n    } else if (legendPosition === ChartLegendPosition.bottomLeft) {\n      dy = horizontal\n        ? defaultPadding.top * .5 + (defaultPadding.bottom * .5 - (defaultPadding.bottom)) - 25\n        : title ? -defaultPadding.bottom + 60 : -defaultPadding.bottom;\n      dx = -10;\n    }\n    return (\n      <ChartLegendWrapper\n        chartType=\"bullet\"\n        dx={dx}\n        dy={dy}\n        height={chartSize.height}\n        legendComponent={legend}\n        orientation={legendOrientation}\n        padding={padding}\n        position={legendPosition}\n        theme={theme}\n        width={chartSize.width}\n      />\n    );\n  };\n\n  // Returns comparative zero measure\n  const getComparativeZeroMeasure = () => {\n    const _domain: any = domain;\n    const low = Array.isArray(_domain)\n      ? _domain[0]\n      : _domain.y && Array.isArray(_domain.y) ? _domain.y[0] : 0;\n    const high = Array.isArray(_domain)\n      ? _domain[_domain.length - 1]\n      : _domain.y && Array.isArray(_domain.y) ? _domain.y[_domain.y.length - 1] : 0;\n\n    if (low < 0 && high > 0) {\n      return comparativeZeroMeasure;\n    }\n    return null;\n  };\n\n  // Axis component for custom tick values\n  const axis = React.cloneElement(axisComponent, {\n    dependentAxis: horizontal ? false : true,\n    domain: !horizontal ? domain : {\n      x: (domain as any).y,\n      y: (domain as any).x\n    },\n    height: chartSize.height,\n    // Adjust for padding\n    offsetX: !horizontal ? defaultPadding.left * .5 + (defaultPadding.right * .5 - (defaultPadding.right - 55)) : 0,\n    offsetY: horizontal ? 80 - defaultPadding.top * .5 + (defaultPadding.bottom * .5 - 25) : 0,\n    padding,\n    standalone: false,\n    tickCount: ChartBulletStyles.axisTickCount,\n    tickValues: getTickValues((domain as any).y[0], (domain as any).y[1]),\n    width: chartSize.width,\n    ...axisComponent.props\n  });\n\n  const bulletChart = (\n    <React.Fragment>\n      {axis}\n      {bulletGroupTitle}\n      {bulletTitle}\n      {qualitativeRange}\n      {primarySegmentedMeasure}\n      {primaryDotMeasure}\n      {comparativeErrorMeasure}\n      {comparativeWarningMeasure}\n      {getComparativeZeroMeasure()}\n      {getWrappedLegend()}\n    </React.Fragment>\n  );\n\n  return standalone ? (\n    <ChartContainer\n      desc={ariaDesc}\n      height={height}\n      title={ariaTitle}\n      theme={theme}\n      width={width}\n    >\n      {bulletChart}\n    </ChartContainer>\n  ) : (\n    <React.Fragment>\n      {bulletChart}\n    </React.Fragment>\n  );\n};\n\nhoistNonReactStatics(ChartBullet, VictoryChart);\n"],"file":"ChartBullet.js"}