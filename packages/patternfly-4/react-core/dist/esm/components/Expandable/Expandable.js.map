{"version":3,"sources":["../../../../src/components/Expandable/Expandable.tsx"],"names":["React","styles","css","AngleRightIcon","Expandable","Component","constructor","props","state","isExpanded","render","onToggle","onToggleProp","isFocused","isHovered","isActive","className","toggleText","children","propOrStateIsExpanded","undefined","setState","expandable","modifiers","expanded","expandableToggle","focus","hover","active","expandableToggleIcon","expandableContent"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,+DAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAyBA,OAAO,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAA2E;AAChFC,EAAAA,WAAW,CAACC,KAAD,EAAyB;AAClC,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAEF,KAAK,CAACE;AADP,KAAb;AAGD;;AAWDC,EAAAA,MAAM,GAAG;AACP,wBAUI,KAAKH,KAVT;AAAA,UAAM;AACJI,MAAAA,QAAQ,EAAEC,YADN;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,SALI;AAMJC,MAAAA,UANI;AAOJC,MAAAA,QAPI;AAQJT,MAAAA;AARI,KAAN;AAAA,UASKF,KATL;;AAWA,QAAII,QAAQ,GAAGC,YAAf;AACA,QAAIO,qBAAqB,GAAGV,UAA5B,CAbO,CAeP;;AACA,QAAIA,UAAU,KAAKW,SAAnB,EAA8B;AAC5BD,MAAAA,qBAAqB,GAAG,KAAKX,KAAL,CAAWC,UAAnC;;AACAE,MAAAA,QAAQ,GAAG,MAAM;AACfC,QAAAA,YAAY;AACZ,aAAKS,QAAL,CAAc;AAAEZ,UAAAA,UAAU,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAA1B,SAAd;AACD,OAHD;AAID;;AAED,WACE,wCAASF,KAAT;AAAgB,MAAA,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACqB,UAAR,EAAoBH,qBAAqB,IAAIlB,MAAM,CAACsB,SAAP,CAAiBC,QAA9D,EAAwER,SAAxE;AAA9B,QACE;AACE,MAAA,SAAS,EAAEd,GAAG,CACZD,MAAM,CAACwB,gBADK,EAEZZ,SAAS,IAAIZ,MAAM,CAACsB,SAAP,CAAiBG,KAFlB,EAGZZ,SAAS,IAAIb,MAAM,CAACsB,SAAP,CAAiBI,KAHlB,EAIZZ,QAAQ,IAAId,MAAM,CAACsB,SAAP,CAAiBK,MAJjB,CADhB;AAOE,MAAA,IAAI,EAAC,QAPP;AAQE,uBAAeT,qBARjB;AASE,MAAA,OAAO,EAAER;AATX,OAWE,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAET,GAAG,CAACD,MAAM,CAAC4B,oBAAR,CAA9B;AAA6D;AAA7D,MAXF,EAYE,kCAAOZ,UAAP,CAZF,CADF,EAeE;AAAK,MAAA,SAAS,EAAEf,GAAG,CAACD,MAAM,CAAC6B,iBAAR,CAAnB;AAA+C,MAAA,MAAM,EAAE,CAACX;AAAxD,OACGD,QADH,CAfF,CADF;AAqBD;;AA/D+E;;gBAArEd,U;AArBXc,EAAAA,Q;AAEAF,EAAAA,S;AAEAP,EAAAA,U;AAEAQ,EAAAA,U;AAEAN,EAAAA,Q;AAEAE,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,Q;;;gBAOWX,U,kBASW;AACpBY,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,UAAU,EAAE,EAFQ;AAGpBN,EAAAA,QAAQ,EAAE,MAAWS,SAHD;AAIpBP,EAAAA,SAAS,EAAE,KAJS;AAKpBE,EAAAA,QAAQ,EAAE,KALU;AAMpBD,EAAAA,SAAS,EAAE;AANS,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Expandable/expandable';\nimport { css } from '@patternfly/react-styles';\nimport { AngleRightIcon } from '@patternfly/react-icons';\n\nexport interface ExpandableProps {\n  /** Content rendered inside the Expandable Component */\n  children: React.ReactNode;\n  /** Additional classes added to the Expandable Component */\n  className?: string;\n  /** Flag to indicate if the content is expanded */\n  isExpanded?: boolean;\n  /** Text that appears in the  toggle */\n  toggleText?: string;\n  /** Callback function to toggle the expandable content */\n  onToggle?: () => void;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n}\n\ninterface ExpandableState {\n  isExpanded: boolean;\n}\n\nexport class Expandable extends React.Component<ExpandableProps, ExpandableState> {\n  constructor(props: ExpandableProps) {\n    super(props);\n\n    this.state = {\n      isExpanded: props.isExpanded\n    };\n  }\n\n  static defaultProps = {\n    className: '',\n    toggleText: '',\n    onToggle: (): any => undefined,\n    isFocused: false,\n    isActive: false,\n    isHovered: false\n  };\n\n  render() {\n    const {\n      onToggle: onToggleProp,\n      isFocused,\n      isHovered,\n      isActive,\n      className,\n      toggleText,\n      children,\n      isExpanded,\n      ...props\n    } = this.props;\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded;\n\n    // uncontrolled\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n      onToggle = () => {\n        onToggleProp();\n        this.setState({ isExpanded: !this.state.isExpanded });\n      };\n    }\n\n    return (\n      <div {...props} className={css(styles.expandable, propOrStateIsExpanded && styles.modifiers.expanded, className)}>\n        <button\n          className={css(\n            styles.expandableToggle,\n            isFocused && styles.modifiers.focus,\n            isHovered && styles.modifiers.hover,\n            isActive && styles.modifiers.active\n          )}\n          type=\"button\"\n          aria-expanded={propOrStateIsExpanded}\n          onClick={onToggle}\n        >\n          <AngleRightIcon className={css(styles.expandableToggleIcon)} aria-hidden />\n          <span>{toggleText}</span>\n        </button>\n        <div className={css(styles.expandableContent)} hidden={!propOrStateIsExpanded}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n"],"file":"Expandable.js"}