{"version":3,"sources":["../../../../src/components/Tooltip/Tooltip.tsx"],"names":["TooltipPosition","Tooltip","tip","popperChildren","tooltip","classList","add","styles","event","keyCode","KEY_CODES","ESCAPE_KEY","state","isVisible","hide","document","addEventListener","handleEscKeyClick","removeEventListener","React","cloneElement","props","children","isAppLauncher","position","trigger","enableFlip","className","bodyContent","content","entryDelay","exitDelay","appendTo","zIndex","maxWidth","distance","aria","boundary","flipBehavior","tippyProps","rest","modifiers","top","storeTippyInstance","preventOverflow","enabled","extendChildren","Component","body","tooltipMaxWidth","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PopoverBase from '../../helpers/PopoverBase/PopoverBase';\nimport { Instance as TippyInstance, Props as TippyProps } from 'tippy.js';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy.css';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy-overrides.css';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { c_tooltip_MaxWidth as tooltipMaxWidth } from '@patternfly/react-tokens';\nimport { ReactElement } from 'react';\n\nexport enum TooltipPosition {\n  auto = 'auto',\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right'\n}\n\nexport interface TooltipProps {\n  /** The element to append the tooltip to, defaults to body */\n  appendTo?: Element | ((ref: Element) => Element);\n  /** Aria-labelledby or aria-describedby for tooltip */\n  aria?: 'describedby' | 'labelledby';\n  /** If enableFlip is true, the tooltip responds to this boundary */\n  boundary?: 'scrollParent' | 'window' | 'viewport' | HTMLElement;\n  /** The reference element to which the tooltip is relatively placed to */\n  children: ReactElement<any>;\n  /** Tooltip additional class */\n  className?: string;\n  /** Tooltip content */\n  content: React.ReactNode;\n  /** Distance of the tooltip to its target, defaults to 15 */\n  distance?: number;\n  /** If true, tries to keep the tooltip in view by flipping it if necessary */\n  enableFlip?: boolean;\n  /** Delay in ms before the tooltip appears */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip disappears */\n  exitDelay?: number;\n  /**\n   * The desired position to flip the tooltip to if the initial position is not possible.\n   * By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\n   * You can also pass an array of positions that determines the flip order. It should contain the initial position\n   * followed by alternative positions if that position is unavailable.\n   * Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n   * ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\n   * space to the right, so it finally shows the tooltip on the left.\n   */\n  flipBehavior?: 'flip' | ('top' | 'bottom' | 'left' | 'right')[];\n  /** If true, displays as an application launcher */\n  isAppLauncher?: boolean;\n  /** Maximum width of the tooltip (default 12.5rem) */\n  maxWidth?: string;\n  /**\n   * Tooltip position. Note: With 'enableFlip' set to true,\n   * it will change the position if there is not enough space for the starting position.\n   * The behavior of where it flips to can be controlled through the flipBehavior prop.\n   */\n  position?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n  /** Tooltip trigger: click, mouseenter, focus, manual  */\n  trigger?: string;\n  /** value for visibility when trigger is 'manual' */\n  isVisible?: boolean;\n  /** z-index of the tooltip */\n  zIndex?: number;\n  /** additional Props to pass through to tippy.js */\n  tippyProps?: TippyProps;\n}\n\nexport class Tooltip extends React.Component<TooltipProps> {\n  private tip: TippyInstance;\n  static defaultProps = {\n    position: 'top',\n    trigger: 'mouseenter focus',\n    isVisible: false,\n    enableFlip: true,\n    className: '',\n    entryDelay: 500,\n    exitDelay: 500,\n    appendTo: () => document.body,\n    zIndex: 9999,\n    maxWidth: tooltipMaxWidth && tooltipMaxWidth.value,\n    isAppLauncher: false,\n    distance: 15,\n    aria: 'describedby',\n    boundary: 'window',\n    // For every initial starting position, there are 3 escape positions\n    flipBehavior: ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n    tippyProps: {}\n  };\n\n  storeTippyInstance = (tip: TippyInstance) => {\n    tip.popperChildren.tooltip.classList.add(styles.tooltip);\n    this.tip = tip;\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.tip.state.isVisible) {\n      this.tip.hide();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  extendChildren() {\n    return React.cloneElement(this.props.children, {\n      isAppLauncher: this.props.isAppLauncher\n    });\n  }\n\n  render() {\n    const {\n      position,\n      trigger,\n      isVisible,\n      enableFlip,\n      children,\n      className,\n      content: bodyContent,\n      entryDelay,\n      exitDelay,\n      appendTo,\n      zIndex,\n      maxWidth,\n      isAppLauncher,\n      distance,\n      aria,\n      boundary,\n      flipBehavior,\n      tippyProps,\n      ...rest\n    } = this.props;\n    const content = (\n      <div\n        className={css(!enableFlip && getModifier(styles, position, styles.modifiers.top), className)}\n        role=\"tooltip\"\n        {...rest}\n      >\n        <TooltipContent>{bodyContent}</TooltipContent>\n      </div>\n    );\n    return (\n      <PopoverBase\n        {...tippyProps}\n        arrow\n        aria={aria}\n        onCreate={this.storeTippyInstance}\n        maxWidth={maxWidth}\n        zIndex={zIndex}\n        appendTo={appendTo}\n        content={content}\n        lazy\n        animateFill={false}\n        theme=\"pf-tooltip\"\n        performance\n        placement={position}\n        trigger={trigger}\n        delay={[entryDelay, exitDelay]}\n        distance={distance}\n        flip={enableFlip}\n        flipBehavior={flipBehavior}\n        boundary={boundary}\n        isVisible={isVisible}\n        popperOptions={{\n          modifiers: {\n            preventOverflow: {\n              enabled: enableFlip\n            },\n            hide: {\n              enabled: enableFlip\n            }\n          }\n        }}\n      >\n        {isAppLauncher ? this.extendChildren() : children}\n      </PopoverBase>\n    );\n  }\n}\n"],"file":"Tooltip.js"}