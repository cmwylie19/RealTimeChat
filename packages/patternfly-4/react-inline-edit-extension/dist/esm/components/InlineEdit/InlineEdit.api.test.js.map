{"version":3,"sources":["../../../../src/components/InlineEdit/InlineEdit.api.test.js"],"names":["React","mount","Table","TableHeader","TableBody","RowWrapper","TextInput","default","editableRowWrapper","editableTableBody","inlineEditFormatterFactory","TableEditConfirmation","TableTextInput","rows","columns","mockClosest","makeTableId","firstColTitle","lastColTitle","firstInputName","secondInputName","editRowIndex","firstColEditedRowInputId","rowIndex","columnIndex","column","property","name","lastColEditedRowInputId","length","describe","mountOptions","container","beforeEach","attachTo","getDOMNode","getAttribute","contains","elem","selector","getElementsByTagName","undefined","afterEach","unmount","test","ComposedBody","ComposedRowWrapper","onBlur","jest","fn","inlineEditingFormatter","renderEdit","value","activeEditId","firstInputId","secondInputId","editableCols","title","cellFormatters","editableRows","map","row","cells","isEditing","editConfig","onEditCellClicked","editConfirmationType","ROW","onEditConfirmed","onEditCanceled","view","editTextInputWrapper","find","first","prop","currentTarget","expect","toHaveBeenCalled","mock","calls","toHaveLength","toBe","hostNodes","simulate","setTimeout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,UAAxC,QAA0D,yBAA1D;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,sBAA9C;AACA,SAASD,OAAO,IAAIE,iBAApB,QAA6C,qBAA7C;AACA,SAASC,0BAAT,QAA2C,SAA3C;AACA,SAASC,qBAAT,QAAsC,aAAtC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,SAASC,IAAT,EAAeC,OAAf,QAA8B,8BAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,4BAAzC;AAEA,MAAMC,aAAa,GAAG,cAAtB;AACA,MAAMC,YAAY,GAAG,aAArB;AACA,MAAMC,cAAc,GAAG,UAAvB;AACA,MAAMC,eAAe,GAAG,UAAxB;AAEA,MAAMC,YAAY,GAAG,CAArB;AAEA,MAAMC,wBAAwB,GAAG;AAC/BC,EAAAA,QAAQ,EAAEF,YADqB;AAE/BG,EAAAA,WAAW,EAAE,CAFkB;AAG/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAET;AADJ,GAHuB;AAM/BU,EAAAA,IAAI,EAAER;AANyB,CAAjC;AASA,MAAMS,uBAAuB,GAAG;AAC9BL,EAAAA,QAAQ,EAAEF,YADoB;AAE9BG,EAAAA,WAAW,EAAEV,OAAO,CAACe,MAAR,GAAiB,CAAjB,GAAqB,CAFJ;AAG9BJ,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAER;AADJ,GAHsB;AAM9BS,EAAAA,IAAI,EAAEP;AANwB,CAAhC;AASAU,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/B,MAAIC,YAAJ;AACA,MAAIC,SAAJ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,SAAS,GAAG/B,KAAK,CAAC,gCAAD,CAAjB;AAEA8B,IAAAA,YAAY,GAAG;AACbG,MAAAA,QAAQ,EAAEF,SAAS,CAACG,UAAV;AADG,KAAf,CAHe,CAOf;;AACApB,IAAAA,WAAW,CACT;AACE,oBAAc;AACZqB,QAAAA,YAAY,EAAE,MAAMd,wBAAwB,CAACE,WADjC;AAEZa,QAAAA,QAAQ,EAAEC,IAAI,IAAIA,IAAI,CAACF,YAAL,CAAkB,IAAlB,MAA4BpB,WAAW,CAACM,wBAAD;AAF7C,OADhB;AAKE,cAAQ;AACNc,QAAAA,YAAY,EAAE,MAAMpB,WAAW,CAACM,wBAAD;AADzB;AALV,KADS,EAUTiB,QAAQ,IAAKA,QAAQ,KAAK,OAAb,GAAuBP,SAAS,CAACG,UAAV,GAAuBK,oBAAvB,CAA4C,OAA5C,EAAqD,CAArD,CAAvB,GAAiFC,SAVrF,EAWT,IAXS,CAAX;AAaD,GArBS,CAAV;AAuBAC,EAAAA,SAAS,CAAC,MAAM;AACdV,IAAAA,SAAS,CAACW,OAAV;AACD,GAFQ,CAAT;AAIAC,EAAAA,IAAI,CAAC,8BAAD,EAAiC,MAAM;AACzC,UAAMC,YAAY,GAAGpC,iBAAiB,CAACL,SAAD,CAAtC;AACA,UAAM0C,kBAAkB,GAAGtC,kBAAkB,CAACH,UAAD,CAA7C;AAEA,UAAM0C,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AAEA,UAAMC,sBAAsB,GAAGxC,0BAA0B,CAAC;AACxDyC,MAAAA,UAAU,EAAE,CAACC,KAAD,EAAQ;AAAE5B,QAAAA,WAAF;AAAeD,QAAAA,QAAf;AAAyBE,QAAAA;AAAzB,OAAR,EAA2C;AAAE4B,QAAAA;AAAF,OAA3C,KAAgE;AAC1E,cAAMC,YAAY,GAAGtC,WAAW,CAAC;AAC/BO,UAAAA,QAD+B;AAE/BC,UAAAA,WAF+B;AAG/BC,UAAAA,MAH+B;AAI/BE,UAAAA,IAAI,EAAER;AAJyB,SAAD,CAAhC;AAMA,cAAMoC,aAAa,GAAGvC,WAAW,CAAC;AAChCO,UAAAA,QADgC;AAEhCC,UAAAA,WAFgC;AAGhCC,UAAAA,MAHgC;AAIhCE,UAAAA,IAAI,EAAEP;AAJ0B,SAAD,CAAjC;AAMA,eACE,oBAAC,KAAD,CAAO,QAAP,QACE,oBAAC,cAAD;AACE,UAAA,EAAE,EAAEkC,YADN;AAEE,UAAA,YAAY,EAAEF,KAFhB;AAGE,UAAA,MAAM,EAAEL,MAHV;AAIE,UAAA,SAAS,EAAEM,YAAY,KAAKC;AAJ9B,UADF,EAOE,oBAAC,cAAD;AACE,UAAA,EAAE,EAAEC,aADN;AAEE,UAAA,YAAY,EAAEH,KAFhB;AAGE,UAAA,MAAM,EAAEL,MAHV;AAIE,UAAA,SAAS,EAAEM,YAAY,KAAKE;AAJ9B,UAPF,CADF;AAgBD;AA9BuD,KAAD,CAAzD;AAiCA,UAAMC,YAAY,GAAG,CACnB;AACEC,MAAAA,KAAK,EAAExC,aADT;AAEEyC,MAAAA,cAAc,EAAE,CAACR,sBAAD;AAFlB,KADmB,EAKnB,GAAGpC,OALgB,EAMnB;AACE2C,MAAAA,KAAK,EAAEvC,YADT;AAEEwC,MAAAA,cAAc,EAAE,CAACR,sBAAD;AAFlB,KANmB,CAArB;AAYA,UAAMS,YAAY,GAAG9C,IAAI,CAAC+C,GAAL,CAASC,GAAG,sBAC5BA,GAD4B;AAE/BC,MAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,GAAGD,GAAG,CAACC,KAAZ,EAAmB,EAAnB,CAFwB,CAED;;AAFC,MAAZ,CAArB;AAIAH,IAAAA,YAAY,CAACtC,YAAD,CAAZ,CAA2B0C,SAA3B,GAAuC,IAAvC;AAEA,UAAMC,UAAU,GAAG;AACjBX,MAAAA,YAAY,EAAErC,WAAW,CAACY,uBAAD,CADR;AAEjBqC,MAAAA,iBAAiB,EAAEjB,IAAI,CAACC,EAAL,EAFF;AAGjBiB,MAAAA,oBAAoB,EAAEvD,qBAAqB,CAACwD,GAH3B;AAIjBC,MAAAA,eAAe,EAAEpB,IAAI,CAACC,EAAL,EAJA;AAKjBoB,MAAAA,cAAc,EAAErB,IAAI,CAACC,EAAL;AALC,KAAnB;AAOA,UAAMqB,IAAI,GAAGrE,KAAK,CAChB,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,gBAAf;AAAgC,MAAA,KAAK,EAAEuD,YAAvC;AAAqD,MAAA,IAAI,EAAEG,YAA3D;AAAyE,MAAA,UAAU,EAAEb;AAArF,OACE,oBAAC,WAAD,OADF,EAEE,oBAAC,YAAD;AAAc,MAAA,UAAU,EAAEkB;AAA1B,MAFF,CADgB,EAKhBjC,YALgB,CAAlB,CAhEyC,CAwEzC;;AACA,UAAMwC,oBAAoB,GAAGD,IAAI,CAC9BE,IAD0B,CACrBlE,SADqB,EAE1BkE,IAF0B,CAEpB,IAAGxD,WAAW,CAACY,uBAAD,CAA0B,EAFpB,EAG1B6C,KAH0B,EAA7B;AAIAF,IAAAA,oBAAoB,CAACG,IAArB,CAA0B,QAA1B,EAAoC;AAAEC,MAAAA,aAAa,EAAE;AAAEvB,QAAAA,KAAK,EAAE;AAAT;AAAjB,KAApC;AAEAwB,IAAAA,MAAM,CAAC7B,MAAD,CAAN,CAAe8B,gBAAf;AACAD,IAAAA,MAAM,CAAC7B,MAAM,CAAC+B,IAAP,CAAYC,KAAb,CAAN,CAA0BC,YAA1B,CAAuC,CAAvC;AACAJ,IAAAA,MAAM,CAAC7B,MAAM,CAAC+B,IAAP,CAAYC,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAD,CAAN,CAAgCE,IAAhC,CAAqC,OAArC,EAjFyC,CAmFzC;;AACAX,IAAAA,IAAI,CACDE,IADH,CACS,IAAGxD,WAAW,CAACM,wBAAD,CAA2B,EADlD,EAEG4D,SAFH,GAGGC,QAHH,CAGY,WAHZ,EApFyC,CAyFzC;;AACAC,IAAAA,UAAU,CAAC,MAAMR,MAAM,CAACZ,UAAU,CAACC,iBAAZ,CAAN,CAAqCY,gBAArC,EAAP,EAAgE,CAAhE,CAAV,CA1FyC,CA4FzC;;AACAP,IAAAA,IAAI,CAACE,IAAL,CAAU,kEAAV,EAA8EW,QAA9E,CAAuF,SAAvF;AACAP,IAAAA,MAAM,CAACZ,UAAU,CAACI,eAAZ,CAAN,CAAmCS,gBAAnC;AAEAP,IAAAA,IAAI,CAACE,IAAL,CAAU,gEAAV,EAA4EW,QAA5E,CAAqF,SAArF;AACAP,IAAAA,MAAM,CAACZ,UAAU,CAACK,cAAZ,CAAN,CAAkCQ,gBAAlC;AACD,GAlGG,CAAJ;AAmGD,CAlIO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport { Table, TableHeader, TableBody, RowWrapper } from '@patternfly/react-table';\nimport { TextInput } from '@patternfly/react-core';\n\nimport { default as editableRowWrapper } from './editableRowWrapper';\nimport { default as editableTableBody } from './editableTableBody';\nimport { inlineEditFormatterFactory } from './utils';\nimport { TableEditConfirmation } from './constants';\nimport { TableTextInput } from '../TableTextInput';\n\nimport { rows, columns } from '../../test-helpers/data-sets';\nimport { mockClosest, makeTableId } from '../../test-helpers/helpers';\n\nconst firstColTitle = 'editcolfirst';\nconst lastColTitle = 'editcollast';\nconst firstInputName = 'inputOne';\nconst secondInputName = 'inputTwo';\n\nconst editRowIndex = 2;\n\nconst firstColEditedRowInputId = {\n  rowIndex: editRowIndex,\n  columnIndex: 0,\n  column: {\n    property: firstColTitle\n  },\n  name: firstInputName\n};\n\nconst lastColEditedRowInputId = {\n  rowIndex: editRowIndex,\n  columnIndex: columns.length + 2 - 1,\n  column: {\n    property: lastColTitle\n  },\n  name: secondInputName\n};\n\ndescribe('Editable table', () => {\n  let mountOptions;\n  let container;\n\n  beforeEach(() => {\n    container = mount(<div />);\n\n    mountOptions = {\n      attachTo: container.getDOMNode()\n    };\n\n    // mock closest for selecting the first column (firing onEditCellClicked) and resolving table for confirm buttons\n    mockClosest(\n      {\n        '[data-key]': {\n          getAttribute: () => firstColEditedRowInputId.columnIndex,\n          contains: elem => elem.getAttribute('id') === makeTableId(firstColEditedRowInputId)\n        },\n        '[id]': {\n          getAttribute: () => makeTableId(firstColEditedRowInputId)\n        }\n      },\n      selector => (selector === 'table' ? container.getDOMNode().getElementsByTagName('table')[0] : undefined),\n      true\n    );\n  });\n\n  afterEach(() => {\n    container.unmount();\n  });\n\n  test('should call correct function', () => {\n    const ComposedBody = editableTableBody(TableBody);\n    const ComposedRowWrapper = editableRowWrapper(RowWrapper);\n\n    const onBlur = jest.fn();\n\n    const inlineEditingFormatter = inlineEditFormatterFactory({\n      renderEdit: (value, { columnIndex, rowIndex, column }, { activeEditId }) => {\n        const firstInputId = makeTableId({\n          rowIndex,\n          columnIndex,\n          column,\n          name: firstInputName\n        });\n        const secondInputId = makeTableId({\n          rowIndex,\n          columnIndex,\n          column,\n          name: secondInputName\n        });\n        return (\n          <React.Fragment>\n            <TableTextInput\n              id={firstInputId}\n              defaultValue={value}\n              onBlur={onBlur}\n              autoFocus={activeEditId === firstInputId}\n            />\n            <TableTextInput\n              id={secondInputId}\n              defaultValue={value}\n              onBlur={onBlur}\n              autoFocus={activeEditId === secondInputId}\n            />\n          </React.Fragment>\n        );\n      }\n    });\n\n    const editableCols = [\n      {\n        title: firstColTitle,\n        cellFormatters: [inlineEditingFormatter]\n      },\n      ...columns,\n      {\n        title: lastColTitle,\n        cellFormatters: [inlineEditingFormatter]\n      }\n    ];\n\n    const editableRows = rows.map(row => ({\n      ...row,\n      cells: ['', ...row.cells, ''] // add two new columns\n    }));\n    editableRows[editRowIndex].isEditing = true;\n\n    const editConfig = {\n      activeEditId: makeTableId(lastColEditedRowInputId),\n      onEditCellClicked: jest.fn(),\n      editConfirmationType: TableEditConfirmation.ROW,\n      onEditConfirmed: jest.fn(),\n      onEditCanceled: jest.fn()\n    };\n    const view = mount(\n      <Table caption=\"Editable table\" cells={editableCols} rows={editableRows} rowWrapper={ComposedRowWrapper}>\n        <TableHeader />\n        <ComposedBody editConfig={editConfig} />\n      </Table>,\n      mountOptions\n    );\n\n    // calls onBlur properly\n    const editTextInputWrapper = view\n      .find(TextInput)\n      .find(`#${makeTableId(lastColEditedRowInputId)}`)\n      .first();\n    editTextInputWrapper.prop('onBlur')({ currentTarget: { value: 'water' } });\n\n    expect(onBlur).toHaveBeenCalled();\n    expect(onBlur.mock.calls).toHaveLength(1);\n    expect(onBlur.mock.calls[0][0]).toBe('water');\n\n    // responds to cell click\n    view\n      .find(`#${makeTableId(firstColEditedRowInputId)}`)\n      .hostNodes()\n      .simulate('mousedown');\n\n    // should immediately call onEditCellClicked\n    setTimeout(() => expect(editConfig.onEditCellClicked).toHaveBeenCalled(), 0);\n\n    // responds to confirmation button clicks\n    view.find('.pf-c-table__inline-edit-buttons button.pf-c-button.pf-m-primary').simulate('mouseup');\n    expect(editConfig.onEditConfirmed).toHaveBeenCalled();\n\n    view.find('.pf-c-table__inline-edit-buttons button.pf-c-button.pf-m-plain').simulate('mouseup');\n    expect(editConfig.onEditCanceled).toHaveBeenCalled();\n  });\n});\n"],"file":"InlineEdit.api.test.js"}