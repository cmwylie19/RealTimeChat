{"version":3,"sources":["../../../../../src/components/Table/utils/headerUtils.tsx"],"names":["generateHeader","title","origTransforms","transforms","origFormatters","formatters","columnTransforms","header","label","scopeColTransformer","emptyCol","hasOwnProperty","generateCell","extra","cellFormatters","cellTransforms","cell","mapProps","defaultTitle","mapHeader","column","key","props","property","toLowerCase","trim","replace","extraParams","data","selectableTransforms","onSelect","canSelectAll","selectable","actionsTransforms","actions","actionResolver","areActionsDisabled","emptyTD","collapsibleTransfroms","onCollapse","collapsible","addAdditionalCellTranforms","additional","expandContent","map","parentIdCell","parentId","length","mapOpenedRows","rows","children","reduce","acc","curr","parent","isOpen","some","oneRow","rowData","cells","oneCell","calculateColumns","headerRows","oneCol"],"mappings":"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","sourcesContent":["import {\n  scopeColTransformer,\n  selectable,\n  cellActions,\n  emptyCol,\n  mapProps,\n  collapsible,\n  emptyTD,\n  expandedRow,\n  parentId\n} from './transformers';\nimport { defaultTitle } from './formatters';\nimport { ICell, IRow, IActions, IActionsResolver, IAreActionsDisabled, OnSelect, OnCollapse } from '../Table';\n\n/**\n * Generate header with transforms and formatters from custom header object.\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @return {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = (\n  { transforms: origTransforms, formatters: origFormatters, columnTransforms, header }:\n  { transforms?: ICell['transforms'], formatters?: ICell['formatters'], columnTransforms?: ICell['columnTransforms'], header?: ICell},\n  title?: string | ICell\n) => ({\n  ...header,\n  label: title,\n  transforms: [\n    scopeColTransformer,\n    emptyCol,\n    ...(origTransforms || []),\n    ...(columnTransforms || []),\n    ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])\n  ],\n  formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])]\n});\n\n/**\n * Function to generate cell for header config to change look of each cell.\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\nconst generateCell = ({ cellFormatters, cellTransforms, columnTransforms, cell }:\n  { cellFormatters?: ICell['cellFormatters'], cellTransforms?: ICell['cellTransforms'], columnTransforms?: ICell['columnTransforms'], cell?: ICell}, extra: any) => ({\n  ...cell,\n  transforms: [\n    ...(cellTransforms || []),\n    ...(columnTransforms || []),\n    ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []),\n    mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n  ],\n  formatters: [\n    defaultTitle,\n    ...(cellFormatters || []),\n    ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])\n  ]\n});\n\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cels as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\nconst mapHeader = (column: ICell, extra: any, key: number, ...props: any) => {\n  const title = (column.hasOwnProperty('title') ? column.title : column) as string | ICell;\n  return {\n    property:\n      (typeof title === 'string' &&\n        title\n          .toLowerCase()\n          .trim()\n          .replace(/\\s/g, '-')) ||\n      `column-${key}`,\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: {\n      'data-label': typeof title === 'string' ? title : `column-${key}`,\n      'data-key': key,\n      ...(column.hasOwnProperty('props') ? column.props : {}),\n      ...props\n    }\n  };\n};\n\n/**\n * Function to define select cell in first column.\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst selectableTransforms = ({ onSelect, canSelectAll }: { onSelect: OnSelect, canSelectAll: boolean}) => [\n  ...(onSelect\n    ? [\n        {\n          title: '',\n          transforms: (canSelectAll && [selectable]) || null,\n          cellTransforms: [selectable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define actions in last column.\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst actionsTransforms = ({ actions, actionResolver, areActionsDisabled }:\n  { actions: IActions, actionResolver: IActionsResolver, areActionsDisabled: IAreActionsDisabled}) => [\n  ...(actionResolver || actions\n    ? [\n        {\n          title: '',\n          transforms: [emptyTD],\n          cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define collapsible in first column.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst collapsibleTransfroms = ({ onCollapse }: { onCollapse: OnCollapse}) => [\n  ...(onCollapse\n    ? [\n        {\n          title: '',\n          transforms: [emptyTD],\n          cellTransforms: [collapsible]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to add additional cell transforms to object.\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\nconst addAdditionalCellTranforms = (cell: ICell, additional: any) => ({\n  ...(cell.hasOwnProperty('title') ? cell : { title: cell }),\n  cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional]\n});\n\n/**\n * Function to change expanded row with additional transforms.\n * @param {*} header info with cellTransforms.\n * @param {*} extraObject with onCollapse function.\n */\nconst expandContent = (header: (ICell | string)[], { onCollapse }: { onCollapse: OnCollapse }) => {\n  if (!onCollapse) {\n    return header;\n  }\n\n  return header.map((cell: ICell | string, key: number) => {\n    const parentIdCell = addAdditionalCellTranforms(cell as ICell, parentId);\n    return key === 0 ? addAdditionalCellTranforms(parentIdCell as ICell, expandedRow(header.length)) : parentIdCell;\n  });\n};\n\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\nexport const mapOpenedRows = (rows: IRow[], children: any) =>\n  rows.reduce((acc: any, curr, key) => {\n    if (curr.hasOwnProperty('parent')) {\n      const parent = acc.length > 0 && acc[acc.length - 1];\n      if (parent) {\n        acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n        if (curr.hasOwnProperty('compoundParent')) {\n          // if this is compound expand, check for any open child cell\n          acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some((oneRow: IRow) =>\n            oneRow.props.rowData.cells.some((oneCell: ICell) => oneCell.props && oneCell.props.isOpen)\n          );\n        }\n      }\n    } else {\n      acc = [...acc, { ...curr, rows: [children[key]] }];\n    }\n    return acc;\n  }, []) as IRow[];\n\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @return {*} expected object for react tabular table.\n */\nexport const calculateColumns = (headerRows: (ICell | string)[], extra: any) =>\n  headerRows &&\n  [\n    ...collapsibleTransfroms(extra),\n    ...selectableTransforms(extra),\n    ...expandContent(headerRows, extra),\n    ...actionsTransforms(extra)\n  ].map((oneCol, key) => ({\n    ...mapHeader(oneCol as ICell, extra, key)\n  }));\n"],"file":"headerUtils.js"}