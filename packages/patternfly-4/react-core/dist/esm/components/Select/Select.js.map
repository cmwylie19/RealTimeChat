{"version":3,"sources":["../../../../src/components/Select/Select.tsx"],"names":["React","styles","badgeStyles","formStyles","buttonStyles","css","TimesCircleIcon","SelectMenu","SelectOption","SelectToggle","SelectContext","SelectVariant","SelectDirection","Chip","ChipGroup","keyHandler","getNextIndex","currentId","Select","Component","createRef","openedOnEnter","typeaheadInputValue","typeaheadActiveChild","typeaheadFilteredChildren","Children","toArray","props","children","typeaheadCurrIndex","creatableValue","prevProps","prevState","state","refCollection","focus","setState","selections","innerText","e","onFilter","isCreatable","onCreateOption","createText","noResultsFoundText","input","RegExp","target","value","toString","err","replace","filter","child","getDisplay","search","length","push","newValue","stopPropagation","ref","index","position","isExpanded","onToggle","click","nextIndex","includes","type","item","findText","multi","forEach","join","extendTypeaheadChildren","map","cloneElement","isFocused","render","className","variant","direction","onSelect","onClear","toggleId","isGrouped","isPlain","isDisabled","ariaLabelledBy","ariaLabelTypeAhead","ariaLabelClear","ariaLabelToggle","ariaLabelRemove","ariaLabel","placeholderText","width","maxHeight","toggleIcon","selectToggleId","childPlaceholderText","childPlaceholder","isPlaceholder","selectedChips","typeaheadMulti","select","modifiers","expanded","up","top","parentRef","onClose","onEnter","handleTypeaheadKeys","single","selectToggleWrapper","selectToggleIcon","selectToggleText","checkbox","Array","isArray","selectToggleBadge","badge","read","typeahead","preventDefault","formControl","selectToggleTypeahead","id","onChange","handleFocus","button","plain","selectToggleClear","clearSelection","sendRef","handleArrowKeys","down","Function","prototype","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport { TimesCircleIcon } from '@patternfly/react-icons';\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption, SelectOptionObject } from './SelectOption';\nimport { SelectToggle } from './SelectToggle';\nimport { SelectContext, SelectVariant, SelectDirection } from './selectConstants';\nimport { Chip, ChipGroup } from '../ChipGroup';\nimport { keyHandler, getNextIndex } from '../../helpers/util';\nimport { Omit } from '../../helpers/typeUtils';\n\n// seed for the aria-labelledby ID\nlet currentId = 0;\n\nexport interface SelectProps\n  extends Omit<React.HTMLProps<HTMLDivElement>, 'onSelect' | 'ref' | 'checked' | 'selected'> {\n  /** Content rendered inside the Select */\n  children: React.ReactElement[];\n  /** Classes applied to the root of the Select */\n  className?: string;\n  /** Flag specifying which direction the Select menu expands */\n  direction?: 'up' | 'down';\n  /** Flag to indicate if select is expanded */\n  isExpanded?: boolean;\n  /** Flag to indicate if select options are grouped */\n  isGrouped?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if select is disabled */\n  isDisabled?: boolean;\n  /** Flag to indicate if the typeahead select allows new items */\n  isCreatable?: boolean;\n  /** Text displayed in typeahead select to prompt the user to create an item */\n  createText?: string;\n  /** Title text of Select */\n  placeholderText?: string | React.ReactNode;\n  /** Text to display in typeahead select when no results are found **/\n  noResultsFoundText?: string;\n  /** Selected item */\n  selections?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Id for select toggle element */\n  toggleId?: string;\n  /** Adds accessible text to Select */\n  'aria-label'?: string;\n  /** Id of label for the Select aria-labelledby */\n  ariaLabelledBy?: string;\n  /** Label for input field of type ahead select variants */\n  ariaLabelTypeAhead?: string;\n  /** Label for clear selection button of type ahead select variants */\n  ariaLabelClear?: string;\n  /** Label for toggle of type ahead select variants */\n  ariaLabelToggle?: string;\n  /** Label for remove chip button of multiple type ahead select variant */\n  ariaLabelRemove?: string;\n  /** Callback for selection behavior */\n  onSelect?: (\n    event: React.MouseEvent | React.ChangeEvent,\n    value: string | SelectOptionObject,\n    isPlaceholder?: boolean\n  ) => void;\n  /** Callback for toggle button behavior */\n  onToggle: (isExpanded: boolean) => void;\n  /** Callback for typeahead clear button */\n  onClear?: (event: React.MouseEvent) => void;\n  /** Optional callback for custom filtering */\n  onFilter?: (e: React.ChangeEvent<HTMLInputElement>) => React.ReactElement[];\n  /** Optional callback for newly created options */\n  onCreateOption?: (newOptionValue: string) => void;\n  /** Variant of rendered Select */\n  variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n  /** Width of the select container as a number of px or string percentage */\n  width?: string | number;\n  /** Max height of the select container as a number of px or string percentage */\n  maxHeight?: string | number;\n  /** Icon element to render inside the select toggle */\n  toggleIcon?: React.ReactElement;\n}\n\nexport interface SelectState {\n  openedOnEnter: boolean;\n  typeaheadInputValue: string;\n  typeaheadActiveChild?: HTMLElement;\n  typeaheadFilteredChildren: React.ReactNode[];\n  typeaheadCurrIndex: number;\n  creatableValue: string;\n}\n\nexport class Select extends React.Component<SelectProps, SelectState> {\n  private parentRef = React.createRef<HTMLDivElement>();\n  private refCollection: HTMLElement[] = [];\n\n  static defaultProps = {\n    \"children\": [] as React.ReactElement[],\n    \"className\": '',\n    \"direction\": SelectDirection.down,\n    \"toggleId\": null as string,\n    \"isExpanded\": false,\n    \"isGrouped\": false,\n    \"isPlain\": false,\n    \"isDisabled\": false,\n    \"isCreatable\": false,\n    \"aria-label\": '',\n    \"ariaLabelledBy\": '',\n    \"ariaLabelTypeAhead\": '',\n    \"ariaLabelClear\": 'Clear all',\n    \"ariaLabelToggle\": 'Options menu',\n    \"ariaLabelRemove\": 'Remove',\n    \"selections\": '',\n    \"createText\": \"Create\",\n    \"placeholderText\": '',\n    \"noResultsFoundText\": \"No results found\",\n    \"variant\": SelectVariant.single,\n    \"width\": '',\n    \"maxHeight\": '',\n    \"onClear\": Function.prototype,\n    \"onCreateOption\": Function.prototype,\n    \"toggleIcon\": null as React.ReactElement,\n    \"onFilter\": undefined as () => {}\n  };\n\n  state = {\n    openedOnEnter: false,\n    typeaheadInputValue: '',\n    typeaheadActiveChild: null as HTMLElement,\n    typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n    typeaheadCurrIndex: -1,\n    creatableValue: ''\n  };\n\n  componentDidUpdate = (prevProps: SelectProps, prevState: SelectState) => {\n    if (!prevState.openedOnEnter && this.state.openedOnEnter) {\n      this.refCollection[0].focus();\n    }\n\n    if (prevProps.children !== this.props.children) {\n      this.setState({\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children)\n      });\n    }\n\n    if (prevProps.selections !== this.props.selections && this.state.typeaheadActiveChild) {\n      this.setState({\n        typeaheadInputValue: this.state.typeaheadActiveChild.innerText\n      });\n    }\n  }\n\n  onEnter = () => {\n    this.setState({ openedOnEnter: true });\n  }\n\n  onClose = () => {\n    this.setState({\n      openedOnEnter: false,\n      typeaheadInputValue: null,\n      typeaheadActiveChild: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      typeaheadCurrIndex: -1\n    });\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { onFilter, isCreatable, onCreateOption, createText, noResultsFoundText } = this.props;\n    let typeaheadFilteredChildren;\n    if (onFilter) {\n      typeaheadFilteredChildren = onFilter(e);\n    } else {\n      let input: RegExp;\n      try {\n        input = new RegExp(e.target.value.toString(), 'i');\n      } catch (err) {\n        input = new RegExp(e.target.value.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n      }\n      typeaheadFilteredChildren =\n        e.target.value.toString() !== ''\n          ? React.Children.toArray(this.props.children).filter(\n              (child: React.ReactNode) =>\n                this.getDisplay((child as React.ReactElement).props.value.toString(), 'text').search(input) === 0\n            )\n          : React.Children.toArray(this.props.children);\n    }\n    if (typeaheadFilteredChildren.length === 0) {\n      !isCreatable && typeaheadFilteredChildren.push(<SelectOption isDisabled key={0} value={noResultsFoundText} />);\n    }\n    if (isCreatable && e.target.value != '') {\n      const newValue = e.target.value;\n      typeaheadFilteredChildren.push(\n        <SelectOption key={0} value={newValue} onClick={() => onCreateOption && onCreateOption(newValue)}>\n          {createText} \"{newValue}\"\n        </SelectOption>\n      );\n    }\n\n    this.setState({\n      typeaheadInputValue: e.target.value,\n      typeaheadCurrIndex: -1,\n      typeaheadFilteredChildren,\n      typeaheadActiveChild: null,\n      creatableValue: e.target.value\n    });\n    this.refCollection = [];\n  }\n\n  onClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n  }\n\n  clearSelection = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.setState({\n      typeaheadInputValue: '',\n      typeaheadActiveChild: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      typeaheadCurrIndex: -1\n    });\n  }\n\n  extendTypeaheadChildren(typeaheadActiveChild: HTMLElement) {\n    return this.state.typeaheadFilteredChildren.map((child: React.ReactNode) =>\n      React.cloneElement(child as React.ReactElement, {\n        isFocused:\n          typeaheadActiveChild &&\n          (typeaheadActiveChild.innerText ===\n            this.getDisplay((child as React.ReactElement).props.value.toString(), 'text') ||\n            (this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${(child as React.ReactElement).props.value}\"`))\n      })\n    );\n  }\n\n  sendRef = (ref: React.ReactNode, index: number) => {\n    this.refCollection[index] = ref as HTMLElement;\n  }\n\n  handleArrowKeys = (index: number, position: string) => {\n    keyHandler(index, position, this.refCollection, this.refCollection);\n  }\n\n  handleFocus = () => {\n    if (!this.props.isExpanded) {\n      this.props.onToggle(true);\n    }\n  }\n\n  handleTypeaheadKeys = (position: string) => {\n    const { isExpanded, isCreatable, createText } = this.props;\n    const { typeaheadActiveChild, typeaheadCurrIndex } = this.state;\n    if (isExpanded) {\n      if (position === 'enter' && (typeaheadActiveChild || this.refCollection[0])) {\n        this.setState({\n          typeaheadInputValue:\n            (typeaheadActiveChild && typeaheadActiveChild.innerText) || this.refCollection[0].innerText\n        });\n        if (typeaheadActiveChild) {\n          typeaheadActiveChild.click();\n        } else {\n          this.refCollection[0].click();\n        }\n      } else {\n        let nextIndex;\n        if (typeaheadCurrIndex === -1 && position === 'down') {\n          nextIndex = 0;\n        } else if (typeaheadCurrIndex === -1 && position === 'up') {\n          nextIndex = this.refCollection.length - 1;\n        } else {\n          nextIndex = getNextIndex(typeaheadCurrIndex, position, this.refCollection);\n        }\n        this.setState({\n          typeaheadCurrIndex: nextIndex,\n          typeaheadActiveChild: this.refCollection[nextIndex],\n          typeaheadInputValue:\n            isCreatable && this.refCollection[nextIndex].innerText.includes(createText)\n              ? this.state.creatableValue \n              : this.refCollection[nextIndex].innerText\n        });\n      }\n    }\n  }\n\n  getDisplay = (value: string | SelectOptionObject, type: 'node' | 'text' = 'node') => {\n    if (!value) {\n      return;\n    }\n\n    const { children } = this.props;\n    const item = children.filter(child => child.props.value.toString() === value.toString())[0];\n    if (item) {\n      if (item && item.props.children) {\n        if (type === 'node') {\n          return item.props.children;\n        }\n        return this.findText(item);\n      }\n      return item.props.value.toString();\n    }\n    return value;\n  };\n\n  findText: (item: React.ReactElement) => string = (item: React.ReactElement) => {\n    if (!item.props || !item.props.children) {\n      if (typeof item !== 'string') {\n        return '';\n      }\n      return item;\n    }\n    if (typeof item.props.children === 'string') {\n      return item.props.children;\n    }\n    const multi: string[] = [];\n    React.Children.toArray(item.props.children).forEach((child: React.ReactElement) =>\n      multi.push(this.findText(child))\n    );\n    return multi.join('');\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      variant,\n      direction,\n      onToggle,\n      onSelect,\n      onClear,\n      onFilter,\n      onCreateOption,\n      toggleId,\n      isExpanded,\n      isGrouped,\n      isPlain,\n      isDisabled,\n      isCreatable,\n      selections,\n      ariaLabelledBy,\n      ariaLabelTypeAhead,\n      ariaLabelClear,\n      ariaLabelToggle,\n      ariaLabelRemove,\n      'aria-label': ariaLabel,\n      placeholderText,\n      width,\n      maxHeight,\n      toggleIcon,\n      ...props\n    } = this.props;\n    const { openedOnEnter, typeaheadInputValue, typeaheadActiveChild } = this.state;\n    const selectToggleId = toggleId || `pf-toggle-id-${currentId++}`;\n    let childPlaceholderText = null;\n    if (!selections && !placeholderText) {\n      const childPlaceholder = React.Children.toArray(children.filter((child) => child.props.isPlaceholder === true));\n      childPlaceholderText =\n        (childPlaceholder[0] && this.getDisplay(childPlaceholder[0].props.value, 'node')) ||\n        (children[0] && this.getDisplay(children[0].props.value, 'node'));\n    }\n    let selectedChips = null;\n    if (variant === SelectVariant.typeaheadMulti) {\n      selectedChips = (\n        <ChipGroup>\n          {selections &&\n            (selections as string[]).map((item) => (\n              <Chip key={item} onClick={(e) => onSelect(e, item)} closeBtnAriaLabel={ariaLabelRemove}>\n                {this.getDisplay(item, 'node')}\n              </Chip>\n            ))}\n        </ChipGroup>\n      );\n    }\n    return (\n      <div\n        className={css(\n          styles.select,\n          isExpanded && styles.modifiers.expanded,\n          direction === SelectDirection.up && styles.modifiers.top,\n          className\n        )}\n        ref={this.parentRef}\n        style={{ width }}\n      >\n        <SelectContext.Provider value={{ onSelect, onClose: this.onClose, variant }}>\n          <SelectToggle\n            id={selectToggleId}\n            parentRef={this.parentRef}\n            isExpanded={isExpanded}\n            isPlain={isPlain}\n            onToggle={onToggle}\n            onEnter={this.onEnter}\n            onClose={this.onClose}\n            ariaLabelledBy={`${ariaLabelledBy || ''} ${selectToggleId}`}\n            variant={variant}\n            ariaLabelToggle={ariaLabelToggle}\n            handleTypeaheadKeys={this.handleTypeaheadKeys}\n            isDisabled={isDisabled}\n          >\n            {variant === SelectVariant.single && (\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                <span className={css(styles.selectToggleText)}>\n                  {this.getDisplay(selections as string, 'node') || placeholderText || childPlaceholderText}\n                </span>\n              </div>\n            )}\n            {variant === SelectVariant.checkbox && (\n              <React.Fragment>\n                <div className={css(styles.selectToggleWrapper)}>\n                  {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                  <span className={css(styles.selectToggleText)}>{placeholderText}</span>\n                  {selections && (Array.isArray(selections) && selections.length > 0) && (\n                    <div className={css(styles.selectToggleBadge)}>\n                      <span className={css(badgeStyles.badge, badgeStyles.modifiers.read)}>{selections.length}</span>\n                    </div>\n                  )}\n                </div>\n              </React.Fragment>\n            )}\n            {variant === SelectVariant.typeahead && (\n              <React.Fragment>\n                <div className={css(styles.selectToggleWrapper)}>\n                  {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                  <form onSubmit={(e) => e.preventDefault()}>\n                    <input\n                      className={css(formStyles.formControl, styles.selectToggleTypeahead)}\n                      aria-activedescendant={typeaheadActiveChild && typeaheadActiveChild.id}\n                      id=\"select-typeahead\"\n                      aria-label={ariaLabelTypeAhead}\n                      placeholder={placeholderText as string}\n                      value={\n                        typeaheadInputValue !== null\n                          ? typeaheadInputValue\n                          : this.getDisplay(selections as string, 'text') || ''\n                      }\n                      type=\"text\"\n                      onChange={this.onChange}\n                      onFocus={this.handleFocus}\n                      autoComplete=\"off\"\n                      disabled={isDisabled}\n                    />\n                  </form>\n                </div>\n                {selections && (\n                  <button\n                    className={css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear)}\n                    onClick={(e) => {\n                      this.clearSelection(e);\n                      onClear(e);\n                    }}\n                    aria-label={ariaLabelClear}\n                    type=\"button\"\n                    disabled={isDisabled}\n                  >\n                    <TimesCircleIcon aria-hidden />\n                  </button>\n                )}\n              </React.Fragment>\n            )}\n            {variant === SelectVariant.typeaheadMulti && (\n              <React.Fragment>\n                <div className={css(styles.selectToggleWrapper)}>\n                  {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                  {selections && (Array.isArray(selections) && selections.length > 0) && selectedChips}\n                  <form onSubmit={(e) => e.preventDefault()}>\n                    <input\n                      className={css(formStyles.formControl, styles.selectToggleTypeahead)}\n                      aria-activedescendant={typeaheadActiveChild && typeaheadActiveChild.id}\n                      id=\"select-multi-typeahead-typeahead\"\n                      aria-label={ariaLabelTypeAhead}\n                      placeholder={placeholderText as string}\n                      value={typeaheadInputValue !== null ? typeaheadInputValue : ''}\n                      type=\"text\"\n                      onChange={this.onChange}\n                      onFocus={this.handleFocus}\n                      autoComplete=\"off\"\n                      disabled={isDisabled}\n                    />\n                  </form>\n                </div>\n                {selections && (Array.isArray(selections) && selections.length > 0) && (\n                  <button\n                    className={css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear)}\n                    onClick={(e) => {\n                      this.clearSelection(e);\n                      onClear(e);\n                    }}\n                    aria-label={ariaLabelClear}\n                    type=\"button\"\n                    disabled={isDisabled}\n                  >\n                    <TimesCircleIcon aria-hidden />\n                  </button>\n                )}\n              </React.Fragment>\n            )}\n          </SelectToggle>\n          {variant === SelectVariant.single && isExpanded && (\n            <SelectMenu\n              {...props}\n              selected={selections}\n              openedOnEnter={openedOnEnter}\n              aria-label={ariaLabel}\n              aria-labelledby={ariaLabelledBy}\n              sendRef={this.sendRef}\n              keyHandler={this.handleArrowKeys}\n              maxHeight={maxHeight}\n            >\n              {children}\n            </SelectMenu>\n          )}\n          {variant === SelectVariant.checkbox && isExpanded && (\n            <SelectMenu\n              {...props}\n              checked={selections as string[]}\n              aria-label={ariaLabel}\n              aria-labelledby={ariaLabelledBy}\n              isGrouped={isGrouped}\n              sendRef={this.sendRef}\n              keyHandler={this.handleArrowKeys}\n              maxHeight={maxHeight}\n            >\n              {children}\n            </SelectMenu>\n          )}\n          {(variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) && isExpanded && (\n            <SelectMenu\n              {...props}\n              selected={selections}\n              openedOnEnter={openedOnEnter}\n              aria-label={ariaLabel}\n              aria-labelledby={ariaLabelledBy}\n              sendRef={this.sendRef}\n              keyHandler={this.handleArrowKeys}\n              maxHeight={maxHeight}\n            >\n              {this.extendTypeaheadChildren(typeaheadActiveChild)}\n            </SelectMenu>\n          )}\n        </SelectContext.Provider>\n      </div>\n    );\n  }\n}\n"],"file":"Select.js"}