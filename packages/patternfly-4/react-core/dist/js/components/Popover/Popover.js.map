{"version":3,"sources":["../../../../src/components/Popover/Popover.tsx"],"names":["FocusTrap","require","PopoverPosition","Popover","props","isVisible","tip","hide","shouldClose","event","keyCode","KEY_CODES","ESCAPE_KEY","state","hideOrNotify","popperChildren","tooltip","classList","add","styles","popover","document","querySelectorAll","forEach","popper","_tippy","isOpen","setState","onHide","onHidden","onMount","hideOnOutsideClick","onShow","hideAllPopovers","onShown","addEventListener","handleEscKeyClick","removeEventListener","position","enableFlip","children","className","ariaLabel","headerContent","bodyContent","footerContent","appendTo","zIndex","maxWidth","closeBtnAriaLabel","distance","boundary","flipBehavior","tippyProps","rest","Error","content","randomId","clickOutsideDeactivates","modifiers","top","undefined","closePopover","handleEvents","shouldHideOnClick","storeTippyInstance","preventOverflow","enabled","React","Component","body","popoverMaxWidth","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PopoverBase from '../../helpers/PopoverBase/PopoverBase';\nimport { Instance as TippyInstance, Props as TippyProps } from 'tippy.js';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/Popover/popover';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy.css';\nimport '@patternfly/react-styles/css/components/Tooltip/tippy-overrides.css';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport { PopoverContent } from './PopoverContent';\nimport { PopoverBody }  from './PopoverBody';\nimport { PopoverHeader } from './PopoverHeader';\nimport { PopoverFooter } from './PopoverFooter';\nimport { PopoverCloseButton } from './PopoverCloseButton';\nimport GenerateId from '../../helpers/GenerateId/GenerateId';\nimport { c_popover_MaxWidth as popoverMaxWidth } from '@patternfly/react-tokens';\nimport { ReactElement } from 'react';\n// Can't use ES6 imports :(\n// The types for it are also wrong, we should probably ditch this dependency.\n// tslint:disable-next-line\nconst FocusTrap: any = require('focus-trap-react');\n\nexport enum PopoverPosition {\n  auto = 'auto',\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right'\n}\n\nexport interface PopoverProps {\n  /** Accessible label, required when header is not present */\n  'aria-label'?: string;\n  /** The element to append the popover to, defaults to body */\n  appendTo?: Element | ((ref: Element) => Element);\n  /** Body content */\n  bodyContent: React.ReactNode;\n  /** If enableFlip is true, the popover responds to this boundary */\n  boundary?: 'scrollParent' | 'window' | 'viewport' | HTMLElement;\n  /** The reference element to which the popover is relatively placed to */\n  children: ReactElement<any>;\n  /** Popover additional class */\n  className?: string;\n  /** Aria label for the Close button */\n  closeBtnAriaLabel?: string;\n  /** Distance of the popover to its target, defaults to 25 */\n  distance?: number;\n  /** If true, tries to keep the popover in view by flipping it if necessary */\n  enableFlip?: boolean;\n  /**\n   * The desired position to flip the popover to if the initial position is not possible.\n   * By setting this prop to 'flip' it attempts to flip the popover to the opposite side if there is no space.\n   * You can also pass an array of positions that determines the flip order. It should contain the initial position\n   * followed by alternative positions if that position is unavailable.\n   * Example: Initial position is 'top'. Button with popover is in the top right corner. 'flipBehavior' is set to\n   * ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\n   * space to the right, so it finally shows the popover on the left.\n   */\n  flipBehavior?: 'flip' | ('top' | 'bottom' | 'left' | 'right')[];\n  /** Footer content */\n  footerContent?: React.ReactNode;\n  /** Header content, leave empty for no header */\n  headerContent?: React.ReactNode;\n  /** Hides the popover when a click occurs outside (only works if isVisible is not controlled by the user) */\n  hideOnOutsideClick?: boolean;\n  /**\n   * True to show the popover programmatically. Used in conjunction with the shouldClose prop.\n   * By default, the popover child element handles click events automatically. If you want to control this programmatically,\n   * the popover will not auto-close if the Close button is clicked, ESC key is used, or if a click occurs outside the popover.\n   * Instead, the consumer is responsible for closing the popover themselves by adding a callback listener for the shouldClose prop.\n   */\n  isVisible?: boolean;\n  /** Maximum width of the popover (default 18.75rem) */\n  maxWidth?: string;\n  /** Lifecycle function invoked when the popover has fully transitioned out. */\n  onHidden?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover begins to transition out. */\n  onHide?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover has been mounted to the DOM. */\n  onMount?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover begins to transition in. */\n  onShow?: (tip: TippyInstance) => void;\n  /** Lifecycle function invoked when the popover has fully transitioned in. */\n  onShown?: (tip: TippyInstance) => void;\n  /**\n   * Popover position. Note: With 'enableFlip' set to true,\n   * it will change the position if there is not enough space for the starting position.\n   * The behavior of where it flips to can be controlled through the flipBehavior prop.\n   */\n  position?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n  /**\n   * Callback function that is only invoked when isVisible is also controlled. Called when the popover Close button is\n   * clicked or the ESC key is used\n   */\n  shouldClose?: (tip: TippyInstance) => void;\n  /** z-index of the popover */\n  zIndex?: number;\n  /** additional Props to pass through to tippy.js */\n  tippyProps?: TippyProps;\n}\n\nexport interface PopoverState {\n  isOpen: boolean;\n}\n\nexport class Popover extends React.Component<PopoverProps, PopoverState> {\n  private tip: TippyInstance;\n  static defaultProps = {\n    \"position\": 'top',\n    \"enableFlip\": true,\n    \"className\": '',\n    \"isVisible\": null as boolean,\n    \"shouldClose\": (): void => null,\n    'aria-label': '',\n    \"headerContent\": null as typeof PopoverHeader,\n    \"footerContent\": null as typeof PopoverFooter,\n    \"appendTo\": () => document.body,\n    \"hideOnOutsideClick\": true,\n    \"onHide\": (): void => null,\n    \"onHidden\": (): void => null,\n    \"onShow\": (): void => null,\n    \"onShown\": (): void => null,\n    \"onMount\": (): void => null,\n    \"zIndex\": 9999,\n    \"maxWidth\": popoverMaxWidth && popoverMaxWidth.value,\n    \"closeBtnAriaLabel\": 'Close',\n    \"distance\": 25,\n    \"boundary\": 'window',\n    // For every initial starting position, there are 3 escape positions\n    \"flipBehavior\": ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n    \"tippyProps\": {}\n  };\n\n  constructor(props: PopoverProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  hideOrNotify = () => {\n    if (this.props.isVisible === null) {\n      // Handle closing\n      this.tip.hide();\n    } else {\n      // notify consumer\n      this.props.shouldClose(this.tip);\n    }\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.tip.state.isVisible) {\n      this.hideOrNotify();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleEscKeyClick, false);\n  }\n\n  storeTippyInstance = (tip: TippyInstance) => {\n    tip.popperChildren.tooltip.classList.add(styles.popover);\n    this.tip = tip;\n  }\n\n  closePopover = () => {\n    this.hideOrNotify();\n  }\n\n  hideAllPopovers = () => {\n    document.querySelectorAll('.tippy-popper').forEach((popper: any) => {\n      if (popper._tippy) {\n        popper._tippy.hide();\n      }\n    });\n  }\n\n  onHide = (tip: TippyInstance)  => {\n    if (this.state.isOpen) {\n      this.setState({ isOpen: false });\n    }\n    return this.props.onHide(tip);\n  }\n\n  onHidden = (tip: TippyInstance)  => this.props.onHidden(tip);\n\n  onMount = (tip: TippyInstance)  => this.props.onMount(tip);\n\n  onShow = (tip: TippyInstance)  => {\n    const { hideOnOutsideClick, isVisible, onShow } = this.props;\n    // hide all other open popovers first if events are managed by us\n    if (!hideOnOutsideClick && isVisible === null) {\n      this.hideAllPopovers();\n    }\n    if (this.state.isOpen === false) {\n      this.setState({ isOpen: true });\n    }\n    return onShow(tip);\n  }\n\n  onShown = (tip: TippyInstance)  => this.props.onShown(tip);\n\n  render() {\n    const {\n      position,\n      enableFlip,\n      children,\n      className,\n      'aria-label': ariaLabel,\n      headerContent,\n      bodyContent,\n      footerContent,\n      isVisible,\n      shouldClose,\n      appendTo,\n      hideOnOutsideClick,\n      onHide,\n      onHidden,\n      onShow,\n      onShown,\n      onMount,\n      zIndex,\n      maxWidth,\n      closeBtnAriaLabel,\n      distance,\n      boundary,\n      flipBehavior,\n      tippyProps,\n      ...rest\n    } = this.props;\n\n    if (!headerContent && !ariaLabel) {\n      return new Error('aria-label is required when header is not used');\n    }\n\n    const content = (\n      <GenerateId>\n        {(randomId) =>\n          (\n            <FocusTrap active={this.state.isOpen} focusTrapOptions={{ clickOutsideDeactivates: true }}>\n              <div\n                className={css(\n                  !enableFlip && getModifier(styles, position, styles.modifiers.top),\n                  className\n                )}\n                role=\"dialog\"\n                aria-modal=\"true\"\n                aria-label={headerContent ? undefined : ariaLabel}\n                aria-labelledby={headerContent ? `popover-${randomId}-header` : undefined}\n                aria-describedby={`popover-${randomId}-body`}\n                {...rest}\n              >\n                <PopoverContent>\n                  <PopoverCloseButton onClose={this.closePopover} aria-label={closeBtnAriaLabel} />\n                  {headerContent && <PopoverHeader id={`popover-${randomId}-header`}>{headerContent}</PopoverHeader>}\n                  <PopoverBody id={`popover-${randomId}-body`}>{bodyContent}</PopoverBody>\n                  {footerContent && <PopoverFooter>{footerContent}</PopoverFooter>}\n                </PopoverContent>\n              </div>\n            </FocusTrap>\n          )\n        }\n      </GenerateId>\n    );\n    const handleEvents = isVisible === null;\n    const shouldHideOnClick = () => {\n      if (handleEvents) {\n        if (hideOnOutsideClick === true) {\n          return true;\n        }\n        return 'toggle';\n      }\n      return false;\n    };\n    return (\n      <PopoverBase\n        {...tippyProps}\n        arrow\n        onCreate={this.storeTippyInstance}\n        maxWidth={maxWidth}\n        zIndex={zIndex}\n        appendTo={appendTo}\n        content={content}\n        lazy\n        trigger={handleEvents ? 'click' : 'manual'}\n        isVisible={isVisible}\n        hideOnClick={shouldHideOnClick()}\n        animateFill={false}\n        theme=\"pf-popover\"\n        performance\n        interactive\n        interactiveBorder={0}\n        placement={position}\n        distance={distance}\n        flip={enableFlip}\n        flipBehavior={flipBehavior}\n        boundary={boundary}\n        popperOptions={{\n          modifiers: {\n            preventOverflow: {\n              enabled: enableFlip\n            },\n            hide: {\n              enabled: enableFlip\n            }\n          }\n        }}\n        onHide={(tip: TippyInstance) => this.onHide(tip)}\n        onHidden={(tip: TippyInstance) => this.onHidden(tip)}\n        onShow={(tip: TippyInstance) => this.onShow(tip)}\n        onShown={(tip: TippyInstance) => this.onShown(tip)}\n        onMount={(tip: TippyInstance) => this.onMount(tip)}\n      >\n        {children}\n      </PopoverBase>\n    );\n  }\n}\n"],"file":"Popover.js"}