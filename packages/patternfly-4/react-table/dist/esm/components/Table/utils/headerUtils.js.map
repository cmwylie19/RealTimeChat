{"version":3,"sources":["../../../../../src/components/Table/utils/headerUtils.tsx"],"names":["scopeColTransformer","selectable","cellActions","emptyCol","mapProps","collapsible","emptyTD","expandedRow","parentId","defaultTitle","generateHeader","transforms","origTransforms","formatters","origFormatters","columnTransforms","header","title","label","hasOwnProperty","generateCell","cellFormatters","cellTransforms","cell","extra","mapHeader","column","key","props","property","toLowerCase","trim","replace","extraParams","data","selectableTransforms","onSelect","canSelectAll","actionsTransforms","actions","actionResolver","areActionsDisabled","collapsibleTransfroms","onCollapse","addAdditionalCellTranforms","additional","expandContent","map","parentIdCell","length","mapOpenedRows","rows","children","reduce","acc","curr","parent","isOpen","some","oneRow","rowData","cells","oneCell","calculateColumns","headerRows","oneCol"],"mappings":"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","sourcesContent":["import {\n  scopeColTransformer,\n  selectable,\n  cellActions,\n  emptyCol,\n  mapProps,\n  collapsible,\n  emptyTD,\n  expandedRow,\n  parentId\n} from './transformers';\nimport { defaultTitle } from './formatters';\nimport { ICell, IRow, IActions, IActionsResolver, IAreActionsDisabled, OnSelect, OnCollapse } from '../Table';\n\n/**\n * Generate header with transforms and formatters from custom header object.\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @return {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = (\n  { transforms: origTransforms, formatters: origFormatters, columnTransforms, header }:\n  { transforms?: ICell['transforms'], formatters?: ICell['formatters'], columnTransforms?: ICell['columnTransforms'], header?: ICell},\n  title?: string | ICell\n) => ({\n  ...header,\n  label: title,\n  transforms: [\n    scopeColTransformer,\n    emptyCol,\n    ...(origTransforms || []),\n    ...(columnTransforms || []),\n    ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])\n  ],\n  formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])]\n});\n\n/**\n * Function to generate cell for header config to change look of each cell.\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\nconst generateCell = ({ cellFormatters, cellTransforms, columnTransforms, cell }:\n  { cellFormatters?: ICell['cellFormatters'], cellTransforms?: ICell['cellTransforms'], columnTransforms?: ICell['columnTransforms'], cell?: ICell}, extra: any) => ({\n  ...cell,\n  transforms: [\n    ...(cellTransforms || []),\n    ...(columnTransforms || []),\n    ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []),\n    mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n  ],\n  formatters: [\n    defaultTitle,\n    ...(cellFormatters || []),\n    ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])\n  ]\n});\n\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cels as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\nconst mapHeader = (column: ICell, extra: any, key: number, ...props: any) => {\n  const title = (column.hasOwnProperty('title') ? column.title : column) as string | ICell;\n  return {\n    property:\n      (typeof title === 'string' &&\n        title\n          .toLowerCase()\n          .trim()\n          .replace(/\\s/g, '-')) ||\n      `column-${key}`,\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: {\n      'data-label': typeof title === 'string' ? title : `column-${key}`,\n      'data-key': key,\n      ...(column.hasOwnProperty('props') ? column.props : {}),\n      ...props\n    }\n  };\n};\n\n/**\n * Function to define select cell in first column.\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst selectableTransforms = ({ onSelect, canSelectAll }: { onSelect: OnSelect, canSelectAll: boolean}) => [\n  ...(onSelect\n    ? [\n        {\n          title: '',\n          transforms: (canSelectAll && [selectable]) || null,\n          cellTransforms: [selectable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define actions in last column.\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst actionsTransforms = ({ actions, actionResolver, areActionsDisabled }:\n  { actions: IActions, actionResolver: IActionsResolver, areActionsDisabled: IAreActionsDisabled}) => [\n  ...(actionResolver || actions\n    ? [\n        {\n          title: '',\n          transforms: [emptyTD],\n          cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define collapsible in first column.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst collapsibleTransfroms = ({ onCollapse }: { onCollapse: OnCollapse}) => [\n  ...(onCollapse\n    ? [\n        {\n          title: '',\n          transforms: [emptyTD],\n          cellTransforms: [collapsible]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to add additional cell transforms to object.\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\nconst addAdditionalCellTranforms = (cell: ICell, additional: any) => ({\n  ...(cell.hasOwnProperty('title') ? cell : { title: cell }),\n  cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional]\n});\n\n/**\n * Function to change expanded row with additional transforms.\n * @param {*} header info with cellTransforms.\n * @param {*} extraObject with onCollapse function.\n */\nconst expandContent = (header: (ICell | string)[], { onCollapse }: { onCollapse: OnCollapse }) => {\n  if (!onCollapse) {\n    return header;\n  }\n\n  return header.map((cell: ICell | string, key: number) => {\n    const parentIdCell = addAdditionalCellTranforms(cell as ICell, parentId);\n    return key === 0 ? addAdditionalCellTranforms(parentIdCell as ICell, expandedRow(header.length)) : parentIdCell;\n  });\n};\n\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\nexport const mapOpenedRows = (rows: IRow[], children: any) =>\n  rows.reduce((acc: any, curr, key) => {\n    if (curr.hasOwnProperty('parent')) {\n      const parent = acc.length > 0 && acc[acc.length - 1];\n      if (parent) {\n        acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n        if (curr.hasOwnProperty('compoundParent')) {\n          // if this is compound expand, check for any open child cell\n          acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some((oneRow: IRow) =>\n            oneRow.props.rowData.cells.some((oneCell: ICell) => oneCell.props && oneCell.props.isOpen)\n          );\n        }\n      }\n    } else {\n      acc = [...acc, { ...curr, rows: [children[key]] }];\n    }\n    return acc;\n  }, []) as IRow[];\n\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @return {*} expected object for react tabular table.\n */\nexport const calculateColumns = (headerRows: (ICell | string)[], extra: any) =>\n  headerRows &&\n  [\n    ...collapsibleTransfroms(extra),\n    ...selectableTransforms(extra),\n    ...expandContent(headerRows, extra),\n    ...actionsTransforms(extra)\n  ].map((oneCol, key) => ({\n    ...mapHeader(oneCol as ICell, extra, key)\n  }));\n"],"file":"headerUtils.js"}