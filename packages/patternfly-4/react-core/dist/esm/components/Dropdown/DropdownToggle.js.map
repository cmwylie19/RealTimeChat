{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggle.tsx"],"names":["React","CaretDownIcon","Toggle","styles","DropdownContext","css","DropdownToggle","id","children","className","isOpen","parentRef","isFocused","isHovered","isActive","isDisabled","isPlain","isPrimary","onToggle","_isOpen","undefined","iconComponent","IconComponent","splitButtonItems","ariaHasPopup","ref","props","toggle","toggleTextClass","toggleIconClass","dropdownToggle","modifiers","splitButton","disabled","type","onEnter"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,MAAP,MAAmB,2DAAnB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,GAAT,QAAoB,0BAApB;AAyCA,OAAO,MAAMC,cAA4D,GAAG,UAkBjD;AAAA,MAlBkD;AAC3EC,IAAAA,EAAE,GAAG,EADsE;AAE3EC,IAAAA,QAAQ,GAAG,IAFgE;AAG3EC,IAAAA,SAAS,GAAG,EAH+D;AAI3EC,IAAAA,MAAM,GAAG,KAJkE;AAK3EC,IAAAA,SAAS,GAAG,IAL+D;AAM3EC,IAAAA,SAAS,GAAG,KAN+D;AAO3EC,IAAAA,SAAS,GAAG,KAP+D;AAQ3EC,IAAAA,QAAQ,GAAG,KARgE;AAS3EC,IAAAA,UAAU,GAAG,KAT8D;AAU3EC,IAAAA,OAAO,GAAG,KAViE;AAW3EC,IAAAA,SAAS,GAAG,KAX+D;AAY3EC,IAAAA,QAAQ,GAAIC,OAAD,IAAsBC,SAZ0C;AAa3EC,IAAAA,aAAa,EAAEC,aAAa,GAAGrB,aAb4C;AAc3EsB,IAAAA,gBAd2E;AAe3EC,IAAAA,YAf2E;AAgB3EC,IAAAA;AAhB2E,GAkBlD;AAAA,MADtBC,KACsB;;AACzB,QAAMC,MAAM,GACV,oBAAC,eAAD,CAAiB,QAAjB,QACG,CAAC;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,GAAD,KACC,oBAAC,MAAD,eACMH,KADN;AAEE,IAAA,EAAE,EAAEnB,EAFN;AAGE,IAAA,SAAS,EAAEE,SAHb;AAIE,IAAA,MAAM,EAAEC,MAJV;AAKE,IAAA,SAAS,EAAEC,SALb;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,SAAS,EAAEC,SAPb;AAQE,IAAA,QAAQ,EAAEC,QARZ;AASE,IAAA,UAAU,EAAEC,UATd;AAUE,IAAA,OAAO,EAAEC,OAVX;AAWE,IAAA,SAAS,EAAEC,SAXb;AAYE,IAAA,QAAQ,EAAEC,QAZZ;AAaE,IAAA,YAAY,EAAEM;AAbhB,KAcMD,gBAAgB,IAAI;AAAE,qBAAiB,IAAnB;AAAyB,kBAAcG,KAAK,CAAC,YAAD,CAAL,IAAuB;AAA9D,GAd1B,GAeGlB,QAAQ,IAAI;AAAM,IAAA,SAAS,EAAEc,aAAa,IAAIjB,GAAG,CAACuB,eAAD;AAArC,KAAyDpB,QAAzD,CAff,EAgBGc,aAAa,IAAI,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAEjB,GAAG,CAACG,QAAQ,IAAIqB,eAAb;AAA7B,IAhBpB,CAFJ,CADF;;AAyBA,MAAIN,gBAAJ,EAAsB;AACpB,WACE;AACE,MAAA,SAAS,EAAElB,GAAG,CACZF,MAAM,CAAC2B,cADK,EAEZ3B,MAAM,CAAC4B,SAAP,CAAiBC,WAFL,EAGZjB,UAAU,IAAIZ,MAAM,CAAC4B,SAAP,CAAiBE,QAHnB;AADhB,OAOGV,gBAPH,EAQGI,MARH,CADF;AAYD;;AAED,SAAOA,MAAP;AACD,CA5DM;;AArCLpB,EAAAA,E;AAEAC,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,M;AAEAQ,EAAAA,Q;AAEAP,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,S;AAEAC,EAAAA,Q;AAEAE,EAAAA,O;AAEAD,EAAAA,U;AAEAE,EAAAA,S;AAEAI,EAAAA,a;AAEAE,EAAAA,gB;AAEA,c;AAEAC,EAAAA,Y,sCAAyB,S,eAAY,M,eAAS,Q,eAAW,M,eAAS,S,eAAY,M;AAE9EU,EAAAA,I,aAAO,Q,EAAW,Q,EAAW,O;AAE7BC,EAAAA,O","sourcesContent":["import * as React from 'react';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\n\nexport interface DropdownToggleProps extends React.HTMLProps<HTMLButtonElement> {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle button */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle button */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isOpen: boolean) => void;\n  /** Element which wraps toggle */\n  parentRef?: HTMLElement;\n  /** Forces focus state */\n  isFocused?: boolean;\n  /** Forces hover state */\n  isHovered?: boolean;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Whether or not the <div> has a disabled state */\n  isDisabled?: boolean;\n  /** Whether or not the dropdown toggle button should have primary button styling */\n  isPrimary?: boolean;\n  /** The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon. */\n  iconComponent?: React.ElementType | null;\n  /** Elements to display before the toggle button. When included, renders the toggle as a split button. */\n  splitButtonItems?: React.ReactNode[];\n  /** Accessible label for the dropdown toggle button */\n  'aria-label'?: string;\n  /** Accessibility property to indicate correct has popup */\n  ariaHasPopup?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'listbox' | 'tree';\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Callback called when the Enter key is pressed */\n  onEnter?: (event?: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const DropdownToggle: React.FunctionComponent<DropdownToggleProps> = ({\n  id = '',\n  children = null,\n  className = '',\n  isOpen = false,\n  parentRef = null,\n  isFocused = false,\n  isHovered = false,\n  isActive = false,\n  isDisabled = false,\n  isPlain = false,\n  isPrimary = false,\n  onToggle = (_isOpen: boolean) => undefined as any,\n  iconComponent: IconComponent = CaretDownIcon,\n  splitButtonItems,\n  ariaHasPopup,\n  ref, // Types of Ref are different for React.FC vs React.Component\n  ...props\n}: DropdownToggleProps) => {\n  const toggle = (\n    <DropdownContext.Consumer>\n      {({ toggleTextClass, toggleIconClass }) => (\n        <Toggle\n          {...props}\n          id={id}\n          className={className}\n          isOpen={isOpen}\n          parentRef={parentRef}\n          isFocused={isFocused}\n          isHovered={isHovered}\n          isActive={isActive}\n          isDisabled={isDisabled}\n          isPlain={isPlain}\n          isPrimary={isPrimary}\n          onToggle={onToggle}\n          ariaHasPopup={ariaHasPopup}\n          {...splitButtonItems && { \"isSplitButton\": true, 'aria-label': props['aria-label'] || 'Select' }}>\n          {children && <span className={IconComponent && css(toggleTextClass)}>{children}</span>}\n          {IconComponent && <IconComponent className={css(children && toggleIconClass)} />}\n        </Toggle>\n      )}\n    </DropdownContext.Consumer>\n  );\n\n  if (splitButtonItems) {\n    return (\n      <div\n        className={css(\n          styles.dropdownToggle,\n          styles.modifiers.splitButton,\n          isDisabled && styles.modifiers.disabled\n        )}\n      >\n        {splitButtonItems}\n        {toggle}\n      </div>\n    );\n  }\n\n  return toggle;\n};\n"],"file":"DropdownToggle.js"}