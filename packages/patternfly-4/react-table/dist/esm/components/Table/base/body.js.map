{"version":3,"sources":["../../../../../src/components/Table/base/body.tsx"],"names":["React","isEqual","isFunction","resolveRowKey","BodyRow","ProviderContext","BaseBody","Component","props","onRow","ret","shouldComponentUpdate","nextProps","renderers","body","wrapper","call","omitOnRow","render","rows","rowKey","columns","children","map","rowData","index","key","rowIndex","createElement","mappedRows","className","args","Object","Body"],"mappings":"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","sourcesContent":["/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { isEqual, isFunction } from 'lodash';\nimport { RowsType, RowType, RowKeyType, RenderersTypes, createElementType, ColumnsType } from './types';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nexport interface BodyProps {\n  onRow?: Function;\n  rows: RowsType;\n  rowKey?: RowKeyType;\n  columns?: ColumnsType;\n  renderers?: RenderersTypes['renderers'];\n  mappedRows?: any;\n  className?: string;\n}\n\nclass BaseBody extends React.Component<BodyProps, {}> {\n  static defaultProps = {\n    onRow: (...args: any) => Object\n  };\n\n  shouldComponentUpdate(nextProps: BodyProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const { renderers } = nextProps;\n\n    if (renderers && renderers.body && renderers.body.wrapper && (renderers.body.wrapper as React.Component).shouldComponentUpdate) {\n      if (isFunction((renderers.body.wrapper as React.Component).shouldComponentUpdate)) {\n        return (renderers.body.wrapper as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n      return true;\n    }\n\n    return !(isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps)));\n  }\n\n  omitOnRow = (props: BodyProps) => {\n    const { onRow, ...ret } = props;\n    return ret;\n  }\n\n  render() {\n    const { onRow, rows, rowKey, columns, renderers, ...props } = this.props;\n    const children = (rows as []).map((rowData: RowType, index: number) => {\n      const key = resolveRowKey({ rowData, rowIndex: index, rowKey });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n\n    return React.createElement(\n      renderers.body.wrapper as createElementType,\n      props,\n      children\n    );\n  }\n}\n\nexport const Body = (props: BodyProps) => (\n  <ProviderContext.Consumer>\n    {({ columns, renderers }) => <BaseBody columns={columns} renderers={renderers} {...props} />}\n  </ProviderContext.Consumer>\n);\n"],"file":"body.js"}