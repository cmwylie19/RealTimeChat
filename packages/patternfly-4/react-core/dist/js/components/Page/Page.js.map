{"version":3,"sources":["../../../../src/components/Page/Page.tsx"],"names":["PageLayouts","PageContext","React","createContext","PageContextProvider","Provider","PageContextConsumer","Consumer","Page","props","onPageResize","windowSize","window","innerWidth","mobileView","Number","parseInt","globalBreakpointMd","value","setState","prevState","mobileIsNavOpen","state","desktopIsNavOpen","isManagedSidebar","defaultManagedSidebarIsOpen","managedSidebarOpen","addEventListener","handleResize","removeEventListener","breadcrumb","className","children","header","sidebar","skipToContent","mainContainerId","rest","context","onNavToggle","onNavToggleMobile","onNavToggleDesktop","isNavOpen","styles","page","pageMain","pageMainBreadcrumb","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport { global_breakpoint_md as globalBreakpointMd } from '@patternfly/react-tokens';\nimport { debounce } from '../../helpers/util';\n\nexport enum PageLayouts {\n  vertical = 'vertical',\n  horizontal = 'horizontal'\n}\n\nconst PageContext = React.createContext({});\nexport const PageContextProvider = PageContext.Provider;\nexport const PageContextConsumer = PageContext.Consumer;\n\nexport interface PageProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the main section of the page layout (e.g. <PageSection />) */\n  children?: React.ReactNode;\n  /** Additional classes added to the page layout */\n  className?: string;\n  /** Header component (e.g. <PageHeader />) */\n  header?: React.ReactNode;\n  /** Sidebar component for a side nav (e.g. <PageSidebar />) */\n  sidebar?: React.ReactNode;\n  /** Skip to content component for the page */\n  skipToContent?: React.ReactElement;\n  /** an id to use for the [role=\"main\"] element */\n  mainContainerId?: string;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /**\n   * If true, the managed sidebar is initially open for desktop view\n   */\n  defaultManagedSidebarIsOpen?: boolean;\n  /**\n   * Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px\n   * Returns object { mobileView: boolean, windowSize: number }\n   */\n  onPageResize?: (object: any) => void;\n  /** Breadcrumb component for the page */\n  breadcrumb?: React.ReactNode;\n}\n\nexport interface PageState {\n  desktopIsNavOpen: boolean;\n  mobileIsNavOpen: boolean;\n  mobileView: boolean;\n}\n\nexport class Page extends React.Component<PageProps, PageState> {\n\n  static defaultProps = {\n    breadcrumb: null as React.ReactNode,\n    children: null as React.ReactNode,\n    className: '',\n    header: null as React.ReactNode,\n    sidebar: null as React.ReactNode,\n    skipToContent: null as React.ReactElement,\n    isManagedSidebar: false,\n    defaultManagedSidebarIsOpen: true,\n    onPageResize: (): void => null,\n    mainContainerId: null as string\n  };\n\n  constructor(props: PageProps) {\n    super(props);\n\n    const {isManagedSidebar, defaultManagedSidebarIsOpen} = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false\n    };\n  }\n\n  componentDidMount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      window.addEventListener('resize', debounce(this.handleResize, 250));\n      // Initial check if should be shown\n      this.handleResize();\n    }\n  }\n\n  componentWillUnmount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      window.removeEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  handleResize = () => {\n    const { onPageResize } = this.props;\n    const windowSize = window.innerWidth;\n    const mobileView = windowSize < Number.parseInt(globalBreakpointMd.value, 10);\n    if (onPageResize) {\n      onPageResize({ mobileView, windowSize });\n    }\n    this.setState((prevState) => ({\n      mobileView\n    }));\n  }\n\n  onNavToggleMobile = () => {\n    this.setState({\n      mobileIsNavOpen: !this.state.mobileIsNavOpen\n    });\n  }\n\n  onNavToggleDesktop = () => {\n    this.setState({\n      desktopIsNavOpen: !this.state.desktopIsNavOpen\n    });\n  }\n\n  render() {\n    const {\n      breadcrumb,\n      className,\n      children,\n      header,\n      sidebar,\n      skipToContent,\n      mainContainerId,\n      isManagedSidebar,\n      defaultManagedSidebarIsOpen,\n      onPageResize,\n      ...rest\n    } = this.props;\n    const { mobileView, mobileIsNavOpen, desktopIsNavOpen } = this.state;\n\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen\n    };\n\n    return (\n      <PageContextProvider value={context}>\n        <div {...rest} className={css(styles.page, className)}>\n          {skipToContent}\n          {header}\n          {sidebar}\n          <main role=\"main\" id={mainContainerId} className={css(styles.pageMain)} tabIndex={-1}>\n            {breadcrumb && <section className={css(styles.pageMainBreadcrumb)}>{breadcrumb}</section>}\n            {children}\n          </main>\n        </div>\n      </PageContextProvider>\n    );\n  }\n}\n"],"file":"Page.js"}