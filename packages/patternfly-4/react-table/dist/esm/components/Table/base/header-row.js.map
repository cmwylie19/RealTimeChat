{"version":3,"sources":["../../../../../src/components/Table/base/header-row.tsx"],"names":["React","evaluateFormatters","evaluateTransforms","mergeProps","HeaderRow","rowData","rowIndex","renderers","onRow","Object","createElement","row","map","column","columnIndex","property","header","props","evaluatedProperty","label","transforms","formatters","extraParameters","transformedProps","console","warn","cell","key","children"],"mappings":";;;;;;;;AAAA;;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,UAAT,QAA2B,eAA3B;AAUA,OAAO,MAAMC,SAAkD,GAAG,CAAC;AACjEC,EAAAA,OADiE;AAEjEC,EAAAA,QAFiE;AAGjEC,EAAAA,SAHiE;AAIjEC,EAAAA,KAAK,GAAG,MAAMC;AAJmD,CAAD,KAK5D;AACJ,SAAOT,KAAK,CAACU,aAAN,CACLH,SAAS,CAACI,GADL,EAELH,KAAK,CAACH,OAAD,EAAU;AAAEC,IAAAA;AAAF,GAAV,CAFA,EAGJD,OAAD,CAAgBO,GAAhB,CAAoB,CAACC,MAAD,EAAqBC,WAArB,KAA6C;AAC/D,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAM,GAAG,EAArB;AAAuCC,MAAAA,KAAK,GAAG;AAA/C,QAAsDJ,MAA5D;AACA,UAAMK,iBAAiB,GAAGH,QAAQ,IAAKC,MAAM,IAAIA,MAAM,CAACD,QAAxD;AACA,UAAM;AAAEI,MAAAA,KAAF;AAASC,MAAAA,UAAU,GAAG,EAAtB;AAA0BC,MAAAA,UAAU,GAAG;AAAvC,QAA8CL,MAApD;AACA,UAAMM,eAAe,GAAG;AACtBR,MAAAA,WADsB;AAEtBC,MAAAA,QAAQ,EAAEG,iBAFY;AAGtBL,MAAAA;AAHsB,KAAxB;AAKA,UAAMU,gBAAgB,GAAGrB,kBAAkB,CAACkB,UAAD,EAAaD,KAAb,EAAoBG,eAApB,CAA3C;;AAEA,QAAI,CAACC,gBAAL,EAAuB;AACrB;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,uDAAb,EAFqB,CAEkD;AACxE;;AAED,WAAOzB,KAAK,CAACU,aAAN,CACLH,SAAS,CAACmB,IADL;AAGHC,MAAAA,GAAG,EAAG,GAAEb,WAAY;AAHjB,OAIAX,UAAU,CAACc,KAAD,EAAQD,MAAM,IAAIA,MAAM,CAACC,KAAzB,EAAgCM,gBAAhC,CAJV,GAMLA,gBAAgB,CAACK,QAAjB,IAA6B3B,kBAAkB,CAACoB,UAAD,CAAlB,CAA+BF,KAA/B,EAAsCG,eAAtC,CANxB,CAAP;AAQD,GAxBD,CAHK,CAAP;AA6BD,CAnCM;;AANLjB,EAAAA,O;AACAC,EAAAA,Q;AACAC,EAAAA,S;AACAC,EAAAA,K","sourcesContent":["/**\n * header-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, ColumnType, HeaderType, RowsType, RendererType } from './types';\n\nexport interface HeaderRowProps {\n  rowData: RowsType;\n  rowIndex: number;\n  renderers: RendererType;\n  onRow?: Function;\n}\n\nexport const HeaderRow: React.FunctionComponent<HeaderRowProps> = ({\n  rowData,\n  rowIndex,\n  renderers,\n  onRow = () => Object\n}) => {\n  return React.createElement(\n    renderers.row as createElementType,\n    onRow(rowData, { rowIndex }),\n    (rowData as []).map((column: ColumnType, columnIndex: number) => {\n      const { property, header = {} as HeaderType, props = {} } = column;\n      const evaluatedProperty = property || (header && header.property);\n      const { label, transforms = [], formatters = [] } = header;\n      const extraParameters = {\n        columnIndex,\n        property: evaluatedProperty,\n        column\n      };\n      const transformedProps = evaluateTransforms(transforms, label, extraParameters);\n\n      if (!transformedProps) {\n        // tslint:disable-next-line:no-console\n        console.warn('Table.Header - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console\n      }\n\n      return React.createElement(\n        renderers.cell as createElementType,\n        {\n          key: `${columnIndex}-header`,\n          ...mergeProps(props, header && header.props, transformedProps)\n        },\n        transformedProps.children || evaluateFormatters(formatters)(label, extraParameters)\n      );\n    })\n  );\n};\n"],"file":"header-row.js"}