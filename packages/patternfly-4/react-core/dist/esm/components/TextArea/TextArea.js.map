{"version":3,"sources":["../../../../src/components/TextArea/TextArea.tsx"],"names":["React","styles","css","TextArea","Component","constructor","props","event","onChange","currentTarget","value","id","console","error","render","className","isValid","isRequired","formControl","handleChange","defaultValue"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAkBA,OAAO,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAsD;AAQ3DC,EAAAA,WAAW,CAACC,KAAD,EAAuB;AAChC,UAAMA,KAAN;;AADgC,0CAQVC,KAAD,IAAmD;AACxE,UAAI,KAAKD,KAAL,CAAWE,QAAf,EAA0B;AACxB,aAAKF,KAAL,CAAWE,QAAX,CAAoBD,KAAK,CAACE,aAAN,CAAoBC,KAAxC,EAA+CH,KAA/C;AACD;AACF,KAZiC;;AAEhC,QAAI,CAACD,KAAK,CAACK,EAAP,IAAa,CAACL,KAAK,CAAC,YAAD,CAAvB,EAAuC;AACrC;AACAM,MAAAA,OAAO,CAACC,KAAR,CAAc,wEAAd;AACD;AACF;;AAQDC,EAAAA,MAAM,GAAG;AACP,wBAAsE,KAAKR,KAA3E;AAAA,UAAM;AAAES,MAAAA,SAAF;AAAaL,MAAAA,KAAb;AAAoBF,MAAAA,QAApB;AAA8BQ,MAAAA,OAA9B;AAAuCC,MAAAA;AAAvC,KAAN;AAAA,UAA4DX,KAA5D;;AACA,WACE;AACE,MAAA,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAACiB,WAAR,EAAqBH,SAArB,CADhB;AAEE,MAAA,QAAQ,EAAE,KAAKI;AAFjB,OAGO,OAAO,KAAKb,KAAL,CAAWc,YAAlB,KAAmC,QAApC,IAAiD;AAAEV,MAAAA;AAAF,KAHvD;AAIE,sBAAc,CAACM,OAJjB;AAKE,MAAA,QAAQ,EAAEC;AALZ,OAMMX,KANN,EADF;AAUD;;AAlC0D;;gBAAhDH,Q;AAbXY,EAAAA,S;AAEAE,EAAAA,U;AAEAD,EAAAA,O;AAEAN,EAAAA,K;AAEAF,EAAAA,Q;AAEA,c;;;gBAGWL,Q,kBACW;AACpB,eAAa,EADO;AAEpB,gBAAc,KAFM;AAGpB,aAAW,IAHS;AAIpB,gBAAc;AAJM,C","sourcesContent":["import * as React from 'react';\nimport { HTMLProps } from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface TextAreaProps extends Omit<HTMLProps<HTMLTextAreaElement>, 'onChange'> {\n  /** Additional classes added to the TextArea. */\n  className?: string;\n  /** Flag to show if the TextArea is required. */\n  isRequired?: boolean;\n  /** Flag to show if the TextArea is valid or invalid. */\n  isValid?: boolean;\n  /** Value of the TextArea. */\n  value?: string | number;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /** Custom flag to show that the TextArea requires an associated id or aria-label. */\n  'aria-label'?: string;\n}\n\nexport class TextArea extends React.Component<TextAreaProps> {\n  static defaultProps = {\n    \"className\": '',\n    \"isRequired\": false,\n    \"isValid\": true,\n    'aria-label': null as string\n  };\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    if (!props.id && !props['aria-label']) {\n      // tslint:disable-next-line:no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChange ) {\n      this.props.onChange(event.currentTarget.value, event);\n    }\n  }\n\n  render() {\n    const { className, value, onChange, isValid, isRequired, ...props } = this.props;\n    return (\n      <textarea\n        className={css(styles.formControl, className)}\n        onChange={this.handleChange}\n        {...(typeof this.props.defaultValue !== 'string') && { value }}\n        aria-invalid={!isValid}\n        required={isRequired}\n        {...props}\n      />\n    );\n  }\n}\n"],"file":"TextArea.js"}