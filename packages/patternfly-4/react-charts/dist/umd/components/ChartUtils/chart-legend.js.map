{"version":3,"sources":["../../../esm/components/ChartUtils/chart-legend.js"],"names":["_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","getLegendDimensions","legendData","legendOrientation","legendProps","theme","data","VictoryLegend","getDimensions","orientation","getLegendX","_ref","chartType","rest","getPieLegendX","getChartLegendX","getLegendY","_ref2","getPieLegendY","getBulletLegendY","getChartLegendY","dy","height","legendPosition","padding","width","left","right","Helpers","getPadding","chartSize","ChartCommonStyles","legend","margin","legendDimensions","legendPadding","dx","top","bottom","Math","abs","textSizeWorkAround","getTextSizeWorkAround","round","originX","origin","radius","getRadius","x","label","y","style","labels","result","name","textSize","TextSize","approximateTextSize","adjustedTextSize","characterConstant","overpassFontCharacterConstant"],"mappings":"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","sourcesContent":["function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { VictoryLegend } from 'victory';\nimport { Helpers, TextSize } from 'victory-core';\nimport { ChartCommonStyles } from '../ChartTheme';\nimport { overpassFontCharacterConstant } from './chart-label';\nimport { getPieOrigin } from \"./chart-origin\";\n// Returns legend dimensions\nexport const getLegendDimensions = ({\n  legendData,\n  legendOrientation,\n  legendProps,\n  theme\n}) => {\n  if (legendData || legendProps.data) {\n    return VictoryLegend.getDimensions(_objectSpread({\n      data: legendData,\n      orientation: legendOrientation,\n      theme\n    }, legendProps));\n  }\n\n  return {};\n}; // Returns x coordinate for legend\n\nexport const getLegendX = (_ref) => {\n  let {\n    chartType\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"chartType\"]);\n\n  return chartType === 'pie' ? getPieLegendX(rest) : getChartLegendX(rest);\n}; // Returns y coordinate for legend\n\nexport const getLegendY = (_ref2) => {\n  let {\n    chartType\n  } = _ref2,\n      rest = _objectWithoutProperties(_ref2, [\"chartType\"]);\n\n  switch (chartType) {\n    case 'pie':\n      return getPieLegendY(rest);\n\n    case 'bullet':\n      return getBulletLegendY(rest);\n\n    default:\n      return getChartLegendY(rest);\n  }\n}; // Returns y coordinate for bullet legends\n\nexport const getBulletLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}) => {\n  const {\n    left,\n    right\n  } = Helpers.getPadding({\n    padding\n  });\n  const chartSize = {\n    height: height,\n    // Fixed size\n    width: width - left - right\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin + dy;\n\n    case 'right':\n      {\n        // Legend height with padding\n        const legendDimensions = getLegendDimensions({\n          legendData,\n          legendOrientation,\n          legendProps,\n          theme\n        });\n\n        const legendPadding = legendData => legendData && legendData.length > 0 ? 17 : 0;\n\n        return (chartSize.height - legendDimensions.height) / 2 + legendPadding(legendData);\n      }\n\n    default:\n      return dy;\n  }\n}; // Returns x coordinate for chart legends\n\nexport const getChartLegendX = ({\n  dx = 0,\n  height,\n  legendData,\n  legendOrientation,\n  legendPosition,\n  legendProps,\n  padding,\n  theme,\n  width\n}) => {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = Helpers.getPadding({\n    padding\n  });\n  const chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n  const legendDimensions = getLegendDimensions({\n    legendData,\n    legendOrientation,\n    legendProps,\n    theme\n  });\n  const textSizeWorkAround = getTextSizeWorkAround({\n    legendData,\n    legendOrientation,\n    theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width - textSizeWorkAround ? Math.round((width - (legendDimensions.width - textSizeWorkAround)) / 2) + dx : dx;\n\n    case 'bottom-left':\n      return left + dx;\n\n    case 'right':\n      return chartSize.width + ChartCommonStyles.legend.margin + left + dx;\n\n    default:\n      return dx;\n  }\n}; // Returns y coordinate for chart legends\n\nexport const getChartLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}) => {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = Helpers.getPadding({\n    padding\n  });\n  const chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin * 2 + top + dy;\n\n    case 'right':\n      {\n        // Legend height with padding\n        const legendDimensions = getLegendDimensions({\n          legendData,\n          legendOrientation,\n          legendProps,\n          theme\n        });\n        const originX = chartSize.height / 2 + top;\n\n        const legendPadding = legendData => legendData && legendData.length > 0 ? 2 : 0;\n\n        return originX - legendDimensions.height / 2 + legendPadding(legendData);\n      }\n\n    default:\n      return dy;\n  }\n}; // Returns x coordinate for pie legends\n\nexport const getPieLegendX = ({\n  dx = 0,\n  height,\n  legendData,\n  legendOrientation,\n  legendPosition,\n  legendProps,\n  padding,\n  theme,\n  width\n}) => {\n  const origin = getPieOrigin({\n    height,\n    padding,\n    width\n  });\n  const radius = Helpers.getRadius({\n    height,\n    width,\n    padding\n  });\n  const legendDimensions = getLegendDimensions({\n    legendData,\n    legendOrientation,\n    legendProps,\n    theme\n  });\n  const textSizeWorkAround = getTextSizeWorkAround({\n    legendData,\n    legendOrientation,\n    theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width - textSizeWorkAround ? Math.round((width - (legendDimensions.width - textSizeWorkAround)) / 2) + dx : dx;\n\n    case 'right':\n      return origin.x + ChartCommonStyles.label.margin + dx + radius;\n\n    default:\n      return dx;\n  }\n}; // Returns y coordinate for pie legends\n\nexport const getPieLegendY = ({\n  dy = 0,\n  height,\n  legendPosition,\n  legendData,\n  legendOrientation,\n  legendProps,\n  padding,\n  theme,\n  width\n}) => {\n  const origin = getPieOrigin({\n    height,\n    padding,\n    width\n  });\n  const radius = Helpers.getRadius({\n    height,\n    width,\n    padding\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return origin.y + ChartCommonStyles.legend.margin + radius + dy;\n\n    case 'right':\n      {\n        // Legend height with padding\n        const legendDimensions = getLegendDimensions({\n          legendData,\n          legendOrientation,\n          legendProps,\n          theme\n        });\n\n        const legendPadding = legendData => legendData && legendData.length > 0 ? 2 : 0;\n\n        return origin.y - legendDimensions.height / 2 + legendPadding(legendData);\n      }\n\n    default:\n      return dy;\n  }\n}; // Returns an approximation of over-sized text width due to growing character count\n//\n// See https://github.com/FormidableLabs/victory/issues/864\n\nconst getTextSizeWorkAround = ({\n  legendData,\n  legendOrientation,\n  theme\n}) => {\n  const style = theme.legend.style.labels;\n\n  if (!(legendData && legendData.length)) {\n    return 0;\n  } // For horizontal legends, account for the growing char count of the last legend item\n\n\n  let result = legendData[legendData.length - 1].name; // For vertical legends, account for the growing char count of the longest legend item\n\n  if (legendOrientation === 'vertical') {\n    legendData.forEach(data => {\n      if (data.name && data.name.length > result.length) {\n        result = data.name;\n      }\n    });\n  }\n\n  const textSize = TextSize.approximateTextSize(result, style);\n  const adjustedTextSize = TextSize.approximateTextSize(result, _objectSpread({}, style, {\n    characterConstant: overpassFontCharacterConstant\n  }));\n  return Math.abs(textSize.width - adjustedTextSize.width);\n};\n//# sourceMappingURL=chart-legend.js.map"],"file":"chart-legend.js"}