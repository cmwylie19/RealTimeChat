{"version":3,"sources":["../../../../src/components/ChipGroup/Chip.tsx"],"names":["Chip","props","React","createRef","children","className","onClick","Component","component","styles","chip","modifiers","overflow","chipText","randomId","closeBtnAriaLabel","tooltipPosition","isReadOnly","state","isTooltipVisible","readOnly","span","setState","Boolean","current","offsetWidth","scrollWidth","isOverflowChip","renderOverflowChip","renderChip","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { ChipButton } from './ChipButton';\nimport { OneOf } from '../../helpers/typeUtils';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { TimesCircleIcon } from '@patternfly/react-icons';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport GenerateId from '../../helpers/GenerateId/GenerateId';\n\nexport interface ChipProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the chip text */\n  children?: React.ReactNode;\n  /** Aria Label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag indicating if the chip has overflow */\n  isOverflowChip?: boolean;\n  /** Flag if chip is read only */\n  isReadOnly?: boolean;\n  /** Function that is called when clicking on the chip button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Internal flag for which component will be used for chip */\n  component?: React.ReactNode;\n  /** Position of the tooltip which is displayed if text is longer */\n  tooltipPosition?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n}\n\ninterface ChipState {\n  isTooltipVisible: boolean;\n}\n\nexport class Chip extends React.Component<ChipProps, ChipState> {\n  constructor(props: ChipProps) {\n    super(props);\n    this.state = {\n      isTooltipVisible: false\n    };\n  }\n  span = React.createRef<HTMLSpanElement>();\n\n  static defaultProps = {\n    closeBtnAriaLabel: 'close',\n    className: '',\n    isOverflowChip: false,\n    isReadOnly: false,\n    tooltipPosition: 'top',\n    onClick: () => undefined as any,\n    component: 'div'\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.span.current &&\n        this.span.current.offsetWidth < this.span.current.scrollWidth)\n    });\n  }\n\n  renderOverflowChip = () => {\n    const { children, className, onClick } = this.props;\n    const Component = this.props.component as any;\n    return (\n      <Component className={css(styles.chip, styles.modifiers.overflow, className)}>\n        <ChipButton onClick={onClick}>\n          <span className={css(styles.chipText)}>{children}</span>\n        </ChipButton>\n      </Component>\n    );\n  }\n\n  renderChip = (randomId: string) => {\n    const {\n      children,\n      closeBtnAriaLabel,\n      tooltipPosition,\n      className,\n      onClick,\n      isReadOnly\n    } = this.props;\n    const Component = this.props.component as any;\n    if (this.state.isTooltipVisible) {\n      return (\n        <Tooltip position={tooltipPosition} content={children}>\n          <Component className={css(styles.chip, isReadOnly && styles.modifiers.readOnly, className)}>\n            <span ref={this.span} className={css(styles.chipText)} id={randomId}>\n              {children}\n            </span>\n            {!isReadOnly && (\n              <ChipButton\n                onClick={onClick}\n                ariaLabel={closeBtnAriaLabel}\n                id={`remove_${randomId}`}\n                aria-labelledby={`remove_${randomId} ${randomId}`}\n              >\n                <TimesCircleIcon aria-hidden=\"true\" />\n              </ChipButton>\n            )}\n          </Component>\n        </Tooltip>\n      );\n    }\n    return (\n      <Component className={css(styles.chip, isReadOnly && styles.modifiers.readOnly, className)}>\n        <span ref={this.span} className={css(styles.chipText)} id={randomId}>\n          {children}\n        </span>\n        {!isReadOnly && (\n          <ChipButton\n            onClick={onClick}\n            ariaLabel={closeBtnAriaLabel}\n            id={`remove_${randomId}`}\n            aria-labelledby={`remove_${randomId} ${randomId}`}\n          >\n            <TimesCircleIcon aria-hidden=\"true\" />\n          </ChipButton>\n        )}\n      </Component>\n    );\n  }\n\n  render() {\n    const { isOverflowChip } = this.props;\n    return (\n      <GenerateId>{(randomId) => (isOverflowChip ? this.renderOverflowChip() : this.renderChip(randomId))}</GenerateId>\n    );\n  }\n}\n"],"file":"Chip.js"}