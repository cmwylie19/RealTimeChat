{"version":3,"sources":["../../../../src/components/ChartDonutUtilization/ChartDonutThreshold.tsx"],"names":["ChartDonutThresholdDonutOrientation","ChartDonutThresholdLabelOrientation","ChartDonutThresholdLabelPosition","ChartDonutThresholdLegendPosition","ChartDonutThresholdSortOrder","ChartDonutThresholdSubTitlePosition","ChartDonutThreshold","allowTooltip","ariaDesc","ariaTitle","children","constrainToVisibleArea","containerComponent","data","invert","labels","legendPosition","ChartCommonStyles","legend","position","padding","radius","standalone","subTitlePosition","ChartDonutStyles","label","themeColor","themeVariant","x","y","theme","height","pie","width","rest","defaultPadding","bottom","left","right","top","chartRadius","Helpers","getRadius","getComputedData","datum","Data","formatData","sort","a","b","_y","reduce","acc","dataPoint","_x","prev","computedData","renderChildren","React","Children","toArray","map","child","index","props","childData","childProps","dynamicTheme","cloneElement","endAngle","key","showStatic","chart","StandaloneContainer","desc","title","animate","categories","colorScale","cornerRadius","dataComponent","eventKey","events","externalEventMutations","groupComponent","innerRadius","labelRadius","name","VictoryPie"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AnimatePropTypeInterface,\n  CategoryPropType,\n  ColorScalePropType,\n  DataGetterPropType,\n  EventPropTypeInterface,\n  PaddingProps,\n  StringOrNumberOrCallback,\n  VictoryPie,\n  VictoryStyleInterface\n} from 'victory';\nimport { Data, Helpers } from 'victory-core';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartDonut, ChartDonutProps } from '../ChartDonut';\nimport { ChartCommonStyles, ChartDonutStyles, ChartThemeDefinition } from '../ChartTheme';\nimport { getDonutThresholdDynamicTheme, getDonutThresholdStaticTheme, getPaddingForSide } from '../ChartUtils';\n\nexport enum ChartDonutThresholdDonutOrientation {\n  left = 'left',\n  right = 'right',\n  top = 'top'\n}\n\nexport enum ChartDonutThresholdLabelOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical'\n}\n\nexport enum ChartDonutThresholdLabelPosition {\n  centroid = 'centroid',\n  endAngle = 'endAngle',\n  startAngle = 'startAngle'\n}\n\nexport enum ChartDonutThresholdLegendPosition {\n  bottom = 'bottom',\n  right = 'right'\n}\n\nexport enum ChartDonutThresholdSortOrder {\n  ascending = 'ascending',\n  descending = 'descending'\n}\n\nexport enum ChartDonutThresholdSubTitlePosition {\n  bottom = 'bottom',\n  center = 'center',\n  right = 'right'\n}\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartDonutThresholdProps extends ChartDonutProps {\n  /**\n   * Specifies the tooltip capability of the container component. A value of true allows the chart to add a\n   * ChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\n   * property is also provided.\n   */\n  allowTooltip?: boolean;\n  /**\n   * The animate prop specifies props for VictoryAnimation to use.\n   * The animate prop should also be used to specify enter and exit\n   * transition configurations with the `onExit` and `onEnter` namespaces respectively.\n   * @example\n   * {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\n   */\n  animate?: AnimatePropTypeInterface;\n  /**\n   * The ariaDesc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the desc prop of containerComponent\n   */\n  ariaDesc?: string;\n  /**\n   * The ariaTitle prop specifies the title to be applied to the SVG to assist\n   * accessibility for screen readers.\n   *\n   * Note: Overridden by the title prop of containerComponent\n   */\n  ariaTitle?: string;\n  /**\n   * The categories prop specifies how categorical data for a chart should be ordered.\n   * This prop should be given as an array of string values, or an object with\n   * these arrays of values specified for x and y. If this prop is not set,\n   * categorical data will be plotted in the order it was given in the data array\n   * @example [\"dogs\", \"cats\", \"mice\"]\n   */\n  categories?: CategoryPropType;\n  /**\n   * The utilization donut chart to render with the threshold donut chart\n   */\n  children?: React.ReactElement<any>;\n  /**\n   * The colorScale prop is an optional prop that defines the color scale the pie\n   * will be created on. This prop should be given as an array of CSS colors, or as a string\n   * corresponding to one of the built in color scales. ChartDonutThreshold will automatically assign\n   * values from this color scale to the pie slices unless colors are explicitly provided in the\n   * data object\n   */\n  colorScale?: ColorScalePropType;\n  /**\n   * The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\n   * the chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\n   * center of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\n   */\n  constrainToVisibleArea?: boolean;\n  /**\n   * The containerComponent prop takes an entire component which will be used to\n   * create a container element for standalone charts.\n   * The new element created from the passed containerComponent wil be provided with\n   * these props from ChartDonutThreshold: height, width, children\n   * (the chart itself) and style. Props that are not provided by the\n   * child chart component include title and desc, both of which\n   * are intended to add accessibility to Victory components. The more descriptive these props\n   * are, the more accessible your data will be for people using screen readers.\n   * Any of these props may be overridden by passing in props to the supplied component,\n   * or modified or ignored within the custom component itself. If a dataComponent is\n   * not provided, ChartDonutThreshold will use the default ChartContainer component.\n   * @example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />\n   */\n  containerComponent?: React.ReactElement<any>;\n  /**\n   * Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutThreshold\n   */\n  cornerRadius?: number;\n  /**\n   * The data prop specifies the data to be plotted,\n   * where data X-value is the slice label (string or number),\n   * and Y-value is the corresponding number value represented by the slice\n   * Data should be in the form of a single data point.\n   * The data point may be any format you wish (depending on the `x` and `y` accessor props),\n   * but by default, an object with x and y properties is expected.\n   *\n   * Note: The Y-value is expected to represent a percentage\n   *\n   * @example data={[{ x: 'Warning at 60%', y: 60 }, { x: 'Danger at 90%', y: 90 }]}\n   */\n  data?: any[];\n  /**\n   * The dataComponent prop takes an entire, HTML-complete data component which will be used to\n   * create slices for each datum in the pie chart. The new element created from the passed\n   * dataComponent will have the property datum set by the pie chart for the point it renders;\n   * properties style and pathFunction calculated by ChartDonutThreshold; an index property set\n   * corresponding to the location of the datum in the data provided to the pie; events bound to\n   * the ChartDonutThreshold; and the d3 compatible slice object.\n   * If a dataComponent is not provided, ChartDonutThreshold's Slice component will be used.\n   */\n  dataComponent?: React.ReactElement<any>;\n  /**\n   * The desc prop specifies the description of the chart/SVG to assist with\n   * accessibility for screen readers. The more info about the chart provided in\n   * the description, the more usable it will be for people using screen readers.\n   * This prop defaults to an empty string.\n   *\n   * Note: Overridden by containerComponent\n   *\n   * @example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\n   * not represented above 5% each.\"\n   */\n  desc?: string;\n  /**\n   * The overall end angle of the pie in degrees. This prop is used in conjunction with\n   * startAngle to create a pie that spans only a segment of a circle.\n   */\n  endAngle?: number;\n  /**\n   * Similar to data accessor props `x` and `y`, this prop may be used to functionally\n   * assign eventKeys to data\n   */\n  eventKey?: StringOrNumberOrCallback;\n  /**\n   * The event prop takes an array of event objects. Event objects are composed of\n   * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace\n   * for a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutThreshold\n   * events. The eventKey may optionally be used to select a single element by index rather than\n   * an entire set. The eventHandlers object should be given as an object whose keys are standard\n   * event names (i.e. onClick) and whose values are event callbacks. The return value\n   * of an event handler is used to modify elemnts. The return value should be given\n   * as an object or an array of objects with optional target and eventKey keys,\n   * and a mutation key whose value is a function. The target and eventKey keys\n   * will default to those corresponding to the element the event handler was attached to.\n   * The mutation function will be called with the calculated props for the individual selected\n   * element (i.e. a single bar), and the object returned from the mutation function\n   * will override the props of the selected element via object assignment.\n   * @example\n   * events={[\n   *   {\n   *     target: \"data\",\n   *     eventKey: 1,\n   *     eventHandlers: {\n   *       onClick: () => {\n   *         return [\n   *            {\n   *              eventKey: 2,\n   *              mutation: (props) => {\n   *                return {style: merge({}, props.style, {fill: \"orange\"})};\n   *              }\n   *            }, {\n   *              eventKey: 2,\n   *              target: \"labels\",\n   *              mutation: () => {\n   *                return {text: \"hey\"};\n   *              }\n   *            }\n   *          ];\n   *       }\n   *     }\n   *   }\n   * ]}\n   */\n  events?: EventPropTypeInterface<'data' | 'labels' | 'parent', StringOrNumberOrCallback | string[] | number[]>[];\n  /**\n   * ChartDonutThreshold uses the standard externalEventMutations prop.\n   */\n  externalEventMutations?: any[];\n  /**\n   * The groupComponent prop takes an entire component which will be used to\n   * create group elements for use within container elements. This prop defaults\n   * to a <g> tag on web, and a react-native-svg <G> tag on mobile\n   */\n  groupComponent?: React.ReactElement<any>;\n  /**\n   * Specifies the height the svg viewBox of the chart container. This value should be given as a number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same height in order to maintain the aspect ratio.\n   */\n  height?: number;\n  /**\n   * When creating a donut chart, this prop determines the number of pixels between\n   * the center of the chart and the inner edge.\n   */\n  innerRadius?: number;\n  /**\n   * Invert the threshold color scale used to represent warnings, errors, etc.\n   */\n  invert?: boolean;\n  /**\n   * The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\n   * If this prop is not set, the label radius will default to the radius of the pie + label padding.\n   */\n  labelRadius?: number;\n  /**\n   * The labels prop defines labels that will appear above each bar in your chart.\n   * This prop should be given as an array of values or as a function of data.\n   * If given as an array, the number of elements in the array should be equal to\n   * the length of the data array. Labels may also be added directly to the data object\n   * like data={[{x: 1, y: 1, label: \"first\"}]}.\n   * @example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title\n   */\n  labels?: string[] | ((data: any) => string);\n  /**\n   * The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n   *\n   * Note: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\n   * cases, the legend may not be visible until enough padding is applied.\n   */\n  legendPosition?: 'bottom' | 'right';\n  /**\n   * The name prop is used to reference a component instance when defining shared events.\n   */\n  name?: string;\n  /**\n   * Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n   * It should not be set manually.**\n   */\n  origin?: { x: number, y: number };\n  /**\n   * The padAngle prop determines the amount of separation between adjacent data slices\n   * in number of degrees\n   */\n  padAngle?: number;\n  /**\n   * The padding props specifies the amount of padding in number of pixels between\n   * the edge of the chart and any rendered child components. This prop can be given\n   * as a number or as an object with padding specified for top, bottom, left\n   * and right.\n   */\n  padding?: PaddingProps;\n  /**\n   * Specifies the radius of the chart. If this property is not provided it is computed\n   * from width, height, and padding props\n   */\n  radius?: number;\n  /**\n   * The sharedEvents prop is used internally to coordinate events between components. It should not be set manually.\n   */\n  sharedEvents?: any;\n  /**\n   * This will show the static, unused portion of the donut chart\n   */\n  showStatic?: boolean;\n  /**\n   * Use the sortKey prop to indicate how data should be sorted. This prop\n   * is given directly to the lodash sortBy function to be executed on the\n   * final dataset.\n   */\n  sortKey?: string | string[] | Function;\n  /**\n   * The sortOrder prop specifies whether sorted data should be returned in ascending or descending order.\n   */\n  sortOrder?: 'ascending' | 'descending';\n  /**\n   * The standalone prop determines whether the component will render a standalone svg\n   * or a <g> tag that will be included in an external svg. Set standalone to false to\n   * compose ChartDonutThreshold with other components within an enclosing <svg> tag.\n   */\n  standalone?: boolean;\n  /**\n   * The overall start angle of the pie in degrees. This prop is used in conjunction with\n   * endAngle to create a pie that spans only a segment of a circle.\n   */\n  startAngle?: number;\n  /**\n   * The style prop specifies styles for your pie. ChartDonutThreshold relies on Radium,\n   * so valid Radium style objects should work for this prop. Height, width, and\n   * padding should be specified via the height, width, and padding props.\n   * @example {data: {stroke: \"black\"}, label: {fontSize: 10}}\n   */\n  style?: VictoryStyleInterface;\n  /**\n   * The subtitle for the donut chart\n   */\n  subTitle?: string;\n  /**\n   * The orientation of the donut chart in relation to the legend. Valid values are 'bottom', 'center', and 'right'\n   */\n  subTitlePosition?: 'bottom' | 'center' | 'right';\n  /**\n   * The theme prop takes a style object with nested data, labels, and parent objects.\n   * You can create this object yourself, or you can use a theme provided by\n   * When using ChartDonutThreshold as a solo component, implement the theme directly on\n   * ChartDonutThreshold. If you are wrapping ChartDonutThreshold in ChartChart or ChartGroup,\n   * please call the theme on the outermost wrapper component instead.\n   */\n  theme?: ChartThemeDefinition;\n  /**\n   * Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeColor={ChartThemeColor.blue}\n   */\n  themeColor?: string;\n  /**\n   * Specifies the theme variant. Valid values are 'dark' or 'light'\n   *\n   * Note: Not compatible with theme prop\n   *\n   * @example themeVariant={ChartThemeVariant.light}\n   */\n  themeVariant?: string;\n  /**\n   * The title for the donut chart\n   */\n  title?: string;\n  /**\n   * Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n   *\n   * Because Victory renders responsive containers, the width and height props do not determine the width and\n   * height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\n   * pixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\n   * to the same width in order to maintain the aspect ratio.\n   */\n  width?: number;\n  /**\n   * The x prop specifies how to access the X value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)\n   */\n  x?: DataGetterPropType;\n  /**\n   * The y prop specifies how to access the Y value of each data point.\n   * If given as a function, it will be run on each data point, and returned value will be used.\n   * If given as an integer, it will be used as an array index for array-type data points.\n   * If given as a string, it will be used as a property key for object-type data points.\n   * If given as an array of strings, or a string containing dots or brackets,\n   * it will be used as a nested object property path (for details see Lodash docs for _.get).\n   * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n   * @example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\n   */\n  y?: DataGetterPropType;\n}\n\nexport const ChartDonutThreshold: React.FunctionComponent<ChartDonutThresholdProps> = ({\n  allowTooltip = true,\n  ariaDesc,\n  ariaTitle,\n  children,\n  constrainToVisibleArea = false,\n  containerComponent = <ChartContainer />,\n  data = [],\n  invert = false,\n  labels = [], // Don't show any tooltip labels by default, let consumer override if needed\n  legendPosition = ChartCommonStyles.legend.position as ChartDonutThresholdLegendPosition,\n  padding,\n  radius,\n  standalone = true,\n  subTitlePosition = ChartDonutStyles.label.subTitlePosition as ChartDonutThresholdSubTitlePosition,\n  themeColor,\n  themeVariant,\n  x,\n  y,\n\n  // destructure last\n  theme = getDonutThresholdStaticTheme(themeColor, themeVariant, invert),\n  height = theme.pie.height,\n  width = theme.pie.width,\n  ...rest\n}: ChartDonutThresholdProps) => {\n  const defaultPadding = {\n    bottom: getPaddingForSide('bottom',  padding, theme.pie.padding),\n    left: getPaddingForSide('left', padding, theme.pie.padding),\n    right: getPaddingForSide('right', padding, theme.pie.padding),\n    top: getPaddingForSide('top', padding, theme.pie.padding),\n  };\n  const chartRadius = radius | Helpers.getRadius({\n    height,\n    width,\n    padding: defaultPadding\n  });\n\n  // Returns computed data representing pie chart slices\n  const getComputedData = () => {\n    // Format and sort data. Sorting ensures thresholds are displayed in the correct order and simplifies calculations.\n    const datum = Data.formatData(data, {x, y, ...rest}, ['x', 'y']).sort((a: any, b: any) => a._y - b._y);\n\n    // Data must be offset so that the sum of all data point y-values (including the final slice) == 100.\n    const [prev, computedData] = datum.reduce((acc: [number, any], dataPoint: {_x: number | string, _y: number}) => {\n      return [\n        dataPoint._y, // Set the previous value to current y value\n        [\n          ...acc[1],\n          {\n            x: dataPoint._x, // Conditionally add x property only if it is in the original data object\n            y: dataPoint._y - acc[0] // Must be offset by previous value\n          }\n        ]\n      ];\n    }, [0, []]);\n\n    return [\n      ...computedData,\n      {\n        y: prev ? (100 - prev) : 0\n      }\n    ];\n  };\n\n  // Render dynamic utilization donut cart\n  const renderChildren = () =>\n    React.Children.toArray(children).map((child, index) => {\n      if (child.props) {\n        const { data: childData, ...childProps } = child.props;\n        const datum = Data.formatData([childData], childProps, ['x', 'y']); // Format child data independently of this component's props\n        const dynamicTheme = childProps.theme ||\n          getDonutThresholdDynamicTheme(childProps.themeColor || themeColor,\n            childProps.themeVariant || themeVariant);\n\n        return React.cloneElement(child, {\n          constrainToVisibleArea,\n          data: childData,\n          endAngle: 360 * (datum[0]._y ? datum[0]._y / 100 : 0),\n          height,\n          invert,\n          key: `pf-chart-donut-utilization-${index}`,\n          legendPosition: childProps.legendPosition || legendPosition,\n          padding: defaultPadding,\n          radius: chartRadius - 14, // Donut utilization radius is threshold radius minus 14px spacing\n          showStatic: false,\n          standalone: false,\n          subTitlePosition: childProps.subTitlePosition || subTitlePosition,\n          theme: dynamicTheme,\n          width,\n          ...childProps\n        });\n      }\n      return child;\n    });\n\n  // Static threshold donut chart\n  const chart = (\n    <ChartDonut\n      allowTooltip={allowTooltip}\n      constrainToVisibleArea={constrainToVisibleArea}\n      data={getComputedData()}\n      height={height}\n      labels={labels}\n      padding={defaultPadding}\n      standalone={false}\n      theme={theme}\n      width={width}\n      {...rest}\n    />\n  );\n\n  // Clone so users can override container props\n  const StandaloneContainer = ({children}: any) => React.cloneElement(containerComponent, {\n    desc: ariaDesc,\n    height,\n    title: ariaTitle,\n    width,\n    theme,\n    ...containerComponent.props\n  }, children);\n\n  return standalone ? (\n    <StandaloneContainer>\n      {chart}\n      {renderChildren()}\n    </StandaloneContainer>\n  ) : (\n    <React.Fragment>\n      {chart}\n      {renderChildren()}\n    </React.Fragment>\n  );\n};\n\n// Note: VictoryPie.role must be hoisted\nhoistNonReactStatics(ChartDonutThreshold, VictoryPie);\n"],"file":"ChartDonutThreshold.js"}