{"version":3,"sources":["../../../../src/components/TopologyControlBar/TopologyControlBar.tsx"],"names":["React","Button","Toolbar","ToolbarGroup","ToolbarItem","Tooltip","ExpandIcon","ExpandArrowsAltIcon","SearchPlusIcon","SearchMinusIcon","ZOOM_IN","ZOOM_OUT","FIT_TO_SCREEN","RESET_VIEW","LEGEND","defaultControlButtonsOptions","zoomIn","zoomInIcon","zoomInTip","zoomInAriaLabel","zoomInCallback","zoomInDisabled","zoomInHidden","zoomOut","zoomOutIcon","zoomOutTip","zoomOutAriaLabel","zoomOutCallback","zoomOutDisabled","zoomOutHidden","fitToScreen","fitToScreenIcon","fitToScreenTip","fitToScreenAriaLabel","fitToScreenCallback","fitToScreenDisabled","fitToScreenHidden","resetView","resetViewIcon","resetViewTip","resetViewAriaLabel","resetViewCallback","resetViewDisabled","resetViewHidden","legend","legendIcon","legendTip","legendAriaLabel","legendCallback","legendDisabled","legendHidden","customButtons","createTopologyControlButtons","controlButtons","push","id","icon","tooltip","ariaLabel","callback","disabled","hidden","TopologyControlBar","className","children","onButtonClick","undefined","props","handleButtonClick","event","button","preventDefault","renderButton","renderedButton","map"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, Toolbar, ToolbarGroup, ToolbarItem, Tooltip } from '@patternfly/react-core';\nimport { ExpandIcon, ExpandArrowsAltIcon, SearchPlusIcon, SearchMinusIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/components/Topology/topology-controlbar.css';\n\n/* ID's for common control buttons */\nexport const ZOOM_IN = 'zoom-in';\nexport const ZOOM_OUT = 'zoom-out';\nexport const FIT_TO_SCREEN = 'fit-to-screen';\nexport const RESET_VIEW = 'reset-view';\nexport const LEGEND = 'legend';\n\n/* Data needed for each control button */\nexport interface TopologyControlButton {\n  id: any;\n  icon: React.ReactNode;\n  tooltip?: React.ReactNode;\n  ariaLabel?: string;\n  callback?: (id: any) => void;\n  disabled?: boolean;\n  hidden?: boolean;\n}\n\n/* Options for creating the control buttons */\nexport interface TopologyControlButtonsOptions {\n  zoomIn: boolean;\n  zoomInIcon: React.ReactNode;\n  zoomInTip: React.ReactNode;\n  zoomInAriaLabel: string;\n  zoomInCallback: (id: any) => void;\n  zoomInDisabled: boolean;\n  zoomInHidden: boolean;\n\n  zoomOut: boolean;\n  zoomOutIcon: React.ReactNode;\n  zoomOutTip: React.ReactNode;\n  zoomOutAriaLabel: string;\n  zoomOutCallback: (id: any) => void;\n  zoomOutDisabled: boolean;\n  zoomOutHidden: boolean;\n\n  fitToScreen: boolean;\n  fitToScreenIcon: React.ReactNode;\n  fitToScreenTip: React.ReactNode;\n  fitToScreenAriaLabel: string;\n  fitToScreenCallback: (id: any) => void;\n  fitToScreenDisabled: boolean;\n  fitToScreenHidden: boolean;\n\n  resetView: boolean;\n  resetViewIcon: React.ReactNode;\n  resetViewTip: React.ReactNode;\n  resetViewAriaLabel: string;\n  resetViewCallback: (id: any) => void;\n  resetViewDisabled: boolean;\n  resetViewHidden: boolean;\n\n  legend: boolean;\n  legendIcon: React.ReactNode;\n  legendTip: string;\n  legendAriaLabel: string;\n  legendCallback: (id: any) => void;\n  legendDisabled: boolean;\n  legendHidden: boolean;\n\n  customButtons: TopologyControlButton[];\n}\n\n/* Default options for creating control buttons */\nexport const defaultControlButtonsOptions: TopologyControlButtonsOptions = {\n  zoomIn: true,\n  zoomInIcon: <SearchPlusIcon />,\n  zoomInTip: 'Zoom In',\n  zoomInAriaLabel: 'Zoom In',\n  zoomInCallback: null,\n  zoomInDisabled: false,\n  zoomInHidden: false,\n\n  zoomOut: true,\n  zoomOutIcon: <SearchMinusIcon />,\n  zoomOutTip: 'Zoom Out',\n  zoomOutAriaLabel: 'Zoom Out',\n  zoomOutCallback: null,\n  zoomOutDisabled: false,\n  zoomOutHidden: false,\n\n  fitToScreen: true,\n  fitToScreenIcon: <ExpandArrowsAltIcon />,\n  fitToScreenTip: 'Fit to Screen',\n  fitToScreenAriaLabel: 'Fit to Screen',\n  fitToScreenCallback: null,\n  fitToScreenDisabled: false,\n  fitToScreenHidden: false,\n\n  resetView: true,\n  resetViewIcon: <ExpandIcon />,\n  resetViewTip: 'Reset View',\n  resetViewAriaLabel: 'Reset View',\n  resetViewCallback: null,\n  resetViewDisabled: false,\n  resetViewHidden: false,\n\n  legend: true,\n  legendIcon: 'Legend',\n  legendTip: '',\n  legendAriaLabel: null,\n  legendCallback: null,\n  legendDisabled: false,\n  legendHidden: false,\n\n  customButtons: []\n};\n\n/* Utility function to create the common control buttons, can pass null for all defaults, or specify overrides */\nexport const createTopologyControlButtons = ({\n  zoomIn = defaultControlButtonsOptions.zoomIn,\n  zoomInIcon= defaultControlButtonsOptions.zoomInIcon,\n  zoomInTip= defaultControlButtonsOptions.zoomInTip,\n  zoomInAriaLabel= defaultControlButtonsOptions.zoomInAriaLabel,\n  zoomInCallback= defaultControlButtonsOptions.zoomInCallback,\n  zoomInDisabled= defaultControlButtonsOptions.zoomInDisabled,\n  zoomInHidden= defaultControlButtonsOptions.zoomInHidden,\n\n  zoomOut = defaultControlButtonsOptions.zoomOut,\n  zoomOutIcon = defaultControlButtonsOptions.zoomOutIcon,\n  zoomOutTip = defaultControlButtonsOptions.zoomOutTip,\n  zoomOutAriaLabel = defaultControlButtonsOptions.zoomOutAriaLabel,\n  zoomOutCallback = defaultControlButtonsOptions.zoomOutCallback,\n  zoomOutDisabled = defaultControlButtonsOptions.zoomOutDisabled,\n  zoomOutHidden = defaultControlButtonsOptions.zoomOutHidden,\n\n  fitToScreen = defaultControlButtonsOptions.fitToScreen,\n  fitToScreenIcon = defaultControlButtonsOptions.fitToScreenIcon,\n  fitToScreenTip = defaultControlButtonsOptions.fitToScreenTip,\n  fitToScreenAriaLabel = defaultControlButtonsOptions.fitToScreenAriaLabel,\n  fitToScreenCallback = defaultControlButtonsOptions.fitToScreenCallback,\n  fitToScreenDisabled = defaultControlButtonsOptions.fitToScreenDisabled,\n  fitToScreenHidden = defaultControlButtonsOptions.fitToScreenHidden,\n\n  resetView = defaultControlButtonsOptions.resetView,\n  resetViewIcon = defaultControlButtonsOptions.resetViewIcon,\n  resetViewTip = defaultControlButtonsOptions.resetViewTip,\n  resetViewAriaLabel = defaultControlButtonsOptions.resetViewAriaLabel,\n  resetViewCallback = defaultControlButtonsOptions.resetViewCallback,\n  resetViewDisabled = defaultControlButtonsOptions.resetViewDisabled,\n  resetViewHidden = defaultControlButtonsOptions.resetViewHidden,\n\n  legend = defaultControlButtonsOptions.legend,\n  legendIcon = defaultControlButtonsOptions.legendIcon,\n  legendTip = defaultControlButtonsOptions.legendTip,\n  legendAriaLabel = defaultControlButtonsOptions.legendAriaLabel,\n  legendCallback = defaultControlButtonsOptions.legendCallback,\n  legendDisabled = defaultControlButtonsOptions.legendDisabled,\n  legendHidden = defaultControlButtonsOptions.legendHidden,\n\n  customButtons = defaultControlButtonsOptions.customButtons,\n}: TopologyControlButtonsOptions  = defaultControlButtonsOptions): TopologyControlButton[] => {\n  const controlButtons: TopologyControlButton[] = [];\n\n  if (zoomIn) {\n    controlButtons.push({\n      id: ZOOM_IN,\n      icon: zoomInIcon,\n      tooltip: zoomInTip,\n      ariaLabel: zoomInAriaLabel,\n      callback: zoomInCallback,\n      disabled: zoomInDisabled,\n      hidden: zoomInHidden\n    });\n  }\n\n  if (zoomOut) {\n    controlButtons.push({\n      id: ZOOM_OUT,\n      icon: zoomOutIcon,\n      tooltip: zoomOutTip,\n      ariaLabel: zoomOutAriaLabel,\n      callback: zoomOutCallback,\n      disabled: zoomOutDisabled,\n      hidden: zoomOutHidden\n    });\n  }\n\n  if (fitToScreen) {\n    controlButtons.push({\n      id: FIT_TO_SCREEN,\n      icon: fitToScreenIcon,\n      tooltip: fitToScreenTip,\n      ariaLabel: fitToScreenAriaLabel,\n      callback: fitToScreenCallback,\n      disabled: fitToScreenDisabled,\n      hidden: fitToScreenHidden\n    });\n  }\n\n  if (resetView) {\n    controlButtons.push({\n      id: RESET_VIEW,\n      icon: resetViewIcon,\n      tooltip: resetViewTip,\n      ariaLabel: resetViewAriaLabel,\n      callback: resetViewCallback,\n      disabled: resetViewDisabled,\n      hidden: resetViewHidden\n    });\n  }\n\n  if (customButtons) {\n    controlButtons.push(...customButtons);\n  }\n\n  if (legend) {\n    controlButtons.push({\n      id: LEGEND,\n      icon: legendIcon,\n      tooltip: legendTip,\n      ariaLabel: legendAriaLabel,\n      callback: legendCallback,\n      disabled: legendDisabled,\n      hidden: legendHidden\n    });\n  }\n\n  return controlButtons;\n};\n\nexport interface TopologyControlBarProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the control bar */\n  className?: string;\n  /** Any extra child nodes (placed after the buttons) */\n  children?: React.ReactNode;\n  /** Buttons to be added to the bar */\n  controlButtons?: TopologyControlButton[];\n  /** Callback when any button is clicked, id of the clicked button is passed */\n  onButtonClick?: (id: any) => void;\n}\n\nexport const TopologyControlBar: React.FunctionComponent<TopologyControlBarProps> = ({\n  className = null,\n  children = null,\n  controlButtons = [],\n  onButtonClick = () => undefined,\n  ...props\n}: TopologyControlBarProps) => {\n\n  const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, button: TopologyControlButton) => {\n    event.preventDefault();\n    onButtonClick(button.id);\n    if (button.callback) {\n      button.callback(button.id);\n    }\n  };\n\n  const renderButton = (button: TopologyControlButton): React.ReactNode => {\n    const renderedButton = (\n      <Button\n        id={button.id}\n        className={`pf-topology-control-bar__button${button.disabled ? ' pf-m-disabled' : ''}`}\n        onClick={(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => handleButtonClick(event, button)}\n        disabled={button.disabled}\n        aria-disabled={button.disabled}\n        variant=\"tertiary\"\n      >\n        {button.icon}\n        {(button.ariaLabel || button.tooltip) && (\n          <span className=\"sr-only\">{button.ariaLabel || button.tooltip}</span>\n        )}\n      </Button>\n    );\n\n    if (button.tooltip) {\n      return (\n        <Tooltip content={button.tooltip}>{renderedButton}</Tooltip>\n      );\n    }\n\n    return renderedButton;\n  };\n\n  return (\n    <Toolbar className={className} {...props}>\n      <ToolbarGroup>\n        {controlButtons.map((button: TopologyControlButton) => {\n          return button.hidden ? null : <ToolbarItem key={button.id}>{renderButton(button)}</ToolbarItem>;\n        })}\n        {children}\n      </ToolbarGroup>\n    </Toolbar>\n  );\n};\n"],"file":"TopologyControlBar.js"}