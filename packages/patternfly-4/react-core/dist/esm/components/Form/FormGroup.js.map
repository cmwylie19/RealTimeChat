{"version":3,"sources":["../../../../src/components/Form/FormGroup.tsx"],"names":["React","styles","ASTERISK","FormContext","css","getModifier","FormGroup","children","className","label","isRequired","isValid","isInline","helperText","helperTextInvalid","fieldId","props","isHorizontal","formGroup","formLabel","formLabelText","formLabelRequired","formHorizontalGroup","formHelperText"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,MAAP,MAAmB,mDAAnB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,0BAAjC;AAuBA,OAAO,MAAMC,SAAkD,GAAG;AAAA,MAAC;AACjEC,IAAAA,QAAQ,GAAG,IADsD;AAEjEC,IAAAA,SAAS,GAAG,EAFqD;AAGjEC,IAAAA,KAHiE;AAIjEC,IAAAA,UAAU,GAAG,KAJoD;AAKjEC,IAAAA,OAAO,GAAG,IALuD;AAMjEC,IAAAA,QAAQ,GAAG,KANsD;AAOjEC,IAAAA,UAPiE;AAQjEC,IAAAA,iBARiE;AASjEC,IAAAA;AATiE,GAAD;AAAA,MAU7DC,KAV6D;;AAAA,SAYhE,oBAAC,WAAD,CAAa,QAAb,QACG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,wCAASD,KAAT;AAAgB,IAAA,SAAS,EAAEZ,GAAG,CAACH,MAAM,CAACiB,SAAR,EAAmBN,QAAQ,GAAGP,WAAW,CAACJ,MAAD,EAAS,QAAT,EAAmBO,SAAnB,CAAd,GAA8CA,SAAzE;AAA9B,MACGC,KAAK,IACJ;AAAO,IAAA,SAAS,EAAEL,GAAG,CAACH,MAAM,CAACkB,SAAR,CAArB;AAAyC,IAAA,OAAO,EAAEJ;AAAlD,KACE;AAAM,IAAA,SAAS,EAAEX,GAAG,CAACH,MAAM,CAACmB,aAAR;AAApB,KACGX,KADH,CADF,EAIGC,UAAU,IACT;AAAM,IAAA,SAAS,EAAEN,GAAG,CAACH,MAAM,CAACoB,iBAAR,CAApB;AAAgD,mBAAY;AAA5D,KACGnB,QADH,CALJ,CAFJ,EAaGe,YAAY,GAAG;AAAK,IAAA,SAAS,EAAEb,GAAG,CAACH,MAAM,CAACqB,mBAAR;AAAnB,KAAkDf,QAAlD,CAAH,GAAuEA,QAbtF,EAcG,CAAEI,OAAO,IAAIE,UAAZ,IAA4B,CAACF,OAAD,IAAYG,iBAAzC,KACC;AACE,IAAA,SAAS,EAAEV,GAAG,CAACH,MAAM,CAACsB,cAAR,EAAwB,CAACZ,OAAD,GAAWN,WAAW,CAACJ,MAAD,EAAS,OAAT,CAAtB,GAA0C,EAAlE,CADhB;AAEE,IAAA,EAAE,EAAG,GAAEc,OAAQ,SAFjB;AAGE,iBAAU;AAHZ,KAKGJ,OAAO,GAAGE,UAAH,GAAgBC,iBAL1B,CAfJ,CAFJ,CAZgE;AAAA,CAA3D;;AAnBLP,EAAAA,Q;AAEAC,EAAAA,S;AAEAC,EAAAA,K;AAEAC,EAAAA,U;AAEAC,EAAAA,O;AAEAC,EAAAA,Q;AAEAC,EAAAA,U;AAEAC,EAAAA,iB;AAEAC,EAAAA,O","sourcesContent":["import * as React from 'react';\nimport { Omit } from '../../helpers/typeUtils';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { FormContext } from './FormContext';\nimport { css, getModifier } from '@patternfly/react-styles';\n\nexport interface FormGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as FormGroup content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the FormGroup. */\n  className?: string;\n  /** Label text before the field. */\n  label?: React.ReactNode;\n  /** Sets the FormGroup required. */\n  isRequired?: boolean;\n  /** Sets the FormGroup isValid. */\n  isValid?: boolean;\n  /** Sets the FormGroup isInline. */\n  isInline?: boolean;\n  /** Helper text after the field. It can be a simple text or an object. */\n  helperText?: React.ReactNode;\n  /** Helper text after the field when the field is isValid. It can be a simple text or an object. */\n  helperTextInvalid?: React.ReactNode;\n  /** ID of the included field. It has to be the same for proper working. */\n  fieldId: string;\n}\n\nexport const FormGroup: React.FunctionComponent<FormGroupProps> = ({\n  children = null,\n  className = '',\n  label,\n  isRequired = false,\n  isValid = true,\n  isInline = false,\n  helperText,\n  helperTextInvalid,\n  fieldId,\n  ...props\n}: FormGroupProps) => (\n  <FormContext.Consumer>\n    {({ isHorizontal }: { isHorizontal: boolean }) => (\n      <div {...props} className={css(styles.formGroup, isInline ? getModifier(styles, 'inline', className) : className)}>\n        {label && (\n          <label className={css(styles.formLabel)} htmlFor={fieldId}>\n            <span className={css(styles.formLabelText)}>\n              {label}\n            </span>\n            {isRequired && (\n              <span className={css(styles.formLabelRequired)} aria-hidden=\"true\">\n                {ASTERISK}\n              </span>\n            )}\n          </label>\n        )}\n        {isHorizontal ? <div className={css(styles.formHorizontalGroup)}>{children}</div> : children}\n        {((isValid && helperText) || (!isValid && helperTextInvalid)) && (\n          <div\n            className={css(styles.formHelperText, !isValid ? getModifier(styles, 'error') : '')}\n            id={`${fieldId}-helper`}\n            aria-live=\"polite\"\n          >\n            {isValid ? helperText : helperTextInvalid}\n          </div>\n        )}\n      </div>\n    )}\n  </FormContext.Consumer>\n);\n"],"file":"FormGroup.js"}