{"version":3,"sources":["../../../../src/components/Progress/Progress.test.js"],"names":["React","mount","Progress","ProgressSize","ProgressVariant","ProgressMeasureLocation","test","view","expect","toMatchSnapshot","describe","Object","keys","forEach","oneSize","oneVariant","oneLocation","inside","sm"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport { Progress, ProgressSize } from './Progress';\nimport { ProgressVariant, ProgressMeasureLocation } from './ProgressContainer';\n\ntest('Simple progress', () => {\n  const view = mount(<Progress value={33} id=\"progress-simple-example\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('no value specified', () => {\n  const view = mount(<Progress id=\"no-value\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('additional label', () => {\n  const view = mount(<Progress id=\"additional-label\" value={33} label=\"Additional label\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('Progress with aria-valuetext', () => {\n  const view = mount(<Progress value={33} id=\"progress-aria-valuetext\" valueText=\"Descriptive text here\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('value lower than minValue', () => {\n  const view = mount(<Progress value={33} id=\"lower-min-value\" min={40} />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('value higher than maxValue', () => {\n  const view = mount(<Progress value={77} id=\"higher-max-value\" max={60} />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('value scaled with minValue', () => {\n  const view = mount(<Progress min={10} value={50} id=\"scaled-min-value\" />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('value scaled with maxValue', () => {\n  const view = mount(<Progress value={50} id=\"scaled-max-value\" max={80} />);\n  expect(view).toMatchSnapshot();\n});\n\ntest('value scaled between minValue and maxValue', () => {\n  const view = mount(<Progress min={10} value={50} id=\"scaled-range-value\" max={80} />);\n  expect(view).toMatchSnapshot();\n});\n\ndescribe('Progress size', () => {\n  Object.keys(ProgressSize).forEach(oneSize => {\n    test(oneSize, () => {\n      const view = mount(<Progress id={`${oneSize}-progress`} value={33} size={oneSize} />);\n      expect(view).toMatchSnapshot();\n    });\n  });\n});\n\ndescribe('Progress variant', () => {\n  Object.keys(ProgressVariant).forEach(oneVariant => {\n    test(oneVariant, () => {\n      const view = mount(<Progress id={`${oneVariant}-progress`} value={33} variant={oneVariant} />);\n      expect(view).toMatchSnapshot();\n    });\n  });\n});\n\ndescribe('Progress measure location', () => {\n  Object.keys(ProgressMeasureLocation).forEach(oneLocation => {\n    test(oneLocation, () => {\n      const view = mount(<Progress id={`${oneLocation}-progress`} value={33} measureLocation={oneLocation} />);\n      expect(view).toMatchSnapshot();\n    });\n  });\n\n  test('inside and small should render large', () => {\n    const view = mount(\n      <Progress\n        id=\"large-progress\"\n        value={33}\n        measureLocation={ProgressMeasureLocation.inside}\n        size={ProgressSize.sm}\n      />\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n"],"file":"Progress.test.js"}