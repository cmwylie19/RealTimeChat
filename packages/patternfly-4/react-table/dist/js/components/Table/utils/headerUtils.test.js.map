{"version":3,"sources":["../../../../../src/components/Table/utils/headerUtils.test.tsx"],"names":["describe","test","collapsibleTransfroms","onCollapse","undefined","expect","cell","formatters","toHaveLength","name","toBe","transforms","extraParams","toBeDefined","header","find","transform","selectableTransforms","onSelect","canSelectAll","actionsTransforms","actions","title","toEqual","areActionsDisabled","actionResolver","cells","mixed","forEach","oneCell","key","property","label","result","someData","toMatchObject","testFunc","formatter","cellTransforms","cellFormatters","rows","parent","children","mappedRows","isOpen","somethig"],"mappings":"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","sourcesContent":["import { calculateColumns, mapOpenedRows } from './headerUtils';\nimport { ICell, IRow } from '../Table';\n\ndescribe('headerUtils', () => {\n  describe('calculateColumns', () => {\n    test('collapsibleTransfroms', () => {\n      const collapsibleTransfroms = calculateColumns(['Some'], { onCollapse: () => undefined as any });\n      expect(collapsibleTransfroms[0].cell.formatters).toHaveLength(1);\n      expect(collapsibleTransfroms[0].cell.formatters[0].name).toBe('defaultTitle');\n      expect(collapsibleTransfroms[0].cell.transforms).toHaveLength(2);\n      expect(collapsibleTransfroms[0].extraParams.onCollapse).toBeDefined();\n      expect(collapsibleTransfroms[0].header.transforms).toHaveLength(3);\n      expect(collapsibleTransfroms[1].cell.transforms).toHaveLength(3);\n      expect(collapsibleTransfroms[1].cell.transforms.find((transform) => transform.name === 'parentId')).toBeDefined();\n      expect(\n        collapsibleTransfroms[1].cell.transforms.find((transform) => transform.name === 'expandedRowFormatter')\n      ).toBeDefined();\n    });\n\n    test('selectableTransforms', () => {\n      const selectableTransforms = calculateColumns([], { onSelect: () => undefined as any, canSelectAll: true });\n      expect(selectableTransforms[0].cell.formatters).toHaveLength(1);\n      expect(selectableTransforms[0].cell.formatters[0].name).toBe('defaultTitle');\n      expect(selectableTransforms[0].cell.transforms).toHaveLength(2);\n      expect(selectableTransforms[0].extraParams.onSelect).toBeDefined();\n      expect(selectableTransforms[0].header.transforms).toHaveLength(3);\n    });\n\n    test('basicActionsTransforms', () => {\n      const actionsTransforms = calculateColumns([], { actions: [{ title: 'some' }] });\n      expect(actionsTransforms[0].cell.formatters).toHaveLength(1);\n      expect(actionsTransforms[0].cell.formatters[0].name).toBe('defaultTitle');\n      expect(actionsTransforms[0].cell.transforms).toHaveLength(2);\n      expect(actionsTransforms[0].extraParams).toEqual({ actions: [{ title: 'some' }] });\n      expect(actionsTransforms[0].header.transforms).toHaveLength(3);\n    });\n\n    test('actionsTransforms', () => {\n      const actionsTransforms = calculateColumns([], {\n        areActionsDisabled: () => false,\n        actionResolver: () => [{ title: 'some' }]\n      });\n      expect(actionsTransforms[0].cell.formatters).toHaveLength(1);\n      expect(actionsTransforms[0].cell.formatters[0].name).toBe('defaultTitle');\n      expect(actionsTransforms[0].extraParams.areActionsDisabled).toBeDefined();\n      expect(actionsTransforms[0].extraParams.actionResolver).toBeDefined();\n      expect(actionsTransforms[0].cell.transforms).toHaveLength(2);\n      expect(actionsTransforms[0].header.transforms).toHaveLength(3);\n    });\n\n    test('emptyTransforms', () => {\n      const actionsTransforms = calculateColumns([], {});\n      expect(actionsTransforms).toHaveLength(0);\n    });\n\n    describe('mixed strings and objects', () => {\n      const cells = ['first', { title: 'second' }, 'third', { title: 'some' }] as ICell[];\n      const mixed = calculateColumns(cells, {});\n      cells.forEach((oneCell: ICell, key) => {\n        test(`${oneCell}`, () => {\n          expect(mixed[key].property).toBe(oneCell.title || oneCell);\n          expect(mixed[key].header.label).toBe(oneCell.title || oneCell);\n          expect(mixed[key].header.transforms).toHaveLength(2);\n          expect(mixed[key].cell.transforms).toHaveLength(1);\n          expect(mixed[key].cell.formatters).toHaveLength(1);\n        });\n      });\n    });\n\n    test('correct property', () => {\n      expect(calculateColumns(['some'], {})[0].property).toBe('some');\n      expect(calculateColumns(['some with space'], {})[0].property).toBe('some-with-space');\n      expect(calculateColumns([''], {})[0].property).toBe('column-0');\n    });\n\n    describe('generateHeader', () => {\n      test('additional data', () => {\n        const result = calculateColumns(\n          [\n            {\n              header: {\n                someData: 'test'\n              }\n            }\n          ] as ICell[],\n          {}\n        );\n        expect(result[0].header).toMatchObject({ someData: 'test' });\n      });\n\n      test('custom functions', () => {\n        const testFunc = () => undefined as any;\n        const result = calculateColumns(\n          [\n            {\n              title: '',\n              transforms: [testFunc],\n              formatters: [testFunc]\n            }\n          ],\n          {}\n        );\n        expect(result[0].header.formatters.find((formatter) => formatter.name === 'testFunc')).toBeDefined();\n        expect(result[0].header.transforms.find((transform) => transform.name === 'testFunc')).toBeDefined();\n      });\n\n      test('custom functions in header', () => {\n        const testFunc = () => undefined as any;\n        const result = calculateColumns(\n          [\n            {\n              title: '',\n              header: {\n                transforms: [testFunc],\n                formatters: [testFunc]\n              }\n            }\n          ],\n          {}\n        );\n        expect(result[0].header.formatters.find((formatter) => formatter.name === 'testFunc')).toBeDefined();\n        expect(result[0].header.transforms.find((transform) => transform.name === 'testFunc')).toBeDefined();\n      });\n    });\n\n    describe('generateCell', () => {\n      test('additional data', () => {\n        const result = calculateColumns(\n          [\n            {\n              cell: {\n                someData: 'test'\n              }\n            }\n          ],\n          {}\n        );\n        expect(result[0].cell).toMatchObject({ someData: 'test' });\n      });\n\n      test('custom functions', () => {\n        const testFunc = () => undefined as any;\n        const result = calculateColumns(\n          [\n            {\n              title: '',\n              cellTransforms: [testFunc],\n              cellFormatters: [testFunc]\n            }\n          ],\n          {}\n        );\n        expect(result[0].cell.formatters.find((formatter) => formatter.name === 'testFunc')).toBeDefined();\n        expect(result[0].cell.transforms.find((transform) => transform.name === 'testFunc')).toBeDefined();\n      });\n\n      test('custom functions in header', () => {\n        const testFunc = () => undefined as any;\n        const result = calculateColumns(\n          [\n            {\n              title: '',\n              cell: {\n                transforms: [testFunc],\n                formatters: [testFunc]\n              }\n            }\n          ],\n          {}\n        );\n        expect(result[0].cell.formatters.find((formatter) => formatter.name === 'testFunc')).toBeDefined();\n        expect(result[0].cell.transforms.find((transform) => transform.name === 'testFunc')).toBeDefined();\n      });\n    });\n  });\n\n  describe('mapOpenedRows', () => {\n    test('flat structure', () => {\n      const rows = [{}, { parent: 0 }, {}, { parent: 2 }] as IRow[];\n      const children = ['one', 'two', 'three', 'four'];\n      const mappedRows = mapOpenedRows(rows, children);\n      expect(mappedRows).toHaveLength(2);\n      expect(mappedRows[0].rows).toHaveLength(2);\n      expect(mappedRows[0]).toMatchObject({ rows: ['one', 'two'] });\n    });\n\n    test('nested children', () => {\n      const rows = [{}, { parent: 0 }, { parent: 1 }, { parent: 2 }] as IRow[];\n      const children = ['one', 'two', 'three', 'four'];\n      const mappedRows = mapOpenedRows(rows, children);\n      expect(mappedRows).toHaveLength(1);\n      expect(mappedRows[0].rows).toHaveLength(4);\n      expect(mappedRows[0]).toMatchObject({ rows: children });\n    });\n\n    test('no parent', () => {\n      const rows = [{ parent: 'something' }, { parent: 0 }, {}, { parent: 2 }] as IRow[];\n      const children = ['one', 'two', 'three', 'four'];\n      const mappedRows = mapOpenedRows(rows, children);\n      expect(mappedRows).toHaveLength(1);\n      expect(mappedRows[0].rows).toHaveLength(2);\n      expect(mappedRows[0]).toMatchObject({ rows: ['three', 'four'] });\n    });\n\n    test('should add rest props', () => {\n      const rows = [{ isOpen: true, somethig: 'other' }, { parent: 0 }, { isOpen: false }, { parent: 2 }] as IRow[];\n      const children = ['one', 'two', 'three', 'four'];\n      const mappedRows = mapOpenedRows(rows, children);\n      expect(mappedRows).toHaveLength(2);\n      expect(mappedRows[0].rows).toHaveLength(2);\n      expect(mappedRows[0]).toMatchObject({ ...rows[0], rows: ['one', 'two'] });\n    });\n  });\n});\n"],"file":"headerUtils.test.js"}