{"version":3,"sources":["../../../../src/components/Modal/ModalContent.test.tsx"],"names":["React","shallow","ModalContent","test","view","expect","toMatchSnapshot","undefined","header","footer"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEAC,IAAI,CAAC,8BAAD,EAAiC,MAAM;AACzC,QAAMC,IAAI,GAAGH,OAAO,CAClB,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,0BAApB;AAA+C,IAAA,EAAE,EAAC,IAAlD;AAAuD,IAAA,MAAM;AAA7D,iCADkB,CAApB;AAKAI,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAPG,CAAJ;AASAH,IAAI,CAAC,2BAAD,EAA8B,MAAM;AACtC,QAAMC,IAAI,GAAGH,OAAO,CAClB,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,0BAApB;AAA+C,IAAA,EAAE,EAAC,IAAlD;AAAuD,IAAA,MAAM;AAA7D,iCADkB,CAApB;AAKAI,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAPG,CAAJ;AASAH,IAAI,CAAC,gCAAD,EAAmC,MAAM;AAC3C,QAAMC,IAAI,GAAGH,OAAO,CAClB,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,0BAApB;AAA+C,IAAA,EAAE,EAAC,IAAlD;AAAuD,IAAA,MAAM,MAA7D;AAA8D,IAAA,OAAO,EAAE,CAAC,SAAD;AAAvE,iCADkB,CAApB;AAKAI,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAPG,CAAJ;AASAH,IAAI,CAAC,mCAAD,EAAsC,MAAM;AAC9C,QAAMC,IAAI,GAAGH,OAAO,CAClB,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,0BAApB;AAA+C,IAAA,EAAE,EAAC,IAAlD;AAAuD,IAAA,MAAM;AAA7D,iCADkB,CAApB;AAKAI,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAPG,CAAJ;AASAH,IAAI,CAAC,iCAAD,EAAoC,MAAM;AAC5C,QAAMC,IAAI,GAAGH,OAAO,CAClB,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,0BADR;AAEE,IAAA,OAAO,EAAE,CAAC,gBAAD,CAFX;AAGE,IAAA,OAAO,MAHT;AAIE,IAAA,OAAO,EAAE,MAAMM,SAJjB;AAKE,IAAA,EAAE,EAAC,IALL;AAME,IAAA,MAAM;AANR,iCADkB,CAApB;AAYAF,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAdG,CAAJ;AAgBAH,IAAI,CAAC,+BAAD,EAAkC,MAAM;AAC1C,QAAMK,MAAM,GAAG;AAAM,IAAA,EAAE,EAAC;AAAT,YAAf;AAEA,QAAMJ,IAAI,GAAGH,OAAO,CAClB,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEO,MADV;AAEE,IAAA,KAAK,EAAC,0BAFR;AAGE,IAAA,OAAO,EAAE,CAAC,gBAAD,CAHX;AAIE,IAAA,OAAO,MAJT;AAKE,IAAA,OAAO,EAAE,MAAMD,SALjB;AAME,IAAA,EAAE,EAAC,IANL;AAOE,IAAA,MAAM;AAPR,iCADkB,CAApB;AAaAF,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAjBG,CAAJ;AAmBAH,IAAI,CAAC,+BAAD,EAAkC,MAAM;AAC1C,QAAMM,MAAM,GAAG;AAAM,IAAA,EAAE,EAAC;AAAT,YAAf;AAEA,QAAML,IAAI,GAAGH,OAAO,CAClB,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEQ,MADV;AAEE,IAAA,KAAK,EAAC,0BAFR;AAGE,IAAA,OAAO,MAHT;AAIE,IAAA,OAAO,EAAE,MAAMF,SAJjB;AAKE,IAAA,EAAE,EAAC,IALL;AAME,IAAA,MAAM;AANR,iCADkB,CAApB;AAYAF,EAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,CAhBG,CAAJ","sourcesContent":["import * as React from 'react';\nimport { shallow } from 'enzyme';\n\nimport { ModalContent } from './ModalContent';\n\ntest('Modal Content Test only body', () => {\n  const view = shallow(\n    <ModalContent title=\"Test Modal Content title\" id=\"id\" isOpen>\n      This is a ModalBox header\n    </ModalContent>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Modal Content Test isOpen', () => {\n  const view = shallow(\n    <ModalContent title=\"Test Modal Content title\" id=\"id\" isOpen>\n      This is a ModalBox header\n    </ModalContent>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Modal Content Test with footer', () => {\n  const view = shallow(\n    <ModalContent title=\"Test Modal Content title\" id=\"id\" isOpen actions={['Testing']}>\n      This is a ModalBox header\n    </ModalContent>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Modal Content test without footer', () => {\n  const view = shallow(\n    <ModalContent title=\"Test Modal Content title\" id=\"id\" isOpen>\n      This is a ModalBox header\n    </ModalContent>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Modal Content Test with onclose', () => {\n  const view = shallow(\n    <ModalContent\n      title=\"Test Modal Content title\"\n      actions={['Testing footer']}\n      isLarge\n      onClose={() => undefined}\n      id=\"id\"\n      isOpen\n    >\n      This is a ModalBox header\n    </ModalContent>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Modal Test with custom header', () => {\n  const header = <span id=\"test-custom-header\">TEST</span>;\n\n  const view = shallow(\n    <ModalContent\n      header={header}\n      title=\"test-custom-header-modal\"\n      actions={['Testing footer']}\n      isLarge\n      onClose={() => undefined}\n      id=\"id\"\n      isOpen\n    >\n      This is a ModalBox header\n    </ModalContent>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Modal Test with custom footer', () => {\n  const footer = <span id=\"test-custom-footer\">TEST</span>;\n\n  const view = shallow(\n    <ModalContent\n      footer={footer}\n      title=\"Test Modal Custom Footer\"\n      isLarge\n      onClose={() => undefined}\n      id=\"id\"\n      isOpen\n    >\n      This is a ModalBox header\n    </ModalContent>\n  );\n  expect(view).toMatchSnapshot();\n});\n"],"file":"ModalContent.test.js"}