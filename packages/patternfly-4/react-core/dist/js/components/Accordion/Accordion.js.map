{"version":3,"sources":["../../../../src/components/Accordion/Accordion.tsx"],"names":["Accordion","children","className","ariaLabel","headingLevel","asDefinitionList","props","AccordionList","styles","accordion","ContentContainer","ToggleContainer"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAeO,IAAMA,SAAkD,GAAG,SAArDA,SAAqD,OAO5C;AAAA,2BANpBC,QAMoB;AAAA,MANpBA,QAMoB,8BANT,IAMS;AAAA,4BALpBC,SAKoB;AAAA,MALpBA,SAKoB,+BALR,EAKQ;AAAA,4BAJpB,YAIoB;AAAA,MAJNC,SAIM,+BAJM,EAIN;AAAA,+BAHpBC,YAGoB;AAAA,MAHpBA,YAGoB,kCAHL,IAGK;AAAA,mCAFpBC,gBAEoB;AAAA,MAFpBA,gBAEoB,sCAFD,IAEC;AAAA,MADjBC,KACiB;;AACpB,MAAMC,aAAkB,GAAGF,gBAAgB,GAAG,IAAH,GAAU,KAArD;AACA,SACE,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAE,sBAAIG,sBAAOC,SAAX,EAAsBP,SAAtB,CAA1B;AAA4D,kBAAYC;AAAxE,KAAuFG,KAAvF,GACE,oBAAC,kCAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCI,MAAAA,gBAAgB,EAAEL,gBAAgB,GAAG,IAAH,GAAU,KADZ;AAEhCM,MAAAA,eAAe,EAAEN,gBAAgB,GAAG,IAAH,GAAUD;AAFX;AAAlC,KAIGH,QAJH,CADF,CADF;AAUD,CAnBM;;;;AAXLA,EAAAA,Q;AAEAC,EAAAA,S;AAEA,c;AAEAE,EAAAA,Y,+BAAe,I,EAAO,I,EAAO,I,EAAO,I,EAAO,I,EAAO,I;AAElDC,EAAAA,gB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport {AccordionContext} from './AccordionContext';\n\nexport interface AccordionProps extends React.HTMLProps<HTMLDListElement> {\n  /** Content rendered inside the Accordion  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion  */\n  className?: string;\n  /** Adds accessible text to the Accordion */\n  'aria-label'?: string;\n  /** Heading level to use */\n  headingLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n  /** Flag to indicate whether use definition list or div */\n  asDefinitionList?: boolean;\n}\n\nexport const Accordion: React.FunctionComponent<AccordionProps> = ({\n  children = null,\n  className = '',\n  'aria-label': ariaLabel = '',\n  headingLevel = 'h3',\n  asDefinitionList = true,\n  ...props\n}: AccordionProps) => {\n  const AccordionList: any = asDefinitionList ? 'dl' : 'div';\n  return (\n    <AccordionList className={css(styles.accordion, className)} aria-label={ariaLabel} {...props}>\n      <AccordionContext.Provider value={{\n        ContentContainer: asDefinitionList ? 'dd' : 'div',\n        ToggleContainer: asDefinitionList ? 'dt' : headingLevel\n      }}>\n        {children}\n      </AccordionContext.Provider>\n    </AccordionList>\n  );\n};\n"],"file":"Accordion.js"}