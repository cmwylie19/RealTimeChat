{"version":3,"sources":["../../../../src/components/ChartLabel/ChartLabel.tsx"],"names":["React","hoistNonReactStatics","defaults","VictoryLabel","ChartCommonStyles","ChartLabelDirection","ChartLabelPlacement","ChartLabel","style","rest","applyDefaultStyle","customStyle","fontFamily","label","fontSize","letterSpacing","newStyle","Array","isArray","map","active","angle","capHeight","children","className","data","datum","desc","direction","dx","dy","events","index","labelPlacement","lineHeight","origin","x","y","polar","renderInPortal","scale","text"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAEEC,YAFF,QAIO,SAJP;AAKA,SAASC,iBAAT,QAAkC,eAAlC;AAEA,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAMZ,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAoJZ,OAAO,MAAMC,UAAoD,GAAG,UAG7C;AAAA,MAH8C;AACnEC,IAAAA;AADmE,GAG9C;AAAA,MADlBC,IACkB;;AACrB,QAAMC,iBAAiB,GAAIC,WAAD,IAAsCT,QAAQ,CAACS,WAAD,EAAc;AACpFC,IAAAA,UAAU,EAAER,iBAAiB,CAACS,KAAlB,CAAwBD,UADgD;AAEpFE,IAAAA,QAAQ,EAAEV,iBAAiB,CAACS,KAAlB,CAAwBC,QAFkD;AAGpFC,IAAAA,aAAa,EAAEX,iBAAiB,CAACS,KAAlB,CAAwBE;AAH6C,GAAd,CAAxE;;AAKA,QAAMC,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcV,KAAd,IAAuBA,KAAK,CAACW,GAAN,CAAUT,iBAAV,CAAvB,GAAsDA,iBAAiB,CAACF,KAAD,CAAxF;AACA,SAAO,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEQ;AAArB,KAA0CP,IAA1C,EAAP;AACD,CAXM,C,CAaP;;;AAhJEW,EAAAA,M;AAIAC,EAAAA,K;AAOAC,EAAAA,S;AAKAC,EAAAA,Q;AAIAC,EAAAA,S;AAKAC,EAAAA,I;AAKAC,EAAAA,K;AAKAC,EAAAA,I;AAIAC,EAAAA,S,aAAY,K,EAAQ,K,EAAQ,S;AAI5BC,EAAAA,E;AAKAC,EAAAA,E;AAKAC,EAAAA,M;AAIAC,EAAAA,K;AAQAC,EAAAA,c,aAAiB,U,EAAa,e,EAAkB,U;AAQhDC,EAAAA,U;AAKAC,EAAAA,M;AAAWC,IAAAA,C;AAAWC,IAAAA,C;;AAKtBC,EAAAA,K;AAKAC,EAAAA,c;AAKAC,EAAAA,K;AAAUJ,IAAAA,C;AAASC,IAAAA,C;;AAInB7B,EAAAA,K;AAOAiC,EAAAA,I;AAoBAL,EAAAA,C;AAIAC,EAAAA,C;;AAiBFpC,oBAAoB,CAACM,UAAD,EAAaJ,YAAb,CAApB","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { defaults } from 'lodash';\nimport {\n  StringOrNumberOrCallback,\n  VictoryLabel,\n  VictoryLabelProps\n} from 'victory';\nimport { ChartCommonStyles } from '../ChartTheme';\n\nexport enum ChartLabelDirection {\n  rtl = 'rtl',\n  ltr = 'ltr',\n  inherit = 'inherit'\n}\n\nexport enum ChartLabelPlacement {\n  parallel = 'parallel',\n  perpendicular = 'perpendicular',\n  vertical = 'vertical'\n}\n\ntype TextAnchorType = 'start' | 'middle' | 'end' | 'inherit';\n\n/**\n * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts\n */\nexport interface ChartLabelProps extends VictoryLabelProps {\n  /**\n   * The active prop specifies whether the label is active or not. The active prop is set by defaultEvents in components\n   * like ChartTooltip and VictorySelectionContainer. The active prop is used when evaluating functional styles and\n   * props.\n   */\n  active?: boolean;\n  /**\n   * Specifies the angle to rotate the text by.\n   */\n  angle?: string | number;\n  /**\n   * The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\n   * This is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\n   * line height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\n   * unitless number, it is assumed to be ems.\n   */\n  capHeight?: StringOrNumberOrCallback;\n  /**\n   * The children of this component define the content of the label. This makes using the component similar to normal\n   * HTML spans or labels. strings, numbers, and functions of data / value are supported.\n   */\n  children?: StringOrNumberOrCallback;\n  /**\n   * The className prop specifies a class name that will be applied to the rendered text element.\n   */\n  className?: string;\n  /**\n   * Labels that apply to an entire data series will recieve the entire series as `data` instead of an individual datum\n   * prop.\n   */\n  data?: any[];\n  /**\n   * Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\n   * and determine child text\n   */\n  datum?: {};\n  /**\n   * The desc prop specifies the description of the chart/SVG to assist with accessibility for screen readers. The more\n   * descriptive this title is, the more useful it will be for people using screen readers.\n   */\n  desc?: string;\n  /**\n   * The direction prop determines which text direction to apply to the rendered text element\n   */\n  direction?: 'rtl' | 'ltr' | 'inherit';\n  /**\n   * The dx prop defines a horizontal shift from the `x` coordinate.\n   */\n  dx?: StringOrNumberOrCallback;\n  /**\n   * The dy prop defines a vertical shift from the `y` coordinate. Since this component already accounts for\n   * `capHeight`, `lineHeight`, and `verticalAnchor`, this will usually not be necessary.\n   */\n  dy?: StringOrNumberOrCallback;\n  /**\n   * The events prop attaches arbitrary event handlers to the label component.\n   * Event handlers are currently only called with their corresponding events.\n   */\n  events?: React.DOMAttributes<any>;\n  /**\n   * The index prop represents the index of the datum in the data array. This prop should not be set manually.\n   */\n  index?: string | number;\n  /**\n   * The labelPlacement prop is used to specify the placement of labels relative to the data point they represent.\n   * This prop may be given as “vertical”, “parallel” or “perpendicular”. This props is particularly useful in polar\n   * charts, where it may be desireable to position a label either parallel or perpendicular to its corresponding angle.\n   * When this prop is not set, perpendicular label placement will be used for polar charts, and vertical label\n   * placement will be used for cartesian charts.\n   */\n  labelPlacement?: 'parallel' | 'perpendicular' | 'vertical';\n  /**\n   * The lineHeight prop defines how much space a single line of text should take up.\n   * Note that SVG has no notion of line-height, so the positioning may differ slightly from what you would expect with CSS,\n   * but the result is similar: a roughly equal amount of extra space is distributed above and below the line of text.\n   * The value should ideally use the same units as `capHeight` and `dy`, preferably ems.\n   * If given a unitless number, it is assumed to be ems.\n   */\n  lineHeight?: StringOrNumberOrCallback;\n  /**\n   * Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n   * **This prop should not be set manually.**\n   */\n  origin?: { x: number, y: number };\n  /**\n   * Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart.\n   * **This prop should not be set manually.**\n   */\n  polar?: boolean;\n  /**\n   * The renderInPortal prop specifies whether ChartLabel should render text in place or within a VictoryPortal.\n   * Setting renderInPortal to true is equivalent to wrapping ChartLabel in a VictoryPortal. This prop is false by default.\n   */\n  renderInPortal?: boolean;\n  /**\n   * Victory components can pass a scale prop to their label component. This can be used to calculate the position of\n   * label elements from datum. This prop should not be set manually.\n   */\n  scale?: { x?: any, y?: any };\n  /**\n   * The style prop applies CSS properties to the rendered `<text>` element.\n   */\n  style?: React.CSSProperties | React.CSSProperties[];\n  /**\n   * The text prop defines the text ChartLabel will render. The text prop may be given as a string, number, a function\n   * of datum, or an array of any of these. Strings may include newline characters, which ChartLabel will split into\n   * separate <tspan/> elements. When text is given as an array, separate <tspan/> elements will be created for each\n   * element in the array.\n   */\n  text?: string[] | StringOrNumberOrCallback;\n  /**\n   * The textAnchor prop defines how the text is horizontally positioned relative to the given `x` and `y` coordinates.\n   */\n  // Todo: function not working as type\n  // textAnchor?: TextAnchorType | { (): TextAnchorType };\n  /**\n   * The transform prop applies a transform to the rendered `<text>` element.\n   * In addition to being a string, it can be an object containing transform definitions for easier authoring.\n   */\n  // Todo: function not working as type\n  // transform?: string | {} | { (): string | {} };\n  /**\n   * The verticalAnchor prop defines how the text is vertically positioned relative to the given `x` and `y` coordinates\n   */\n  // Todo: function not working as type\n  // verticalAnchor?: VerticalAnchorType | { (): VerticalAnchorType };\n  /**\n   * The x prop defines the x coordinate to use as a basis for horizontal positioning.\n   */\n  x?: number;\n  /**\n   * The y prop defines the y coordinate to use as a basis for vertical positioning.\n   */\n  y?: number;\n}\n\nexport const ChartLabel: React.FunctionComponent<ChartLabelProps> = ({\n  style,\n  ...rest\n}: ChartLabelProps) => {\n  const applyDefaultStyle = (customStyle: React.CSSProperties) => defaults(customStyle, {\n    fontFamily: ChartCommonStyles.label.fontFamily,\n    fontSize: ChartCommonStyles.label.fontSize,\n    letterSpacing: ChartCommonStyles.label.letterSpacing\n  });\n  const newStyle = Array.isArray(style) ? style.map(applyDefaultStyle) : applyDefaultStyle(style);\n  return <VictoryLabel style={newStyle as any} {...rest} />;\n};\n\n// Note: VictoryLabel.role must be hoisted\nhoistNonReactStatics(ChartLabel, VictoryLabel);\n"],"file":"ChartLabel.js"}