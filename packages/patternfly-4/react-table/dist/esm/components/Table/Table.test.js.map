{"version":3,"sources":["../../../../src/components/Table/Table.test.tsx"],"names":["React","mount","Table","TableHeader","TableBody","TableGridBreakpoint","TableVariant","cellWidth","headerCol","sortable","expandable","compoundExpand","rows","columns","actions","describe","test","view","expect","toMatchSnapshot","onSortCall","undefined","transforms","Object","values","forEach","oneBreakpoint","onevariant","rowsWithDisabledAction","cells","disableActions","cellTransforms","isOpen","parent","cellFormatters","onCollapse","compoundColumns","title","cell","compoundRows","props","compoundParent","colSpan","onExpand","onSelect","data","selected","f","find","prop","toEqual"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mount } from 'enzyme';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableGridBreakpoint,\n  TableVariant,\n  cellWidth,\n  headerCol,\n  sortable,\n  expandable,\n  compoundExpand, IRow\n} from './index';\nimport { rows, columns, actions } from '../../test-helpers/data-sets';\nimport { ColumnsType } from './base';\n\ndescribe('Simple table', () => {\n  test('caption', () => {\n    const view = mount(\n      <Table caption=\"Simple Table\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n    expect(view).toMatchSnapshot();\n  });\n\n  test('header', () => {\n    const view = mount(\n      <Table header={<h4>Header title</h4>} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n    expect(view).toMatchSnapshot();\n  });\n  test('aria-label', () => {\n    const view = mount(\n      <Table aria-label=\"Aria labeled\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n    expect(view).toMatchSnapshot();\n  });\n});\n\ntest('Sortable table', () => {\n  const onSortCall = () => undefined as any;\n  columns[0] = { ...columns[0], transforms: [sortable] };\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onSort={onSortCall} sortBy={{}} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ndescribe('Table variants', () => {\n  Object.values(TableGridBreakpoint).forEach((oneBreakpoint) => {\n    test(`Breakpoint - ${oneBreakpoint}`, () => {\n      const view = mount(\n        <Table aria-label=\"Aria labeled\" gridBreakPoint={oneBreakpoint} cells={columns} rows={rows}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      );\n      expect(view).toMatchSnapshot();\n    });\n  });\n  Object.values(TableVariant).forEach((onevariant) => {\n    test(`Size - ${onevariant}`, () => {\n      const view = mount(\n        <Table aria-label=\"Aria labeled\" variant={onevariant} cells={columns} rows={rows}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      );\n      expect(view).toMatchSnapshot();\n    });\n  });\n});\n\ntest('Simple Actions table', () => {\n  const rowsWithDisabledAction = [\n    ...rows,\n    {\n      cells: ['one', 'two', 'three', 'four', 'five'],\n      disableActions: true\n    }\n  ];\n\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" actions={actions} cells={columns} rows={rowsWithDisabledAction}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Actions table', () => {\n  const view = mount(\n    <Table\n      aria-label=\"Aria labeled\"\n      actionResolver={() => actions}\n      areActionsDisabled={() => false}\n      cells={columns}\n      rows={rows}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Cell header table', () => {\n  columns[0] = { ...columns[0], cellTransforms: [headerCol] };\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Collapsible table', () => {\n  rows[0] = { ...rows[0], isOpen: true };\n  rows[1] = { ...rows[1], parent: 0 };\n  rows[3] = { ...rows[3], isOpen: false };\n  rows[4] = { ...rows[4], parent: 3 };\n  columns[0] = { ...columns[0], cellFormatters: [expandable] };\n  const onCollapse = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onCollapse={onCollapse} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Compound Expandable table', () => {\n  const compoundColumns: ColumnsType = [\n    { title: 'col1', cell: { transforms: [compoundExpand] } },\n    { title: 'col2', cell: { transforms: [compoundExpand] } }\n  ];\n  const compoundRows: IRow[] = [\n    { isOpen: true, cells: [{ title: '1', props: { isOpen: true } }, { title: '2', props: { isOpen: false } }] },\n    { parent: 0, compoundParent: 0, cells: [{ title: 'expanded', props: { colSpan: 2 } }] },\n    { isOpen: false, cells: [{ title: '3', props: { isOpen: false } }, { title: '4', props: { isOpen: false } }] },\n    { parent: 2, compoundParent: 0, cells: [{ title: 'expanded', props: { colSpan: 2 } }] }\n  ];\n  const onExpand = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onExpand={onExpand} cells={compoundColumns} rows={compoundRows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Collapsible nested table', () => {\n  rows[0] = { ...rows[0], isOpen: false };\n  rows[1] = { ...rows[1], parent: 0, isOpen: true };\n  rows[2] = { ...rows[2], parent: 1 };\n  const onCollapse = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onCollapse={onCollapse} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Selectable table', () => {\n  const onSelect = () => undefined as any;\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" onSelect={onSelect} cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Header width table', () => {\n  columns[0] = { ...columns[0], transforms: [cellWidth(10)] };\n  columns[2] = { ...columns[2], transforms: [cellWidth(30)] };\n  columns[4] = { ...columns[4], transforms: [cellWidth('max')] };\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Selectable table with selected expandable row', () => {\n  const data = {\n    cells: ['column'],\n    rows: [\n      {\n        cells: ['one'],\n        selected: true\n      },\n      {\n        cells: ['one'],\n        parent: 0\n      }\n    ],\n    onSelect: (f: any) => f\n  };\n\n  const view = mount(\n    <Table aria-label=\"Aria labeled\" {...data}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n\n  expect(view.find('input[name=\"check-all\"]').prop('checked')).toEqual(true);\n});\n"],"file":"Table.test.js"}