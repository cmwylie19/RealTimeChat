{"version":3,"sources":["../esm/createIcon.test.js"],"names":["iconDef","name","width","height","svgPath","Icon","test","view","React","createElement","expect","find","prop","toBe","displayName","size","IconSize","sm","toMatchSnapshot","exists","title","text","labelledby","id","first","second","not"],"mappings":"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","sourcesContent":["import React from 'react';\nimport createIcon from './createIcon';\nimport { shallow } from 'enzyme';\nimport { IconSize } from './common';\nconst iconDef = {\n  name: 'IconName',\n  width: 10,\n  height: 20,\n  svgPath: 'svgPath'\n};\nconst Icon = createIcon(iconDef);\ntest('sets correct viewBox', () => {\n  const view = shallow(React.createElement(Icon, null));\n  expect(view.find('svg').prop('viewBox')).toBe(`0 0 ${iconDef.width} ${iconDef.height}`);\n});\ntest('sets correct svgPath', () => {\n  const view = shallow(React.createElement(Icon, null));\n  expect(view.find('path').prop('d')).toBe(iconDef.svgPath);\n});\ntest('sets correct displayName', () => {\n  expect(Icon.displayName).toBe(iconDef.name);\n});\ntest('height and width are set from size', () => {\n  const view = shallow(React.createElement(Icon, {\n    size: IconSize.sm\n  }));\n  expect(view.find('svg').prop('width')).toMatchSnapshot('width');\n  expect(view.find('svg').prop('height')).toMatchSnapshot('height');\n});\ntest('aria-hidden is true if no title is specified', () => {\n  const view = shallow(React.createElement(Icon, null));\n  expect(view.find('svg').prop('aria-hidden')).toBe(true);\n});\ntest('title is not renderd if a title is not passed', () => {\n  const view = shallow(React.createElement(Icon, null));\n  expect(view.find('title').exists()).toBe(false);\n});\ntest('aria-labelledby is null if a title is not passed', () => {\n  const view = shallow(React.createElement(Icon, null));\n  expect(view.find('svg').prop('aria-labelledby')).toBe(null);\n});\ntest('title is rendered', () => {\n  const title = 'icon title';\n  const view = shallow(React.createElement(Icon, {\n    title: title\n  }));\n  expect(view.find('title').text()).toBe(title);\n});\ntest('aria-labelledby matches title id', () => {\n  const view = shallow(React.createElement(Icon, {\n    title: \"icon title\"\n  }));\n  const labelledby = view.find('svg').prop('aria-labelledby');\n  const id = view.find('title').prop('id');\n  expect(labelledby).toBe(id);\n});\ntest('ids should be unique for each rendered icon', () => {\n  const first = shallow(React.createElement(Icon, {\n    title: \"icon title\"\n  }));\n  const second = shallow(React.createElement(Icon, {\n    title: \"icon title\"\n  }));\n  expect(first.find('title').prop('id')).not.toBe(second.find('title').prop('id'));\n});\ntest('additional props should be spread to the root svg element', () => {\n  const view = shallow(React.createElement(Icon, {\n    \"data-testid\": \"icon\"\n  }));\n  expect(view.find('svg')).toMatchSnapshot();\n});\n//# sourceMappingURL=createIcon.test.js.map"],"file":"createIcon.test.js"}