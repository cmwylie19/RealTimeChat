{"version":3,"sources":["../../../../src/components/FormSelect/FormSelect.test.tsx"],"names":["props","options","value","label","disabled","groupedProps","groups","groupLabel","test","view","map","option","index","expect","toMatchSnapshot","group","i","myMock","jest","fn","global","console","error","not","toBeCalled","newValue","event","currentTarget","find","simulate","toBeCalledWith"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { FormSelect } from './FormSelect';\nimport { FormSelectOption } from './FormSelectOption';\nimport { FormSelectOptionGroup } from './FormSelectOptionGroup';\n\nconst props = {\n  options: [\n    { value: 'please choose', label: 'Please Choose', disabled: true },\n    { value: 'mr', label: 'Mr', disabled: false },\n    { value: 'miss', label: 'Miss', disabled: false },\n    { value: 'mrs', label: 'Mrs', disabled: false },\n    { value: 'ms', label: 'Ms', disabled: false },\n    { value: 'dr', label: 'Dr', disabled: false },\n    { value: 'other', label: 'Other', disabled: true }\n  ],\n  value: 'mrs'\n};\n\nconst groupedProps = {\n  groups: [\n    {\n      groupLabel: 'Group1',\n      disabled: false,\n      options: [\n        { value: '1', label: 'The First Option', disabled: false },\n        { value: '2', label: 'Second option is selected by default', disabled: false }\n      ]\n    },\n    {\n      groupLabel: 'Group2',\n      disabled: false,\n      options: [\n        { value: '3', label: 'The Third Option', disabled: false },\n        { value: '4', label: 'The Fourth option', disabled: false }\n      ]\n    },\n    {\n      groupLabel: 'Group3',\n      disabled: true,\n      options: [\n        { value: '5', label: 'The Fifth Option', disabled: false },\n        { value: '6', label: 'The Sixth option', disabled: false }\n      ]\n    }\n  ],\n  value: '2'\n};\n\ntest('Simple FormSelect input', () => {\n  const view = shallow(\n    <FormSelect value={props.value} aria-label=\"simple FormSelect\">\n      {props.options.map((option, index) => (\n        <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />\n      ))}\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Grouped FormSelect input', () => {\n  const view = shallow(\n    <FormSelect value={groupedProps.value} aria-label=\" grouped FormSelect\">\n      {groupedProps.groups.map((group, index) => (\n        <FormSelectOptionGroup isDisabled={group.disabled} key={index} label={group.groupLabel}>\n          {group.options.map((option, i) => (\n            <FormSelectOption isDisabled={option.disabled} key={i} value={option.value} label={option.label} />\n          ))}\n        </FormSelectOptionGroup>\n      ))}\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('Disabled FormSelect input ', () => {\n  const view = shallow(\n    <FormSelect isDisabled aria-label=\"disabled  FormSelect\">\n      <FormSelectOption key={1} value={props.options[1].value} label={props.options[1].label} />\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('FormSelect input with aria-label does not generate console error', () => {\n  const myMock = jest.fn() as any;\n  global.console = { error: myMock } as any;\n  const view = shallow(\n    <FormSelect aria-label=\"FormSelect with aria-label\">\n      <FormSelectOption key={1} value={props.options[1].value} label={props.options[1].label} />\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n  expect(myMock).not.toBeCalled();\n});\n\ntest('FormSelect input with id does not generate console error', () => {\n  const myMock = jest.fn() as any;\n  global.console = { error: myMock } as any;\n  const view = shallow(\n    <FormSelect id=\"id\">\n      <FormSelectOption key={1} value={props.options[1].value} label={props.options[1].label} />\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n  expect(myMock).not.toBeCalled();\n});\n\ntest('FormSelect input with no aria-label or id generates console error', () => {\n  const myMock = jest.fn() as any;\n  global.console = { error: myMock } as any;\n  const view = shallow(\n    <FormSelect>\n      <FormSelectOption key={1} value={props.options[1].value} label={props.options[1].label} />\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n  expect(myMock).toBeCalled();\n});\n\ntest('invalid FormSelect input', () => {\n  const view = shallow(\n    <FormSelect isValid={false} aria-label=\"invalid FormSelect\">\n      <FormSelectOption key={1} value={props.options[1].value} label={props.options[1].label} />\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('required FormSelect input', () => {\n  const view = shallow(\n    <FormSelect required aria-label=\"required FormSelect\">\n      <FormSelectOption key={1} value={props.options[1].value} label={props.options[1].label} />\n    </FormSelect>\n  );\n  expect(view).toMatchSnapshot();\n});\n\ntest('FormSelect passes value and event to onChange handler', () => {\n  const myMock = jest.fn();\n  const newValue = 1;\n  const event = {\n    currentTarget: { value: newValue }\n  };\n  const view = shallow(\n    <FormSelect onChange={myMock} aria-label=\"onchange FormSelect\">\n      <FormSelectOption key={1} value={props.options[1].value} label={props.options[1].label} />\n    </FormSelect>\n  );\n  view.find('select').simulate('change', event);\n  expect(myMock).toBeCalledWith(newValue, event);\n});\n"],"file":"FormSelect.test.js"}