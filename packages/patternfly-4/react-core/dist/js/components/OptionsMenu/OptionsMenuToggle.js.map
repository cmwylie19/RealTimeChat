{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenuToggle.tsx"],"names":["OptionsMenuToggle","isPlain","isHovered","isActive","isFocused","isDisabled","isOpen","parentId","toggleTemplate","hideCaret","isSplitButton","type","ariaLabel","props","contextId","id","iconComponent","children","onToggle","onEnter","parentRef"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAgCO,IAAMA,iBAAkE,GAAG,SAArEA,iBAAqE,OAcpD;AAAA,0BAb1BC,OAa0B;AAAA,MAb1BA,OAa0B,6BAbhB,KAagB;AAAA,4BAZ1BC,SAY0B;AAAA,MAZ1BA,SAY0B,+BAZd,KAYc;AAAA,2BAX1BC,QAW0B;AAAA,MAX1BA,QAW0B,8BAXf,KAWe;AAAA,4BAV1BC,SAU0B;AAAA,MAV1BA,SAU0B,+BAVd,KAUc;AAAA,6BAT1BC,UAS0B;AAAA,MAT1BA,UAS0B,gCATb,KASa;AAAA,yBAR1BC,MAQ0B;AAAA,MAR1BA,MAQ0B,4BARjB,KAQiB;AAAA,2BAP1BC,QAO0B;AAAA,MAP1BA,QAO0B,8BAPf,EAOe;AAAA,iCAN1BC,cAM0B;AAAA,MAN1BA,cAM0B,oCANT,oBAAC,KAAD,CAAO,QAAP,OAMS;AAAA,4BAL1BC,SAK0B;AAAA,MAL1BA,SAK0B,+BALd,KAKc;AAAA,gCAJ1BC,aAI0B;AAAA,MAJ1BA,aAI0B,mCAJV,KAIU;AAAA,MAH1BC,IAG0B,QAH1BA,IAG0B;AAAA,4BAF1B,YAE0B;AAAA,MAFZC,SAEY,+BAFA,cAEA;AAAA,MADvBC,KACuB;;AAC5B,SACE,oBAAC,yBAAD,CAAiB,QAAjB,QACG;AAAA,QAAOC,SAAP,SAAGC,EAAH;AAAA,WACC,oBAAC,wBAAD,eACM,CAACd,OAAO,IAAIQ,SAAZ,KAA0B;AAAEO,MAAAA,aAAa,EAAE;AAAjB,KADhC,EAEMH,KAFN;AAGE,MAAA,OAAO,EAAEZ,OAHX;AAIE,MAAA,MAAM,EAAEK,MAJV;AAKE,MAAA,UAAU,EAAED,UALd;AAME,MAAA,SAAS,EAAEH,SANb;AAOE,MAAA,QAAQ,EAAEC,QAPZ;AAQE,MAAA,SAAS,EAAEC,SARb;AASE,MAAA,EAAE,EAAEG,QAAQ,aAAMA,QAAN,yBAA6BO,SAA7B,YATd;AAUE,MAAA,YAAY,EAAC,SAVf;AAWE,oBAAYF,SAXd;AAYE,uBAAeN;AAZjB,OAaME,cAAc,GAAG;AAAES,MAAAA,QAAQ,EAAET;AAAZ,KAAH,GAAiC,EAbrD,EADD;AAAA,GADH,CADF;AAqBD,CApCM;;;;AA5BLD,EAAAA,Q;AAEAW,EAAAA,Q;AAEAZ,EAAAA,M;AAEAL,EAAAA,O;AAEAG,EAAAA,S;AAEAF,EAAAA,S;AACAQ,EAAAA,a;AAEAP,EAAAA,Q;AAECE,EAAAA,U;AAEDI,EAAAA,S;AAEA,c;AAEAU,EAAAA,O;AAEAC,EAAAA,S;AAEAZ,EAAAA,c","sourcesContent":["import * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\n\nexport interface OptionsMenuToggleProps  extends React.HTMLProps<HTMLButtonElement> {\n  /** Id of the parent Options menu component */\n  parentId?: string;\n  /** Callback for when this Options menu is toggled */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  /** Forces display of the hover state of the Options menu */\n  isFocused?: boolean;\n  /** Forces display of the hover state of the Options menu */\n  isHovered?: boolean;\n  isSplitButton?: boolean;\n  /** Forces display of the active state of the Options menu */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n   isDisabled?: boolean;\n  /** hide the toggle caret */\n  hideCaret?: boolean;\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n  /** Internal function to implement enter click */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Internal parent reference */\n  parentRef?: HTMLElement;\n  /** Content to be rendered in the Options menu toggle button */\n  toggleTemplate?: React.ReactNode;\n}\n\nexport const OptionsMenuToggle: React.FunctionComponent<OptionsMenuToggleProps> = ({\n    isPlain = false,\n    isHovered = false,\n    isActive = false,\n    isFocused = false,\n    isDisabled = false,\n    isOpen = false,\n    parentId = '',\n    toggleTemplate = <React.Fragment/>,\n    hideCaret = false,\n    isSplitButton = false,\n    type,\n    'aria-label': ariaLabel = 'Options menu',\n    ...props\n}: OptionsMenuToggleProps) => {\n  return (\n    <DropdownContext.Consumer>\n      {({ id: contextId }) => (\n        <DropdownToggle\n          {...(isPlain || hideCaret) && { iconComponent: null }}\n          {...props}\n          isPlain={isPlain}\n          isOpen={isOpen}\n          isDisabled={isDisabled}\n          isHovered={isHovered}\n          isActive={isActive}\n          isFocused={isFocused}\n          id={parentId ? `${parentId}-toggle` : `${contextId}-toggle`}\n          ariaHasPopup=\"listbox\"\n          aria-label={ariaLabel}\n          aria-expanded={isOpen}\n          {...toggleTemplate ? { children: toggleTemplate} : {}}\n        />\n      )}\n    </DropdownContext.Consumer>\n  );\n};\n"],"file":"OptionsMenuToggle.js"}