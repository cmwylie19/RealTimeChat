{"version":3,"sources":["../../../../src/components/Table/Body.tsx"],"names":["flagVisibility","rows","visibleRows","filter","oneRow","parent","isExpanded","length","isFirstVisible","isLastVisible","ContextBody","row","rowProps","props","onRowClick","onRow","extendedRowProps","onMouseDown","event","computedData","isInput","target","tagName","isButton","headerData","rowKey","additionalColsIndexShift","extraParams","firstUserColumnIndex","cells","reduce","acc","cell","cellIndex","isCellObject","Object","mappedCell","property","title","isVisible","colSpan","id","undefined","className","children","mappedRows","map","oneRowKey","mapCells","isFirst","isLast","React","Component","TableBody","rest"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { RowType, RowKeyType } from './base/types';\nimport { TableContext, IRow, IRowCell } from './Table';\nimport { isRowExpanded } from './utils';\n\nexport interface TableBodyProps {\n  className?: string;\n  children?: React.ReactNode;\n  headerData?: IRow[];\n  rows?: IRow[];\n  rowKey?: RowKeyType;\n  onRowClick?: Function;\n  onRow?: Function;\n}\n\nconst flagVisibility = (rows: IRow[]) => {\n  const visibleRows = (rows as []).filter((oneRow: IRow) => !oneRow.parent || oneRow.isExpanded) as IRow[];\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\n\nclass ContextBody extends React.Component<TableBodyProps, {}> {\n  onRow = (row: IRow, rowProps: any) => {\n    const { onRowClick, onRow } = this.props;\n    const extendedRowProps = {\n      ...rowProps,\n      ...(onRow ? onRow(row, rowProps) : {})\n    };\n    return {\n      row,\n      rowProps: extendedRowProps,\n      onMouseDown: (event: React.MouseEvent) => {\n        const computedData = {\n          isInput: (event.target as HTMLElement).tagName !== 'INPUT',\n          isButton: (event.target as HTMLElement).tagName !== 'BUTTON'\n        };\n        onRowClick(event, row, rowProps, computedData);\n      }\n    };\n  }\n\n  mapCells = (headerData: IRow[], row: IRow, rowKey: number) => {\n    // column indexes start after generated optional columns\n    let additionalColsIndexShift = headerData[0].extraParams.firstUserColumnIndex;\n\n    return {\n      ...(row &&\n        (row.cells || row).reduce(\n          (acc: object, cell: IRowCell, cellIndex: number) => {\n            const isCellObject = cell === Object(cell);\n\n            const mappedCell = {\n              [headerData[cellIndex + additionalColsIndexShift].property]: {\n                title: isCellObject ? cell.title : cell,\n                props: {\n                  isVisible: true,\n                  ...(isCellObject ? cell.props : null)\n                }\n              }\n            };\n\n            // increment the shift index when a cell spans multiple columns\n            if (isCellObject && cell.props && cell.props.colSpan) {\n              additionalColsIndexShift += cell.props.colSpan - 1;\n            }\n            return {\n              ...acc,\n              ...mappedCell\n            };\n          },\n          { id: row.id !== undefined ? row.id : rowKey }\n        ))\n    };\n  }\n\n  render() {\n    const { className, headerData, rows, rowKey, children, onRowClick, ...props } = this.props;\n\n    let mappedRows;\n    if (headerData.length > 0) {\n      mappedRows = (rows as []).map((oneRow: IRow, oneRowKey: number) => ({\n        ...oneRow,\n        ...this.mapCells(headerData, oneRow, oneRowKey),\n        isExpanded: isRowExpanded(oneRow, rows),\n        isFirst: oneRowKey === 0,\n        isLast: oneRowKey === rows.length - 1,\n        isFirstVisible: false,\n        isLastVisible: false\n      })) as IRow[];\n      flagVisibility(mappedRows);\n    }\n\n    return (\n      <React.Fragment>\n        {mappedRows && (\n          <BaseBody\n            {...props}\n            mappedRows={mappedRows}\n            rows={mappedRows as RowType[]}\n            onRow={this.onRow}\n            rowKey={rowKey}\n            className={className}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport const TableBody = ({\n  onRow = (...args: any) => Object,\n  className = '' as string,\n  children = null as React.ReactNode,\n  rowKey = 'id' as string,\n  onRowClick = (...args: any) => undefined as any,\n  ...props\n}: TableBodyProps) => (\n  <TableContext.Consumer>\n    {({ headerData = [], rows = [], ...rest }) =>\n      <ContextBody\n        headerData={headerData}\n        rows={rows as IRow[]}\n        onRow={onRow}\n        className={className}\n        children={children}\n        rowKey={rowKey}\n        onRowClick={onRowClick} {...props} {...rest} />}\n  </TableContext.Consumer>\n);\n"],"file":"Body.js"}