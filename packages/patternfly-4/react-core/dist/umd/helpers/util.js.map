{"version":3,"sources":["../../esm/helpers/util.js"],"names":["capitalize","getUniqueId","debounce","isElementInView","sideElementIsOutOfView","fillTemplate","keyHandler","getNextIndex","pluralize","ReactDOM","input","toUpperCase","substring","prefix","uid","Date","getTime","Math","random","toString","slice","func","wait","timeout","args","clearTimeout","setTimeout","apply","container","element","partial","containerBounds","getBoundingClientRect","elementBounds","containerBoundsLeft","floor","left","containerBoundsRight","right","elementBoundsLeft","elementBoundsRight","isTotallyInView","isPartiallyInView","isOffLeft","isOffRight","side","SIDE","NONE","BOTH","RIGHT","LEFT","templateString","templateVars","Function","Object","keys","values","index","position","refsCollection","kids","custom","Array","isArray","nextIndex","length","focus","findDOMNode","collection","i","singular","plural","formatBreakpointMods","breakpointMods","styles","reduce","acc","curr","modifier","breakpoint"],"mappings":"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","sourcesContent":["import * as ReactDOM from 'react-dom';\nimport { SIDE } from './constants';\nimport { getModifier } from '@patternfly/react-styles';\nexport function capitalize(input) {\n  return input[0].toUpperCase() + input.substring(1);\n}\nexport function getUniqueId(prefix = 'pf') {\n  const uid = new Date().getTime() + Math.random().toString(36).slice(2);\n  return `${prefix}-${uid}`;\n}\nexport function debounce(func, wait) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n/** This function returns whether or not an element is within the viewable area of a container. If partial is true,\n * then this function will return true even if only part of the element is in view.\n * @param {HTMLElement} container  The container to check if the element is in view of.\n * @param {HTMLElement} element    The element to check if it is view\n * @param {boolean} partial   true if partial view is allowed\n *\n * @return {type} True if the component is in View.\n */\n\nexport function isElementInView(container, element, partial) {\n  const containerBounds = container.getBoundingClientRect();\n  const elementBounds = element.getBoundingClientRect();\n  const containerBoundsLeft = Math.floor(containerBounds.left);\n  const containerBoundsRight = Math.floor(containerBounds.right);\n  const elementBoundsLeft = Math.floor(elementBounds.left);\n  const elementBoundsRight = Math.floor(elementBounds.right); // Check if in view\n\n  const isTotallyInView = elementBoundsLeft >= containerBoundsLeft && elementBoundsRight <= containerBoundsRight;\n  const isPartiallyInView = partial && (elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft || elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight); // Return outcome\n\n  return isTotallyInView || isPartiallyInView;\n}\n/** This function returns the side the element is out of view on (right, left or both)\n * @param {HTMLElement} container    The container to check if the element is in view of.\n * @param {HTMLElement} element      The element to check if it is view\n *\n * @return {type} right if the element is of the right, left if element is off the left or both if it is off on both sides.\n */\n\nexport function sideElementIsOutOfView(container, element) {\n  const containerBounds = container.getBoundingClientRect();\n  const elementBounds = element.getBoundingClientRect();\n  const containerBoundsLeft = Math.floor(containerBounds.left);\n  const containerBoundsRight = Math.floor(containerBounds.right);\n  const elementBoundsLeft = Math.floor(elementBounds.left);\n  const elementBoundsRight = Math.floor(elementBounds.right); // Check if in view\n\n  const isOffLeft = elementBoundsLeft < containerBoundsLeft;\n  const isOffRight = elementBoundsRight > containerBoundsRight;\n  let side = SIDE.NONE;\n\n  if (isOffRight && isOffLeft) {\n    side = SIDE.BOTH;\n  } else if (isOffRight) {\n    side = SIDE.RIGHT;\n  } else if (isOffLeft) {\n    side = SIDE.LEFT;\n  } // Return outcome\n\n\n  return side;\n}\n/** Interpolates a parameterized templateString using values from a templateVars object.\n * The templateVars object should have keys and values which match the templateString's parameters.\n * Example:\n *    const templateString: 'My name is ${firstName} ${lastName}';\n *    const templateVars: {\n *      firstName: 'Jon'\n *      lastName: 'Dough'\n *    };\n *    const result = fillTemplate(templateString, templateVars);\n *    // \"My name is Jon Dough\"\n * @param {Object} templateString  The string passed by the consumer\n * @param {Object} templateVars The variables passed to the string\n *\n * @return {type} The template string literal result\n */\n\nexport function fillTemplate(templateString, templateVars) {\n  const func = new Function(...Object.keys(templateVars), `return \\`${templateString}\\`;`);\n  return func(...Object.values(templateVars));\n}\n/** This function allows for keyboard navigation through dropdowns. The custom argument is optional.\n * @param {number} index The index of the element you're on\n * @param {string} position The orientation of the dropdown\n * @param {string[]} refsCollection Array of refs to the items in the dropdown\n * @param {Object[]} kids Array of items in the dropdown\n * @param {boolean} [custom] Allows for handling of flexible content\n */\n\nexport function keyHandler(index, position, refsCollection, kids, custom = false) {\n  if (!Array.isArray(kids)) {\n    return;\n  }\n\n  let nextIndex;\n\n  if (position === 'up') {\n    if (index === 0) {\n      // loop back to end\n      nextIndex = kids.length - 1;\n    } else {\n      nextIndex = index - 1;\n    }\n  } else if (index === kids.length - 1) {\n    // loop back to beginning\n    nextIndex = 0;\n  } else {\n    nextIndex = index + 1;\n  }\n\n  if (refsCollection[nextIndex] === null) {\n    keyHandler(nextIndex, position, refsCollection, kids, custom);\n  } else if (custom) {\n    if (refsCollection[nextIndex].focus) {\n      refsCollection[nextIndex].focus();\n    }\n\n    const element = ReactDOM.findDOMNode(refsCollection[nextIndex]);\n    element.focus();\n  } else {\n    refsCollection[nextIndex].focus();\n  }\n}\n/** This function is a helper for keyboard navigation through dropdowns.\n * @param {number} index The index of the element you're on\n * @param {string} position The orientation of the dropdown\n * @param {string[]} collection Array of refs to the items in the dropdown\n */\n\nexport function getNextIndex(index, position, collection) {\n  let nextIndex;\n\n  if (position === 'up') {\n    if (index === 0) {\n      // loop back to end\n      nextIndex = collection.length - 1;\n    } else {\n      nextIndex = index - 1;\n    }\n  } else if (index === collection.length - 1) {\n    // loop back to beginning\n    nextIndex = 0;\n  } else {\n    nextIndex = index + 1;\n  }\n\n  if (collection[nextIndex] === null) {\n    getNextIndex(nextIndex, position, collection);\n  } else {\n    return nextIndex;\n  }\n}\n/** This function is a helper for pluralizing strings.\n * @param {number} i The quantity of the string you want to pluralize\n * @param {string} singular The singular version of the string\n * @param {string} plural The change to the string that should occur if the quantity is not equal to 1.\n *                 Defaults to adding an 's'.\n */\n\nexport function pluralize(i, singular, plural) {\n  if (!plural) {\n    plural = `${singular}s`;\n  }\n\n  return `${i || 0} ${i === 1 ? singular : plural}`;\n}\n/** This function is a helper for turning arrays of breakpointMod objects for data toolbar and flex into classes\n * @param {(DataToolbarBreakpointMod | FlexBreakpointMod | FlexItemBreakpointMod)[]} breakpointMods The modifiers object\n * @param {any} styles The appropriate styles object for the component\n */\n\nexport const formatBreakpointMods = (breakpointMods, styles) => {\n  return breakpointMods.reduce((acc, curr) => `${acc}${acc && ' '}${getModifier(styles, `${curr.modifier}${curr.breakpoint ? `-on-${curr.breakpoint}` : ''}`)}`, '');\n};\n//# sourceMappingURL=util.js.map"],"file":"util.js"}