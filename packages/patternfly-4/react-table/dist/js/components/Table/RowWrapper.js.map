{"version":3,"sources":["../../../../src/components/Table/RowWrapper.tsx"],"names":["RowWrapper","props","event","_unmounted","onScroll","onResize","handleScroll","handleResize","window","addEventListener","removeEventListener","trRef","className","isExpanded","row","rowProps","undefined","styles","tableExpandableRow","modifiers","expanded","React","Component","isOpen"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBaA,U;;;;;AAWX,sBAAYC,KAAZ,EAAoC;AAAA;;AAAA;;AAClC,oFAAMA,KAAN;;AADkC,mEAiCrB,UAACC,KAAD,EAAwB;AACrC,UAAI,CAAC,MAAKC,UAAV,EAAsB;AACpB,cAAKF,KAAL,CAAWG,QAAX,CAAqBF,KAArB;AACD;AACF,KArCmC;;AAAA,mEAuCrB,UAACA,KAAD,EAAkB;AAC/B,UAAI,CAAC,MAAKC,UAAV,EAAsB;AACpB,cAAKF,KAAL,CAAWI,QAAX,CAAqBH,KAArB;AACD;AACF,KA3CmC;;AAGlC,QAAID,KAAK,CAACG,QAAV,EAAoB;AAClB,YAAKE,YAAL,GAAoB,yBAAS,MAAKA,YAAd,EAA4B,GAA5B,CAApB;AACD;;AACD,QAAIL,KAAK,CAACI,QAAV,EAAoB;AAClB,YAAKE,YAAL,GAAoB,yBAAS,MAAKA,YAAd,EAA4B,GAA5B,CAApB;AACD;;AARiC;AASnC;;;;wCAEmB;AAClB,WAAKJ,UAAL,GAAkB,KAAlB;;AAEA,UAAI,KAAKF,KAAL,CAAWG,QAAf,EAAyB;AACvBI,QAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKH,YAAvC;AACD;;AACD,UAAI,KAAKL,KAAL,CAAWI,QAAf,EAAyB;AACvBG,QAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKF,YAAvC;AACD;AACF;;;2CAEsB;AACrB,WAAKJ,UAAL,GAAkB,IAAlB;;AAEA,UAAI,KAAKF,KAAL,CAAWG,QAAf,EAAyB;AACvBI,QAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKJ,YAA1C;AACD;;AACD,UAAI,KAAKL,KAAL,CAAWI,QAAf,EAAyB;AACvBG,QAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKH,YAA1C;AACD;AACF;;;6BAcQ;AAAA,wBASH,KAAKN,KATF;AAAA,UAELU,KAFK,eAELA,KAFK;AAAA,UAGLC,SAHK,eAGLA,SAHK;AAAA,UAILR,QAJK,eAILA,QAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMEQ,UANF,eAMLC,GANK,CAMED,UANF;AAAA,UAOLE,QAPK,eAOLA,QAPK;AAAA,UAQFd,KARE;;AAWP,aACE,uCACMA,KADN;AAEE,QAAA,GAAG,EAAEU,KAFP;AAGE,QAAA,SAAS,EAAE,sBACTC,SADS,EAETC,UAAU,KAAKG,SAAf,IAA4BC,kBAAOC,kBAF1B,EAGTL,UAAU,IAAII,kBAAOE,SAAP,CAAiBC,QAHtB,CAHb;AAQE,QAAA,MAAM,EAAEP,UAAU,KAAKG,SAAf,IAA4B,CAACH;AARvC,SADF;AAYD;;;;EA/E6BQ,KAAK,CAACC,S;;;;gBAAzBtB,U;AARXW,EAAAA,K;AACAC,EAAAA,S;AACAR,EAAAA,Q;AACAC,EAAAA,Q;AACAS,EAAAA,G;AATAS,IAAAA,M;AACAV,IAAAA,U;;AASAE,EAAAA,Q;;;gBAGWf,U,kBACW;AACpBY,EAAAA,SAAS,EAAE,EADS;AAEpBE,EAAAA,GAAG,EAAE;AACHS,IAAAA,MAAM,EAAEP,SADL;AAEHH,IAAAA,UAAU,EAAEG;AAFT,GAFe;AAMpBD,EAAAA,QAAQ,EAAE;AANU,C","sourcesContent":["import * as React from 'react';\nimport { debounce } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { css } from '@patternfly/react-styles';\n\n// legacy export now, RowWrapperRow can simply be typed as IRow in the future\nexport interface RowWrapperRow {\n  isOpen?: Boolean;\n  isExpanded?: Boolean;\n}\n\nexport interface RowWrapperProps {\n  trRef?: React.Ref<any> | Function;\n  className?: string;\n  onScroll?: React.UIEventHandler;\n  onResize?: React.UIEventHandler;\n  row?: RowWrapperRow;\n  rowProps?: Object;\n}\n\nexport class RowWrapper extends React.Component<RowWrapperProps, {}> {\n  static defaultProps = {\n    className: '' as string,\n    row: {\n      isOpen: undefined as boolean,\n      isExpanded: undefined as boolean\n    } as RowWrapperRow,\n    rowProps: null as any\n  };\n  _unmounted: boolean;\n\n  constructor(props: RowWrapperProps) {\n    super(props);\n\n    if (props.onScroll) {\n      this.handleScroll = debounce(this.handleScroll, 100);\n    }\n    if (props.onResize) {\n      this.handleResize = debounce(this.handleResize, 100);\n    }\n  }\n\n  componentDidMount() {\n    this._unmounted = false;\n\n    if (this.props.onScroll) {\n      window.addEventListener('scroll', this.handleScroll);\n    }\n    if (this.props.onResize) {\n      window.addEventListener('resize', this.handleResize);\n    }\n  }\n\n  componentWillUnmount() {\n    this._unmounted = true;\n\n    if (this.props.onScroll) {\n      window.removeEventListener('scroll', this.handleScroll);\n    }\n    if (this.props.onResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  }\n\n  handleScroll = (event: Event): void => {\n    if (!this._unmounted) {\n      this.props.onScroll((event as unknown) as React.UIEvent<Element>);\n    }\n  }\n\n  handleResize = (event: Event) => {\n    if (!this._unmounted) {\n      this.props.onResize((event as unknown) as React.UIEvent<Element>);\n    }\n  }\n\n  render() {\n    const {\n      trRef,\n      className,\n      onScroll,\n      onResize,\n      row: { isExpanded },\n      rowProps,\n      ...props\n    } = this.props;\n\n    return (\n      <tr\n        {...props}\n        ref={trRef as React.Ref<any>}\n        className={css(\n          className,\n          isExpanded !== undefined && styles.tableExpandableRow,\n          isExpanded && styles.modifiers.expanded\n        )}\n        hidden={isExpanded !== undefined && !isExpanded}\n      />\n    );\n  }\n}\n"],"file":"RowWrapper.js"}