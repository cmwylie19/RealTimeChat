{"version":3,"sources":["../esm/generateClasses.js"],"names":["camelcase","glob","dirname","basename","resolve","join","parse","readFileSync","outputFileSync","outDir","__dirname","pfStylesDir","require","cssFiles","sync","cwd","ignore","forEach","filePath","absFilePath","cssContent","cssOutputPath","getCSSOutputPath","newClass","cssToJSNew","replace","inlineCssFiles","cssString","cssClasses","getCSSClasses","distinctValues","Set","classDeclaration","modifiersDeclaration","className","key","formatClassName","cleanClass","trim","isModifier","push","classSection","length","match","Boolean","startsWith","pathToCSSFile","getFormattedCSSOutputPath","dir","name","formattedDir","nodeText","nodeIndex","lastIndexOf","substring"],"mappings":"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","sourcesContent":["/* eslint-disable global-require,import/no-dynamic-require */\nconst camelcase = require('camel-case');\n\nconst glob = require('glob');\n\nconst {\n  dirname,\n  basename,\n  resolve,\n  join,\n  parse\n} = require('path');\n\nconst {\n  readFileSync\n} = require('fs');\n\nconst {\n  outputFileSync\n} = require('fs-extra');\n\nconst outDir = resolve(__dirname, '../css');\nconst pfStylesDir = dirname(require.resolve('@patternfly/patternfly/patternfly.css'));\nconst cssFiles = glob.sync('**/*.css', {\n  cwd: pfStylesDir,\n  ignore: ['assets/**', '*ie11*.css']\n});\n/* Copy @patternfly/patternfly styles */\n\ncssFiles.forEach(filePath => {\n  const absFilePath = resolve(pfStylesDir, filePath);\n  const cssContent = readFileSync(absFilePath, 'utf8');\n  const cssOutputPath = getCSSOutputPath(outDir, filePath);\n  const newClass = cssToJSNew(cssContent, `./${basename(cssOutputPath)}`);\n  outputFileSync(cssOutputPath, cssContent);\n  outputFileSync(cssOutputPath.replace('.css', '.ts'), newClass);\n});\n/* Copy inline styles in the src/css folder */\n\nconst inlineCssFiles = glob.sync('src/css/**/*.css');\ninlineCssFiles.forEach(filePath => {\n  const absFilePath = resolve(filePath);\n  const cssContent = readFileSync(absFilePath, 'utf8');\n  const cssOutputPath = getCSSOutputPath(outDir, filePath).replace('src/css/', '');\n  const newClass = cssToJSNew(cssContent, `./${basename(cssOutputPath)}`);\n  outputFileSync(cssOutputPath, cssContent);\n  outputFileSync(cssOutputPath.replace('.css', '.ts'), newClass);\n});\n\nfunction cssToJSNew(cssString, cssOutputPath = '') {\n  const cssClasses = getCSSClasses(cssString);\n  const distinctValues = [...new Set(cssClasses)];\n  const classDeclaration = [];\n  const modifiersDeclaration = [];\n  distinctValues.forEach(className => {\n    const key = formatClassName(className);\n    const cleanClass = className.replace('.', '').trim();\n\n    if (isModifier(className)) {\n      modifiersDeclaration.push(`'${key}': '${cleanClass}'`);\n    } else {\n      classDeclaration.push(`${key}: '${cleanClass}'`);\n    }\n  });\n  const classSection = classDeclaration.length > 0 ? `${classDeclaration.join(',\\n  ')},` : '';\n  return `import '${cssOutputPath}';\n\nexport default {\n  ${classSection}\n  modifiers: {\n    ${modifiersDeclaration.join(',\\n    ')}\n  }\n}`;\n}\n\nfunction getCSSClasses(cssString) {\n  return cssString.match(/(\\.)(?!\\d)([^\\s\\.,{\\[>+~#:)]*)(?![^{]*})/g); //eslint-disable-line\n}\n\nfunction formatClassName(className) {\n  return camelcase(className.replace(/pf-((c|l|m|u|is|has)-)?/g, ''));\n}\n\nfunction isModifier(className) {\n  return Boolean(className && className.startsWith) && className.startsWith('.pf-m-');\n}\n\nfunction getCSSOutputPath(absFilePath, pathToCSSFile) {\n  return join(absFilePath, getFormattedCSSOutputPath(pathToCSSFile));\n}\n\nfunction getFormattedCSSOutputPath(pathToCSSFile) {\n  const {\n    dir,\n    name\n  } = parse(pathToCSSFile);\n  let formattedDir = dir;\n  const nodeText = 'node_modules';\n  const nodeIndex = formattedDir.lastIndexOf(nodeText);\n\n  if (nodeIndex !== -1) {\n    formattedDir = formattedDir.substring(nodeIndex + nodeText.length);\n  }\n\n  return join(formattedDir, `${name}.css`);\n}\n//# sourceMappingURL=generateClasses.js.map"],"file":"generateClasses.js"}