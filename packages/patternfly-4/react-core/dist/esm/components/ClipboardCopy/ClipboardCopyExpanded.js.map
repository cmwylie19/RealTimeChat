{"version":3,"sources":["../../../../src/components/ClipboardCopy/ClipboardCopyExpanded.tsx"],"names":["React","styles","css","ClipboardCopyExpanded","Component","constructor","props","createRef","componentDidMount","contentRef","current","innerText","children","render","className","onChange","isReadOnly","isCode","clipboardCopyExpandableComponent","clipboardCopyExpandableContent","e","target","undefined"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,sEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAYA,OAAO,MAAMC,qBAAN,SAAoCH,KAAK,CAACI,SAA1C,CAAgF;AAErFC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,wCADXN,KAAK,CAACO,SAAN,EACW;AAEvB;;AASDC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKC,UAAL,CAAgBC,OAApB,EAA6B;AAC3B,WAAKD,UAAL,CAAgBC,OAAhB,CAAwBC,SAAxB,GAAoC,KAAKL,KAAL,CAAWM,QAA/C;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAwE,KAAKP,KAA7E;AAAA,UAAM;AAAEQ,MAAAA,SAAF;AAAaF,MAAAA,QAAb;AAAuBG,MAAAA,QAAvB;AAAiCC,MAAAA,UAAjC;AAA6CC,MAAAA;AAA7C,KAAN;AAAA,UAA8DX,KAA9D;;AACA,UAAMY,gCAAgC,GACtC;AACE,MAAA,8BAA8B,MADhC;AAEE,MAAA,GAAG,EAAE,KAAKT,UAFZ;AAGE,MAAA,SAAS,EAAEP,GAAG,CAACD,MAAM,CAACkB,8BAAR,EAAwCL,SAAxC,CAHhB;AAIE,MAAA,OAAO,EAAGM,CAAD,IAAYL,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASV,SAAV,EAAqBS,CAArB,CAJ/B;AAKE,MAAA,eAAe,EAAE,CAACJ;AALpB,OAMMV,KANN,EADA;AAUA,WAAQW,MAAM,GAAG,iCAAMC,gCAAN,CAAH,GAAmDA,gCAAjE;AACD;;AAhCoF;;gBAA1Ef,qB;AAPXW,EAAAA,S;AACAF,EAAAA,Q;AACAG,EAAAA,Q;AACAC,EAAAA,U;AACAC,EAAAA,M;;;gBAGWd,qB,kBAMW;AACpBY,EAAAA,QAAQ,EAAE,MAAWO,SADD;AAEpBR,EAAAA,SAAS,EAAE,EAFS;AAGpBE,EAAAA,UAAU,EAAE,KAHQ;AAIpBC,EAAAA,MAAM,EAAE;AAJY,C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { ClipboardCopyProps } from './ClipboardCopy';\nimport { Omit } from '../../helpers/typeUtils';\n\nexport interface ClipboardCopyExpandedProps extends Omit<ClipboardCopyProps, 'onChange'> {\n  className?: string;\n  children: React.ReactNode;\n  onChange?: (text: string, e: React.FormEvent<HTMLDivElement>) => void;\n  isReadOnly: boolean;\n  isCode?: boolean;\n}\n\nexport class ClipboardCopyExpanded extends React.Component<ClipboardCopyExpandedProps> {\n  contentRef = React.createRef<HTMLDivElement>();\n  constructor(props: any) {\n    super(props);\n  }\n\n  static defaultProps = {\n    onChange: (): any => undefined,\n    className: '',\n    isReadOnly: false,\n    isCode: false\n  };\n\n  componentDidMount() {\n    if (this.contentRef.current) {\n      this.contentRef.current.innerText = this.props.children as string;\n    }\n  }\n\n  render() {\n    const { className, children, onChange, isReadOnly, isCode, ...props } = this.props;\n    const clipboardCopyExpandableComponent =\n    <div\n      suppressContentEditableWarning\n      ref={this.contentRef}\n      className={css(styles.clipboardCopyExpandableContent, className)}\n      onInput={(e: any) => onChange(e.target.innerText, e)}\n      contentEditable={!isReadOnly}\n      {...props}\n    />;\n\n    return (isCode ? <pre>{clipboardCopyExpandableComponent}</pre> : clipboardCopyExpandableComponent);\n  }\n}\n"],"file":"ClipboardCopyExpanded.js"}