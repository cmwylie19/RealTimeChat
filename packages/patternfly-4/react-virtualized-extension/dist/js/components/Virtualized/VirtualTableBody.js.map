{"version":3,"sources":["../../../../src/components/Virtualized/VirtualTableBody.tsx"],"names":["VirtualTableBody","parent","rowIndex","style","isScrolling","isVisible","key","rowRenderer","props","Object","getOwnPropertyDescriptor","writable","width","index","ref","VirtualGrid","clientHeight","scrollHeight","scrollTop","onScroll","rowOverscanStartIndex","rowOverscanStopIndex","rowStartIndex","rowStopIndex","onRowsRendered","overscanStartIndex","overscanStopIndex","startIndex","stopIndex","forceUpdate","alignment","getOffsetForCell","columnIndex","invalidateCellSizeAfterRender","measureAllCells","recomputeVirtualGridSize","scrollToPosition","scrollToCell","className","noRowsRenderer","scrollToIndex","columns","columnCount","rows","tabIndex","classNames","VirtualGridAny","tableLayout","display","_cellRenderer","length","_onScroll","_onSectionRendered","_setRef","React","PureComponent","autoHeight","estimatedRowSize","height","overscanIndicesGetter","overscanRowCount","rowHeight","rowCount","scrollToAlignment","accessibilityOverscanIndicesGetter"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport * as React from 'react';\nimport {\n  NoContentRenderer,\n  Alignment,\n  CellSize,\n  CellPosition,\n  OverscanIndicesGetter,\n  RenderedSection,\n  CellRendererParams,\n  Scroll as VirtualGridScroll,\n  Scroll\n} from './types';\n\nimport accessibilityOverscanIndicesGetter from './accessibilityOverscanIndicesGetter';\nimport VirtualGrid from './VirtualGrid';\nimport clsx from 'clsx';\n\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n\ninterface Props {\n  'aria-label'?: string;\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  autoHeight: boolean;\n\n  /** Optional CSS class name */\n  className?: string;\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: number;\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  height: number;\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  noRowsRenderer: NoContentRenderer;\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n\n  onRowsRendered: (params: any) => void;\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  onScroll: (params: Scroll) => void;\n\n  /** See VirtualGrid#overscanIndicesGetter */\n  overscanIndicesGetter: OverscanIndicesGetter;\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  overscanRowCount: number;\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  rowHeight: CellSize;\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  rowRenderer: any;\n\n  /** Number of rows in list. */\n  rowCount: number;\n\n  /** See VirtualGrid#scrollToAlignment */\n  scrollToAlignment: Alignment;\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToIndex: number;\n\n  /** Vertical offset. */\n  scrollTop?: number;\n\n  /** Optional inline style */\n  style: Object;\n\n  /** Tab index for focus */\n  tabIndex?: number;\n\n  /** Width of list */\n  width: number;\n\n  columns?: any[];\n\n  columnCount?: number;\n\n  rows: any[];\n}\n\nexport default class VirtualTableBody extends React.PureComponent<Props> {\n  static defaultProps = {\n    autoHeight: false,\n    estimatedRowSize: 30,\n    onScroll: () => {},\n    noRowsRenderer: () => null,\n    onRowsRendered: () => {},\n    overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n    overscanRowCount: 10,\n    scrollToAlignment: 'auto',\n    scrollToIndex: -1,\n    style: {}\n  };\n\n  VirtualGrid: any;\n\n  forceUpdateVirtualGrid() {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.forceUpdate();\n    }\n  }\n\n  /** See VirtualGrid#getOffsetForCell */\n  getOffsetForRow({ alignment, index }: { alignment: Alignment, index: number }) {\n    if (this.VirtualGrid) {\n      const { scrollTop } = this.VirtualGrid.getOffsetForCell({\n        alignment,\n        rowIndex: index,\n        columnIndex: 0\n      });\n\n      return scrollTop;\n    }\n    return 0;\n  }\n\n  /** CellMeasurer compatibility */\n  invalidateCellSizeAfterRender({ columnIndex, rowIndex }: CellPosition) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.invalidateCellSizeAfterRender({\n        rowIndex,\n        columnIndex\n      });\n    }\n  }\n\n  /** See VirtualGrid#measureAllCells */\n  measureAllRows() {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.measureAllCells();\n    }\n  }\n\n  /** CellMeasurer compatibility */\n  recomputeVirtualGridSize({ columnIndex = 0, rowIndex = 0 }: CellPosition = {}) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.recomputeVirtualGridSize({\n        rowIndex,\n        columnIndex\n      });\n    }\n  }\n\n  /** See VirtualGrid#recomputeVirtualGridSize */\n  recomputeRowHeights(index: number = 0) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.recomputeVirtualGridSize({\n        rowIndex: index,\n        columnIndex: 0\n      });\n    }\n  }\n\n  /** See VirtualGrid#scrollToPosition */\n  scrollToPosition(scrollTop: number = 0) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.scrollToPosition({ scrollTop });\n    }\n  }\n\n  /** See VirtualGrid#scrollToCell */\n  scrollToRow(index: number = 0) {\n    if (this.VirtualGrid) {\n      this.VirtualGrid.scrollToCell({\n        columnIndex: 0,\n        rowIndex: index\n      });\n    }\n  }\n\n  render() {\n    const { className, noRowsRenderer, scrollToIndex, width, columns, columnCount, rows, tabIndex, style } = this.props;\n\n    const classNames = clsx('ReactVirtualized__List', className);\n\n    const VirtualGridAny = VirtualGrid as any;\n    return (\n      // note: these aria props if rendered will break a11y for role=\"presentation\"\n      // this approach attempts to fix non standard table grids\n      // see: https://www.html5accessibility.com/tests/aria-table-fix.html\n      <VirtualGridAny\n        {...this.props}\n        style={{\n          tableLayout: 'fixed',\n          display: 'block',\n          ...style\n        }}\n        containerStyle={{\n          display: 'block'\n        }}\n        aria-label={null}\n        aria-readonly={null}\n        tabIndex={null}\n        role=\"presentation\"\n        autoContainerWidth\n        cellRenderer={this._cellRenderer}\n        className={classNames}\n        columnWidth={width}\n        columnCount={columns ? columns.length : columnCount}\n        noContentRenderer={noRowsRenderer}\n        onScroll={this._onScroll}\n        onSectionRendered={this._onSectionRendered}\n        ref={this._setRef}\n        scrollToRow={scrollToIndex}\n        columns={columns}\n        rows={rows}\n        scrollContainerComponent=\"table\"\n        innerScrollContainerComponent=\"tbody\"\n      />\n    );\n  }\n\n  _cellRenderer = ({ parent, rowIndex, style, isScrolling, isVisible, key }: CellRendererParams) => {\n    const { rowRenderer } = this.props;\n\n    // TRICKY The style object is sometimes cached by VirtualGrid.\n    // This prevents new style objects from bypassing shallowCompare().\n    // However as of React 16, style props are auto-frozen (at least in dev mode)\n    // Check to make sure we can still modify the style before proceeding.\n    // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n    const { writable } = Object.getOwnPropertyDescriptor(style, 'width');\n    if (writable) {\n      // By default, List cells should be 100% width.\n      // This prevents them from flowing under a scrollbar (if present).\n      style.width = '100%';\n    }\n\n    return rowRenderer({\n      index: rowIndex,\n      style,\n      isScrolling,\n      isVisible,\n      key,\n      parent\n    });\n  }\n\n  _setRef = (ref: any) => {\n    this.VirtualGrid = ref;\n  }\n\n  _onScroll = ({ clientHeight, scrollHeight, scrollTop }: VirtualGridScroll) => {\n    const { onScroll } = this.props;\n\n    onScroll({ clientHeight, scrollHeight, scrollTop });\n  }\n\n  _onSectionRendered = ({\n    rowOverscanStartIndex,\n    rowOverscanStopIndex,\n    rowStartIndex,\n    rowStopIndex\n  }: RenderedSection) => {\n    const { onRowsRendered } = this.props;\n\n    onRowsRendered({\n      overscanStartIndex: rowOverscanStartIndex,\n      overscanStopIndex: rowOverscanStopIndex,\n      startIndex: rowStartIndex,\n      stopIndex: rowStopIndex\n    });\n  }\n}\n"],"file":"VirtualTableBody.js"}