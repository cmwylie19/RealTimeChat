{"version":3,"sources":["../../../../esm/components/Table/utils/utils.test.js"],"names":["assertExpanded","rows","expandedRowIndexes","forEach","expandedRowIndex","expandedRow","expect","toBeTruthy","assertNotExpanded","notExpandedRowIndexes","toBeFalsy","describe","test","toBeUndefined","isOpen","cells","title","props","parent","compoundParent","toEqual","collapsedRow","collapsedRowParent4"],"mappings":"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","sourcesContent":["import { isRowExpanded } from './utils';\nimport { buildExpandableRows } from '../../../test-helpers/data-helpers';\n\nconst assertExpanded = (rows, expandedRowIndexes) => {\n  expandedRowIndexes.forEach(expandedRowIndex => {\n    const expandedRow = rows[expandedRowIndex];\n    expect(isRowExpanded(expandedRow, rows)).toBeTruthy();\n  });\n};\n\nconst assertNotExpanded = (rows, notExpandedRowIndexes) => {\n  notExpandedRowIndexes.forEach(expandedRowIndex => {\n    const expandedRow = rows[expandedRowIndex];\n    expect(isRowExpanded(expandedRow, rows)).toBeFalsy();\n  });\n};\n\ndescribe('Util functions', () => {\n  describe('isRowExpanded', () => {\n    test('basic', () => {\n      const rows = buildExpandableRows({\n        6: 5\n      }, [5]);\n      assertExpanded(rows, [6]);\n      assertNotExpanded(rows, [0, 1, 5, 9]);\n    });\n    test('two open, one closed', () => {\n      const rows = buildExpandableRows({\n        1: 0,\n        3: 2,\n        5: 4\n      }, [0, 2]);\n      assertExpanded(rows, [1, 3]);\n      assertNotExpanded(rows, [0, 2, 4, 5, 8]);\n    });\n    test('all closed', () => {\n      const rows = buildExpandableRows({\n        1: 0,\n        3: 2,\n        5: 4\n      });\n      assertNotExpanded(rows, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    });\n    test('parent-child chain', () => {\n      const rows = buildExpandableRows({\n        1: 0,\n        2: 1,\n        3: 2,\n        4: 3,\n        5: 4,\n        6: 5,\n        7: 6\n      }, [0, 1, 2, 3, 4, 5, 6]);\n      assertExpanded(rows, [1, 2, 3, 4, 5, 6, 7]);\n      assertNotExpanded(rows, [0, 8, 9]);\n    });\n    test('two parent-child chains', () => {\n      const rows = buildExpandableRows({\n        1: 0,\n        3: 1,\n        4: 2,\n        5: 3,\n        6: 4,\n        7: 6\n      }, [0, 1, 2, 3, 4, 5, 6]);\n      assertExpanded(rows, [1, 3, 4, 5, 6, 7]);\n      assertNotExpanded(rows, [0, 2, 8, 9]);\n    });\n    test('not in order', () => {\n      const rows = buildExpandableRows({\n        0: 1,\n        1: 4\n      }, [4, 1]);\n      assertExpanded(rows, [0, 1]);\n      assertNotExpanded(rows, [2, 3, 4, 5]);\n    });\n    test('child parent circle', () => {\n      const rows = buildExpandableRows({\n        1: 0,\n        0: 1\n      }, [0, 1]);\n      assertNotExpanded(rows, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    });\n    test('undefined without a parent', () => {\n      const rows = buildExpandableRows();\n      expect(isRowExpanded(rows[1], rows)).toBeUndefined();\n    });\n    test('compound parent', () => {\n      const rows = [{\n        isOpen: true,\n        cells: ['1', {\n          title: '2',\n          props: {\n            isOpen: true\n          }\n        }, {\n          title: '3',\n          props: {\n            isOpen: false\n          }\n        }, {\n          title: '4',\n          props: {\n            isOpen: false\n          }\n        }, '5', '6']\n      }, {\n        parent: 0,\n        compoundParent: 1,\n        cells: [{\n          title: 'parent 0 compound child - 1'\n        }]\n      }, {\n        parent: 0,\n        compoundParent: 2,\n        cells: [{\n          title: 'parent 0 compound child - 2'\n        }]\n      }, {\n        parent: 0,\n        compoundParent: 3,\n        cells: [{\n          title: 'parent 0 compound child - 3'\n        }]\n      }, {\n        isOpen: false,\n        cells: ['1', {\n          title: '2',\n          props: {\n            isOpen: false\n          }\n        }, {\n          title: '3',\n          props: {\n            isOpen: false\n          }\n        }, {\n          title: '4',\n          props: {\n            isOpen: false\n          }\n        }, '5', '6']\n      }, {\n        parent: 4,\n        compoundParent: 1,\n        cells: [{\n          title: 'parent 4 compound child - 1'\n        }]\n      }, {\n        parent: 4,\n        compoundParent: 2,\n        cells: [{\n          title: 'parent 4 compound child - 2'\n        }]\n      }, {\n        parent: 4,\n        compoundParent: 3,\n        cells: [{\n          title: 'parent 4 compound child - 3'\n        }]\n      }]; // test an expanded compound child to be expanded\n\n      const expandedRow = {\n        parent: 0,\n        compoundParent: 1,\n        cells: [{\n          title: 'parent 0 compound child - 1'\n        }]\n      };\n      expect(isRowExpanded(expandedRow, rows)).toEqual(true); // test a collapsed compound child to be false\n\n      const collapsedRow = {\n        parent: 0,\n        compoundParent: 2,\n        cells: [{\n          title: 'parent 0 compound child - 2'\n        }]\n      };\n      expect(isRowExpanded(collapsedRow, rows)).toEqual(false); // test a row with different parent that is collapsed\n\n      const collapsedRowParent4 = {\n        parent: 4,\n        compoundParent: 1,\n        cells: [{\n          title: 'parent 4 compound child - 1'\n        }]\n      };\n      expect(isRowExpanded(collapsedRowParent4, rows)).toEqual(false);\n    });\n  });\n});\n//# sourceMappingURL=utils.test.js.map"],"file":"utils.test.js"}