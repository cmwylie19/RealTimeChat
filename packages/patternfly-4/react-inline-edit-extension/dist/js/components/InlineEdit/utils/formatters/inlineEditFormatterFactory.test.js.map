{"version":3,"sources":["../../../../../../src/components/InlineEdit/utils/formatters/inlineEditFormatterFactory.test.js"],"names":["blue","alteredValue","buildAdditionalData","data","isEditing","activeEditId","rowData","editConfig","describe","test","additionalData","expect","toBe","resolveValue","value","renderValue","renderEdit"],"mappings":";;AAAA;;;;AAEA,IAAMA,IAAI,GAAG,MAAb;AACA,IAAMC,YAAY,GAAG,QAArB;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD;AAAA,MAAOC,SAAP,uEAAmB,IAAnB;AAAA,MAAyBC,YAAzB,uEAAwC,QAAxC;AAAA,SAAsD;AAChFC,IAAAA,OAAO,EAAE;AACPF,MAAAA,SAAS,EAATA,SADO;AAEPG,MAAAA,UAAU,EAAE;AACVF,QAAAA,YAAY,EAAZA;AADU,OAFL;AAKPF,MAAAA,IAAI,EAAJA;AALO;AADuE,GAAtD;AAAA,CAA5B;;AAUAK,QAAQ,CAAC,4BAAD,EAA+B,YAAM;AAC3CC,EAAAA,IAAI,CAAC,uBAAD,EAA0B,YAAM;AAClC,QAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,CAA1C;AAEAU,IAAAA,MAAM,CAAC,8CAA6BX,IAA7B,EAAmCU,cAAnC,CAAD,CAAN,CAA2DE,IAA3D,CAAgEZ,IAAhE;AACD,GAJG,CAAJ;AAMAS,EAAAA,IAAI,CAAC,wBAAD,EAA2B,YAAM;AACnC,QAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,CAA1C;AAEAU,IAAAA,MAAM,CACJ,4CAA2B;AACzBE,MAAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,YAAUR,OAAV,QAAUA,OAAV;AAAA,eAAwBA,OAAO,CAACH,IAAhC;AAAA;AADW,KAA3B,EAEGH,IAFH,EAESU,cAFT,CADI,CAAN,CAIEE,IAJF,CAIOX,YAJP;AAKD,GARG,CAAJ;AAUAQ,EAAAA,IAAI,CAAC,mCAAD,EAAsC,YAAM;AAC9C,QAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,EAAe,KAAf,CAA1C;AAEAU,IAAAA,MAAM,CACJ,4CAA2B;AACzBE,MAAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,YAAUR,OAAV,SAAUA,OAAV;AAAA,eAAwBA,OAAO,CAACH,IAAhC;AAAA,OADW;AAEzBY,MAAAA,WAAW,EAAE,qBAAAD,KAAK;AAAA,+BAAaA,KAAb;AAAA,OAFO;AAGzBE,MAAAA,UAAU,EAAE,oBAAAF,KAAK;AAAA,iCAAeA,KAAf;AAAA;AAHQ,KAA3B,EAIGd,IAJH,EAISU,cAJT,CADI,CAAN,CAMEE,IANF,iBAMgBX,YANhB;AAOD,GAVG,CAAJ;AAYAQ,EAAAA,IAAI,CAAC,wCAAD,EAA2C,YAAM;AACnD,QAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,CAA1C;AAEAU,IAAAA,MAAM,CACJ,4CAA2B;AACzBE,MAAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,YAAUR,OAAV,SAAUA,OAAV;AAAA,eAAwBA,OAAO,CAACH,IAAhC;AAAA,OADW;AAEzBa,MAAAA,UAAU,EAAE,oBAAAF,KAAK;AAAA,+BAAaA,KAAb;AAAA;AAFQ,KAA3B,EAGGd,IAHH,EAGSU,cAHT,CADI,CAAN,CAKEE,IALF,iBAKgBX,YALhB;AAMD,GATG,CAAJ;AAWAQ,EAAAA,IAAI,CAAC,sBAAD,EAAyB,YAAM;AACjC,QAAMC,cAAc,GAAGR,mBAAmB,CAACD,YAAD,EAAe,IAAf,EAAqB,MAArB,CAA1C;AAEAU,IAAAA,MAAM,CACJ,4CAA2B;AACzBK,MAAAA,UAAU,EAAE,oBAACF,KAAD,EAAQX,IAAR;AAAA,YAAgBE,YAAhB,SAAgBA,YAAhB;AAAA,eAAmCA,YAAnC;AAAA;AADa,KAA3B,EAEGL,IAFH,EAESU,cAFT,CADI,CAAN,CAIEE,IAJF,CAIO,MAJP;AAKD,GARG,CAAJ;AASD,CAjDO,CAAR","sourcesContent":["import { default as inlineEditFormatterFactory } from './inlineEditFormatterFactory';\n\nconst blue = 'blue';\nconst alteredValue = 'violet';\n\nconst buildAdditionalData = (data, isEditing = true, activeEditId = 'testId') => ({\n  rowData: {\n    isEditing,\n    editConfig: {\n      activeEditId\n    },\n    data\n  }\n});\n\ndescribe('inlineEditFormatterFactory', () => {\n  test('renders default value', () => {\n    const additionalData = buildAdditionalData(alteredValue);\n\n    expect(inlineEditFormatterFactory()(blue, additionalData)).toBe(blue);\n  });\n\n  test('renders resolved value', () => {\n    const additionalData = buildAdditionalData(alteredValue);\n\n    expect(\n      inlineEditFormatterFactory({\n        resolveValue: (value, { rowData }) => rowData.data\n      })(blue, additionalData)\n    ).toBe(alteredValue);\n  });\n\n  test('renders resolved and render value', () => {\n    const additionalData = buildAdditionalData(alteredValue, false);\n\n    expect(\n      inlineEditFormatterFactory({\n        resolveValue: (value, { rowData }) => rowData.data,\n        renderValue: value => `ultra ${value}`,\n        renderEdit: value => `violent ${value}`\n      })(blue, additionalData)\n    ).toBe(`ultra ${alteredValue}`);\n  });\n\n  test('renders resolved and render edit value', () => {\n    const additionalData = buildAdditionalData(alteredValue);\n\n    expect(\n      inlineEditFormatterFactory({\n        resolveValue: (value, { rowData }) => rowData.data,\n        renderEdit: value => `ultra ${value}`\n      })(blue, additionalData)\n    ).toBe(`ultra ${alteredValue}`);\n  });\n\n  test('passes computed data', () => {\n    const additionalData = buildAdditionalData(alteredValue, true, 'myId');\n\n    expect(\n      inlineEditFormatterFactory({\n        renderEdit: (value, data, { activeEditId }) => activeEditId\n      })(blue, additionalData)\n    ).toBe('myId');\n  });\n});\n"],"file":"inlineEditFormatterFactory.test.js"}