{"version":3,"sources":["../../src/createIcon.test.js"],"names":["iconDef","name","width","height","svgPath","Icon","test","view","expect","find","prop","toBe","displayName","IconSize","sm","toMatchSnapshot","exists","title","text","labelledby","id","first","second","not"],"mappings":"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","sourcesContent":["import React from 'react';\nimport createIcon from './createIcon';\nimport { shallow } from 'enzyme';\nimport { IconSize } from './common';\n\nconst iconDef = {\n  name: 'IconName',\n  width: 10,\n  height: 20,\n  svgPath: 'svgPath'\n};\n\nconst Icon = createIcon(iconDef);\n\ntest('sets correct viewBox', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('svg').prop('viewBox')).toBe(`0 0 ${iconDef.width} ${iconDef.height}`);\n});\n\ntest('sets correct svgPath', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('path').prop('d')).toBe(iconDef.svgPath);\n});\n\ntest('sets correct displayName', () => {\n  expect(Icon.displayName).toBe(iconDef.name);\n});\n\ntest('height and width are set from size', () => {\n  const view = shallow(<Icon size={IconSize.sm} />);\n  expect(view.find('svg').prop('width')).toMatchSnapshot('width');\n  expect(view.find('svg').prop('height')).toMatchSnapshot('height');\n});\n\ntest('aria-hidden is true if no title is specified', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('svg').prop('aria-hidden')).toBe(true);\n});\n\ntest('title is not renderd if a title is not passed', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('title').exists()).toBe(false);\n});\n\ntest('aria-labelledby is null if a title is not passed', () => {\n  const view = shallow(<Icon />);\n  expect(view.find('svg').prop('aria-labelledby')).toBe(null);\n});\n\ntest('title is rendered', () => {\n  const title = 'icon title';\n  const view = shallow(<Icon title={title} />);\n  expect(view.find('title').text()).toBe(title);\n});\n\ntest('aria-labelledby matches title id', () => {\n  const view = shallow(<Icon title=\"icon title\" />);\n  const labelledby = view.find('svg').prop('aria-labelledby');\n  const id = view.find('title').prop('id');\n  expect(labelledby).toBe(id);\n});\n\ntest('ids should be unique for each rendered icon', () => {\n  const first = shallow(<Icon title=\"icon title\" />);\n  const second = shallow(<Icon title=\"icon title\" />);\n  expect(first.find('title').prop('id')).not.toBe(second.find('title').prop('id'));\n});\n\ntest('additional props should be spread to the root svg element', () => {\n  const view = shallow(<Icon data-testid=\"icon\" />);\n  expect(view.find('svg')).toMatchSnapshot();\n});\n"],"file":"createIcon.test.js"}